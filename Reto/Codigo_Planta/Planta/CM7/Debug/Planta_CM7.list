
Planta_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e458  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800e6f8  0800e6f8  0001e6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec6c  0800ec6c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec6c  0800ec6c  0001ec6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec74  0800ec74  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec74  0800ec74  0001ec74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec78  0800ec78  0001ec78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  0800ec7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  24000204  0800ee80  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000630  0800ee80  00020630  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a49  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d3  00000000  00000000  00040c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00043f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  000457d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cda7  00000000  00000000  00046f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1e9  00000000  00000000  00083caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001910dd  00000000  00000000  000a1e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00232f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007da4  00000000  00000000  00232fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e6e0 	.word	0x0800e6e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	0800e6e0 	.word	0x0800e6e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bb4:	bf00      	nop
 8000bb6:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <main+0x114>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <main+0x24>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dcf4      	bgt.n	8000bb6 <main+0xe>
  if ( timeout < 0 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da01      	bge.n	8000bd6 <main+0x2e>
  {
  Error_Handler();
 8000bd2:	f000 fe0d 	bl	80017f0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f001 fb03 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f885 	bl	8000ce8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <main+0x114>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a35      	ldr	r2, [pc, #212]	; (8000cbc <main+0x114>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <main+0x114>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f003 f85b 	bl	8003cb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f003 f871 	bl	8003cec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c10:	bf00      	nop
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <main+0x114>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <main+0x80>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	dcf4      	bgt.n	8000c12 <main+0x6a>
if ( timeout < 0 )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da01      	bge.n	8000c32 <main+0x8a>
{
Error_Handler();
 8000c2e:	f000 fddf 	bl	80017f0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 fc3b 	bl	80014ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c36:	f000 fbed 	bl	8001414 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000c3a:	f000 fa89 	bl	8001150 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000c3e:	f000 fb9b 	bl	8001378 <MX_TIM5_Init>
  MX_I2C4_Init();
 8000c42:	f000 f999 	bl	8000f78 <MX_I2C4_Init>
  MX_TIM1_Init();
 8000c46:	f000 f9d7 	bl	8000ff8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c4a:	f000 facf 	bl	80011ec <MX_TIM3_Init>
  MX_FDCAN1_Init();
 8000c4e:	f000 f8c7 	bl	8000de0 <MX_FDCAN1_Init>
  MX_TIM4_Init();
 8000c52:	f000 fb19 	bl	8001288 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  print_int(&huart3, "PROYECTO FINAL ROBOGOD\r\n", 0);	// Prueba de comunicación UART
 8000c56:	2200      	movs	r2, #0
 8000c58:	4919      	ldr	r1, [pc, #100]	; (8000cc0 <main+0x118>)
 8000c5a:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <main+0x11c>)
 8000c5c:	f001 fa54 	bl	8002108 <print_int>

  MPRLS_status(&hi2c4);									// Revisión de conexión del MPRLS
 8000c60:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <main+0x120>)
 8000c62:	f000 fdcb 	bl	80017fc <MPRLS_status>
  MPRLS_init(&hi2c4);									// Inicialización del MPRLS
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <main+0x120>)
 8000c68:	f000 fde6 	bl	8001838 <MPRLS_init>

  MPU6050_status(&hi2c4); 								// Revisión de conexión del MPU6050
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <main+0x120>)
 8000c6e:	f000 fe8d 	bl	800198c <MPU6050_status>
  MPU6050_init(&hi2c4);									// Inicialización del MPU6050
 8000c72:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <main+0x120>)
 8000c74:	f000 fea6 	bl	80019c4 <MPU6050_init>

  HAL_TIM_Base_Start(&htim5); 							// Inicialización del timer 5 (cronómetro)
 8000c78:	4814      	ldr	r0, [pc, #80]	; (8000ccc <main+0x124>)
 8000c7a:	f006 fd87 	bl	800778c <HAL_TIM_Base_Start>

  HAL_Delay(2000);										// Delay 2s
 8000c7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c82:	f001 fb3f 	bl	8002304 <HAL_Delay>

  HAL_TIM_PWM_Init(&htim1);								// Inicialización del timer 1 (PWM - Bomba)
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <main+0x128>)
 8000c88:	f006 fe68 	bl	800795c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);				// Encendido del PWM
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <main+0x128>)
 8000c90:	f006 fec6 	bl	8007a20 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;										// Duty Cycle del 0%
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <main+0x12c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Init(&htim4);								// Inicialización del timer 4 (PWM - Servo)
 8000c9a:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <main+0x130>)
 8000c9c:	f006 fe5e 	bl	800795c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);				// Encendido del PWM
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <main+0x130>)
 8000ca4:	f006 febc 	bl	8007a20 <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 0;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <main+0x134>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim2);						// Inicialización del timer 2 (interrupción 128 Hz)
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <main+0x138>)
 8000cb0:	f006 fddc 	bl	800786c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);						// Inicialización del timer 3 (interrupción 100 Hz)
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <main+0x13c>)
 8000cb6:	f006 fdd9 	bl	800786c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x112>
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	0800e6f8 	.word	0x0800e6f8
 8000cc4:	24000488 	.word	0x24000488
 8000cc8:	240002c0 	.word	0x240002c0
 8000ccc:	2400043c 	.word	0x2400043c
 8000cd0:	2400030c 	.word	0x2400030c
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	240003f0 	.word	0x240003f0
 8000cdc:	40000800 	.word	0x40000800
 8000ce0:	24000358 	.word	0x24000358
 8000ce4:	240003a4 	.word	0x240003a4

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09c      	sub	sp, #112	; 0x70
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	224c      	movs	r2, #76	; 0x4c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f009 f990 	bl	800a01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2220      	movs	r2, #32
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f009 f98a 	bl	800a01c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f004 f96b 	bl	8004fe4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <SystemClock_Config+0xf0>)
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	4a30      	ldr	r2, [pc, #192]	; (8000dd8 <SystemClock_Config+0xf0>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <SystemClock_Config+0xf0>)
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <SystemClock_Config+0xf4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <SystemClock_Config+0xf4>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <SystemClock_Config+0xf4>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d44:	bf00      	nop
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <SystemClock_Config+0xf4>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d52:	d1f8      	bne.n	8000d46 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	2302      	movs	r3, #2
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000d6a:	2312      	movs	r3, #18
 8000d6c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d72:	2303      	movs	r3, #3
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000d82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 f983 	bl	8005098 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d98:	f000 fd2a 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	233f      	movs	r3, #63	; 0x3f
 8000d9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2303      	movs	r3, #3
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fd97 	bl	80058f4 <HAL_RCC_ClockConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000dcc:	f000 fd10 	bl	80017f0 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3770      	adds	r7, #112	; 0x70
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58000400 	.word	0x58000400
 8000ddc:	58024800 	.word	0x58024800

08000de0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000de4:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000de6:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <MX_FDCAN1_Init+0x188>)
 8000de8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dea:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000dfc:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000e02:	4b58      	ldr	r3, [pc, #352]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000e08:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000e0e:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e16:	221f      	movs	r2, #31
 8000e18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000e1a:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e26:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e50:	4b44      	ldr	r3, [pc, #272]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e8c:	4835      	ldr	r0, [pc, #212]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000e8e:	f001 fb79 	bl	8002584 <HAL_FDCAN_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e98:	f000 fcaa 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIndex = 0;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterIndex = 0;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterType  = FDCAN_FILTER_MASK;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterID1 = 0x321;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000ebc:	f240 3221 	movw	r2, #801	; 0x321
 8000ec0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000ec4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ec8:	615a      	str	r2, [r3, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000eca:	4928      	ldr	r1, [pc, #160]	; (8000f6c <MX_FDCAN1_Init+0x18c>)
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000ece:	f001 fd37 	bl	8002940 <HAL_FDCAN_ConfigFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_FDCAN1_Init+0xfc>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000ed8:	f000 fc8a 	bl	80017f0 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000ede:	f001 fda5 	bl	8002a2c <HAL_FDCAN_Start>
	{

	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <MX_FDCAN1_Init+0x184>)
 8000ee8:	f001 ff94 	bl	8002e14 <HAL_FDCAN_ActivateNotification>

	}


	// Configure TX Header for FDCAN1
	TxHeader1.Identifier = 0x1BC;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000eee:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8000ef2:	601a      	str	r2, [r3, #0]
	//0 and 0x7FF, if IdType is FDCAN_STANDARD_ID
	TxHeader1.IdType = FDCAN_STANDARD_ID;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
	//Data frame = FDCAN_DATA_FRAME
	TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
	//8 bytes data field = FDCAN_DLC_BYTES_8
	TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f06:	60da      	str	r2, [r3, #12]
	//Transmitting node is error active = FDCAN_ESI_ACTIVE
	TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
	//FDCAN frames transmitted/received without bit rate switching = FDCAN_BRS_OFF
	TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
	//Frame transmitted/received in Classic CAN format = FDCAN_FRAME_CLASSIC
	TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
	TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
	TxHeader1.MessageMarker = 0;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_FDCAN1_Init+0x190>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]

	// Configure TX Header for FDCAN1
	TxHeader2.Identifier = 0x1B2;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f28:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8000f2c:	601a      	str	r2, [r3, #0]
	//0 and 0x7FF, if IdType is FDCAN_STANDARD_ID
	TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
	//Data frame = FDCAN_DATA_FRAME
	TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
	//8 bytes data field = FDCAN_DLC_BYTES_8
	TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f40:	60da      	str	r2, [r3, #12]
	//Transmitting node is error active = FDCAN_ESI_ACTIVE
	TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
	//FDCAN frames transmitted/received without bit rate switching = FDCAN_BRS_OFF
	TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
	//Frame transmitted/received in Classic CAN format = FDCAN_FRAME_CLASSIC
	TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
	TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
	TxHeader2.MessageMarker = 0;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_FDCAN1_Init+0x194>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	24000220 	.word	0x24000220
 8000f68:	4000a000 	.word	0x4000a000
 8000f6c:	240005b8 	.word	0x240005b8
 8000f70:	2400055c 	.word	0x2400055c
 8000f74:	24000580 	.word	0x24000580

08000f78 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_I2C4_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MX_I2C4_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_I2C4_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fb4:	f002 feae 	bl	8003d14 <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000fbe:	f000 fc17 	bl	80017f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fc6:	f003 ff75 	bl	8004eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000fd0:	f000 fc0e 	bl	80017f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_I2C4_Init+0x74>)
 8000fd8:	f003 ffb7 	bl	8004f4a <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fc05 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	240002c0 	.word	0x240002c0
 8000ff0:	58001c00 	.word	0x58001c00
 8000ff4:	00909fce 	.word	0x00909fce

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b09a      	sub	sp, #104	; 0x68
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	222c      	movs	r2, #44	; 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f008 fff2 	bl	800a01c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b43      	ldr	r3, [pc, #268]	; (8001148 <MX_TIM1_Init+0x150>)
 800103a:	4a44      	ldr	r2, [pc, #272]	; (800114c <MX_TIM1_Init+0x154>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240 - 1;
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <MX_TIM1_Init+0x150>)
 8001040:	22ef      	movs	r2, #239	; 0xef
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <MX_TIM1_Init+0x150>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_TIM1_Init+0x150>)
 800104c:	2264      	movs	r2, #100	; 0x64
 800104e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <MX_TIM1_Init+0x150>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_TIM1_Init+0x150>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <MX_TIM1_Init+0x150>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001062:	4839      	ldr	r0, [pc, #228]	; (8001148 <MX_TIM1_Init+0x150>)
 8001064:	f006 fb3a 	bl	80076dc <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800106e:	f000 fbbf 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001078:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800107c:	4619      	mov	r1, r3
 800107e:	4832      	ldr	r0, [pc, #200]	; (8001148 <MX_TIM1_Init+0x150>)
 8001080:	f007 f810 	bl	80080a4 <HAL_TIM_ConfigClockSource>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800108a:	f000 fbb1 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800108e:	482e      	ldr	r0, [pc, #184]	; (8001148 <MX_TIM1_Init+0x150>)
 8001090:	f006 fc64 	bl	800795c <HAL_TIM_PWM_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800109a:	f000 fba9 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4825      	ldr	r0, [pc, #148]	; (8001148 <MX_TIM1_Init+0x150>)
 80010b2:	f007 fd4b 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80010bc:	f000 fb98 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <MX_TIM1_Init+0x150>)
 80010e6:	f006 fec9 	bl	8007e7c <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80010f0:	f000 fb7e 	bl	80017f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM1_Init+0x150>)
 800112a:	f007 fd9d 	bl	8008c68 <HAL_TIMEx_ConfigBreakDeadTime>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001134:	f000 fb5c 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM1_Init+0x150>)
 800113a:	f000 fe0b 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 800113e:	bf00      	nop
 8001140:	3768      	adds	r7, #104	; 0x68
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2400030c 	.word	0x2400030c
 800114c:	40010000 	.word	0x40010000

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM2_Init+0x98>)
 8001170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001174:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240 - 1;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM2_Init+0x98>)
 8001178:	22ef      	movs	r2, #239	; 0xef
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7813 - 1;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM2_Init+0x98>)
 8001184:	f641 6284 	movw	r2, #7812	; 0x1e84
 8001188:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_TIM2_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_TIM2_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001196:	4814      	ldr	r0, [pc, #80]	; (80011e8 <MX_TIM2_Init+0x98>)
 8001198:	f006 faa0 	bl	80076dc <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011a2:	f000 fb25 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM2_Init+0x98>)
 80011b4:	f006 ff76 	bl	80080a4 <HAL_TIM_ConfigClockSource>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011be:	f000 fb17 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM2_Init+0x98>)
 80011d0:	f007 fcbc 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011da:	f000 fb09 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24000358 	.word	0x24000358

080011ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_TIM3_Init+0x94>)
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <MX_TIM3_Init+0x98>)
 800120e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240 - 1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_TIM3_Init+0x94>)
 8001212:	22ef      	movs	r2, #239	; 0xef
 8001214:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_TIM3_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_TIM3_Init+0x94>)
 800121e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_TIM3_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_TIM3_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_TIM3_Init+0x94>)
 8001232:	f006 fa53 	bl	80076dc <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800123c:	f000 fad8 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <MX_TIM3_Init+0x94>)
 800124e:	f006 ff29 	bl	80080a4 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001258:	f000 faca 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_TIM3_Init+0x94>)
 800126a:	f007 fc6f 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 fabc 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	240003a4 	.word	0x240003a4
 8001284:	40000400 	.word	0x40000400

08001288 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08e      	sub	sp, #56	; 0x38
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012bc:	4a2d      	ldr	r2, [pc, #180]	; (8001374 <MX_TIM4_Init+0xec>)
 80012be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1500;
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <MX_TIM4_Init+0xe8>)
 80012e4:	f006 f9fa 	bl	80076dc <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 fa7f 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fc:	4619      	mov	r1, r3
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <MX_TIM4_Init+0xe8>)
 8001300:	f006 fed0 	bl	80080a4 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800130a:	f000 fa71 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800130e:	4818      	ldr	r0, [pc, #96]	; (8001370 <MX_TIM4_Init+0xe8>)
 8001310:	f006 fb24 	bl	800795c <HAL_TIM_PWM_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800131a:	f000 fa69 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <MX_TIM4_Init+0xe8>)
 800132e:	f007 fc0d 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001338:	f000 fa5a 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133c:	2360      	movs	r3, #96	; 0x60
 800133e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <MX_TIM4_Init+0xe8>)
 8001354:	f006 fd92 	bl	8007e7c <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800135e:	f000 fa47 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <MX_TIM4_Init+0xe8>)
 8001364:	f000 fcf6 	bl	8001d54 <HAL_TIM_MspPostInit>

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	240003f0 	.word	0x240003f0
 8001374:	40000800 	.word	0x40000800

08001378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_TIM5_Init+0x94>)
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <MX_TIM5_Init+0x98>)
 800139a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 230;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_TIM5_Init+0x94>)
 800139e:	22e6      	movs	r2, #230	; 0xe6
 80013a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM5_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_TIM5_Init+0x94>)
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_TIM5_Init+0x94>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_TIM5_Init+0x94>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_TIM5_Init+0x94>)
 80013be:	f006 f98d 	bl	80076dc <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013c8:	f000 fa12 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_TIM5_Init+0x94>)
 80013da:	f006 fe63 	bl	80080a4 <HAL_TIM_ConfigClockSource>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013e4:	f000 fa04 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_TIM5_Init+0x94>)
 80013f6:	f007 fba9 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001400:	f000 f9f6 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2400043c 	.word	0x2400043c
 8001410:	40000c00 	.word	0x40000c00

08001414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 800141a:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <MX_USART3_UART_Init+0x94>)
 800141c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 800145e:	f007 fc9f 	bl	8008da0 <HAL_UART_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 f9c2 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146c:	2100      	movs	r1, #0
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001470:	f008 fcd2 	bl	8009e18 <HAL_UARTEx_SetTxFifoThreshold>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800147a:	f000 f9b9 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001482:	f008 fd07 	bl	8009e94 <HAL_UARTEx_SetRxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800148c:	f000 f9b0 	bl	80017f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_USART3_UART_Init+0x90>)
 8001492:	f008 fc88 	bl	8009da6 <HAL_UARTEx_DisableFifoMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800149c:	f000 f9a8 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000488 	.word	0x24000488
 80014a8:	40004800 	.word	0x40004800

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a3e      	ldr	r2, [pc, #248]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x118>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MX_GPIO_Init+0x118>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_GPIO_Init+0x118>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	f003 0320 	and.w	r3, r3, #32
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <MX_GPIO_Init+0x118>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x118>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_GPIO_Init+0x118>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <MX_GPIO_Init+0x118>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_GPIO_Init+0x118>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f244 0101 	movw	r1, #16385	; 0x4001
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_GPIO_Init+0x11c>)
 800157e:	f002 fb81 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_GPIO_Init+0x120>)
 8001598:	f002 f9c4 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800159c:	f244 0301 	movw	r3, #16385	; 0x4001
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_GPIO_Init+0x11c>)
 80015b6:	f002 f9b5 	bl	8003924 <HAL_GPIO_Init>

}
 80015ba:	bf00      	nop
 80015bc:	3730      	adds	r7, #48	; 0x30
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58020400 	.word	0x58020400
 80015cc:	58020800 	.word	0x58020800

080015d0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
// CAN
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015e2:	f001 faa9 	bl	8002b38 <HAL_FDCAN_GetRxMessage>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d117      	bne.n	800161c <HAL_FDCAN_RxFifo0Callback+0x4c>
		if(RxHeader.Identifier == 0x43){
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b43      	cmp	r3, #67	; 0x43
 80015f2:	d105      	bne.n	8001600 <HAL_FDCAN_RxFifo0Callback+0x30>
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1) != HAL_OK){
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80015f6:	490f      	ldr	r1, [pc, #60]	; (8001634 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80015fa:	f001 fa42 	bl	8002a82 <HAL_FDCAN_AddMessageToTxFifoQ>
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2) != HAL_OK){
			}
			print_int(&huart3, "Id. 0x11\r\n", 0);
		}
	}
}
 80015fe:	e00d      	b.n	800161c <HAL_FDCAN_RxFifo0Callback+0x4c>
		} else if (RxHeader.Identifier == 0x11){
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b11      	cmp	r3, #17
 8001606:	d109      	bne.n	800161c <HAL_FDCAN_RxFifo0Callback+0x4c>
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2) != HAL_OK){
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800160e:	f001 fa38 	bl	8002a82 <HAL_FDCAN_AddMessageToTxFifoQ>
			print_int(&huart3, "Id. 0x11\r\n", 0);
 8001612:	2200      	movs	r2, #0
 8001614:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8001618:	f000 fd76 	bl	8002108 <print_int>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	240005b0 	.word	0x240005b0
 8001628:	24000534 	.word	0x24000534
 800162c:	24000220 	.word	0x24000220
 8001630:	24000010 	.word	0x24000010
 8001634:	2400055c 	.word	0x2400055c
 8001638:	240005a8 	.word	0x240005a8
 800163c:	24000580 	.word	0x24000580
 8001640:	0800e714 	.word	0x0800e714
 8001644:	24000488 	.word	0x24000488

08001648 <HAL_TIM_PeriodElapsedCallback>:


// Interrupción por timer (TIM2) a 128 Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d108      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x22>
		// Guardado de muestras en los arreglos
		//muestras_x[nm] = gyr[0];
		//muestras_y[nm] = gyr[1];
		//muestras_z[nm] = gyr[2];

		nm++;													// Incremento del contador de muestras
 8001658:	4b54      	ldr	r3, [pc, #336]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b51      	ldr	r3, [pc, #324]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001668:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim3){
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800166e:	4293      	cmp	r3, r2
 8001670:	f040 808d 	bne.w	800178e <HAL_TIM_PeriodElapsedCallback+0x146>
		//press_raw = MPRLS_data(&hi2c4);
		//send_data(&huart3, press_raw, 4);

		pressureBuffer = (uint8_t*)(&pressure);
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001676:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001678:	601a      	str	r2, [r3, #0]
		TxData2[1] = pressureBuffer[0];
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f993 2000 	ldrsb.w	r2, [r3]
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001684:	705a      	strb	r2, [r3, #1]
		TxData2[2] = pressureBuffer[1];
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001690:	709a      	strb	r2, [r3, #2]
		TxData2[3] = pressureBuffer[2];
 8001692:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800169a:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800169c:	70da      	strb	r2, [r3, #3]
		TxData2[4] = pressureBuffer[3];
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 80016a8:	711a      	strb	r2, [r3, #4]

		pkPrev = TIM1->CCR1;
 80016aa:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80016b0:	6013      	str	r3, [r2, #0]
		error = reference - pressure;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
		control = KP*error + KI*ts*(error + errorPrev);// + (kd/ts)*(error - errorPrev);
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8001798 <HAL_TIM_PeriodElapsedCallback+0x150>
 80016d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e4:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80017a0 <HAL_TIM_PeriodElapsedCallback+0x158>
 80016e8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80016ee:	ed93 7a00 	vldr	s14, [r3]
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001700:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001704:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
		pk = pkPrev + control*40;
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80017dc <HAL_TIM_PeriodElapsedCallback+0x194>
 8001728:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 2a90 	vmov	r2, s15
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800173a:	601a      	str	r2, [r3, #0]
		errorPrev = error;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001742:	6013      	str	r3, [r2, #0]


		if (pk >= 100){
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b63      	cmp	r3, #99	; 0x63
 800174a:	d903      	bls.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x10c>
			TIM1->CCR1 = 100;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800174e:	2264      	movs	r2, #100	; 0x64
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
 8001752:	e00b      	b.n	800176c <HAL_TIM_PeriodElapsedCallback+0x124>
		}else if (pk <= 0){
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HAL_TIM_PeriodElapsedCallback+0x11c>
			TIM1->CCR1 = 0;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
 8001762:	e003      	b.n	800176c <HAL_TIM_PeriodElapsedCallback+0x124>
		}else{
			TIM1->CCR1 = pk;
 8001764:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6353      	str	r3, [r2, #52]	; 0x34
		}

		pressure = MPRLS_read(&hi2c4);
 800176c:	481d      	ldr	r0, [pc, #116]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800176e:	f000 f8ab 	bl	80018c8 <MPRLS_read>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001778:	edc3 7a00 	vstr	s15, [r3]

		print_float(&huart3, "Presión: %.5f\r\n", pressure);
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	4918      	ldr	r1, [pc, #96]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001788:	4818      	ldr	r0, [pc, #96]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800178a:	f000 fcdb 	bl	8002144 <print_float>
	}
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	9374bc6a 	.word	0x9374bc6a
 800179c:	3fd60418 	.word	0x3fd60418
 80017a0:	8db8bac7 	.word	0x8db8bac7
 80017a4:	3f86f006 	.word	0x3f86f006
 80017a8:	24000358 	.word	0x24000358
 80017ac:	24000518 	.word	0x24000518
 80017b0:	240003a4 	.word	0x240003a4
 80017b4:	240005a4 	.word	0x240005a4
 80017b8:	2400051c 	.word	0x2400051c
 80017bc:	240005a8 	.word	0x240005a8
 80017c0:	40010000 	.word	0x40010000
 80017c4:	24000530 	.word	0x24000530
 80017c8:	2400000c 	.word	0x2400000c
 80017cc:	24000524 	.word	0x24000524
 80017d0:	24000008 	.word	0x24000008
 80017d4:	24000528 	.word	0x24000528
 80017d8:	24000520 	.word	0x24000520
 80017dc:	42200000 	.word	0x42200000
 80017e0:	2400052c 	.word	0x2400052c
 80017e4:	240002c0 	.word	0x240002c0
 80017e8:	0800e720 	.word	0x0800e720
 80017ec:	24000488 	.word	0x24000488

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <MPRLS_status>:
float pmin = 0.0; // minimum value of pressure range [bar, psi, kPa, etc.
uint8_t cmd[3] = {0xAA, 0x00, 0x00}; // Comando a enviar
uint8_t press_read[4];
float press = 0;

void MPRLS_status(I2C_HandleTypeDef *hi2c){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, 0x30, 3, 3000);
 8001804:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001808:	2203      	movs	r2, #3
 800180a:	2130      	movs	r1, #48	; 0x30
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f002 ff29 	bl	8004664 <HAL_I2C_IsDeviceReady>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <MPRLS_status+0x2a>
 800181c:	2201      	movs	r2, #1
 800181e:	2102      	movs	r1, #2
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <MPRLS_status+0x34>)
 8001822:	f002 fa2f 	bl	8003c84 <HAL_GPIO_WritePin>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	58021000 	.word	0x58021000
 8001834:	00000000 	.word	0x00000000

08001838 <MPRLS_init>:

void MPRLS_init(I2C_HandleTypeDef *hi2c){
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	outputmin = (uint32_t)((float)16777216L * (outputmin / 100.0) + 0.5);
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MPRLS_init+0x88>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800184a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80018b0 <MPRLS_init+0x78>
 800184e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001852:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80018b8 <MPRLS_init+0x80>
 8001856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800185e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001862:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MPRLS_init+0x88>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
	outputmax = (uint32_t)((float)16777216L * (outputmax / 100.0) + 0.5);
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MPRLS_init+0x8c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800187a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80018b0 <MPRLS_init+0x78>
 800187e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001882:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80018b8 <MPRLS_init+0x80>
 8001886:	ee27 7b06 	vmul.f64	d7, d7, d6
 800188a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800188e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001892:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MPRLS_init+0x8c>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	f3af 8000 	nop.w
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40590000 	.word	0x40590000
 80018b8:	00000000 	.word	0x00000000
 80018bc:	41700000 	.word	0x41700000
 80018c0:	2400001c 	.word	0x2400001c
 80018c4:	24000018 	.word	0x24000018

080018c8 <MPRLS_read>:

float MPRLS_read(I2C_HandleTypeDef *hi2c){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, 0x30, cmd, 3, 3000);
 80018d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2303      	movs	r3, #3
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <MPRLS_read+0xac>)
 80018da:	2130      	movs	r1, #48	; 0x30
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f002 faa9 	bl	8003e34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, 0x31, press_read, 4, 3000);
 80018e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2304      	movs	r3, #4
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <MPRLS_read+0xb0>)
 80018ec:	2131      	movs	r1, #49	; 0x31
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f002 fb94 	bl	800401c <HAL_I2C_Master_Receive>
	uint32_t psi1 = ((uint32_t)(press_read[1]) << 16) | ((uint32_t)(press_read[2]) << 8) | ((uint32_t)(press_read[3]));
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <MPRLS_read+0xb0>)
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MPRLS_read+0xb0>)
 80018fc:	789b      	ldrb	r3, [r3, #2]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	4313      	orrs	r3, r2
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <MPRLS_read+0xb0>)
 8001904:	78d2      	ldrb	r2, [r2, #3]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
	float psi = (psi1 - outputmin) * (pmax - pmin);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MPRLS_read+0xb4>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MPRLS_read+0xb8>)
 8001920:	edd3 6a00 	vldr	s13, [r3]
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MPRLS_read+0xbc>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	edc7 7a02 	vstr	s15, [r7, #8]
	psi /= (float)(outputmax - outputmin);
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MPRLS_read+0xc0>)
 8001938:	ed93 7a00 	vldr	s14, [r3]
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MPRLS_read+0xb4>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001946:	edd7 6a02 	vldr	s13, [r7, #8]
 800194a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194e:	edc7 7a02 	vstr	s15, [r7, #8]
	psi += pmin;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MPRLS_read+0xbc>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed97 7a02 	vldr	s14, [r7, #8]
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc7 7a02 	vstr	s15, [r7, #8]
	return psi;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	ee07 3a90 	vmov	s15, r3
}
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24000024 	.word	0x24000024
 8001978:	240005dc 	.word	0x240005dc
 800197c:	2400001c 	.word	0x2400001c
 8001980:	24000020 	.word	0x24000020
 8001984:	240005d8 	.word	0x240005d8
 8001988:	24000018 	.word	0x24000018

0800198c <MPU6050_status>:

// Lectura del MPU6050
uint8_t check, data;
float gyrF[3];

void MPU6050_status(I2C_HandleTypeDef *hi2c){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, 3000);
 8001994:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001998:	2201      	movs	r2, #1
 800199a:	21d0      	movs	r1, #208	; 0xd0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f002 fe61 	bl	8004664 <HAL_I2C_IsDeviceReady>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <MPU6050_status+0x2a>
 80019ac:	2201      	movs	r2, #1
 80019ae:	2101      	movs	r1, #1
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MPU6050_status+0x34>)
 80019b2:	f002 f967 	bl	8003c84 <HAL_GPIO_WritePin>
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	58020400 	.word	0x58020400

080019c4 <MPU6050_init>:

uint8_t MPU6050_init(I2C_HandleTypeDef *hi2c){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 80019cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MPU6050_init+0x98>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2275      	movs	r2, #117	; 0x75
 80019de:	21d0      	movs	r1, #208	; 0xd0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f002 fd25 	bl	8004430 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ea:	f000 fc8b 	bl	8002304 <HAL_Delay>

	data = 0x00;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MPU6050_init+0x9c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 80019f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2301      	movs	r3, #1
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MPU6050_init+0x9c>)
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	226b      	movs	r2, #107	; 0x6b
 8001a06:	21d0      	movs	r1, #208	; 0xd0
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f002 fbfd 	bl	8004208 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MPU6050_init+0x9c>)
 8001a10:	2283      	movs	r2, #131	; 0x83
 8001a12:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 8001a14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <MPU6050_init+0x9c>)
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	2219      	movs	r2, #25
 8001a26:	21d0      	movs	r1, #208	; 0xd0
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f002 fbed 	bl	8004208 <HAL_I2C_Mem_Write>
	data = 0x00;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MPU6050_init+0x9c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 8001a34:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MPU6050_init+0x9c>)
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	221b      	movs	r2, #27
 8001a46:	21d0      	movs	r1, #208	; 0xd0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f002 fbdd 	bl	8004208 <HAL_I2C_Mem_Write>

	return check;
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <MPU6050_init+0x98>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	240005e0 	.word	0x240005e0
 8001a60:	240005e1 	.word	0x240005e1

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_MspInit+0x30>)
 8001a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x30>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x30>)
 8001a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	58024400 	.word	0x58024400

08001a98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0b8      	sub	sp, #224	; 0xe0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	22bc      	movs	r2, #188	; 0xbc
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 faaf 	bl	800a01c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <HAL_FDCAN_MspInit+0xd0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d14a      	bne.n	8001b5e <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001acc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fa97 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ae4:	f7ff fe84 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001aea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001afa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_FDCAN_MspInit+0xd4>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b46:	4619      	mov	r1, r3
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_FDCAN_MspInit+0xd8>)
 8001b4a:	f001 feeb 	bl	8003924 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2013      	movs	r0, #19
 8001b54:	f000 fce1 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001b58:	2013      	movs	r0, #19
 8001b5a:	f000 fcf8 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	37e0      	adds	r7, #224	; 0xe0
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	4000a000 	.word	0x4000a000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	58020c00 	.word	0x58020c00

08001b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0b8      	sub	sp, #224	; 0xe0
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	22bc      	movs	r2, #188	; 0xbc
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f008 fa41 	bl	800a01c <memset>
  if(hi2c->Instance==I2C4)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_I2C_MspInit+0xc0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d142      	bne.n	8001c2a <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fa2a 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f7ff fe17 	bl	80017f0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001be0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <HAL_I2C_MspInit+0xc8>)
 8001c08:	f001 fe8c 	bl	8003924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_I2C_MspInit+0xc4>)
 8001c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	37e0      	adds	r7, #224	; 0xe0
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	58001c00 	.word	0x58001c00
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	58021400 	.word	0x58021400

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a3c      	ldr	r2, [pc, #240]	; (8001d40 <HAL_TIM_Base_MspInit+0x100>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10f      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	4a3a      	ldr	r2, [pc, #232]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c70:	e062      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d117      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c82:	4a30      	ldr	r2, [pc, #192]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	201c      	movs	r0, #28
 8001ca0:	f000 fc3b 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca4:	201c      	movs	r0, #28
 8001ca6:	f000 fc52 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001caa:	e045      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <HAL_TIM_Base_MspInit+0x108>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d117      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb6:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbc:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	201d      	movs	r0, #29
 8001cda:	f000 fc1e 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cde:	201d      	movs	r0, #29
 8001ce0:	f000 fc35 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001ce4:	e028      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM4)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_TIM_Base_MspInit+0x10c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d10f      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
}
 8001d0e:	e013      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM5)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_TIM_Base_MspInit+0x110>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_TIM_Base_MspInit+0x104>)
 8001d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010000 	.word	0x40010000
 8001d44:	58024400 	.word	0x58024400
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00

08001d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_TIM_MspPostInit+0xb8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d120      	bne.n	8001db8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d76:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4818      	ldr	r0, [pc, #96]	; (8001e14 <HAL_TIM_MspPostInit+0xc0>)
 8001db2:	f001 fdb7 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001db6:	e024      	b.n	8001e02 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_TIM_MspPostInit+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11f      	bne.n	8001e02 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_TIM_MspPostInit+0xbc>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001df2:	2302      	movs	r3, #2
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4807      	ldr	r0, [pc, #28]	; (8001e1c <HAL_TIM_MspPostInit+0xc8>)
 8001dfe:	f001 fd91 	bl	8003924 <HAL_GPIO_Init>
}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58021000 	.word	0x58021000
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	58020c00 	.word	0x58020c00

08001e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b8      	sub	sp, #224	; 0xe0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	22bc      	movs	r2, #188	; 0xbc
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f008 f8eb 	bl	800a01c <memset>
  if(huart->Instance==USART3)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <HAL_UART_MspInit+0xc0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d142      	bne.n	8001ed6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e50:	2302      	movs	r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f8d4 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e6a:	f7ff fcc1 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0xc8>)
 8001ed2:	f001 fd27 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	37e0      	adds	r7, #224	; 0xe0
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004800 	.word	0x40004800
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	58020c00 	.word	0x58020c00

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f9c4 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <FDCAN1_IT0_IRQHandler+0x10>)
 8001f46:	f000 ffdf 	bl	8002f08 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	24000220 	.word	0x24000220

08001f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM2_IRQHandler+0x10>)
 8001f5a:	f005 fe6f 	bl	8007c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24000358 	.word	0x24000358

08001f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM3_IRQHandler+0x10>)
 8001f6e:	f005 fe65 	bl	8007c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	240003a4 	.word	0x240003a4

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f96:	f008 f809 	bl	8009fac <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fbe:	e7fe      	b.n	8001fbe <_exit+0x12>

08001fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd2:	f3af 8000 	nop.w
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf0      	blt.n	8001fd2 <_read+0x12>
	}

return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf1      	blt.n	800200c <_write+0x12>
	}
	return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_close>:

int _close(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205a:	605a      	str	r2, [r3, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_isatty>:

int _isatty(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f007 ff6e 	bl	8009fac <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	24080000 	.word	0x24080000
 80020fc:	00000400 	.word	0x00000400
 8002100:	240005e4 	.word	0x240005e4
 8002104:	24000630 	.word	0x24000630

08002108 <print_int>:

typedef float complex cplx;
char uart_buf[50];
uint16_t uart_buf_len;

void print_int(UART_HandleTypeDef *huart, char *string, int var){
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <print_int+0x34>)
 800211a:	f008 fdd7 	bl	800accc <siprintf>
 800211e:	4603      	mov	r3, r0
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <print_int+0x38>)
 8002124:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <print_int+0x38>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <print_int+0x34>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f006 fe86 	bl	8008e40 <HAL_UART_Transmit>
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	240005e8 	.word	0x240005e8
 8002140:	2400061a 	.word	0x2400061a

08002144 <print_float>:

void print_float(UART_HandleTypeDef *huart, char *string, float var){
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	ed87 0a01 	vstr	s0, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8002152:	edd7 7a01 	vldr	s15, [r7, #4]
 8002156:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800215a:	ec53 2b17 	vmov	r2, r3, d7
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <print_float+0x40>)
 8002162:	f008 fdb3 	bl	800accc <siprintf>
 8002166:	4603      	mov	r3, r0
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <print_float+0x44>)
 800216c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <print_float+0x44>)
 8002170:	881a      	ldrh	r2, [r3, #0]
 8002172:	2364      	movs	r3, #100	; 0x64
 8002174:	4903      	ldr	r1, [pc, #12]	; (8002184 <print_float+0x40>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f006 fe62 	bl	8008e40 <HAL_UART_Transmit>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	240005e8 	.word	0x240005e8
 8002188:	2400061a 	.word	0x2400061a

0800218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002190:	f7fe fc74 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f007 fefd 	bl	8009fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021be:	f7fe fcf3 	bl	8000ba8 <main>
  bx  lr
 80021c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021cc:	24000204 	.word	0x24000204
  ldr r2, =_sidata
 80021d0:	0800ec7c 	.word	0x0800ec7c
  ldr r2, =_sbss
 80021d4:	24000204 	.word	0x24000204
  ldr r4, =_ebss
 80021d8:	24000630 	.word	0x24000630

080021dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC3_IRQHandler>
	...

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 f98c 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ec:	f003 fd38 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_Init+0x68>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4913      	ldr	r1, [pc, #76]	; (800224c <HAL_Init+0x6c>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_Init+0x68>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_Init+0x6c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_Init+0x70>)
 8002222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <HAL_Init+0x74>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f814 	bl	8002258 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e002      	b.n	8002240 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800223a:	f7ff fc13 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	58024400 	.word	0x58024400
 800224c:	0800e780 	.word	0x0800e780
 8002250:	24000004 	.word	0x24000004
 8002254:	24000000 	.word	0x24000000

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_InitTick+0x60>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e021      	b.n	80022b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_InitTick+0x64>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_InitTick+0x60>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f971 	bl	800256a <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 f93b 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x68>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2400002c 	.word	0x2400002c
 80022bc:	24000000 	.word	0x24000000
 80022c0:	24000028 	.word	0x24000028

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2400002c 	.word	0x2400002c
 80022e8:	2400061c 	.word	0x2400061c

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2400061c 	.word	0x2400061c

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffde 	bl	80022ec <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2400002c 	.word	0x2400002c

0800234c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetREVID+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0c1b      	lsrs	r3, r3, #16
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	5c001000 	.word	0x5c001000

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	4313      	orrs	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	05fa0000 	.word	0x05fa0000

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff40 	bl	80023ac <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff90 	bl	8002458 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff33 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa4 	bl	80024c0 <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b098      	sub	sp, #96	; 0x60
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800258c:	4a84      	ldr	r2, [pc, #528]	; (80027a0 <HAL_FDCAN_Init+0x21c>)
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	4611      	mov	r1, r2
 8002594:	224c      	movs	r2, #76	; 0x4c
 8002596:	4618      	mov	r0, r3
 8002598:	f007 fd32 	bl	800a000 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c6      	b.n	8002934 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7e      	ldr	r2, [pc, #504]	; (80027a4 <HAL_FDCAN_Init+0x220>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d106      	bne.n	80025be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025b8:	461a      	mov	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fa60 	bl	8001a98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0210 	bic.w	r2, r2, #16
 80025e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e8:	f7ff fe80 	bl	80022ec <HAL_GetTick>
 80025ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025ee:	e014      	b.n	800261a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025f0:	f7ff fe7c 	bl	80022ec <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d90d      	bls.n	800261a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e18c      	b.n	8002934 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d0e3      	beq.n	80025f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002638:	f7ff fe58 	bl	80022ec <HAL_GetTick>
 800263c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800263e:	e014      	b.n	800266a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002640:	f7ff fe54 	bl	80022ec <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b0a      	cmp	r3, #10
 800264c:	d90d      	bls.n	800266a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e164      	b.n	8002934 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0e3      	beq.n	8002640 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0202 	orr.w	r2, r2, #2
 8002686:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7c1b      	ldrb	r3, [r3, #16]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269e:	619a      	str	r2, [r3, #24]
 80026a0:	e007      	b.n	80026b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7c5b      	ldrb	r3, [r3, #17]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	e007      	b.n	80026dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7c9b      	ldrb	r3, [r3, #18]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	e007      	b.n	8002706 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002704:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800272a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0210 	bic.w	r2, r2, #16
 800273a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0204 	orr.w	r2, r2, #4
 8002752:	619a      	str	r2, [r3, #24]
 8002754:	e030      	b.n	80027b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02c      	beq.n	80027b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d020      	beq.n	80027a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002774:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0210 	orr.w	r2, r2, #16
 8002784:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d114      	bne.n	80027b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	619a      	str	r2, [r3, #24]
 800279e:	e00b      	b.n	80027b8 <HAL_FDCAN_Init+0x234>
 80027a0:	0800e734 	.word	0x0800e734
 80027a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0220 	orr.w	r2, r2, #32
 80027b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	3b01      	subs	r3, #1
 80027be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	3b01      	subs	r3, #1
 80027da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ec:	d115      	bne.n	800281a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	3b01      	subs	r3, #1
 80027fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80027fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	3b01      	subs	r3, #1
 8002804:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002806:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	3b01      	subs	r3, #1
 8002810:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002816:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002818:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002840:	4413      	add	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800284e:	f023 0107 	bic.w	r1, r3, #7
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	443b      	add	r3, r7
 800285c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800287a:	f023 0107 	bic.w	r1, r3, #7
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3360      	adds	r3, #96	; 0x60
 8002886:	443b      	add	r3, r7
 8002888:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80028a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3360      	adds	r3, #96	; 0x60
 80028b2:	443b      	add	r3, r7
 80028b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80028b8:	011a      	lsls	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80028d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3360      	adds	r3, #96	; 0x60
 80028e0:	443b      	add	r3, r7
 80028e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_FDCAN_Init+0x3b8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d107      	bne.n	800290c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f022 0203 	bic.w	r2, r2, #3
 800290a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fdf9 	bl	800351c <FDCAN_CalcultateRamBlockAddresses>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002930:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002934:	4618      	mov	r0, r3
 8002936:	3760      	adds	r7, #96	; 0x60
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	4000a000 	.word	0x4000a000

08002940 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002950:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d002      	beq.n	800295e <HAL_FDCAN_ConfigFilter+0x1e>
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d157      	bne.n	8002a0e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d12b      	bne.n	80029be <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d10d      	bne.n	800298a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800297a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002980:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002982:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e00e      	b.n	80029a8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002996:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800299e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e025      	b.n	8002a0a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	075a      	lsls	r2, r3, #29
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b07      	cmp	r3, #7
 80029d2:	d103      	bne.n	80029dc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e006      	b.n	80029ea <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	079a      	lsls	r2, r3, #30
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3304      	adds	r3, #4
 8002a02:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e008      	b.n	8002a20 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a14:	f043 0202 	orr.w	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d111      	bne.n	8002a64 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e008      	b.n	8002a76 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d141      	bne.n	8002b1e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aa2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e038      	b.n	8002b30 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e026      	b.n	8002b30 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fe95 	bl	8003828 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e008      	b.n	8002b30 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b24:	f043 0208 	orr.w	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002b50:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002b52:	7efb      	ldrb	r3, [r7, #27]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	f040 814b 	bne.w	8002df0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d14d      	bne.n	8002bfc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e13e      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e12c      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bb0:	0e1b      	lsrs	r3, r3, #24
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bc2:	0fdb      	lsrs	r3, r3, #31
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bcc:	d101      	bne.n	8002bd2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	69f9      	ldr	r1, [r7, #28]
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	e069      	b.n	8002cd0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b41      	cmp	r3, #65	; 0x41
 8002c00:	d14d      	bne.n	8002c9e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0ed      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0db      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c52:	0e1b      	lsrs	r3, r3, #24
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10b      	bne.n	8002c74 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c64:	0fdb      	lsrs	r3, r3, #31
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6e:	d101      	bne.n	8002c74 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002c70:	2301      	movs	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	69f9      	ldr	r1, [r7, #28]
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e018      	b.n	8002cd0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d309      	bcc.n	8002cbc <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0a2      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e005      	b.n	8002d00 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e1b      	lsrs	r3, r3, #24
 8002d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	0fda      	lsrs	r2, r3, #31
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	3304      	adds	r3, #4
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
 8002d72:	e00a      	b.n	8002d8a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	441a      	add	r2, r3
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	440b      	add	r3, r1
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	3301      	adds	r3, #1
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	461a      	mov	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d3eb      	bcc.n	8002d74 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d105      	bne.n	8002dae <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002dac:	e01e      	b.n	8002dec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b41      	cmp	r3, #65	; 0x41
 8002db2:	d105      	bne.n	8002dc0 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002dbe:	e015      	b.n	8002dec <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b1f      	cmp	r3, #31
 8002dc4:	d808      	bhi.n	8002dd8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002dd6:	e009      	b.n	8002dec <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 021f 	and.w	r2, r3, #31
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e008      	b.n	8002e02 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df6:	f043 0208 	orr.w	r2, r3, #8
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	372c      	adds	r7, #44	; 0x2c
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	0800e790 	.word	0x0800e790

08002e14 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e26:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d002      	beq.n	8002e34 <HAL_FDCAN_ActivateNotification+0x20>
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d155      	bne.n	8002ee0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e52:	e014      	b.n	8002e7e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d108      	bne.n	8002e76 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0202 	orr.w	r2, r2, #2
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e74:	e003      	b.n	8002e7e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_FDCAN_ActivateNotification+0xec>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6553      	str	r3, [r2, #84]	; 0x54
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0f9b      	lsrs	r3, r3, #30
 8002ed6:	490b      	ldr	r1, [pc, #44]	; (8002f04 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e008      	b.n	8002ef2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	3fcfffff 	.word	0x3fcfffff
 8002f04:	4000a800 	.word	0x4000a800

08002f08 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b096      	sub	sp, #88	; 0x58
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002f10:	4b9a      	ldr	r3, [pc, #616]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	079b      	lsls	r3, r3, #30
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002f18:	4b98      	ldr	r3, [pc, #608]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	079b      	lsls	r3, r3, #30
 8002f1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f20:	4013      	ands	r3, r2
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f2e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f38:	4013      	ands	r3, r2
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f50:	4013      	ands	r3, r2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f68:	4013      	ands	r3, r2
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f72:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f80:	4013      	ands	r3, r2
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f98:	4013      	ands	r3, r2
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fcc:	651a      	str	r2, [r3, #80]	; 0x50
 8002fce:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fa54 	bl	8003482 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	0a9b      	lsrs	r3, r3, #10
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01d      	beq.n	8003022 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	0a9b      	lsrs	r3, r3, #10
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003006:	4013      	ands	r3, r2
 8003008:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003012:	651a      	str	r2, [r3, #80]	; 0x50
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800301a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa07 	bl	8003430 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <HAL_FDCAN_IRQHandler+0x278>)
 8003030:	400b      	ands	r3, r1
 8003032:	6513      	str	r3, [r2, #80]	; 0x50
 8003034:	4a51      	ldr	r2, [pc, #324]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003038:	0f9b      	lsrs	r3, r3, #30
 800303a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800303c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9c0 	bl	80033c4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003050:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <HAL_FDCAN_IRQHandler+0x278>)
 8003052:	400b      	ands	r3, r1
 8003054:	6513      	str	r3, [r2, #80]	; 0x50
 8003056:	4a49      	ldr	r2, [pc, #292]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305a:	0f9b      	lsrs	r3, r3, #30
 800305c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800305e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f9ba 	bl	80033da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_FDCAN_IRQHandler+0x278>)
 8003074:	400b      	ands	r3, r1
 8003076:	6513      	str	r3, [r2, #80]	; 0x50
 8003078:	4a40      	ldr	r2, [pc, #256]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	0f9b      	lsrs	r3, r3, #30
 800307e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003080:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe faa4 	bl	80015d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_FDCAN_IRQHandler+0x278>)
 8003096:	400b      	ands	r3, r1
 8003098:	6513      	str	r3, [r2, #80]	; 0x50
 800309a:	4a38      	ldr	r2, [pc, #224]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 800309c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309e:	0f9b      	lsrs	r3, r3, #30
 80030a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80030a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f9a3 	bl	80033f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	0adb      	lsrs	r3, r3, #11
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	0adb      	lsrs	r3, r3, #11
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ca:	651a      	str	r2, [r3, #80]	; 0x50
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f997 	bl	8003406 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80030d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030da:	0a5b      	lsrs	r3, r3, #9
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01d      	beq.n	8003120 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	0a5b      	lsrs	r3, r3, #9
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d017      	beq.n	8003120 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003104:	4013      	ands	r3, r2
 8003106:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003110:	651a      	str	r2, [r3, #80]	; 0x50
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f97d 	bl	800341a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	0cdb      	lsrs	r3, r3, #19
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	0cdb      	lsrs	r3, r3, #19
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003140:	651a      	str	r2, [r3, #80]	; 0x50
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f97c 	bl	8003446 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800316e:	651a      	str	r2, [r3, #80]	; 0x50
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <HAL_FDCAN_IRQHandler+0x274>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	e004      	b.n	8003184 <HAL_FDCAN_IRQHandler+0x27c>
 800317a:	bf00      	nop
 800317c:	4000a800 	.word	0x4000a800
 8003180:	3fcfffff 	.word	0x3fcfffff
 8003184:	f000 f969 	bl	800345a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f95c 	bl	800346e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80031b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b8:	0c5b      	lsrs	r3, r3, #17
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	0c5b      	lsrs	r3, r3, #17
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00f      	beq.n	80031ee <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
 80031d8:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <HAL_FDCAN_IRQHandler+0x4b0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80031ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031fa:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_FDCAN_IRQHandler+0x4b4>)
 80031fc:	400b      	ands	r3, r1
 80031fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003200:	4a6d      	ldr	r2, [pc, #436]	; (80033b8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003204:	0f9b      	lsrs	r3, r3, #30
 8003206:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003208:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f94d 	bl	80034aa <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800321c:	4b67      	ldr	r3, [pc, #412]	; (80033bc <HAL_FDCAN_IRQHandler+0x4b4>)
 800321e:	400b      	ands	r3, r1
 8003220:	6513      	str	r3, [r2, #80]	; 0x50
 8003222:	4a65      	ldr	r2, [pc, #404]	; (80033b8 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	0f9b      	lsrs	r3, r3, #30
 8003228:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a60      	ldr	r2, [pc, #384]	; (80033c0 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	f040 80ac 	bne.w	800339e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a4 	beq.w	800339e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326a:	4013      	ands	r3, r2
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003282:	4013      	ands	r3, r2
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	4013      	ands	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80032a8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	4013      	ands	r3, r2
 80032b4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80032c0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80032ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8e6 	bl	80034c0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003300:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8e6 	bl	80034d6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01a      	beq.n	800334c <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d014      	beq.n	800334c <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	b29b      	uxth	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003338:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	6939      	ldr	r1, [r7, #16]
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8d0 	bl	80034ec <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800335a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8d1 	bl	8003504 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f874 	bl	8003496 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80033ae:	bf00      	nop
 80033b0:	3758      	adds	r7, #88	; 0x58
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	4000a800 	.word	0x4000a800
 80033bc:	3fcfffff 	.word	0x3fcfffff
 80033c0:	4000a000 	.word	0x4000a000

080033c4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003532:	4ba7      	ldr	r3, [pc, #668]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003534:	4013      	ands	r3, r2
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	0091      	lsls	r1, r2, #2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	430b      	orrs	r3, r1
 8003540:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	4413      	add	r3, r2
 8003568:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003572:	4b97      	ldr	r3, [pc, #604]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003574:	4013      	ands	r3, r2
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	0091      	lsls	r1, r2, #2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	430b      	orrs	r3, r1
 8003580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	041a      	lsls	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4413      	add	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80035b4:	4b86      	ldr	r3, [pc, #536]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	0091      	lsls	r1, r2, #2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4413      	add	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035fc:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035fe:	4013      	ands	r3, r2
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	0091      	lsls	r1, r2, #2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003616:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	041a      	lsls	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4413      	add	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003644:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003646:	4013      	ands	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	0091      	lsls	r1, r2, #2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	0091      	lsls	r1, r2, #2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800368a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4413      	add	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	0091      	lsls	r1, r2, #2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	430b      	orrs	r3, r1
 80036c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036cc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036e8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	061a      	lsls	r2, r3, #24
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003702:	4413      	add	r3, r2
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d915      	bls.n	80037f8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80037cc:	e006      	b.n	80037dc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80037ce:	bf00      	nop
 80037d0:	ffff0003 	.word	0xffff0003
 80037d4:	10002b00 	.word	0x10002b00
 80037d8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2203      	movs	r2, #3
 80037f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e010      	b.n	800381a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e005      	b.n	800380c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	429a      	cmp	r2, r3
 8003816:	d3f3      	bcc.n	8003800 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003846:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800384e:	4313      	orrs	r3, r2
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e00a      	b.n	800386a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800385c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003862:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003868:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003874:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800387a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003880:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3304      	adds	r3, #4
 80038aa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3304      	adds	r3, #4
 80038b6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e020      	b.n	8003900 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3303      	adds	r3, #3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3302      	adds	r3, #2
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	440b      	add	r3, r1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80038d6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	440b      	add	r3, r1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80038e4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	440a      	add	r2, r1
 80038ec:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80038ee:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	3304      	adds	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3304      	adds	r3, #4
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	4a06      	ldr	r2, [pc, #24]	; (8003920 <FDCAN_CopyMessageToRAM+0xf8>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	461a      	mov	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4293      	cmp	r3, r2
 8003910:	d3d5      	bcc.n	80038be <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	3724      	adds	r7, #36	; 0x24
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	0800e790 	.word	0x0800e790

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003932:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <HAL_GPIO_Init+0x234>)
 8003934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003936:	e194      	b.n	8003c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8186 	beq.w	8003c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d005      	beq.n	8003968 <HAL_GPIO_Init+0x44>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d130      	bne.n	80039ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399e:	2201      	movs	r2, #1
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0201 	and.w	r2, r3, #1
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d017      	beq.n	8003a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d123      	bne.n	8003a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0203 	and.w	r2, r3, #3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80e0 	beq.w	8003c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_GPIO_Init+0x238>)
 8003aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aba:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_GPIO_Init+0x23c>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_GPIO_Init+0x240>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d052      	beq.n	8003b8c <HAL_GPIO_Init+0x268>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_GPIO_Init+0x244>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_GPIO_Init+0x22e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_GPIO_Init+0x248>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <HAL_GPIO_Init+0x22a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_GPIO_Init+0x24c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d025      	beq.n	8003b4a <HAL_GPIO_Init+0x226>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_GPIO_Init+0x250>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01f      	beq.n	8003b46 <HAL_GPIO_Init+0x222>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <HAL_GPIO_Init+0x254>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d019      	beq.n	8003b42 <HAL_GPIO_Init+0x21e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <HAL_GPIO_Init+0x258>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_GPIO_Init+0x21a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_GPIO_Init+0x25c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00d      	beq.n	8003b3a <HAL_GPIO_Init+0x216>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_GPIO_Init+0x260>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x212>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_GPIO_Init+0x264>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_GPIO_Init+0x20e>
 8003b2e:	2309      	movs	r3, #9
 8003b30:	e02d      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b32:	230a      	movs	r3, #10
 8003b34:	e02b      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b36:	2308      	movs	r3, #8
 8003b38:	e029      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e027      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e025      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e023      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e021      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e01f      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e01d      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e01b      	b.n	8003b8e <HAL_GPIO_Init+0x26a>
 8003b56:	bf00      	nop
 8003b58:	58000080 	.word	0x58000080
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	58000400 	.word	0x58000400
 8003b64:	58020000 	.word	0x58020000
 8003b68:	58020400 	.word	0x58020400
 8003b6c:	58020800 	.word	0x58020800
 8003b70:	58020c00 	.word	0x58020c00
 8003b74:	58021000 	.word	0x58021000
 8003b78:	58021400 	.word	0x58021400
 8003b7c:	58021800 	.word	0x58021800
 8003b80:	58021c00 	.word	0x58021c00
 8003b84:	58022000 	.word	0x58022000
 8003b88:	58022400 	.word	0x58022400
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f002 0203 	and.w	r2, r2, #3
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	4093      	lsls	r3, r2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b9e:	4938      	ldr	r1, [pc, #224]	; (8003c80 <HAL_GPIO_Init+0x35c>)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f ae63 	bne.w	8003938 <HAL_GPIO_Init+0x14>
  }
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	3724      	adds	r7, #36	; 0x24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	58000400 	.word	0x58000400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <HAL_HSEM_FastTake+0x2c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3320      	adds	r3, #32
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <HAL_HSEM_FastTake+0x30>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d101      	bne.n	8003cd4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58026400 	.word	0x58026400
 8003ce8:	80000300 	.word	0x80000300

08003cec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003cf6:	4906      	ldr	r1, [pc, #24]	; (8003d10 <HAL_HSEM_Release+0x24>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	58026400 	.word	0x58026400

08003d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd ff1a 	bl	8001b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	e006      	b.n	8003d9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d104      	bne.n	8003dae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_I2C_Init+0x11c>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69d9      	ldr	r1, [r3, #28]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	02008000 	.word	0x02008000

08003e34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
 8003e44:	4613      	mov	r3, r2
 8003e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	f040 80da 	bne.w	800400a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2C_Master_Transmit+0x30>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0d3      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fe fa3e 	bl	80022ec <HAL_GetTick>
 8003e70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2319      	movs	r3, #25
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fdc4 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0be      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2221      	movs	r2, #33	; 0x21
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2bff      	cmp	r3, #255	; 0xff
 8003ebe:	d90e      	bls.n	8003ede <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	4b51      	ldr	r3, [pc, #324]	; (8004014 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 ffba 	bl	8004e50 <I2C_TransferConfig>
 8003edc:	e06c      	b.n	8003fb8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	8979      	ldrh	r1, [r7, #10]
 8003ef0:	4b48      	ldr	r3, [pc, #288]	; (8004014 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 ffa9 	bl	8004e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003efe:	e05b      	b.n	8003fb8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fdc1 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e07b      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d034      	beq.n	8003fb8 <HAL_I2C_Master_Transmit+0x184>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d130      	bne.n	8003fb8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fd53 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04d      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2bff      	cmp	r3, #255	; 0xff
 8003f78:	d90e      	bls.n	8003f98 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	8979      	ldrh	r1, [r7, #10]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 ff5d 	bl	8004e50 <I2C_TransferConfig>
 8003f96:	e00f      	b.n	8003fb8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	8979      	ldrh	r1, [r7, #10]
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 ff4c 	bl	8004e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d19e      	bne.n	8003f00 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	6a39      	ldr	r1, [r7, #32]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fda0 	bl	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01a      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_I2C_Master_Transmit+0x1e4>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	80002000 	.word	0x80002000
 8004018:	fe00e800 	.word	0xfe00e800

0800401c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	461a      	mov	r2, r3
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
 800402c:	4613      	mov	r3, r2
 800402e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	f040 80db 	bne.w	80041f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_I2C_Master_Receive+0x30>
 8004048:	2302      	movs	r3, #2
 800404a:	e0d4      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004054:	f7fe f94a 	bl	80022ec <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2319      	movs	r3, #25
 8004060:	2201      	movs	r2, #1
 8004062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fcd0 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e0bf      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2222      	movs	r2, #34	; 0x22
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2210      	movs	r2, #16
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	893a      	ldrh	r2, [r7, #8]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2bff      	cmp	r3, #255	; 0xff
 80040a6:	d90e      	bls.n	80040c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	8979      	ldrh	r1, [r7, #10]
 80040b6:	4b52      	ldr	r3, [pc, #328]	; (8004200 <HAL_I2C_Master_Receive+0x1e4>)
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fec6 	bl	8004e50 <I2C_TransferConfig>
 80040c4:	e06d      	b.n	80041a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	8979      	ldrh	r1, [r7, #10]
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <HAL_I2C_Master_Receive+0x1e4>)
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 feb5 	bl	8004e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040e6:	e05c      	b.n	80041a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	6a39      	ldr	r1, [r7, #32]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fd49 	bl	8004b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e07c      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d034      	beq.n	80041a2 <HAL_I2C_Master_Receive+0x186>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d130      	bne.n	80041a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2200      	movs	r2, #0
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fc5e 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e04d      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d90e      	bls.n	8004182 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	; 0xff
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	b2da      	uxtb	r2, r3
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fe68 	bl	8004e50 <I2C_TransferConfig>
 8004180:	e00f      	b.n	80041a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fe57 	bl	8004e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d19d      	bne.n	80040e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	6a39      	ldr	r1, [r7, #32]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fcab 	bl	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e01a      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2220      	movs	r2, #32
 80041c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_I2C_Master_Receive+0x1e8>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	80002400 	.word	0x80002400
 8004204:	fe00e800 	.word	0xfe00e800

08004208 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	4608      	mov	r0, r1
 8004212:	4611      	mov	r1, r2
 8004214:	461a      	mov	r2, r3
 8004216:	4603      	mov	r3, r0
 8004218:	817b      	strh	r3, [r7, #10]
 800421a:	460b      	mov	r3, r1
 800421c:	813b      	strh	r3, [r7, #8]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	f040 80f9 	bne.w	8004422 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_I2C_Mem_Write+0x34>
 8004236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004242:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0ed      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_I2C_Mem_Write+0x4e>
 8004252:	2302      	movs	r3, #2
 8004254:	e0e6      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800425e:	f7fe f845 	bl	80022ec <HAL_GetTick>
 8004262:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2319      	movs	r3, #25
 800426a:	2201      	movs	r2, #1
 800426c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 fbcb 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d1      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2221      	movs	r2, #33	; 0x21
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a8:	88f8      	ldrh	r0, [r7, #6]
 80042aa:	893a      	ldrh	r2, [r7, #8]
 80042ac:	8979      	ldrh	r1, [r7, #10]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4603      	mov	r3, r0
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fadb 	bl	8004874 <I2C_RequestMemoryWrite>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0a9      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2bff      	cmp	r3, #255	; 0xff
 80042d8:	d90e      	bls.n	80042f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fdad 	bl	8004e50 <I2C_TransferConfig>
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	b2da      	uxtb	r2, r3
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fd9c 	bl	8004e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fbb5 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e07b      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d034      	beq.n	80043d0 <HAL_I2C_Mem_Write+0x1c8>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d130      	bne.n	80043d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	2200      	movs	r2, #0
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb47 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e04d      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2bff      	cmp	r3, #255	; 0xff
 8004390:	d90e      	bls.n	80043b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fd51 	bl	8004e50 <I2C_TransferConfig>
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	8979      	ldrh	r1, [r7, #10]
 80043c2:	2300      	movs	r3, #0
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fd40 	bl	8004e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d19e      	bne.n	8004318 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fb94 	bl	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e01a      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2220      	movs	r2, #32
 80043f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_I2C_Mem_Write+0x224>)
 8004402:	400b      	ands	r3, r1
 8004404:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	e000      	b.n	8004424 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004422:	2302      	movs	r3, #2
  }
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	fe00e800 	.word	0xfe00e800

08004430 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 80fd 	bne.w	8004652 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_I2C_Mem_Read+0x34>
 800445e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0f1      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_I2C_Mem_Read+0x4e>
 800447a:	2302      	movs	r3, #2
 800447c:	e0ea      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004486:	f7fd ff31 	bl	80022ec <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2319      	movs	r3, #25
 8004492:	2201      	movs	r2, #1
 8004494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fab7 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d5      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2222      	movs	r2, #34	; 0x22
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d0:	88f8      	ldrh	r0, [r7, #6]
 80044d2:	893a      	ldrh	r2, [r7, #8]
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4603      	mov	r3, r0
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fa1b 	bl	800491c <I2C_RequestMemoryRead>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0ad      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2bff      	cmp	r3, #255	; 0xff
 8004500:	d90e      	bls.n	8004520 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	b2da      	uxtb	r2, r3
 800450e:	8979      	ldrh	r1, [r7, #10]
 8004510:	4b52      	ldr	r3, [pc, #328]	; (800465c <HAL_I2C_Mem_Read+0x22c>)
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fc99 	bl	8004e50 <I2C_TransferConfig>
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452e:	b2da      	uxtb	r2, r3
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	4b4a      	ldr	r3, [pc, #296]	; (800465c <HAL_I2C_Mem_Read+0x22c>)
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fc88 	bl	8004e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	2200      	movs	r2, #0
 8004548:	2104      	movs	r1, #4
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa5e 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07c      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d034      	beq.n	8004600 <HAL_I2C_Mem_Read+0x1d0>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d130      	bne.n	8004600 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fa2f 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e04d      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2bff      	cmp	r3, #255	; 0xff
 80045c0:	d90e      	bls.n	80045e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	8979      	ldrh	r1, [r7, #10]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fc39 	bl	8004e50 <I2C_TransferConfig>
 80045de:	e00f      	b.n	8004600 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	8979      	ldrh	r1, [r7, #10]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fc28 	bl	8004e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d19a      	bne.n	8004540 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa7c 	bl	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e01a      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2220      	movs	r2, #32
 8004624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_I2C_Mem_Read+0x230>)
 8004632:	400b      	ands	r3, r1
 8004634:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	80002400 	.word	0x80002400
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	460b      	mov	r3, r1
 8004672:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b20      	cmp	r3, #32
 8004682:	f040 80ef 	bne.w	8004864 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004694:	d101      	bne.n	800469a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
 8004698:	e0e5      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_I2C_IsDeviceReady+0x44>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e0de      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2224      	movs	r2, #36	; 0x24
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_I2C_IsDeviceReady+0x6e>
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046cc:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_I2C_IsDeviceReady+0x20c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	e004      	b.n	80046dc <HAL_I2C_IsDeviceReady+0x78>
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd fe03 	bl	80022ec <HAL_GetTick>
 80046e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004714:	e034      	b.n	8004780 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d01a      	beq.n	8004754 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd fde5 	bl	80022ec <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <HAL_I2C_IsDeviceReady+0xd0>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e088      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_I2C_IsDeviceReady+0x128>
 8004786:	7fbb      	ldrb	r3, [r7, #30]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0c4      	beq.n	8004716 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d01a      	beq.n	80047d0 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2120      	movs	r1, #32
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f931 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e058      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2220      	movs	r2, #32
 80047ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e04a      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2120      	movs	r1, #32
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f916 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03d      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2210      	movs	r2, #16
 80047f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d118      	bne.n	8004834 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004810:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	2120      	movs	r1, #32
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f8f5 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e01c      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	f63f af3d 	bhi.w	80046be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	02002000 	.word	0x02002000

08004874 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <I2C_RequestMemoryWrite+0xa4>)
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fad7 	bl	8004e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8f0 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02c      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
 80048c6:	e015      	b.n	80048f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8d6 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e012      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ea:	893b      	ldrh	r3, [r7, #8]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f884 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	80002000 	.word	0x80002000

0800491c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <I2C_RequestMemoryRead+0xa4>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa84 	bl	8004e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f89d 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e02c      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004962:	893b      	ldrh	r3, [r7, #8]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
 800496c:	e015      	b.n	800499a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800496e:	893b      	ldrh	r3, [r7, #8]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	b29b      	uxth	r3, r3
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f883 	bl	8004a8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e012      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f831 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	80002000 	.word	0x80002000

080049c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d007      	beq.n	8004a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	619a      	str	r2, [r3, #24]
  }
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e022      	b.n	8004a64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d01e      	beq.n	8004a64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fd fc61 	bl	80022ec <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d113      	bne.n	8004a64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e00f      	b.n	8004a84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d0cd      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a98:	e02c      	b.n	8004af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f8ea 	bl	8004c78 <I2C_IsErrorOccurred>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e02a      	b.n	8004b04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d01e      	beq.n	8004af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fd fc19 	bl	80022ec <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad0:	f043 0220 	orr.w	r2, r3, #32
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d1cb      	bne.n	8004a9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b18:	e028      	b.n	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f8aa 	bl	8004c78 <I2C_IsErrorOccurred>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e026      	b.n	8004b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fd fbdd 	bl	80022ec <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d113      	bne.n	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e007      	b.n	8004b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d1cf      	bne.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b90:	e064      	b.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f86e 	bl	8004c78 <I2C_IsErrorOccurred>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e062      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d138      	bne.n	8004c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d105      	bne.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e04e      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d107      	bne.n	8004bec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2210      	movs	r2, #16
 8004be2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
 8004bea:	e002      	b.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fd fb61 	bl	80022ec <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d193      	bne.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	fe00e800 	.word	0xfe00e800

08004c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d075      	beq.n	8004d90 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cac:	e056      	b.n	8004d5c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d052      	beq.n	8004d5c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fd fb19 	bl	80022ec <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_IsErrorOccurred+0x54>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d147      	bne.n	8004d5c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cee:	d12e      	bne.n	8004d4e <I2C_IsErrorOccurred+0xd6>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf6:	d02a      	beq.n	8004d4e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d027      	beq.n	8004d4e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d0e:	f7fd faed 	bl	80022ec <HAL_GetTick>
 8004d12:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d14:	e01b      	b.n	8004d4e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d16:	f7fd fae9 	bl	80022ec <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b19      	cmp	r3, #25
 8004d22:	d914      	bls.n	8004d4e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d1dc      	bne.n	8004d16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d003      	beq.n	8004d72 <I2C_IsErrorOccurred+0xfa>
 8004d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d09d      	beq.n	8004cae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f043 0308 	orr.w	r3, r3, #8
 8004dca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff fddc 	bl	80049c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <I2C_IsErrorOccurred+0x1d4>)
 8004e18:	400b      	ands	r3, r1
 8004e1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	fe00e800 	.word	0xfe00e800

08004e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e68:	7a7b      	ldrb	r3, [r7, #9]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e70:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e7e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	0d5b      	lsrs	r3, r3, #21
 8004e8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <I2C_TransferConfig+0x60>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	43db      	mvns	r3, r3
 8004e94:	ea02 0103 	and.w	r1, r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	03ff63ff 	.word	0x03ff63ff

08004eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d138      	bne.n	8004f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e032      	b.n	8004f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2224      	movs	r2, #36	; 0x24
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6819      	ldr	r1, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d139      	bne.n	8004fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e033      	b.n	8004fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2224      	movs	r2, #36	; 0x24
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004fec:	4b29      	ldr	r3, [pc, #164]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d00a      	beq.n	800500e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ff8:	4b26      	ldr	r3, [pc, #152]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e040      	b.n	800508c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	e03e      	b.n	800508c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005016:	491f      	ldr	r1, [pc, #124]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800501e:	f7fd f965 	bl	80022ec <HAL_GetTick>
 8005022:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005024:	e009      	b.n	800503a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005026:	f7fd f961 	bl	80022ec <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005034:	d901      	bls.n	800503a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e028      	b.n	800508c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005046:	d1ee      	bne.n	8005026 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b1e      	cmp	r3, #30
 800504c:	d008      	beq.n	8005060 <HAL_PWREx_ConfigSupply+0x7c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b2e      	cmp	r3, #46	; 0x2e
 8005052:	d005      	beq.n	8005060 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b1d      	cmp	r3, #29
 8005058:	d002      	beq.n	8005060 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b2d      	cmp	r3, #45	; 0x2d
 800505e:	d114      	bne.n	800508a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005060:	f7fd f944 	bl	80022ec <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005066:	e009      	b.n	800507c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005068:	f7fd f940 	bl	80022ec <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005076:	d901      	bls.n	800507c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e007      	b.n	800508c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_PWREx_ConfigSupply+0xb0>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005088:	d1ee      	bne.n	8005068 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	58024800 	.word	0x58024800

08005098 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	; 0x30
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f000 bc1d 	b.w	80058e6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8087 	beq.w	80051c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ba:	4b99      	ldr	r3, [pc, #612]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c4:	4b96      	ldr	r3, [pc, #600]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d007      	beq.n	80050e0 <HAL_RCC_OscConfig+0x48>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b18      	cmp	r3, #24
 80050d4:	d110      	bne.n	80050f8 <HAL_RCC_OscConfig+0x60>
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d10b      	bne.n	80050f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	4b8f      	ldr	r3, [pc, #572]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d06c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x12e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d168      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e3f6      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d106      	bne.n	8005110 <HAL_RCC_OscConfig+0x78>
 8005102:	4b87      	ldr	r3, [pc, #540]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a86      	ldr	r2, [pc, #536]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e02e      	b.n	800516e <HAL_RCC_OscConfig+0xd6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10c      	bne.n	8005132 <HAL_RCC_OscConfig+0x9a>
 8005118:	4b81      	ldr	r3, [pc, #516]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a80      	ldr	r2, [pc, #512]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b7e      	ldr	r3, [pc, #504]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7d      	ldr	r2, [pc, #500]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800512a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e01d      	b.n	800516e <HAL_RCC_OscConfig+0xd6>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800513a:	d10c      	bne.n	8005156 <HAL_RCC_OscConfig+0xbe>
 800513c:	4b78      	ldr	r3, [pc, #480]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a77      	ldr	r2, [pc, #476]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4b75      	ldr	r3, [pc, #468]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a74      	ldr	r2, [pc, #464]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800514e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e00b      	b.n	800516e <HAL_RCC_OscConfig+0xd6>
 8005156:	4b72      	ldr	r3, [pc, #456]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a71      	ldr	r2, [pc, #452]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6e      	ldr	r2, [pc, #440]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d013      	beq.n	800519e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd f8b9 	bl	80022ec <HAL_GetTick>
 800517a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517e:	f7fd f8b5 	bl	80022ec <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	; 0x64
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e3aa      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005190:	4b63      	ldr	r3, [pc, #396]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0xe6>
 800519c:	e014      	b.n	80051c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7fd f8a5 	bl	80022ec <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a6:	f7fd f8a1 	bl	80022ec <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b64      	cmp	r3, #100	; 0x64
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e396      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x10e>
 80051c4:	e000      	b.n	80051c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80cb 	beq.w	800536c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d6:	4b52      	ldr	r3, [pc, #328]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051e0:	4b4f      	ldr	r3, [pc, #316]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <HAL_RCC_OscConfig+0x164>
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b18      	cmp	r3, #24
 80051f0:	d156      	bne.n	80052a0 <HAL_RCC_OscConfig+0x208>
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d151      	bne.n	80052a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fc:	4b48      	ldr	r3, [pc, #288]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_OscConfig+0x17c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e368      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 0219 	bic.w	r2, r3, #25
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	493f      	ldr	r1, [pc, #252]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005226:	f7fd f861 	bl	80022ec <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522e:	f7fd f85d 	bl	80022ec <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e352      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005240:	4b37      	ldr	r3, [pc, #220]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	f7fd f87e 	bl	800234c <HAL_GetREVID>
 8005250:	4603      	mov	r3, r0
 8005252:	f241 0203 	movw	r2, #4099	; 0x1003
 8005256:	4293      	cmp	r3, r2
 8005258:	d817      	bhi.n	800528a <HAL_RCC_OscConfig+0x1f2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d108      	bne.n	8005274 <HAL_RCC_OscConfig+0x1dc>
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800526a:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800526c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005270:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005272:	e07b      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	031b      	lsls	r3, r3, #12
 8005282:	4927      	ldr	r1, [pc, #156]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005288:	e070      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	4921      	ldr	r1, [pc, #132]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800529a:	4313      	orrs	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529e:	e065      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d048      	beq.n	800533a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 0219 	bic.w	r2, r3, #25
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	491a      	ldr	r1, [pc, #104]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fd f817 	bl	80022ec <HAL_GetTick>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c2:	f7fd f813 	bl	80022ec <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e308      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	f7fd f834 	bl	800234c <HAL_GetREVID>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d81a      	bhi.n	8005324 <HAL_RCC_OscConfig+0x28c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d108      	bne.n	8005308 <HAL_RCC_OscConfig+0x270>
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005304:	6053      	str	r3, [r2, #4]
 8005306:	e031      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	4902      	ldr	r1, [pc, #8]	; (8005320 <HAL_RCC_OscConfig+0x288>)
 8005318:	4313      	orrs	r3, r2
 800531a:	604b      	str	r3, [r1, #4]
 800531c:	e026      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400
 8005324:	4b9a      	ldr	r3, [pc, #616]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	4997      	ldr	r1, [pc, #604]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005334:	4313      	orrs	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
 8005338:	e018      	b.n	800536c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533a:	4b95      	ldr	r3, [pc, #596]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a94      	ldr	r2, [pc, #592]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fc ffd1 	bl	80022ec <HAL_GetTick>
 800534a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800534e:	f7fc ffcd 	bl	80022ec <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e2c2      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005360:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80a9 	beq.w	80054cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537a:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005382:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005384:	4b82      	ldr	r3, [pc, #520]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d007      	beq.n	80053a0 <HAL_RCC_OscConfig+0x308>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b18      	cmp	r3, #24
 8005394:	d13a      	bne.n	800540c <HAL_RCC_OscConfig+0x374>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d135      	bne.n	800540c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053a0:	4b7b      	ldr	r3, [pc, #492]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_OscConfig+0x320>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e296      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053b8:	f7fc ffc8 	bl	800234c <HAL_GetREVID>
 80053bc:	4603      	mov	r3, r0
 80053be:	f241 0203 	movw	r2, #4099	; 0x1003
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d817      	bhi.n	80053f6 <HAL_RCC_OscConfig+0x35e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d108      	bne.n	80053e0 <HAL_RCC_OscConfig+0x348>
 80053ce:	4b70      	ldr	r3, [pc, #448]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053d6:	4a6e      	ldr	r2, [pc, #440]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053de:	e075      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053e0:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	069b      	lsls	r3, r3, #26
 80053ee:	4968      	ldr	r1, [pc, #416]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f4:	e06a      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053f6:	4b66      	ldr	r3, [pc, #408]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	4962      	ldr	r1, [pc, #392]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800540a:	e05f      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d042      	beq.n	800549a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fc ff64 	bl	80022ec <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005428:	f7fc ff60 	bl	80022ec <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e255      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005446:	f7fc ff81 	bl	800234c <HAL_GetREVID>
 800544a:	4603      	mov	r3, r0
 800544c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005450:	4293      	cmp	r3, r2
 8005452:	d817      	bhi.n	8005484 <HAL_RCC_OscConfig+0x3ec>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	2b20      	cmp	r3, #32
 800545a:	d108      	bne.n	800546e <HAL_RCC_OscConfig+0x3d6>
 800545c:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005464:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546a:	6053      	str	r3, [r2, #4]
 800546c:	e02e      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
 800546e:	4b48      	ldr	r3, [pc, #288]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	069b      	lsls	r3, r3, #26
 800547c:	4944      	ldr	r1, [pc, #272]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	604b      	str	r3, [r1, #4]
 8005482:	e023      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
 8005484:	4b42      	ldr	r3, [pc, #264]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	493f      	ldr	r1, [pc, #252]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005494:	4313      	orrs	r3, r2
 8005496:	60cb      	str	r3, [r1, #12]
 8005498:	e018      	b.n	80054cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800549a:	4b3d      	ldr	r3, [pc, #244]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3c      	ldr	r2, [pc, #240]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fc ff21 	bl	80022ec <HAL_GetTick>
 80054aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054ae:	f7fc ff1d 	bl	80022ec <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e212      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c0:	4b33      	ldr	r3, [pc, #204]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d036      	beq.n	8005546 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d019      	beq.n	8005514 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e0:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80054e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e4:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fc fefe 	bl	80022ec <HAL_GetTick>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f4:	f7fc fefa 	bl	80022ec <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1ef      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0x45c>
 8005512:	e018      	b.n	8005546 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fc fee4 	bl	80022ec <HAL_GetTick>
 8005524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005528:	f7fc fee0 	bl	80022ec <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e1d5      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d039      	beq.n	80055c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01c      	beq.n	8005594 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005564:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005566:	f7fc fec1 	bl	80022ec <HAL_GetTick>
 800556a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800556e:	f7fc febd 	bl	80022ec <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1b2      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_RCC_OscConfig+0x4f8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x4d6>
 800558c:	e01b      	b.n	80055c6 <HAL_RCC_OscConfig+0x52e>
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005594:	4b9b      	ldr	r3, [pc, #620]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a9a      	ldr	r2, [pc, #616]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800559a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800559e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055a0:	f7fc fea4 	bl	80022ec <HAL_GetTick>
 80055a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055a8:	f7fc fea0 	bl	80022ec <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e195      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055ba:	4b92      	ldr	r3, [pc, #584]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8081 	beq.w	80056d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055d4:	4b8c      	ldr	r3, [pc, #560]	; (8005808 <HAL_RCC_OscConfig+0x770>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a8b      	ldr	r2, [pc, #556]	; (8005808 <HAL_RCC_OscConfig+0x770>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e0:	f7fc fe84 	bl	80022ec <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055e8:	f7fc fe80 	bl	80022ec <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e175      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fa:	4b83      	ldr	r3, [pc, #524]	; (8005808 <HAL_RCC_OscConfig+0x770>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d106      	bne.n	800561c <HAL_RCC_OscConfig+0x584>
 800560e:	4b7d      	ldr	r3, [pc, #500]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a7c      	ldr	r2, [pc, #496]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
 800561a:	e02d      	b.n	8005678 <HAL_RCC_OscConfig+0x5e0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10c      	bne.n	800563e <HAL_RCC_OscConfig+0x5a6>
 8005624:	4b77      	ldr	r3, [pc, #476]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	4b74      	ldr	r3, [pc, #464]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	4a73      	ldr	r2, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005636:	f023 0304 	bic.w	r3, r3, #4
 800563a:	6713      	str	r3, [r2, #112]	; 0x70
 800563c:	e01c      	b.n	8005678 <HAL_RCC_OscConfig+0x5e0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x5c8>
 8005646:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800564c:	f043 0304 	orr.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
 8005652:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a6b      	ldr	r2, [pc, #428]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0x5e0>
 8005660:	4b68      	ldr	r3, [pc, #416]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a67      	ldr	r2, [pc, #412]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b65      	ldr	r3, [pc, #404]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a64      	ldr	r2, [pc, #400]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005672:	f023 0304 	bic.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fc fe34 	bl	80022ec <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fc fe30 	bl	80022ec <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e123      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569e:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ee      	beq.n	8005688 <HAL_RCC_OscConfig+0x5f0>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fc fe1e 	bl	80022ec <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fc fe1a 	bl	80022ec <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e10d      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056ca:	4b4e      	ldr	r3, [pc, #312]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ee      	bne.n	80056b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8102 	beq.w	80058e4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056e0:	4b48      	ldr	r3, [pc, #288]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e8:	2b18      	cmp	r3, #24
 80056ea:	f000 80bd 	beq.w	8005868 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	f040 809e 	bne.w	8005834 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f8:	4b42      	ldr	r3, [pc, #264]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a41      	ldr	r2, [pc, #260]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80056fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fc fdf2 	bl	80022ec <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f7fc fdee 	bl	80022ec <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0e3      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800571e:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800572a:	4b36      	ldr	r3, [pc, #216]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800572c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_RCC_OscConfig+0x774>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	430a      	orrs	r2, r1
 800573e:	4931      	ldr	r1, [pc, #196]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	628b      	str	r3, [r1, #40]	; 0x28
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	3b01      	subs	r3, #1
 800574a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	3b01      	subs	r3, #1
 8005754:	025b      	lsls	r3, r3, #9
 8005756:	b29b      	uxth	r3, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	3b01      	subs	r3, #1
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	3b01      	subs	r3, #1
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005774:	4923      	ldr	r1, [pc, #140]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800577a:	4b22      	ldr	r3, [pc, #136]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005786:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	4b21      	ldr	r3, [pc, #132]	; (8005810 <HAL_RCC_OscConfig+0x778>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005792:	00d2      	lsls	r2, r2, #3
 8005794:	491b      	ldr	r1, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800579a:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f023 020c 	bic.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	4917      	ldr	r1, [pc, #92]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057ac:	4b15      	ldr	r3, [pc, #84]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	f023 0202 	bic.w	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	4912      	ldr	r1, [pc, #72]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	4a10      	ldr	r2, [pc, #64]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a04      	ldr	r2, [pc, #16]	; (8005804 <HAL_RCC_OscConfig+0x76c>)
 80057f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fc fd77 	bl	80022ec <HAL_GetTick>
 80057fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005800:	e011      	b.n	8005826 <HAL_RCC_OscConfig+0x78e>
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
 8005808:	58024800 	.word	0x58024800
 800580c:	fffffc0c 	.word	0xfffffc0c
 8005810:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005814:	f7fc fd6a 	bl	80022ec <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e05f      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x77c>
 8005832:	e057      	b.n	80058e4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005834:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 800583a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fc fd54 	bl	80022ec <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7fc fd50 	bl	80022ec <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e045      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800585a:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x7b0>
 8005866:	e03d      	b.n	80058e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_RCC_OscConfig+0x858>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b01      	cmp	r3, #1
 800587a:	d031      	beq.n	80058e0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f003 0203 	and.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d12a      	bne.n	80058e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d122      	bne.n	80058e0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d11a      	bne.n	80058e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0a5b      	lsrs	r3, r3, #9
 80058ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d111      	bne.n	80058e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d108      	bne.n	80058e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3730      	adds	r7, #48	; 0x30
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	58024400 	.word	0x58024400

080058f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e19c      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b8a      	ldr	r3, [pc, #552]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d910      	bls.n	8005938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b87      	ldr	r3, [pc, #540]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 020f 	bic.w	r2, r3, #15
 800591e:	4985      	ldr	r1, [pc, #532]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e184      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	4b7b      	ldr	r3, [pc, #492]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005950:	429a      	cmp	r2, r3
 8005952:	d908      	bls.n	8005966 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005954:	4b78      	ldr	r3, [pc, #480]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	4975      	ldr	r1, [pc, #468]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005962:	4313      	orrs	r3, r2
 8005964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d010      	beq.n	8005994 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800597e:	429a      	cmp	r2, r3
 8005980:	d908      	bls.n	8005994 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005982:	4b6d      	ldr	r3, [pc, #436]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	496a      	ldr	r1, [pc, #424]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005990:	4313      	orrs	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	4b64      	ldr	r3, [pc, #400]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d908      	bls.n	80059c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059b0:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	495e      	ldr	r1, [pc, #376]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d010      	beq.n	80059f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059da:	429a      	cmp	r2, r3
 80059dc:	d908      	bls.n	80059f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059de:	4b56      	ldr	r3, [pc, #344]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4953      	ldr	r1, [pc, #332]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4b4d      	ldr	r3, [pc, #308]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d908      	bls.n	8005a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b4a      	ldr	r3, [pc, #296]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f023 020f 	bic.w	r2, r3, #15
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4947      	ldr	r1, [pc, #284]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d055      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a2a:	4b43      	ldr	r3, [pc, #268]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4940      	ldr	r1, [pc, #256]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a44:	4b3c      	ldr	r3, [pc, #240]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d121      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e0f6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0ea      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a74:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0de      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0d6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a94:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f023 0207 	bic.w	r2, r3, #7
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4925      	ldr	r1, [pc, #148]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fc fc21 	bl	80022ec <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aae:	f7fc fc1d 	bl	80022ec <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e0be      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d1eb      	bne.n	8005aae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d208      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCC_ClockConfig+0x244>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d214      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 020f 	bic.w	r2, r3, #15
 8005b1a:	4906      	ldr	r1, [pc, #24]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <HAL_RCC_ClockConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e086      	b.n	8005c42 <HAL_RCC_ClockConfig+0x34e>
 8005b34:	52002000 	.word	0x52002000
 8005b38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d010      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d208      	bcs.n	8005b6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b58:	4b3c      	ldr	r3, [pc, #240]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	4939      	ldr	r1, [pc, #228]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	4b34      	ldr	r3, [pc, #208]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d208      	bcs.n	8005b98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b86:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	492e      	ldr	r1, [pc, #184]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d010      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d208      	bcs.n	8005bc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4922      	ldr	r1, [pc, #136]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d208      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4917      	ldr	r1, [pc, #92]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bf4:	f000 f834 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	4912      	ldr	r1, [pc, #72]	; (8005c50 <HAL_RCC_ClockConfig+0x35c>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c12:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <HAL_RCC_ClockConfig+0x358>)
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_RCC_ClockConfig+0x35c>)
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
 8005c28:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <HAL_RCC_ClockConfig+0x360>)
 8005c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <HAL_RCC_ClockConfig+0x364>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c32:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <HAL_RCC_ClockConfig+0x368>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fc fb0e 	bl	8002258 <HAL_InitTick>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	0800e780 	.word	0x0800e780
 8005c54:	24000004 	.word	0x24000004
 8005c58:	24000000 	.word	0x24000000
 8005c5c:	24000028 	.word	0x24000028

08005c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b089      	sub	sp, #36	; 0x24
 8005c64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c66:	4bb3      	ldr	r3, [pc, #716]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6e:	2b18      	cmp	r3, #24
 8005c70:	f200 8155 	bhi.w	8005f1e <HAL_RCC_GetSysClockFreq+0x2be>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ce1 	.word	0x08005ce1
 8005c80:	08005f1f 	.word	0x08005f1f
 8005c84:	08005f1f 	.word	0x08005f1f
 8005c88:	08005f1f 	.word	0x08005f1f
 8005c8c:	08005f1f 	.word	0x08005f1f
 8005c90:	08005f1f 	.word	0x08005f1f
 8005c94:	08005f1f 	.word	0x08005f1f
 8005c98:	08005f1f 	.word	0x08005f1f
 8005c9c:	08005d07 	.word	0x08005d07
 8005ca0:	08005f1f 	.word	0x08005f1f
 8005ca4:	08005f1f 	.word	0x08005f1f
 8005ca8:	08005f1f 	.word	0x08005f1f
 8005cac:	08005f1f 	.word	0x08005f1f
 8005cb0:	08005f1f 	.word	0x08005f1f
 8005cb4:	08005f1f 	.word	0x08005f1f
 8005cb8:	08005f1f 	.word	0x08005f1f
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005f1f 	.word	0x08005f1f
 8005cc4:	08005f1f 	.word	0x08005f1f
 8005cc8:	08005f1f 	.word	0x08005f1f
 8005ccc:	08005f1f 	.word	0x08005f1f
 8005cd0:	08005f1f 	.word	0x08005f1f
 8005cd4:	08005f1f 	.word	0x08005f1f
 8005cd8:	08005f1f 	.word	0x08005f1f
 8005cdc:	08005d13 	.word	0x08005d13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce0:	4b94      	ldr	r3, [pc, #592]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d009      	beq.n	8005d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cec:	4b91      	ldr	r3, [pc, #580]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	4a90      	ldr	r2, [pc, #576]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005cfe:	e111      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d00:	4b8d      	ldr	r3, [pc, #564]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d02:	61bb      	str	r3, [r7, #24]
    break;
 8005d04:	e10e      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d06:	4b8d      	ldr	r3, [pc, #564]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d08:	61bb      	str	r3, [r7, #24]
    break;
 8005d0a:	e10b      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d0e:	61bb      	str	r3, [r7, #24]
    break;
 8005d10:	e108      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d12:	4b88      	ldr	r3, [pc, #544]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d1c:	4b85      	ldr	r3, [pc, #532]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d28:	4b82      	ldr	r3, [pc, #520]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d32:	4b80      	ldr	r3, [pc, #512]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80e1 	beq.w	8005f18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	f000 8083 	beq.w	8005e64 <HAL_RCC_GetSysClockFreq+0x204>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f200 80a1 	bhi.w	8005ea8 <HAL_RCC_GetSysClockFreq+0x248>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x114>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d056      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d72:	e099      	b.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d74:	4b6f      	ldr	r3, [pc, #444]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02d      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d80:	4b6c      	ldr	r3, [pc, #432]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	4a6b      	ldr	r2, [pc, #428]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b62      	ldr	r3, [pc, #392]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005dda:	e087      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e1e:	e065      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e62:	e043      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea6:	e021      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ece:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	0a5b      	lsrs	r3, r3, #9
 8005ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f10:	ee17 3a90 	vmov	r3, s15
 8005f14:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f16:	e005      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    break;
 8005f1c:	e002      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f20:	61bb      	str	r3, [r7, #24]
    break;
 8005f22:	bf00      	nop
  }

  return sysclockfreq;
 8005f24:	69bb      	ldr	r3, [r7, #24]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3724      	adds	r7, #36	; 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	58024400 	.word	0x58024400
 8005f38:	03d09000 	.word	0x03d09000
 8005f3c:	003d0900 	.word	0x003d0900
 8005f40:	007a1200 	.word	0x007a1200
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4af42400 	.word	0x4af42400

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f5a:	f7ff fe81 	bl	8005c60 <HAL_RCC_GetSysClockFreq>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	490f      	ldr	r1, [pc, #60]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f6c:	5ccb      	ldrb	r3, [r1, r3]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_GetHCLKFreq+0x58>)
 8005f90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HAL_RCC_GetHCLKFreq+0x58>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	0800e780 	.word	0x0800e780
 8005fac:	24000004 	.word	0x24000004
 8005fb0:	24000000 	.word	0x24000000

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fb8:	f7ff ffcc 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4904      	ldr	r1, [pc, #16]	; (8005fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	0800e780 	.word	0x0800e780

08005fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fe4:	f7ff ffb6 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	; (8006008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400
 8006008:	0800e780 	.word	0x0800e780

0800600c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006014:	2300      	movs	r3, #0
 8006016:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006018:	2300      	movs	r3, #0
 800601a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03f      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006030:	d02a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006036:	d824      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800603c:	d018      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800603e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006042:	d81e      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604c:	d007      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800604e:	e018      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006050:	4ba3      	ldr	r3, [pc, #652]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4aa2      	ldr	r2, [pc, #648]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800605c:	e015      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	2102      	movs	r1, #2
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f9d5 	bl	8007414 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800606e:	e00c      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	2102      	movs	r1, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fa7e 	bl	8007578 <RCCEx_PLL3_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006080:	e003      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
      break;
 8006086:	e000      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006090:	4b93      	ldr	r3, [pc, #588]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609c:	4990      	ldr	r1, [pc, #576]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	650b      	str	r3, [r1, #80]	; 0x50
 80060a2:	e001      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03d      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d826      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060e7 	.word	0x080060e7
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006111 	.word	0x08006111
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d8:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	4a80      	ldr	r2, [pc, #512]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060e4:	e015      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3304      	adds	r3, #4
 80060ea:	2100      	movs	r1, #0
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 f991 	bl	8007414 <RCCEx_PLL2_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060f6:	e00c      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fa3a 	bl	8007578 <RCCEx_PLL3_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
      break;
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006118:	4b71      	ldr	r3, [pc, #452]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	496e      	ldr	r1, [pc, #440]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	650b      	str	r3, [r1, #80]	; 0x50
 800612a:	e001      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006138:	2b00      	cmp	r3, #0
 800613a:	d042      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006144:	d02b      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d825      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800614c:	2bc0      	cmp	r3, #192	; 0xc0
 800614e:	d028      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006150:	2bc0      	cmp	r3, #192	; 0xc0
 8006152:	d821      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d016      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d81d      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d007      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006164:	e018      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006166:	4b5e      	ldr	r3, [pc, #376]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4a5d      	ldr	r2, [pc, #372]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800616c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006172:	e017      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f94a 	bl	8007414 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006184:	e00e      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3324      	adds	r3, #36	; 0x24
 800618a:	2100      	movs	r1, #0
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f9f3 	bl	8007578 <RCCEx_PLL3_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006196:	e005      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
      break;
 800619c:	e002      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800619e:	bf00      	nop
 80061a0:	e000      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80061a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061aa:	4b4d      	ldr	r3, [pc, #308]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	494a      	ldr	r1, [pc, #296]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	650b      	str	r3, [r1, #80]	; 0x50
 80061bc:	e001      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d049      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d8:	d030      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80061da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061de:	d82a      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061e4:	d02c      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80061e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061ea:	d824      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f0:	d018      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80061f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f6:	d81e      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80061fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006200:	d007      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006202:	e018      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006204:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4a35      	ldr	r2, [pc, #212]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800620a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006210:	e017      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3304      	adds	r3, #4
 8006216:	2100      	movs	r1, #0
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f8fb 	bl	8007414 <RCCEx_PLL2_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006222:	e00e      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f001 f9a4 	bl	8007578 <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006234:	e005      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
      break;
 800623a:	e002      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800623c:	bf00      	nop
 800623e:	e000      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006248:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006256:	4922      	ldr	r1, [pc, #136]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006258:	4313      	orrs	r3, r2
 800625a:	658b      	str	r3, [r1, #88]	; 0x58
 800625c:	e001      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626a:	2b00      	cmp	r3, #0
 800626c:	d04b      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006278:	d030      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800627a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627e:	d82a      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006280:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006284:	d02e      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800628a:	d824      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800628c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006290:	d018      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006296:	d81e      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800629c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062a0:	d007      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80062a2:	e018      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062b0:	e019      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f8ab 	bl	8007414 <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062c2:	e010      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 f954 	bl	8007578 <RCCEx_PLL3_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062d4:	e007      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	75fb      	strb	r3, [r7, #23]
      break;
 80062da:	e004      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80062dc:	bf00      	nop
 80062de:	e002      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062e0:	58024400 	.word	0x58024400
      break;
 80062e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062ec:	4b99      	ldr	r3, [pc, #612]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062fa:	4996      	ldr	r1, [pc, #600]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	658b      	str	r3, [r1, #88]	; 0x58
 8006300:	e001      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d032      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d01c      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800631a:	2b30      	cmp	r3, #48	; 0x30
 800631c:	d817      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d00c      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006322:	2b20      	cmp	r3, #32
 8006324:	d813      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800632a:	2b10      	cmp	r3, #16
 800632c:	d10f      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632e:	4b89      	ldr	r3, [pc, #548]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	4a88      	ldr	r2, [pc, #544]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006338:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800633a:	e00e      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	2102      	movs	r1, #2
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f866 	bl	8007414 <RCCEx_PLL2_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800634c:	e005      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
      break;
 8006352:	e002      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d109      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006360:	4b7c      	ldr	r3, [pc, #496]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636c:	4979      	ldr	r1, [pc, #484]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800636e:	4313      	orrs	r3, r2
 8006370:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006372:	e001      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d047      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638c:	d030      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800638e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006392:	d82a      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006398:	d02c      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800639a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639e:	d824      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80063a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a4:	d018      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063aa:	d81e      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d007      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80063b6:	e018      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b8:	4b66      	ldr	r3, [pc, #408]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063c4:	e017      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f821 	bl	8007414 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063d6:	e00e      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3324      	adds	r3, #36	; 0x24
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f8ca 	bl	8007578 <RCCEx_PLL3_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063e8:	e005      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
      break;
 80063ee:	e002      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80063f0:	bf00      	nop
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80063f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063fc:	4b55      	ldr	r3, [pc, #340]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006400:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	4952      	ldr	r1, [pc, #328]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800640a:	4313      	orrs	r3, r2
 800640c:	650b      	str	r3, [r1, #80]	; 0x50
 800640e:	e001      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d049      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006428:	d02e      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800642a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800642e:	d828      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006434:	d02a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800643a:	d822      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800643c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006440:	d026      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006446:	d81c      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800644c:	d010      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800644e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006452:	d816      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01d      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645c:	d111      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	2101      	movs	r1, #1
 8006464:	4618      	mov	r0, r3
 8006466:	f000 ffd5 	bl	8007414 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800646e:	e012      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f001 f87e 	bl	8007578 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006480:	e009      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	e006      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006488:	bf00      	nop
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800648c:	bf00      	nop
 800648e:	e002      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006490:	bf00      	nop
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d109      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	492a      	ldr	r1, [pc, #168]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	650b      	str	r3, [r1, #80]	; 0x50
 80064ae:	e001      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d04d      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ca:	d02e      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80064cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d0:	d828      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d6:	d02a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d822      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064e2:	d026      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80064e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064e8:	d81c      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ee:	d010      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80064f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f4:	d816      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01d      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80064fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fe:	d111      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ff84 	bl	8007414 <RCCEx_PLL2_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006510:	e012      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3324      	adds	r3, #36	; 0x24
 8006516:	2101      	movs	r1, #1
 8006518:	4618      	mov	r0, r3
 800651a:	f001 f82d 	bl	8007578 <RCCEx_PLL3_Config>
 800651e:	4603      	mov	r3, r0
 8006520:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006522:	e009      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
      break;
 8006528:	e006      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800652a:	bf00      	nop
 800652c:	e004      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006542:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800654c:	4901      	ldr	r1, [pc, #4]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800654e:	4313      	orrs	r3, r2
 8006550:	658b      	str	r3, [r1, #88]	; 0x58
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d02f      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006570:	d00e      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006576:	d814      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d015      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800657c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006580:	d10f      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006582:	4baf      	ldr	r3, [pc, #700]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4aae      	ldr	r2, [pc, #696]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800658e:	e00c      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	2101      	movs	r1, #1
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ff3c 	bl	8007414 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065a0:	e003      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
      break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80065a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065b0:	4ba3      	ldr	r3, [pc, #652]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065bc:	49a0      	ldr	r1, [pc, #640]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	650b      	str	r3, [r1, #80]	; 0x50
 80065c2:	e001      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d032      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d81b      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	0800661b 	.word	0x0800661b
 80065e8:	080065f5 	.word	0x080065f5
 80065ec:	08006603 	.word	0x08006603
 80065f0:	0800661b 	.word	0x0800661b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f4:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4a91      	ldr	r2, [pc, #580]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006600:	e00c      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	2102      	movs	r1, #2
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ff03 	bl	8007414 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006612:	e003      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800661a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006622:	4b87      	ldr	r3, [pc, #540]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006626:	f023 0203 	bic.w	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	4984      	ldr	r1, [pc, #528]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006630:	4313      	orrs	r3, r2
 8006632:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006634:	e001      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8086 	beq.w	8006754 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006648:	4b7e      	ldr	r3, [pc, #504]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a7d      	ldr	r2, [pc, #500]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006654:	f7fb fe4a 	bl	80022ec <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800665a:	e009      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665c:	f7fb fe46 	bl	80022ec <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b64      	cmp	r3, #100	; 0x64
 8006668:	d902      	bls.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	75fb      	strb	r3, [r7, #23]
        break;
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006670:	4b74      	ldr	r3, [pc, #464]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d166      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006682:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800668c:	4053      	eors	r3, r2
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	2b00      	cmp	r3, #0
 8006694:	d013      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006696:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a0:	4b67      	ldr	r3, [pc, #412]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ac:	4b64      	ldr	r3, [pc, #400]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4a63      	ldr	r2, [pc, #396]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066b8:	4a61      	ldr	r2, [pc, #388]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c8:	d115      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ca:	f7fb fe0f 	bl	80022ec <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d0:	e00b      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fb fe0b 	bl	80022ec <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d902      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	75fb      	strb	r3, [r7, #23]
            break;
 80066e8:	e005      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066ea:	4b55      	ldr	r3, [pc, #340]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ed      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d126      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670a:	d10d      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800670c:	4b4c      	ldr	r3, [pc, #304]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800671a:	0919      	lsrs	r1, r3, #4
 800671c:	4b4a      	ldr	r3, [pc, #296]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800671e:	400b      	ands	r3, r1
 8006720:	4947      	ldr	r1, [pc, #284]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006722:	4313      	orrs	r3, r2
 8006724:	610b      	str	r3, [r1, #16]
 8006726:	e005      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006728:	4b45      	ldr	r3, [pc, #276]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	4a44      	ldr	r2, [pc, #272]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800672e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006732:	6113      	str	r3, [r2, #16]
 8006734:	4b42      	ldr	r3, [pc, #264]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006742:	493f      	ldr	r1, [pc, #252]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006744:	4313      	orrs	r3, r2
 8006746:	670b      	str	r3, [r1, #112]	; 0x70
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	75bb      	strb	r3, [r7, #22]
 800674e:	e001      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8085 	beq.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006766:	2b28      	cmp	r3, #40	; 0x28
 8006768:	d866      	bhi.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	0800684d 	.word	0x0800684d
 8006774:	08006839 	.word	0x08006839
 8006778:	08006839 	.word	0x08006839
 800677c:	08006839 	.word	0x08006839
 8006780:	08006839 	.word	0x08006839
 8006784:	08006839 	.word	0x08006839
 8006788:	08006839 	.word	0x08006839
 800678c:	08006839 	.word	0x08006839
 8006790:	08006815 	.word	0x08006815
 8006794:	08006839 	.word	0x08006839
 8006798:	08006839 	.word	0x08006839
 800679c:	08006839 	.word	0x08006839
 80067a0:	08006839 	.word	0x08006839
 80067a4:	08006839 	.word	0x08006839
 80067a8:	08006839 	.word	0x08006839
 80067ac:	08006839 	.word	0x08006839
 80067b0:	08006827 	.word	0x08006827
 80067b4:	08006839 	.word	0x08006839
 80067b8:	08006839 	.word	0x08006839
 80067bc:	08006839 	.word	0x08006839
 80067c0:	08006839 	.word	0x08006839
 80067c4:	08006839 	.word	0x08006839
 80067c8:	08006839 	.word	0x08006839
 80067cc:	08006839 	.word	0x08006839
 80067d0:	0800684d 	.word	0x0800684d
 80067d4:	08006839 	.word	0x08006839
 80067d8:	08006839 	.word	0x08006839
 80067dc:	08006839 	.word	0x08006839
 80067e0:	08006839 	.word	0x08006839
 80067e4:	08006839 	.word	0x08006839
 80067e8:	08006839 	.word	0x08006839
 80067ec:	08006839 	.word	0x08006839
 80067f0:	0800684d 	.word	0x0800684d
 80067f4:	08006839 	.word	0x08006839
 80067f8:	08006839 	.word	0x08006839
 80067fc:	08006839 	.word	0x08006839
 8006800:	08006839 	.word	0x08006839
 8006804:	08006839 	.word	0x08006839
 8006808:	08006839 	.word	0x08006839
 800680c:	08006839 	.word	0x08006839
 8006810:	0800684d 	.word	0x0800684d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fdfa 	bl	8007414 <RCCEx_PLL2_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006824:	e013      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3324      	adds	r3, #36	; 0x24
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fea3 	bl	8007578 <RCCEx_PLL3_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006836:	e00a      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
      break;
 800683c:	e007      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
 8006844:	58024800 	.word	0x58024800
 8006848:	00ffffcf 	.word	0x00ffffcf
      break;
 800684c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d109      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006854:	4b96      	ldr	r3, [pc, #600]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006860:	4993      	ldr	r1, [pc, #588]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006862:	4313      	orrs	r3, r2
 8006864:	654b      	str	r3, [r1, #84]	; 0x54
 8006866:	e001      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d038      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687c:	2b05      	cmp	r3, #5
 800687e:	d821      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068cb 	.word	0x080068cb
 800688c:	080068a1 	.word	0x080068a1
 8006890:	080068b3 	.word	0x080068b3
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068cb 	.word	0x080068cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	2101      	movs	r1, #1
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fdb4 	bl	8007414 <RCCEx_PLL2_Config>
 80068ac:	4603      	mov	r3, r0
 80068ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3324      	adds	r3, #36	; 0x24
 80068b6:	2101      	movs	r1, #1
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fe5d 	bl	8007578 <RCCEx_PLL3_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068c2:	e003      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80068ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068d2:	4b77      	ldr	r3, [pc, #476]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f023 0207 	bic.w	r2, r3, #7
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068de:	4974      	ldr	r1, [pc, #464]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	654b      	str	r3, [r1, #84]	; 0x54
 80068e4:	e001      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03a      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	2b05      	cmp	r3, #5
 80068fe:	d821      	bhi.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800694b 	.word	0x0800694b
 800690c:	08006921 	.word	0x08006921
 8006910:	08006933 	.word	0x08006933
 8006914:	0800694b 	.word	0x0800694b
 8006918:	0800694b 	.word	0x0800694b
 800691c:	0800694b 	.word	0x0800694b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3304      	adds	r3, #4
 8006924:	2101      	movs	r1, #1
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fd74 	bl	8007414 <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006930:	e00c      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	2101      	movs	r1, #1
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fe1d 	bl	8007578 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006942:	e003      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]
      break;
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800694a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006952:	4b57      	ldr	r3, [pc, #348]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	f023 0207 	bic.w	r2, r3, #7
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	4953      	ldr	r1, [pc, #332]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	658b      	str	r3, [r1, #88]	; 0x58
 8006966:	e001      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d04b      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006982:	d02e      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006988:	d828      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698e:	d02a      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d822      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800699a:	d026      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800699c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069a0:	d81c      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a6:	d010      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d816      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01d      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b6:	d111      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fd28 	bl	8007414 <RCCEx_PLL2_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069c8:	e012      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3324      	adds	r3, #36	; 0x24
 80069ce:	2102      	movs	r1, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fdd1 	bl	8007578 <RCCEx_PLL3_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069da:	e009      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	75fb      	strb	r3, [r7, #23]
      break;
 80069e0:	e006      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069e2:	bf00      	nop
 80069e4:	e004      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069e6:	bf00      	nop
 80069e8:	e002      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069f6:	4b2e      	ldr	r3, [pc, #184]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a04:	492a      	ldr	r1, [pc, #168]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	654b      	str	r3, [r1, #84]	; 0x54
 8006a0a:	e001      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d04d      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a26:	d02e      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006a28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a2c:	d828      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d02a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a38:	d822      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a3e:	d026      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a44:	d81c      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4a:	d010      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a50:	d816      	bhi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01d      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d111      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fcd6 	bl	8007414 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a6c:	e012      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3324      	adds	r3, #36	; 0x24
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd7f 	bl	8007578 <RCCEx_PLL3_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a7e:	e009      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	75fb      	strb	r3, [r7, #23]
      break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a86:	bf00      	nop
 8006a88:	e004      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10c      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aa8:	4901      	ldr	r1, [pc, #4]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	658b      	str	r3, [r1, #88]	; 0x58
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d04b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ace:	d02e      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ad0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ad4:	d828      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d02a      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae0:	d822      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006ae2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ae6:	d026      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006ae8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006aec:	d81c      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006aee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af2:	d010      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af8:	d816      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01d      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d111      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fc82 	bl	8007414 <RCCEx_PLL2_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b14:	e012      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fd2b 	bl	8007578 <RCCEx_PLL3_Config>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b26:	e009      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	e006      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b2e:	bf00      	nop
 8006b30:	e004      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b42:	4b9d      	ldr	r3, [pc, #628]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b50:	4999      	ldr	r1, [pc, #612]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	658b      	str	r3, [r1, #88]	; 0x58
 8006b56:	e001      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b72:	d10a      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fcfc 	bl	8007578 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b8a:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b98:	4987      	ldr	r1, [pc, #540]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb4:	d10a      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3324      	adds	r3, #36	; 0x24
 8006bba:	2102      	movs	r1, #2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fcdb 	bl	8007578 <RCCEx_PLL3_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bcc:	4b7a      	ldr	r3, [pc, #488]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bda:	4977      	ldr	r1, [pc, #476]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d034      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf6:	d01d      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfc:	d817      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c06:	d009      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006c08:	e011      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fbff 	bl	8007414 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c1a:	e00c      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	2102      	movs	r1, #2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fca8 	bl	8007578 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3c:	4b5e      	ldr	r3, [pc, #376]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c4a:	495b      	ldr	r1, [pc, #364]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	658b      	str	r3, [r1, #88]	; 0x58
 8006c50:	e001      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d033      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6c:	d01c      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006c6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c72:	d816      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c7e:	d007      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006c80:	e00f      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4b4d      	ldr	r3, [pc, #308]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	4a4c      	ldr	r2, [pc, #304]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c8e:	e00c      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fc6e 	bl	8007578 <RCCEx_PLL3_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cb0:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cbe:	493e      	ldr	r1, [pc, #248]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	654b      	str	r3, [r1, #84]	; 0x54
 8006cc4:	e001      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d029      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce2:	d007      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006ce4:	e00f      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce6:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006cf2:	e00b      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fb8a 	bl	8007414 <RCCEx_PLL2_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d12:	4b29      	ldr	r3, [pc, #164]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	4926      	ldr	r1, [pc, #152]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d24:	e001      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fc1b 	bl	8007578 <RCCEx_PLL3_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d033      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d60:	d017      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d66:	d811      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d013      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d72:	d80b      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4a0d      	ldr	r2, [pc, #52]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d8a:	e007      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d90:	e004      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dae:	4902      	ldr	r1, [pc, #8]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	654b      	str	r3, [r1, #84]	; 0x54
 8006db4:	e004      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006db6:	bf00      	nop
 8006db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006dcc:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	492e      	ldr	r1, [pc, #184]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006dea:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df8:	4926      	ldr	r1, [pc, #152]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e0a:	4b22      	ldr	r3, [pc, #136]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e16:	491f      	ldr	r1, [pc, #124]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00d      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e28:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	4a19      	ldr	r2, [pc, #100]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e32:	6113      	str	r3, [r2, #16]
 8006e34:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e3e:	4915      	ldr	r1, [pc, #84]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da08      	bge.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e4c:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e58:	490e      	ldr	r1, [pc, #56]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	4906      	ldr	r1, [pc, #24]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006e7e:	7dbb      	ldrb	r3, [r7, #22]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	58024400 	.word	0x58024400

08006e98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e9c:	f7ff f85a 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	091b      	lsrs	r3, r3, #4
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006eae:	5ccb      	ldrb	r3, [r1, r3]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	0800e780 	.word	0x0800e780

08006ec4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ecc:	4ba1      	ldr	r3, [pc, #644]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ed6:	4b9f      	ldr	r3, [pc, #636]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	0b1b      	lsrs	r3, r3, #12
 8006edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ee2:	4b9c      	ldr	r3, [pc, #624]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006eee:	4b99      	ldr	r3, [pc, #612]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	08db      	lsrs	r3, r3, #3
 8006ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8111 	beq.w	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	f000 8083 	beq.w	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	f200 80a1 	bhi.w	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d056      	beq.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f2e:	e099      	b.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f30:	4b88      	ldr	r3, [pc, #544]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d02d      	beq.n	8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f3c:	4b85      	ldr	r3, [pc, #532]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	08db      	lsrs	r3, r3, #3
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	4a84      	ldr	r2, [pc, #528]	; (8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	4b7b      	ldr	r3, [pc, #492]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f96:	e087      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007160 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b6a      	ldr	r3, [pc, #424]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fda:	e065      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b59      	ldr	r3, [pc, #356]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800701e:	e043      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007168 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b48      	ldr	r3, [pc, #288]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007062:	e021      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b37      	ldr	r3, [pc, #220]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a03 	vldr	s12, [r7, #12]
 800708a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80070a8:	4b2a      	ldr	r3, [pc, #168]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	0a5b      	lsrs	r3, r3, #9
 80070ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ce:	ee17 2a90 	vmov	r2, s15
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80070d6:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fc:	ee17 2a90 	vmov	r2, s15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007104:	4b13      	ldr	r3, [pc, #76]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	0e1b      	lsrs	r3, r3, #24
 800710a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800711a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800711e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800712a:	ee17 2a90 	vmov	r2, s15
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007132:	e008      	b.n	8007146 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]
}
 8007146:	bf00      	nop
 8007148:	3724      	adds	r7, #36	; 0x24
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	58024400 	.word	0x58024400
 8007158:	03d09000 	.word	0x03d09000
 800715c:	46000000 	.word	0x46000000
 8007160:	4c742400 	.word	0x4c742400
 8007164:	4a742400 	.word	0x4a742400
 8007168:	4af42400 	.word	0x4af42400

0800716c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800716c:	b480      	push	{r7}
 800716e:	b089      	sub	sp, #36	; 0x24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007174:	4ba1      	ldr	r3, [pc, #644]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800717e:	4b9f      	ldr	r3, [pc, #636]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	0d1b      	lsrs	r3, r3, #20
 8007184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007188:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800718a:	4b9c      	ldr	r3, [pc, #624]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007196:	4b99      	ldr	r3, [pc, #612]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8111 	beq.w	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f000 8083 	beq.w	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f200 80a1 	bhi.w	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d056      	beq.n	8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071d6:	e099      	b.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d8:	4b88      	ldr	r3, [pc, #544]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02d      	beq.n	8007240 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e4:	4b85      	ldr	r3, [pc, #532]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a84      	ldr	r2, [pc, #528]	; (8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071f0:	fa22 f303 	lsr.w	r3, r2, r3
 80071f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800723e:	e087      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b6a      	ldr	r3, [pc, #424]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007282:	e065      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b59      	ldr	r3, [pc, #356]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c6:	e043      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b48      	ldr	r3, [pc, #288]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730a:	e021      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b37      	ldr	r3, [pc, #220]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007350:	4b2a      	ldr	r3, [pc, #168]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	0a5b      	lsrs	r3, r3, #9
 8007356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736a:	edd7 6a07 	vldr	s13, [r7, #28]
 800736e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007376:	ee17 2a90 	vmov	r2, s15
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800737e:	4b1f      	ldr	r3, [pc, #124]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007388:	ee07 3a90 	vmov	s15, r3
 800738c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007398:	edd7 6a07 	vldr	s13, [r7, #28]
 800739c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a4:	ee17 2a90 	vmov	r2, s15
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d2:	ee17 2a90 	vmov	r2, s15
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073da:	e008      	b.n	80073ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	609a      	str	r2, [r3, #8]
}
 80073ee:	bf00      	nop
 80073f0:	3724      	adds	r7, #36	; 0x24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	58024400 	.word	0x58024400
 8007400:	03d09000 	.word	0x03d09000
 8007404:	46000000 	.word	0x46000000
 8007408:	4c742400 	.word	0x4c742400
 800740c:	4a742400 	.word	0x4a742400
 8007410:	4af42400 	.word	0x4af42400

08007414 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007422:	4b53      	ldr	r3, [pc, #332]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d101      	bne.n	8007432 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e099      	b.n	8007566 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007432:	4b4f      	ldr	r3, [pc, #316]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a4e      	ldr	r2, [pc, #312]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007438:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800743c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743e:	f7fa ff55 	bl	80022ec <HAL_GetTick>
 8007442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007444:	e008      	b.n	8007458 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007446:	f7fa ff51 	bl	80022ec <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e086      	b.n	8007566 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007458:	4b45      	ldr	r3, [pc, #276]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f0      	bne.n	8007446 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	493f      	ldr	r1, [pc, #252]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007474:	4313      	orrs	r3, r2
 8007476:	628b      	str	r3, [r1, #40]	; 0x28
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	025b      	lsls	r3, r3, #9
 800748a:	b29b      	uxth	r3, r3
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	3b01      	subs	r3, #1
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	061b      	lsls	r3, r3, #24
 80074a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074a8:	4931      	ldr	r1, [pc, #196]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074ae:	4b30      	ldr	r3, [pc, #192]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	492d      	ldr	r1, [pc, #180]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074c0:	4b2b      	ldr	r3, [pc, #172]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f023 0220 	bic.w	r2, r3, #32
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	4928      	ldr	r1, [pc, #160]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074d2:	4b27      	ldr	r3, [pc, #156]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	4a26      	ldr	r2, [pc, #152]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074d8:	f023 0310 	bic.w	r3, r3, #16
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e2:	4b24      	ldr	r3, [pc, #144]	; (8007574 <RCCEx_PLL2_Config+0x160>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	69d2      	ldr	r2, [r2, #28]
 80074ea:	00d2      	lsls	r2, r2, #3
 80074ec:	4920      	ldr	r1, [pc, #128]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074f2:	4b1f      	ldr	r3, [pc, #124]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	f043 0310 	orr.w	r3, r3, #16
 80074fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007504:	4b1a      	ldr	r3, [pc, #104]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4a19      	ldr	r2, [pc, #100]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800750a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007510:	e00f      	b.n	8007532 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d106      	bne.n	8007526 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007518:	4b15      	ldr	r3, [pc, #84]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4a14      	ldr	r2, [pc, #80]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800751e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007524:	e005      	b.n	8007532 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752a:	4a11      	ldr	r2, [pc, #68]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800752c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007532:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a0e      	ldr	r2, [pc, #56]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 8007538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800753c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753e:	f7fa fed5 	bl	80022ec <HAL_GetTick>
 8007542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007544:	e008      	b.n	8007558 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007546:	f7fa fed1 	bl	80022ec <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e006      	b.n	8007566 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007558:	4b05      	ldr	r3, [pc, #20]	; (8007570 <RCCEx_PLL2_Config+0x15c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	58024400 	.word	0x58024400
 8007574:	ffff0007 	.word	0xffff0007

08007578 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007586:	4b53      	ldr	r3, [pc, #332]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d101      	bne.n	8007596 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e099      	b.n	80076ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007596:	4b4f      	ldr	r3, [pc, #316]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a4e      	ldr	r2, [pc, #312]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800759c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a2:	f7fa fea3 	bl	80022ec <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075a8:	e008      	b.n	80075bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075aa:	f7fa fe9f 	bl	80022ec <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e086      	b.n	80076ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075bc:	4b45      	ldr	r3, [pc, #276]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	051b      	lsls	r3, r3, #20
 80075d6:	493f      	ldr	r1, [pc, #252]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	628b      	str	r3, [r1, #40]	; 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	025b      	lsls	r3, r3, #9
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	3b01      	subs	r3, #1
 8007606:	061b      	lsls	r3, r3, #24
 8007608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800760c:	4931      	ldr	r1, [pc, #196]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007612:	4b30      	ldr	r3, [pc, #192]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	492d      	ldr	r1, [pc, #180]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007624:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	4a26      	ldr	r2, [pc, #152]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800763c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <RCCEx_PLL3_Config+0x160>)
 8007648:	4013      	ands	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	69d2      	ldr	r2, [r2, #28]
 800764e:	00d2      	lsls	r2, r2, #3
 8007650:	4920      	ldr	r1, [pc, #128]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800765c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800766e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007674:	e00f      	b.n	8007696 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d106      	bne.n	800768a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007688:	e005      	b.n	8007696 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007696:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 800769c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a2:	f7fa fe23 	bl	80022ec <HAL_GetTick>
 80076a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076a8:	e008      	b.n	80076bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076aa:	f7fa fe1f 	bl	80022ec <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e006      	b.n	80076ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <RCCEx_PLL3_Config+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	ffff0007 	.word	0xffff0007

080076dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e049      	b.n	8007782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fa fa9c 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f000 fde2 	bl	80082e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	d001      	beq.n	80077a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e04c      	b.n	800783e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a26      	ldr	r2, [pc, #152]	; (800784c <HAL_TIM_Base_Start+0xc0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d01d      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_TIM_Base_Start+0xc4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a21      	ldr	r2, [pc, #132]	; (8007854 <HAL_TIM_Base_Start+0xc8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <HAL_TIM_Base_Start+0xcc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1e      	ldr	r2, [pc, #120]	; (800785c <HAL_TIM_Base_Start+0xd0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <HAL_TIM_Base_Start+0xd4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_TIM_Base_Start+0x70>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <HAL_TIM_Base_Start+0xd8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d115      	bne.n	8007828 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_TIM_Base_Start+0xdc>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b06      	cmp	r3, #6
 800780c:	d015      	beq.n	800783a <HAL_TIM_Base_Start+0xae>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d011      	beq.n	800783a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007826:	e008      	b.n	800783a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	e000      	b.n	800783c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40001800 	.word	0x40001800
 8007864:	40014000 	.word	0x40014000
 8007868:	00010007 	.word	0x00010007

0800786c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d001      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e054      	b.n	800792e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a26      	ldr	r2, [pc, #152]	; (800793c <HAL_TIM_Base_Start_IT+0xd0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d01d      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a22      	ldr	r2, [pc, #136]	; (8007940 <HAL_TIM_Base_Start_IT+0xd4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a21      	ldr	r2, [pc, #132]	; (8007944 <HAL_TIM_Base_Start_IT+0xd8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1f      	ldr	r2, [pc, #124]	; (8007948 <HAL_TIM_Base_Start_IT+0xdc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <HAL_TIM_Base_Start_IT+0xe0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1c      	ldr	r2, [pc, #112]	; (8007950 <HAL_TIM_Base_Start_IT+0xe4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <HAL_TIM_Base_Start_IT+0xe8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d115      	bne.n	8007918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_TIM_Base_Start_IT+0xec>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d015      	beq.n	800792a <HAL_TIM_Base_Start_IT+0xbe>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007904:	d011      	beq.n	800792a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007916:	e008      	b.n	800792a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e000      	b.n	800792c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	40010000 	.word	0x40010000
 8007940:	40000400 	.word	0x40000400
 8007944:	40000800 	.word	0x40000800
 8007948:	40000c00 	.word	0x40000c00
 800794c:	40010400 	.word	0x40010400
 8007950:	40001800 	.word	0x40001800
 8007954:	40014000 	.word	0x40014000
 8007958:	00010007 	.word	0x00010007

0800795c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e049      	b.n	8007a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f841 	bl	8007a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f000 fca2 	bl	80082e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <HAL_TIM_PWM_Start+0x24>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e03c      	b.n	8007abe <HAL_TIM_PWM_Start+0x9e>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d109      	bne.n	8007a5e <HAL_TIM_PWM_Start+0x3e>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	e02f      	b.n	8007abe <HAL_TIM_PWM_Start+0x9e>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d109      	bne.n	8007a78 <HAL_TIM_PWM_Start+0x58>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	bf14      	ite	ne
 8007a70:	2301      	movne	r3, #1
 8007a72:	2300      	moveq	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	e022      	b.n	8007abe <HAL_TIM_PWM_Start+0x9e>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b0c      	cmp	r3, #12
 8007a7c:	d109      	bne.n	8007a92 <HAL_TIM_PWM_Start+0x72>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	bf14      	ite	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	2300      	moveq	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	e015      	b.n	8007abe <HAL_TIM_PWM_Start+0x9e>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d109      	bne.n	8007aac <HAL_TIM_PWM_Start+0x8c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	bf14      	ite	ne
 8007aa4:	2301      	movne	r3, #1
 8007aa6:	2300      	moveq	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	e008      	b.n	8007abe <HAL_TIM_PWM_Start+0x9e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e0a1      	b.n	8007c0a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_PWM_Start+0xb6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad4:	e023      	b.n	8007b1e <HAL_TIM_PWM_Start+0xfe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0xc6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ae4:	e01b      	b.n	8007b1e <HAL_TIM_PWM_Start+0xfe>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start+0xd6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007af4:	e013      	b.n	8007b1e <HAL_TIM_PWM_Start+0xfe>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b0c      	cmp	r3, #12
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_PWM_Start+0xe6>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b04:	e00b      	b.n	8007b1e <HAL_TIM_PWM_Start+0xfe>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d104      	bne.n	8007b16 <HAL_TIM_PWM_Start+0xf6>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b14:	e003      	b.n	8007b1e <HAL_TIM_PWM_Start+0xfe>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2201      	movs	r2, #1
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 ffea 	bl	8008b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a38      	ldr	r2, [pc, #224]	; (8007c14 <HAL_TIM_PWM_Start+0x1f4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_TIM_PWM_Start+0x13e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a37      	ldr	r2, [pc, #220]	; (8007c18 <HAL_TIM_PWM_Start+0x1f8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIM_PWM_Start+0x13e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a35      	ldr	r2, [pc, #212]	; (8007c1c <HAL_TIM_PWM_Start+0x1fc>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_TIM_PWM_Start+0x13e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a34      	ldr	r2, [pc, #208]	; (8007c20 <HAL_TIM_PWM_Start+0x200>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIM_PWM_Start+0x13e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a32      	ldr	r2, [pc, #200]	; (8007c24 <HAL_TIM_PWM_Start+0x204>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_Start+0x142>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_PWM_Start+0x144>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a25      	ldr	r2, [pc, #148]	; (8007c14 <HAL_TIM_PWM_Start+0x1f4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d022      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8a:	d01d      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <HAL_TIM_PWM_Start+0x208>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <HAL_TIM_PWM_Start+0x20c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d013      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <HAL_TIM_PWM_Start+0x210>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1a      	ldr	r2, [pc, #104]	; (8007c18 <HAL_TIM_PWM_Start+0x1f8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <HAL_TIM_PWM_Start+0x214>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x1a8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <HAL_TIM_PWM_Start+0x1fc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d115      	bne.n	8007bf4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <HAL_TIM_PWM_Start+0x218>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d015      	beq.n	8007c06 <HAL_TIM_PWM_Start+0x1e6>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be0:	d011      	beq.n	8007c06 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0201 	orr.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf2:	e008      	b.n	8007c06 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e000      	b.n	8007c08 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40010400 	.word	0x40010400
 8007c1c:	40014000 	.word	0x40014000
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	40001800 	.word	0x40001800
 8007c38:	00010007 	.word	0x00010007

08007c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0202 	mvn.w	r2, #2
 8007c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fb12 	bl	80082a8 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb04 	bl	8008294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb15 	bl	80082bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0204 	mvn.w	r2, #4
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fae8 	bl	80082a8 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fada 	bl	8008294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 faeb 	bl	80082bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d122      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d11b      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0208 	mvn.w	r2, #8
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2204      	movs	r2, #4
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fabe 	bl	80082a8 <HAL_TIM_IC_CaptureCallback>
 8007d2c:	e005      	b.n	8007d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fab0 	bl	8008294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fac1 	bl	80082bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0310 	and.w	r3, r3, #16
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	d122      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d11b      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0210 	mvn.w	r2, #16
 8007d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2208      	movs	r2, #8
 8007d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa94 	bl	80082a8 <HAL_TIM_IC_CaptureCallback>
 8007d80:	e005      	b.n	8007d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa86 	bl	8008294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa97 	bl	80082bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d10e      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d107      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0201 	mvn.w	r2, #1
 8007db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7f9 fc44 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d10e      	bne.n	8007dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd8:	2b80      	cmp	r3, #128	; 0x80
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 ffc6 	bl	8008d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	d10e      	bne.n	8007e1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e06:	2b80      	cmp	r3, #128	; 0x80
 8007e08:	d107      	bne.n	8007e1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ffb9 	bl	8008d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d10e      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b40      	cmp	r3, #64	; 0x40
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa45 	bl	80082d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d10e      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d107      	bne.n	8007e72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f06f 0220 	mvn.w	r2, #32
 8007e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 ff79 	bl	8008d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e0ff      	b.n	800809a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b14      	cmp	r3, #20
 8007ea6:	f200 80f0 	bhi.w	800808a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	0800808b 	.word	0x0800808b
 8007eb8:	0800808b 	.word	0x0800808b
 8007ebc:	0800808b 	.word	0x0800808b
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	0800808b 	.word	0x0800808b
 8007ec8:	0800808b 	.word	0x0800808b
 8007ecc:	0800808b 	.word	0x0800808b
 8007ed0:	08007f87 	.word	0x08007f87
 8007ed4:	0800808b 	.word	0x0800808b
 8007ed8:	0800808b 	.word	0x0800808b
 8007edc:	0800808b 	.word	0x0800808b
 8007ee0:	08007fc7 	.word	0x08007fc7
 8007ee4:	0800808b 	.word	0x0800808b
 8007ee8:	0800808b 	.word	0x0800808b
 8007eec:	0800808b 	.word	0x0800808b
 8007ef0:	08008009 	.word	0x08008009
 8007ef4:	0800808b 	.word	0x0800808b
 8007ef8:	0800808b 	.word	0x0800808b
 8007efc:	0800808b 	.word	0x0800808b
 8007f00:	08008049 	.word	0x08008049
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fa84 	bl	8008418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0208 	orr.w	r2, r2, #8
 8007f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0204 	bic.w	r2, r2, #4
 8007f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6999      	ldr	r1, [r3, #24]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	619a      	str	r2, [r3, #24]
      break;
 8007f42:	e0a5      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 faf4 	bl	8008538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6999      	ldr	r1, [r3, #24]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	021a      	lsls	r2, r3, #8
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	619a      	str	r2, [r3, #24]
      break;
 8007f84:	e084      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fb5d 	bl	800864c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0208 	orr.w	r2, r2, #8
 8007fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0204 	bic.w	r2, r2, #4
 8007fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69d9      	ldr	r1, [r3, #28]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	61da      	str	r2, [r3, #28]
      break;
 8007fc4:	e064      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fbc5 	bl	800875c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69d9      	ldr	r1, [r3, #28]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	021a      	lsls	r2, r3, #8
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	61da      	str	r2, [r3, #28]
      break;
 8008006:	e043      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fc0e 	bl	8008830 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0208 	orr.w	r2, r2, #8
 8008022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0204 	bic.w	r2, r2, #4
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008046:	e023      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fc52 	bl	80088f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008072:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	021a      	lsls	r2, r3, #8
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008088:	e002      	b.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	75fb      	strb	r3, [r7, #23]
      break;
 800808e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_ConfigClockSource+0x1c>
 80080bc:	2302      	movs	r3, #2
 80080be:	e0dc      	b.n	800827a <HAL_TIM_ConfigClockSource+0x1d6>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	4b6a      	ldr	r3, [pc, #424]	; (8008284 <HAL_TIM_ConfigClockSource+0x1e0>)
 80080dc:	4013      	ands	r3, r2
 80080de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a64      	ldr	r2, [pc, #400]	; (8008288 <HAL_TIM_ConfigClockSource+0x1e4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	f000 80a9 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 80080fc:	4a62      	ldr	r2, [pc, #392]	; (8008288 <HAL_TIM_ConfigClockSource+0x1e4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	f200 80ae 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008104:	4a61      	ldr	r2, [pc, #388]	; (800828c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008106:	4293      	cmp	r3, r2
 8008108:	f000 80a1 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 800810c:	4a5f      	ldr	r2, [pc, #380]	; (800828c <HAL_TIM_ConfigClockSource+0x1e8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	f200 80a6 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008114:	4a5e      	ldr	r2, [pc, #376]	; (8008290 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f000 8099 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 800811c:	4a5c      	ldr	r2, [pc, #368]	; (8008290 <HAL_TIM_ConfigClockSource+0x1ec>)
 800811e:	4293      	cmp	r3, r2
 8008120:	f200 809e 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008124:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008128:	f000 8091 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 800812c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008130:	f200 8096 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008138:	f000 8089 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 800813c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008140:	f200 808e 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008148:	d03e      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x124>
 800814a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814e:	f200 8087 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	f000 8086 	beq.w	8008266 <HAL_TIM_ConfigClockSource+0x1c2>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d87f      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008160:	2b70      	cmp	r3, #112	; 0x70
 8008162:	d01a      	beq.n	800819a <HAL_TIM_ConfigClockSource+0xf6>
 8008164:	2b70      	cmp	r3, #112	; 0x70
 8008166:	d87b      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008168:	2b60      	cmp	r3, #96	; 0x60
 800816a:	d050      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x16a>
 800816c:	2b60      	cmp	r3, #96	; 0x60
 800816e:	d877      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008170:	2b50      	cmp	r3, #80	; 0x50
 8008172:	d03c      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x14a>
 8008174:	2b50      	cmp	r3, #80	; 0x50
 8008176:	d873      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d058      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x18a>
 800817c:	2b40      	cmp	r3, #64	; 0x40
 800817e:	d86f      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008180:	2b30      	cmp	r3, #48	; 0x30
 8008182:	d064      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 8008184:	2b30      	cmp	r3, #48	; 0x30
 8008186:	d86b      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008188:	2b20      	cmp	r3, #32
 800818a:	d060      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 800818c:	2b20      	cmp	r3, #32
 800818e:	d867      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d05c      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 8008194:	2b10      	cmp	r3, #16
 8008196:	d05a      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x1aa>
 8008198:	e062      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f000 fc89 	bl	8008ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
      break;
 80081c6:	e04f      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6899      	ldr	r1, [r3, #8]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 fc72 	bl	8008ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ea:	609a      	str	r2, [r3, #8]
      break;
 80081ec:	e03c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 fbe2 	bl	80089c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2150      	movs	r1, #80	; 0x50
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fc3c 	bl	8008a84 <TIM_ITRx_SetConfig>
      break;
 800820c:	e02c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 fc01 	bl	8008a22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2160      	movs	r1, #96	; 0x60
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fc2c 	bl	8008a84 <TIM_ITRx_SetConfig>
      break;
 800822c:	e01c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	f000 fbc2 	bl	80089c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2140      	movs	r1, #64	; 0x40
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fc1c 	bl	8008a84 <TIM_ITRx_SetConfig>
      break;
 800824c:	e00c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f000 fc13 	bl	8008a84 <TIM_ITRx_SetConfig>
      break;
 800825e:	e003      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      break;
 8008264:	e000      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	ffceff88 	.word	0xffceff88
 8008288:	00100040 	.word	0x00100040
 800828c:	00100030 	.word	0x00100030
 8008290:	00100020 	.word	0x00100020

08008294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a40      	ldr	r2, [pc, #256]	; (80083f8 <TIM_Base_SetConfig+0x114>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d013      	beq.n	8008324 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008302:	d00f      	beq.n	8008324 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3d      	ldr	r2, [pc, #244]	; (80083fc <TIM_Base_SetConfig+0x118>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3c      	ldr	r2, [pc, #240]	; (8008400 <TIM_Base_SetConfig+0x11c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_Base_SetConfig+0x40>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a3b      	ldr	r2, [pc, #236]	; (8008404 <TIM_Base_SetConfig+0x120>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_Base_SetConfig+0x40>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a3a      	ldr	r2, [pc, #232]	; (8008408 <TIM_Base_SetConfig+0x124>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d108      	bne.n	8008336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2f      	ldr	r2, [pc, #188]	; (80083f8 <TIM_Base_SetConfig+0x114>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01f      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d01b      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <TIM_Base_SetConfig+0x118>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d017      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2b      	ldr	r2, [pc, #172]	; (8008400 <TIM_Base_SetConfig+0x11c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d013      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2a      	ldr	r2, [pc, #168]	; (8008404 <TIM_Base_SetConfig+0x120>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00f      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a29      	ldr	r2, [pc, #164]	; (8008408 <TIM_Base_SetConfig+0x124>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00b      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a28      	ldr	r2, [pc, #160]	; (800840c <TIM_Base_SetConfig+0x128>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d007      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a27      	ldr	r2, [pc, #156]	; (8008410 <TIM_Base_SetConfig+0x12c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_Base_SetConfig+0x9a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a26      	ldr	r2, [pc, #152]	; (8008414 <TIM_Base_SetConfig+0x130>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d108      	bne.n	8008390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a10      	ldr	r2, [pc, #64]	; (80083f8 <TIM_Base_SetConfig+0x114>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00f      	beq.n	80083dc <TIM_Base_SetConfig+0xf8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <TIM_Base_SetConfig+0x124>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_Base_SetConfig+0xf8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <TIM_Base_SetConfig+0x128>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_Base_SetConfig+0xf8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a10      	ldr	r2, [pc, #64]	; (8008410 <TIM_Base_SetConfig+0x12c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_Base_SetConfig+0xf8>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <TIM_Base_SetConfig+0x130>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d103      	bne.n	80083e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	615a      	str	r2, [r3, #20]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40010400 	.word	0x40010400
 800840c:	40014000 	.word	0x40014000
 8008410:	40014400 	.word	0x40014400
 8008414:	40014800 	.word	0x40014800

08008418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f023 0201 	bic.w	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4b37      	ldr	r3, [pc, #220]	; (8008520 <TIM_OC1_SetConfig+0x108>)
 8008444:	4013      	ands	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 0302 	bic.w	r3, r3, #2
 8008460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a2d      	ldr	r2, [pc, #180]	; (8008524 <TIM_OC1_SetConfig+0x10c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00f      	beq.n	8008494 <TIM_OC1_SetConfig+0x7c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a2c      	ldr	r2, [pc, #176]	; (8008528 <TIM_OC1_SetConfig+0x110>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00b      	beq.n	8008494 <TIM_OC1_SetConfig+0x7c>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a2b      	ldr	r2, [pc, #172]	; (800852c <TIM_OC1_SetConfig+0x114>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d007      	beq.n	8008494 <TIM_OC1_SetConfig+0x7c>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a2a      	ldr	r2, [pc, #168]	; (8008530 <TIM_OC1_SetConfig+0x118>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_OC1_SetConfig+0x7c>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a29      	ldr	r2, [pc, #164]	; (8008534 <TIM_OC1_SetConfig+0x11c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d10c      	bne.n	80084ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f023 0308 	bic.w	r3, r3, #8
 800849a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 0304 	bic.w	r3, r3, #4
 80084ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a1c      	ldr	r2, [pc, #112]	; (8008524 <TIM_OC1_SetConfig+0x10c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00f      	beq.n	80084d6 <TIM_OC1_SetConfig+0xbe>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a1b      	ldr	r2, [pc, #108]	; (8008528 <TIM_OC1_SetConfig+0x110>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00b      	beq.n	80084d6 <TIM_OC1_SetConfig+0xbe>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a1a      	ldr	r2, [pc, #104]	; (800852c <TIM_OC1_SetConfig+0x114>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d007      	beq.n	80084d6 <TIM_OC1_SetConfig+0xbe>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a19      	ldr	r2, [pc, #100]	; (8008530 <TIM_OC1_SetConfig+0x118>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d003      	beq.n	80084d6 <TIM_OC1_SetConfig+0xbe>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a18      	ldr	r2, [pc, #96]	; (8008534 <TIM_OC1_SetConfig+0x11c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d111      	bne.n	80084fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	fffeff8f 	.word	0xfffeff8f
 8008524:	40010000 	.word	0x40010000
 8008528:	40010400 	.word	0x40010400
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0210 	bic.w	r2, r3, #16
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4b34      	ldr	r3, [pc, #208]	; (8008634 <TIM_OC2_SetConfig+0xfc>)
 8008564:	4013      	ands	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f023 0320 	bic.w	r3, r3, #32
 8008582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a29      	ldr	r2, [pc, #164]	; (8008638 <TIM_OC2_SetConfig+0x100>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC2_SetConfig+0x68>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a28      	ldr	r2, [pc, #160]	; (800863c <TIM_OC2_SetConfig+0x104>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10d      	bne.n	80085bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <TIM_OC2_SetConfig+0x100>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00f      	beq.n	80085e4 <TIM_OC2_SetConfig+0xac>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a1d      	ldr	r2, [pc, #116]	; (800863c <TIM_OC2_SetConfig+0x104>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_OC2_SetConfig+0xac>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <TIM_OC2_SetConfig+0x108>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC2_SetConfig+0xac>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a1b      	ldr	r2, [pc, #108]	; (8008644 <TIM_OC2_SetConfig+0x10c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC2_SetConfig+0xac>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a1a      	ldr	r2, [pc, #104]	; (8008648 <TIM_OC2_SetConfig+0x110>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d113      	bne.n	800860c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	feff8fff 	.word	0xfeff8fff
 8008638:	40010000 	.word	0x40010000
 800863c:	40010400 	.word	0x40010400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b33      	ldr	r3, [pc, #204]	; (8008744 <TIM_OC3_SetConfig+0xf8>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a28      	ldr	r2, [pc, #160]	; (8008748 <TIM_OC3_SetConfig+0xfc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC3_SetConfig+0x66>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a27      	ldr	r2, [pc, #156]	; (800874c <TIM_OC3_SetConfig+0x100>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10d      	bne.n	80086ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a1d      	ldr	r2, [pc, #116]	; (8008748 <TIM_OC3_SetConfig+0xfc>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00f      	beq.n	80086f6 <TIM_OC3_SetConfig+0xaa>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a1c      	ldr	r2, [pc, #112]	; (800874c <TIM_OC3_SetConfig+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00b      	beq.n	80086f6 <TIM_OC3_SetConfig+0xaa>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <TIM_OC3_SetConfig+0x104>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d007      	beq.n	80086f6 <TIM_OC3_SetConfig+0xaa>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <TIM_OC3_SetConfig+0x108>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC3_SetConfig+0xaa>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a19      	ldr	r2, [pc, #100]	; (8008758 <TIM_OC3_SetConfig+0x10c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d113      	bne.n	800871e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4313      	orrs	r3, r2
 8008710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	621a      	str	r2, [r3, #32]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	fffeff8f 	.word	0xfffeff8f
 8008748:	40010000 	.word	0x40010000
 800874c:	40010400 	.word	0x40010400
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800

0800875c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <TIM_OC4_SetConfig+0xbc>)
 8008788:	4013      	ands	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	031b      	lsls	r3, r3, #12
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a19      	ldr	r2, [pc, #100]	; (800881c <TIM_OC4_SetConfig+0xc0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00f      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a18      	ldr	r2, [pc, #96]	; (8008820 <TIM_OC4_SetConfig+0xc4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00b      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a17      	ldr	r2, [pc, #92]	; (8008824 <TIM_OC4_SetConfig+0xc8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d007      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <TIM_OC4_SetConfig+0xcc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a15      	ldr	r2, [pc, #84]	; (800882c <TIM_OC4_SetConfig+0xd0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d109      	bne.n	80087f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	019b      	lsls	r3, r3, #6
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	feff8fff 	.word	0xfeff8fff
 800881c:	40010000 	.word	0x40010000
 8008820:	40010400 	.word	0x40010400
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	4b21      	ldr	r3, [pc, #132]	; (80088e0 <TIM_OC5_SetConfig+0xb0>)
 800885c:	4013      	ands	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a18      	ldr	r2, [pc, #96]	; (80088e4 <TIM_OC5_SetConfig+0xb4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00f      	beq.n	80088a6 <TIM_OC5_SetConfig+0x76>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <TIM_OC5_SetConfig+0xb8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00b      	beq.n	80088a6 <TIM_OC5_SetConfig+0x76>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a16      	ldr	r2, [pc, #88]	; (80088ec <TIM_OC5_SetConfig+0xbc>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <TIM_OC5_SetConfig+0x76>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <TIM_OC5_SetConfig+0xc0>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_OC5_SetConfig+0x76>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a14      	ldr	r2, [pc, #80]	; (80088f4 <TIM_OC5_SetConfig+0xc4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d109      	bne.n	80088ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	fffeff8f 	.word	0xfffeff8f
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40010400 	.word	0x40010400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b22      	ldr	r3, [pc, #136]	; (80089ac <TIM_OC6_SetConfig+0xb4>)
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800893a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	051b      	lsls	r3, r3, #20
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <TIM_OC6_SetConfig+0xb8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00f      	beq.n	8008970 <TIM_OC6_SetConfig+0x78>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <TIM_OC6_SetConfig+0xbc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00b      	beq.n	8008970 <TIM_OC6_SetConfig+0x78>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <TIM_OC6_SetConfig+0xc0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d007      	beq.n	8008970 <TIM_OC6_SetConfig+0x78>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a16      	ldr	r2, [pc, #88]	; (80089bc <TIM_OC6_SetConfig+0xc4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_OC6_SetConfig+0x78>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <TIM_OC6_SetConfig+0xc8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d109      	bne.n	8008984 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008976:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	029b      	lsls	r3, r3, #10
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	feff8fff 	.word	0xfeff8fff
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40010400 	.word	0x40010400
 80089b8:	40014000 	.word	0x40014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	40014800 	.word	0x40014800

080089c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f023 0201 	bic.w	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f023 030a 	bic.w	r3, r3, #10
 8008a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b087      	sub	sp, #28
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	f023 0210 	bic.w	r2, r3, #16
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	031b      	lsls	r3, r3, #12
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
	...

08008a84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <TIM_ITRx_SetConfig+0x38>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f043 0307 	orr.w	r3, r3, #7
 8008aa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	609a      	str	r2, [r3, #8]
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	ffcfff8f 	.word	0xffcfff8f

08008ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	021a      	lsls	r2, r3, #8
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	609a      	str	r2, [r3, #8]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	2201      	movs	r2, #1
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1a      	ldr	r2, [r3, #32]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f003 031f 	and.w	r3, r3, #31
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	fa01 f303 	lsl.w	r3, r1, r3
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e06d      	b.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a30      	ldr	r2, [pc, #192]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d004      	beq.n	8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a2f      	ldr	r2, [pc, #188]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d108      	bne.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a20      	ldr	r2, [pc, #128]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d022      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd6:	d01d      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d018      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1c      	ldr	r2, [pc, #112]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d013      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1a      	ldr	r2, [pc, #104]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00e      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d009      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a16      	ldr	r2, [pc, #88]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d004      	beq.n	8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10c      	bne.n	8008c2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40010400 	.word	0x40010400
 8008c54:	40000400 	.word	0x40000400
 8008c58:	40000800 	.word	0x40000800
 8008c5c:	40000c00 	.word	0x40000c00
 8008c60:	40001800 	.word	0x40001800
 8008c64:	40014000 	.word	0x40014000

08008c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e065      	b.n	8008d50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a16      	ldr	r2, [pc, #88]	; (8008d5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d004      	beq.n	8008d12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a14      	ldr	r2, [pc, #80]	; (8008d60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d115      	bne.n	8008d3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40010400 	.word	0x40010400

08008d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e042      	b.n	8008e38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7f9 f82b 	bl	8001e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2224      	movs	r2, #36	; 0x24
 8008dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f8c2 	bl	8008f6c <UART_SetConfig>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e022      	b.n	8008e38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fe1e 	bl	8009a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0201 	orr.w	r2, r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fea5 	bl	8009b80 <UART_CheckIdleState>
 8008e36:	4603      	mov	r3, r0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	f040 8083 	bne.w	8008f62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_UART_Transmit+0x28>
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e07b      	b.n	8008f64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Transmit+0x3a>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e074      	b.n	8008f64 <HAL_UART_Transmit+0x124>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2221      	movs	r2, #33	; 0x21
 8008e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e92:	f7f9 fa2b 	bl	80022ec <HAL_GetTick>
 8008e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb0:	d108      	bne.n	8008ec4 <HAL_UART_Transmit+0x84>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e003      	b.n	8008ecc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008ed4:	e02c      	b.n	8008f30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	2180      	movs	r1, #128	; 0x80
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fe98 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e039      	b.n	8008f64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10b      	bne.n	8008f0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	3302      	adds	r3, #2
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e007      	b.n	8008f1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1cc      	bne.n	8008ed6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2200      	movs	r2, #0
 8008f44:	2140      	movs	r1, #64	; 0x40
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fe65 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e006      	b.n	8008f64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e000      	b.n	8008f64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f62:	2302      	movs	r3, #2
  }
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f70:	b092      	sub	sp, #72	; 0x48
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4bbe      	ldr	r3, [pc, #760]	; (8009294 <UART_SetConfig+0x328>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4ab3      	ldr	r2, [pc, #716]	; (8009298 <UART_SetConfig+0x32c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	4baf      	ldr	r3, [pc, #700]	; (800929c <UART_SetConfig+0x330>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	6812      	ldr	r2, [r2, #0]
 8008fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	f023 010f 	bic.w	r1, r3, #15
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4aa6      	ldr	r2, [pc, #664]	; (80092a0 <UART_SetConfig+0x334>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d177      	bne.n	80090fc <UART_SetConfig+0x190>
 800900c:	4ba5      	ldr	r3, [pc, #660]	; (80092a4 <UART_SetConfig+0x338>)
 800900e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009014:	2b28      	cmp	r3, #40	; 0x28
 8009016:	d86d      	bhi.n	80090f4 <UART_SetConfig+0x188>
 8009018:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <UART_SetConfig+0xb4>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	080090c5 	.word	0x080090c5
 8009024:	080090f5 	.word	0x080090f5
 8009028:	080090f5 	.word	0x080090f5
 800902c:	080090f5 	.word	0x080090f5
 8009030:	080090f5 	.word	0x080090f5
 8009034:	080090f5 	.word	0x080090f5
 8009038:	080090f5 	.word	0x080090f5
 800903c:	080090f5 	.word	0x080090f5
 8009040:	080090cd 	.word	0x080090cd
 8009044:	080090f5 	.word	0x080090f5
 8009048:	080090f5 	.word	0x080090f5
 800904c:	080090f5 	.word	0x080090f5
 8009050:	080090f5 	.word	0x080090f5
 8009054:	080090f5 	.word	0x080090f5
 8009058:	080090f5 	.word	0x080090f5
 800905c:	080090f5 	.word	0x080090f5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090f5 	.word	0x080090f5
 8009068:	080090f5 	.word	0x080090f5
 800906c:	080090f5 	.word	0x080090f5
 8009070:	080090f5 	.word	0x080090f5
 8009074:	080090f5 	.word	0x080090f5
 8009078:	080090f5 	.word	0x080090f5
 800907c:	080090f5 	.word	0x080090f5
 8009080:	080090dd 	.word	0x080090dd
 8009084:	080090f5 	.word	0x080090f5
 8009088:	080090f5 	.word	0x080090f5
 800908c:	080090f5 	.word	0x080090f5
 8009090:	080090f5 	.word	0x080090f5
 8009094:	080090f5 	.word	0x080090f5
 8009098:	080090f5 	.word	0x080090f5
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	080090e5 	.word	0x080090e5
 80090a4:	080090f5 	.word	0x080090f5
 80090a8:	080090f5 	.word	0x080090f5
 80090ac:	080090f5 	.word	0x080090f5
 80090b0:	080090f5 	.word	0x080090f5
 80090b4:	080090f5 	.word	0x080090f5
 80090b8:	080090f5 	.word	0x080090f5
 80090bc:	080090f5 	.word	0x080090f5
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ca:	e222      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090cc:	2304      	movs	r3, #4
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d2:	e21e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090d4:	2308      	movs	r3, #8
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090da:	e21a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090dc:	2310      	movs	r3, #16
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e2:	e216      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090e4:	2320      	movs	r3, #32
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ea:	e212      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090ec:	2340      	movs	r3, #64	; 0x40
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f2:	e20e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090f4:	2380      	movs	r3, #128	; 0x80
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e20a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a69      	ldr	r2, [pc, #420]	; (80092a8 <UART_SetConfig+0x33c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d130      	bne.n	8009168 <UART_SetConfig+0x1fc>
 8009106:	4b67      	ldr	r3, [pc, #412]	; (80092a4 <UART_SetConfig+0x338>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b05      	cmp	r3, #5
 8009110:	d826      	bhi.n	8009160 <UART_SetConfig+0x1f4>
 8009112:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <UART_SetConfig+0x1ac>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009131 	.word	0x08009131
 800911c:	08009139 	.word	0x08009139
 8009120:	08009141 	.word	0x08009141
 8009124:	08009149 	.word	0x08009149
 8009128:	08009151 	.word	0x08009151
 800912c:	08009159 	.word	0x08009159
 8009130:	2300      	movs	r3, #0
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009136:	e1ec      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009138:	2304      	movs	r3, #4
 800913a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913e:	e1e8      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009146:	e1e4      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009148:	2310      	movs	r3, #16
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914e:	e1e0      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009150:	2320      	movs	r3, #32
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009156:	e1dc      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915e:	e1d8      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009160:	2380      	movs	r3, #128	; 0x80
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e1d4      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a4f      	ldr	r2, [pc, #316]	; (80092ac <UART_SetConfig+0x340>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d130      	bne.n	80091d4 <UART_SetConfig+0x268>
 8009172:	4b4c      	ldr	r3, [pc, #304]	; (80092a4 <UART_SetConfig+0x338>)
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b05      	cmp	r3, #5
 800917c:	d826      	bhi.n	80091cc <UART_SetConfig+0x260>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <UART_SetConfig+0x218>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	0800919d 	.word	0x0800919d
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091ad 	.word	0x080091ad
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091c5 	.word	0x080091c5
 800919c:	2300      	movs	r3, #0
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a2:	e1b6      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091aa:	e1b2      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e1ae      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e1aa      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091bc:	2320      	movs	r3, #32
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e1a6      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ca:	e1a2      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091cc:	2380      	movs	r3, #128	; 0x80
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e19e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a35      	ldr	r2, [pc, #212]	; (80092b0 <UART_SetConfig+0x344>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d130      	bne.n	8009240 <UART_SetConfig+0x2d4>
 80091de:	4b31      	ldr	r3, [pc, #196]	; (80092a4 <UART_SetConfig+0x338>)
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d826      	bhi.n	8009238 <UART_SetConfig+0x2cc>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x284>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009209 	.word	0x08009209
 80091f4:	08009211 	.word	0x08009211
 80091f8:	08009219 	.word	0x08009219
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009229 	.word	0x08009229
 8009204:	08009231 	.word	0x08009231
 8009208:	2300      	movs	r3, #0
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920e:	e180      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009210:	2304      	movs	r3, #4
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009216:	e17c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009218:	2308      	movs	r3, #8
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921e:	e178      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009220:	2310      	movs	r3, #16
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009226:	e174      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922e:	e170      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009230:	2340      	movs	r3, #64	; 0x40
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009236:	e16c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009238:	2380      	movs	r3, #128	; 0x80
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e168      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <UART_SetConfig+0x348>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d142      	bne.n	80092d0 <UART_SetConfig+0x364>
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <UART_SetConfig+0x338>)
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b05      	cmp	r3, #5
 8009254:	d838      	bhi.n	80092c8 <UART_SetConfig+0x35c>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x2f0>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009275 	.word	0x08009275
 8009260:	0800927d 	.word	0x0800927d
 8009264:	08009285 	.word	0x08009285
 8009268:	0800928d 	.word	0x0800928d
 800926c:	080092b9 	.word	0x080092b9
 8009270:	080092c1 	.word	0x080092c1
 8009274:	2300      	movs	r3, #0
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927a:	e14a      	b.n	8009512 <UART_SetConfig+0x5a6>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009282:	e146      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928a:	e142      	b.n	8009512 <UART_SetConfig+0x5a6>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e13e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009294:	cfff69f3 	.word	0xcfff69f3
 8009298:	58000c00 	.word	0x58000c00
 800929c:	11fff4ff 	.word	0x11fff4ff
 80092a0:	40011000 	.word	0x40011000
 80092a4:	58024400 	.word	0x58024400
 80092a8:	40004400 	.word	0x40004400
 80092ac:	40004800 	.word	0x40004800
 80092b0:	40004c00 	.word	0x40004c00
 80092b4:	40005000 	.word	0x40005000
 80092b8:	2320      	movs	r3, #32
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092be:	e128      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092c0:	2340      	movs	r3, #64	; 0x40
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092c6:	e124      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092c8:	2380      	movs	r3, #128	; 0x80
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ce:	e120      	b.n	8009512 <UART_SetConfig+0x5a6>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4acb      	ldr	r2, [pc, #812]	; (8009604 <UART_SetConfig+0x698>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d176      	bne.n	80093c8 <UART_SetConfig+0x45c>
 80092da:	4bcb      	ldr	r3, [pc, #812]	; (8009608 <UART_SetConfig+0x69c>)
 80092dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092e2:	2b28      	cmp	r3, #40	; 0x28
 80092e4:	d86c      	bhi.n	80093c0 <UART_SetConfig+0x454>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <UART_SetConfig+0x380>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009391 	.word	0x08009391
 80092f0:	080093c1 	.word	0x080093c1
 80092f4:	080093c1 	.word	0x080093c1
 80092f8:	080093c1 	.word	0x080093c1
 80092fc:	080093c1 	.word	0x080093c1
 8009300:	080093c1 	.word	0x080093c1
 8009304:	080093c1 	.word	0x080093c1
 8009308:	080093c1 	.word	0x080093c1
 800930c:	08009399 	.word	0x08009399
 8009310:	080093c1 	.word	0x080093c1
 8009314:	080093c1 	.word	0x080093c1
 8009318:	080093c1 	.word	0x080093c1
 800931c:	080093c1 	.word	0x080093c1
 8009320:	080093c1 	.word	0x080093c1
 8009324:	080093c1 	.word	0x080093c1
 8009328:	080093c1 	.word	0x080093c1
 800932c:	080093a1 	.word	0x080093a1
 8009330:	080093c1 	.word	0x080093c1
 8009334:	080093c1 	.word	0x080093c1
 8009338:	080093c1 	.word	0x080093c1
 800933c:	080093c1 	.word	0x080093c1
 8009340:	080093c1 	.word	0x080093c1
 8009344:	080093c1 	.word	0x080093c1
 8009348:	080093c1 	.word	0x080093c1
 800934c:	080093a9 	.word	0x080093a9
 8009350:	080093c1 	.word	0x080093c1
 8009354:	080093c1 	.word	0x080093c1
 8009358:	080093c1 	.word	0x080093c1
 800935c:	080093c1 	.word	0x080093c1
 8009360:	080093c1 	.word	0x080093c1
 8009364:	080093c1 	.word	0x080093c1
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093b1 	.word	0x080093b1
 8009370:	080093c1 	.word	0x080093c1
 8009374:	080093c1 	.word	0x080093c1
 8009378:	080093c1 	.word	0x080093c1
 800937c:	080093c1 	.word	0x080093c1
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093c1 	.word	0x080093c1
 8009388:	080093c1 	.word	0x080093c1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	2301      	movs	r3, #1
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009396:	e0bc      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939e:	e0b8      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a6:	e0b4      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ae:	e0b0      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093b0:	2320      	movs	r3, #32
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b6:	e0ac      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093be:	e0a8      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e0a4      	b.n	8009512 <UART_SetConfig+0x5a6>
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a8f      	ldr	r2, [pc, #572]	; (800960c <UART_SetConfig+0x6a0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d130      	bne.n	8009434 <UART_SetConfig+0x4c8>
 80093d2:	4b8d      	ldr	r3, [pc, #564]	; (8009608 <UART_SetConfig+0x69c>)
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d826      	bhi.n	800942c <UART_SetConfig+0x4c0>
 80093de:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <UART_SetConfig+0x478>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	080093fd 	.word	0x080093fd
 80093e8:	08009405 	.word	0x08009405
 80093ec:	0800940d 	.word	0x0800940d
 80093f0:	08009415 	.word	0x08009415
 80093f4:	0800941d 	.word	0x0800941d
 80093f8:	08009425 	.word	0x08009425
 80093fc:	2300      	movs	r3, #0
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009402:	e086      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009404:	2304      	movs	r3, #4
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800940a:	e082      	b.n	8009512 <UART_SetConfig+0x5a6>
 800940c:	2308      	movs	r3, #8
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009412:	e07e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009414:	2310      	movs	r3, #16
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800941a:	e07a      	b.n	8009512 <UART_SetConfig+0x5a6>
 800941c:	2320      	movs	r3, #32
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009422:	e076      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942a:	e072      	b.n	8009512 <UART_SetConfig+0x5a6>
 800942c:	2380      	movs	r3, #128	; 0x80
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009432:	e06e      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a75      	ldr	r2, [pc, #468]	; (8009610 <UART_SetConfig+0x6a4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d130      	bne.n	80094a0 <UART_SetConfig+0x534>
 800943e:	4b72      	ldr	r3, [pc, #456]	; (8009608 <UART_SetConfig+0x69c>)
 8009440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	2b05      	cmp	r3, #5
 8009448:	d826      	bhi.n	8009498 <UART_SetConfig+0x52c>
 800944a:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <UART_SetConfig+0x4e4>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	08009469 	.word	0x08009469
 8009454:	08009471 	.word	0x08009471
 8009458:	08009479 	.word	0x08009479
 800945c:	08009481 	.word	0x08009481
 8009460:	08009489 	.word	0x08009489
 8009464:	08009491 	.word	0x08009491
 8009468:	2300      	movs	r3, #0
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946e:	e050      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009470:	2304      	movs	r3, #4
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009476:	e04c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009478:	2308      	movs	r3, #8
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947e:	e048      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009480:	2310      	movs	r3, #16
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009486:	e044      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009488:	2320      	movs	r3, #32
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948e:	e040      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009490:	2340      	movs	r3, #64	; 0x40
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009496:	e03c      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009498:	2380      	movs	r3, #128	; 0x80
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949e:	e038      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a5b      	ldr	r2, [pc, #364]	; (8009614 <UART_SetConfig+0x6a8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d130      	bne.n	800950c <UART_SetConfig+0x5a0>
 80094aa:	4b57      	ldr	r3, [pc, #348]	; (8009608 <UART_SetConfig+0x69c>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d826      	bhi.n	8009504 <UART_SetConfig+0x598>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <UART_SetConfig+0x550>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094dd 	.word	0x080094dd
 80094c4:	080094e5 	.word	0x080094e5
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	080094f5 	.word	0x080094f5
 80094d0:	080094fd 	.word	0x080094fd
 80094d4:	2302      	movs	r3, #2
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e01a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094dc:	2304      	movs	r3, #4
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e016      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094e4:	2308      	movs	r3, #8
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e012      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094ec:	2310      	movs	r3, #16
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e00e      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094f4:	2320      	movs	r3, #32
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e00a      	b.n	8009512 <UART_SetConfig+0x5a6>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e006      	b.n	8009512 <UART_SetConfig+0x5a6>
 8009504:	2380      	movs	r3, #128	; 0x80
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e002      	b.n	8009512 <UART_SetConfig+0x5a6>
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a3f      	ldr	r2, [pc, #252]	; (8009614 <UART_SetConfig+0x6a8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	f040 80f8 	bne.w	800970e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800951e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009522:	2b20      	cmp	r3, #32
 8009524:	dc46      	bgt.n	80095b4 <UART_SetConfig+0x648>
 8009526:	2b02      	cmp	r3, #2
 8009528:	f2c0 8082 	blt.w	8009630 <UART_SetConfig+0x6c4>
 800952c:	3b02      	subs	r3, #2
 800952e:	2b1e      	cmp	r3, #30
 8009530:	d87e      	bhi.n	8009630 <UART_SetConfig+0x6c4>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <UART_SetConfig+0x5cc>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095bb 	.word	0x080095bb
 800953c:	08009631 	.word	0x08009631
 8009540:	080095c3 	.word	0x080095c3
 8009544:	08009631 	.word	0x08009631
 8009548:	08009631 	.word	0x08009631
 800954c:	08009631 	.word	0x08009631
 8009550:	080095d3 	.word	0x080095d3
 8009554:	08009631 	.word	0x08009631
 8009558:	08009631 	.word	0x08009631
 800955c:	08009631 	.word	0x08009631
 8009560:	08009631 	.word	0x08009631
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	080095e3 	.word	0x080095e3
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009631 	.word	0x08009631
 8009580:	08009631 	.word	0x08009631
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009631 	.word	0x08009631
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009623 	.word	0x08009623
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d037      	beq.n	8009628 <UART_SetConfig+0x6bc>
 80095b8:	e03a      	b.n	8009630 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80095ba:	f7fd fc6d 	bl	8006e98 <HAL_RCCEx_GetD3PCLK1Freq>
 80095be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c0:	e03c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fd fc7c 	bl	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d0:	e034      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d2:	f107 0318 	add.w	r3, r7, #24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fd fdc8 	bl	800716c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e0:	e02c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <UART_SetConfig+0x69c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d016      	beq.n	800961c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <UART_SetConfig+0x69c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	4a07      	ldr	r2, [pc, #28]	; (8009618 <UART_SetConfig+0x6ac>)
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009600:	e01c      	b.n	800963c <UART_SetConfig+0x6d0>
 8009602:	bf00      	nop
 8009604:	40011400 	.word	0x40011400
 8009608:	58024400 	.word	0x58024400
 800960c:	40007800 	.word	0x40007800
 8009610:	40007c00 	.word	0x40007c00
 8009614:	58000c00 	.word	0x58000c00
 8009618:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800961c:	4b9d      	ldr	r3, [pc, #628]	; (8009894 <UART_SetConfig+0x928>)
 800961e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009620:	e00c      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009622:	4b9d      	ldr	r3, [pc, #628]	; (8009898 <UART_SetConfig+0x92c>)
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009626:	e009      	b.n	800963c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800962e:	e005      	b.n	800963c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800963a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800963c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 81de 	beq.w	8009a00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	4a94      	ldr	r2, [pc, #592]	; (800989c <UART_SetConfig+0x930>)
 800964a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800964e:	461a      	mov	r2, r3
 8009650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009652:	fbb3 f3f2 	udiv	r3, r3, r2
 8009656:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	4613      	mov	r3, r2
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	4413      	add	r3, r2
 8009662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009664:	429a      	cmp	r2, r3
 8009666:	d305      	bcc.n	8009674 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800966e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800967a:	e1c1      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967e:	2200      	movs	r2, #0
 8009680:	60bb      	str	r3, [r7, #8]
 8009682:	60fa      	str	r2, [r7, #12]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	4a84      	ldr	r2, [pc, #528]	; (800989c <UART_SetConfig+0x930>)
 800968a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800968e:	b29b      	uxth	r3, r3
 8009690:	2200      	movs	r2, #0
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800969a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800969e:	f7f7 f833 	bl	8000708 <__aeabi_uldivmod>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	020b      	lsls	r3, r1, #8
 80096b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096b8:	0202      	lsls	r2, r0, #8
 80096ba:	6979      	ldr	r1, [r7, #20]
 80096bc:	6849      	ldr	r1, [r1, #4]
 80096be:	0849      	lsrs	r1, r1, #1
 80096c0:	2000      	movs	r0, #0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4605      	mov	r5, r0
 80096c6:	eb12 0804 	adds.w	r8, r2, r4
 80096ca:	eb43 0905 	adc.w	r9, r3, r5
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	469a      	mov	sl, r3
 80096d6:	4693      	mov	fp, r2
 80096d8:	4652      	mov	r2, sl
 80096da:	465b      	mov	r3, fp
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f7 f812 	bl	8000708 <__aeabi_uldivmod>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4613      	mov	r3, r2
 80096ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096f2:	d308      	bcc.n	8009706 <UART_SetConfig+0x79a>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096fa:	d204      	bcs.n	8009706 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009702:	60da      	str	r2, [r3, #12]
 8009704:	e17c      	b.n	8009a00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800970c:	e178      	b.n	8009a00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009716:	f040 80c5 	bne.w	80098a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800971a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800971e:	2b20      	cmp	r3, #32
 8009720:	dc48      	bgt.n	80097b4 <UART_SetConfig+0x848>
 8009722:	2b00      	cmp	r3, #0
 8009724:	db7b      	blt.n	800981e <UART_SetConfig+0x8b2>
 8009726:	2b20      	cmp	r3, #32
 8009728:	d879      	bhi.n	800981e <UART_SetConfig+0x8b2>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <UART_SetConfig+0x7c4>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	080097bb 	.word	0x080097bb
 8009734:	080097c3 	.word	0x080097c3
 8009738:	0800981f 	.word	0x0800981f
 800973c:	0800981f 	.word	0x0800981f
 8009740:	080097cb 	.word	0x080097cb
 8009744:	0800981f 	.word	0x0800981f
 8009748:	0800981f 	.word	0x0800981f
 800974c:	0800981f 	.word	0x0800981f
 8009750:	080097db 	.word	0x080097db
 8009754:	0800981f 	.word	0x0800981f
 8009758:	0800981f 	.word	0x0800981f
 800975c:	0800981f 	.word	0x0800981f
 8009760:	0800981f 	.word	0x0800981f
 8009764:	0800981f 	.word	0x0800981f
 8009768:	0800981f 	.word	0x0800981f
 800976c:	0800981f 	.word	0x0800981f
 8009770:	080097eb 	.word	0x080097eb
 8009774:	0800981f 	.word	0x0800981f
 8009778:	0800981f 	.word	0x0800981f
 800977c:	0800981f 	.word	0x0800981f
 8009780:	0800981f 	.word	0x0800981f
 8009784:	0800981f 	.word	0x0800981f
 8009788:	0800981f 	.word	0x0800981f
 800978c:	0800981f 	.word	0x0800981f
 8009790:	0800981f 	.word	0x0800981f
 8009794:	0800981f 	.word	0x0800981f
 8009798:	0800981f 	.word	0x0800981f
 800979c:	0800981f 	.word	0x0800981f
 80097a0:	0800981f 	.word	0x0800981f
 80097a4:	0800981f 	.word	0x0800981f
 80097a8:	0800981f 	.word	0x0800981f
 80097ac:	0800981f 	.word	0x0800981f
 80097b0:	08009811 	.word	0x08009811
 80097b4:	2b40      	cmp	r3, #64	; 0x40
 80097b6:	d02e      	beq.n	8009816 <UART_SetConfig+0x8aa>
 80097b8:	e031      	b.n	800981e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ba:	f7fc fbfb 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 80097be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097c0:	e033      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097c2:	f7fc fc0d 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 80097c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097c8:	e02f      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fd fb78 	bl	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097d8:	e027      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd fcc4 	bl	800716c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097e8:	e01f      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ea:	4b2d      	ldr	r3, [pc, #180]	; (80098a0 <UART_SetConfig+0x934>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <UART_SetConfig+0x934>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	08db      	lsrs	r3, r3, #3
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	4a24      	ldr	r2, [pc, #144]	; (8009894 <UART_SetConfig+0x928>)
 8009802:	fa22 f303 	lsr.w	r3, r2, r3
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009808:	e00f      	b.n	800982a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800980a:	4b22      	ldr	r3, [pc, #136]	; (8009894 <UART_SetConfig+0x928>)
 800980c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800980e:	e00c      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009810:	4b21      	ldr	r3, [pc, #132]	; (8009898 <UART_SetConfig+0x92c>)
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009814:	e009      	b.n	800982a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800981c:	e005      	b.n	800982a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800982a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80e7 	beq.w	8009a00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <UART_SetConfig+0x930>)
 8009838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983c:	461a      	mov	r2, r3
 800983e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009840:	fbb3 f3f2 	udiv	r3, r3, r2
 8009844:	005a      	lsls	r2, r3, #1
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	085b      	lsrs	r3, r3, #1
 800984c:	441a      	add	r2, r3
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	fbb2 f3f3 	udiv	r3, r2, r3
 8009856:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	2b0f      	cmp	r3, #15
 800985c:	d916      	bls.n	800988c <UART_SetConfig+0x920>
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d212      	bcs.n	800988c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	b29b      	uxth	r3, r3
 800986a:	f023 030f 	bic.w	r3, r3, #15
 800986e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	085b      	lsrs	r3, r3, #1
 8009874:	b29b      	uxth	r3, r3
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	b29a      	uxth	r2, r3
 800987c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800987e:	4313      	orrs	r3, r2
 8009880:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009888:	60da      	str	r2, [r3, #12]
 800988a:	e0b9      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009892:	e0b5      	b.n	8009a00 <UART_SetConfig+0xa94>
 8009894:	03d09000 	.word	0x03d09000
 8009898:	003d0900 	.word	0x003d0900
 800989c:	0800e7a0 	.word	0x0800e7a0
 80098a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80098a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	dc49      	bgt.n	8009940 <UART_SetConfig+0x9d4>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	db7c      	blt.n	80099aa <UART_SetConfig+0xa3e>
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d87a      	bhi.n	80099aa <UART_SetConfig+0xa3e>
 80098b4:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <UART_SetConfig+0x950>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	08009947 	.word	0x08009947
 80098c0:	0800994f 	.word	0x0800994f
 80098c4:	080099ab 	.word	0x080099ab
 80098c8:	080099ab 	.word	0x080099ab
 80098cc:	08009957 	.word	0x08009957
 80098d0:	080099ab 	.word	0x080099ab
 80098d4:	080099ab 	.word	0x080099ab
 80098d8:	080099ab 	.word	0x080099ab
 80098dc:	08009967 	.word	0x08009967
 80098e0:	080099ab 	.word	0x080099ab
 80098e4:	080099ab 	.word	0x080099ab
 80098e8:	080099ab 	.word	0x080099ab
 80098ec:	080099ab 	.word	0x080099ab
 80098f0:	080099ab 	.word	0x080099ab
 80098f4:	080099ab 	.word	0x080099ab
 80098f8:	080099ab 	.word	0x080099ab
 80098fc:	08009977 	.word	0x08009977
 8009900:	080099ab 	.word	0x080099ab
 8009904:	080099ab 	.word	0x080099ab
 8009908:	080099ab 	.word	0x080099ab
 800990c:	080099ab 	.word	0x080099ab
 8009910:	080099ab 	.word	0x080099ab
 8009914:	080099ab 	.word	0x080099ab
 8009918:	080099ab 	.word	0x080099ab
 800991c:	080099ab 	.word	0x080099ab
 8009920:	080099ab 	.word	0x080099ab
 8009924:	080099ab 	.word	0x080099ab
 8009928:	080099ab 	.word	0x080099ab
 800992c:	080099ab 	.word	0x080099ab
 8009930:	080099ab 	.word	0x080099ab
 8009934:	080099ab 	.word	0x080099ab
 8009938:	080099ab 	.word	0x080099ab
 800993c:	0800999d 	.word	0x0800999d
 8009940:	2b40      	cmp	r3, #64	; 0x40
 8009942:	d02e      	beq.n	80099a2 <UART_SetConfig+0xa36>
 8009944:	e031      	b.n	80099aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009946:	f7fc fb35 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 800994a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800994c:	e033      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800994e:	f7fc fb47 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 8009952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009954:	e02f      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800995a:	4618      	mov	r0, r3
 800995c:	f7fd fab2 	bl	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009964:	e027      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009966:	f107 0318 	add.w	r3, r7, #24
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd fbfe 	bl	800716c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009974:	e01f      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009976:	4b2d      	ldr	r3, [pc, #180]	; (8009a2c <UART_SetConfig+0xac0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009982:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <UART_SetConfig+0xac0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	08db      	lsrs	r3, r3, #3
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <UART_SetConfig+0xac4>)
 800998e:	fa22 f303 	lsr.w	r3, r2, r3
 8009992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009994:	e00f      	b.n	80099b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009996:	4b26      	ldr	r3, [pc, #152]	; (8009a30 <UART_SetConfig+0xac4>)
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800999a:	e00c      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <UART_SetConfig+0xac8>)
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a0:	e009      	b.n	80099b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a8:	e005      	b.n	80099b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099b4:	bf00      	nop
    }

    if (pclk != 0U)
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d021      	beq.n	8009a00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	4a1d      	ldr	r2, [pc, #116]	; (8009a38 <UART_SetConfig+0xacc>)
 80099c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	fbb2 f3f3 	udiv	r3, r2, r3
 80099de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d909      	bls.n	80099fa <UART_SetConfig+0xa8e>
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ec:	d205      	bcs.n	80099fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	e002      	b.n	8009a00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2200      	movs	r2, #0
 8009a14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3748      	adds	r7, #72	; 0x48
 8009a24:	46bd      	mov	sp, r7
 8009a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
 8009a30:	03d09000 	.word	0x03d09000
 8009a34:	003d0900 	.word	0x003d0900
 8009a38:	0800e7a0 	.word	0x0800e7a0

08009a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00a      	beq.n	8009a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00a      	beq.n	8009aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	f003 0308 	and.w	r3, r3, #8
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00a      	beq.n	8009b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01a      	beq.n	8009b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b3a:	d10a      	bne.n	8009b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	605a      	str	r2, [r3, #4]
  }
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b90:	f7f8 fbac 	bl	80022ec <HAL_GetTick>
 8009b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d10e      	bne.n	8009bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f82f 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	e025      	b.n	8009c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	d10e      	bne.n	8009bee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f819 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e00f      	b.n	8009c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b09c      	sub	sp, #112	; 0x70
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c26:	e0a9      	b.n	8009d7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	f000 80a5 	beq.w	8009d7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c32:	f7f8 fb5b 	bl	80022ec <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d302      	bcc.n	8009c48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d140      	bne.n	8009cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e6      	bne.n	8009c48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	f023 0301 	bic.w	r3, r3, #1
 8009c90:	663b      	str	r3, [r7, #96]	; 0x60
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3308      	adds	r3, #8
 8009c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e5      	bne.n	8009c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e069      	b.n	8009d9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d051      	beq.n	8009d7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce6:	d149      	bne.n	8009d7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
 8009d12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	613b      	str	r3, [r7, #16]
   return(result);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f023 0301 	bic.w	r3, r3, #1
 8009d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d44:	623a      	str	r2, [r7, #32]
 8009d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	69f9      	ldr	r1, [r7, #28]
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e5      	bne.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e010      	b.n	8009d9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69da      	ldr	r2, [r3, #28]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4013      	ands	r3, r2
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2301      	moveq	r3, #1
 8009d8e:	2300      	movne	r3, #0
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	f43f af46 	beq.w	8009c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3770      	adds	r7, #112	; 0x70
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_UARTEx_DisableFifoMode+0x16>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e027      	b.n	8009e0c <HAL_UARTEx_DisableFifoMode+0x66>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2224      	movs	r2, #36	; 0x24
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009dea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d101      	bne.n	8009e30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e02d      	b.n	8009e8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2224      	movs	r2, #36	; 0x24
 8009e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0201 	bic.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f84f 	bl	8009f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e02d      	b.n	8009f08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2224      	movs	r2, #36	; 0x24
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0201 	bic.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f811 	bl	8009f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d108      	bne.n	8009f32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f30:	e031      	b.n	8009f96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f32:	2310      	movs	r3, #16
 8009f34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f36:	2310      	movs	r3, #16
 8009f38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	0e5b      	lsrs	r3, r3, #25
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	0f5b      	lsrs	r3, r3, #29
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	7b3a      	ldrb	r2, [r7, #12]
 8009f5e:	4911      	ldr	r1, [pc, #68]	; (8009fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8009f60:	5c8a      	ldrb	r2, [r1, r2]
 8009f62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f66:	7b3a      	ldrb	r2, [r7, #12]
 8009f68:	490f      	ldr	r1, [pc, #60]	; (8009fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8009f6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	7b7a      	ldrb	r2, [r7, #13]
 8009f7c:	4909      	ldr	r1, [pc, #36]	; (8009fa4 <UARTEx_SetNbDataToProcess+0x94>)
 8009f7e:	5c8a      	ldrb	r2, [r1, r2]
 8009f80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f84:	7b7a      	ldrb	r2, [r7, #13]
 8009f86:	4908      	ldr	r1, [pc, #32]	; (8009fa8 <UARTEx_SetNbDataToProcess+0x98>)
 8009f88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f96:	bf00      	nop
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	0800e7b8 	.word	0x0800e7b8
 8009fa8:	0800e7c0 	.word	0x0800e7c0

08009fac <__errno>:
 8009fac:	4b01      	ldr	r3, [pc, #4]	; (8009fb4 <__errno+0x8>)
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	24000030 	.word	0x24000030

08009fb8 <__libc_init_array>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4d0d      	ldr	r5, [pc, #52]	; (8009ff0 <__libc_init_array+0x38>)
 8009fbc:	4c0d      	ldr	r4, [pc, #52]	; (8009ff4 <__libc_init_array+0x3c>)
 8009fbe:	1b64      	subs	r4, r4, r5
 8009fc0:	10a4      	asrs	r4, r4, #2
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	42a6      	cmp	r6, r4
 8009fc6:	d109      	bne.n	8009fdc <__libc_init_array+0x24>
 8009fc8:	4d0b      	ldr	r5, [pc, #44]	; (8009ff8 <__libc_init_array+0x40>)
 8009fca:	4c0c      	ldr	r4, [pc, #48]	; (8009ffc <__libc_init_array+0x44>)
 8009fcc:	f004 fb88 	bl	800e6e0 <_init>
 8009fd0:	1b64      	subs	r4, r4, r5
 8009fd2:	10a4      	asrs	r4, r4, #2
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	42a6      	cmp	r6, r4
 8009fd8:	d105      	bne.n	8009fe6 <__libc_init_array+0x2e>
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe0:	4798      	blx	r3
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__libc_init_array+0xc>
 8009fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fea:	4798      	blx	r3
 8009fec:	3601      	adds	r6, #1
 8009fee:	e7f2      	b.n	8009fd6 <__libc_init_array+0x1e>
 8009ff0:	0800ec74 	.word	0x0800ec74
 8009ff4:	0800ec74 	.word	0x0800ec74
 8009ff8:	0800ec74 	.word	0x0800ec74
 8009ffc:	0800ec78 	.word	0x0800ec78

0800a000 <memcpy>:
 800a000:	440a      	add	r2, r1
 800a002:	4291      	cmp	r1, r2
 800a004:	f100 33ff 	add.w	r3, r0, #4294967295
 800a008:	d100      	bne.n	800a00c <memcpy+0xc>
 800a00a:	4770      	bx	lr
 800a00c:	b510      	push	{r4, lr}
 800a00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a016:	4291      	cmp	r1, r2
 800a018:	d1f9      	bne.n	800a00e <memcpy+0xe>
 800a01a:	bd10      	pop	{r4, pc}

0800a01c <memset>:
 800a01c:	4402      	add	r2, r0
 800a01e:	4603      	mov	r3, r0
 800a020:	4293      	cmp	r3, r2
 800a022:	d100      	bne.n	800a026 <memset+0xa>
 800a024:	4770      	bx	lr
 800a026:	f803 1b01 	strb.w	r1, [r3], #1
 800a02a:	e7f9      	b.n	800a020 <memset+0x4>

0800a02c <__cvt>:
 800a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02e:	ed2d 8b02 	vpush	{d8}
 800a032:	eeb0 8b40 	vmov.f64	d8, d0
 800a036:	b085      	sub	sp, #20
 800a038:	4617      	mov	r7, r2
 800a03a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a03c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a03e:	ee18 2a90 	vmov	r2, s17
 800a042:	f025 0520 	bic.w	r5, r5, #32
 800a046:	2a00      	cmp	r2, #0
 800a048:	bfb6      	itet	lt
 800a04a:	222d      	movlt	r2, #45	; 0x2d
 800a04c:	2200      	movge	r2, #0
 800a04e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a052:	2d46      	cmp	r5, #70	; 0x46
 800a054:	460c      	mov	r4, r1
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	d004      	beq.n	800a064 <__cvt+0x38>
 800a05a:	2d45      	cmp	r5, #69	; 0x45
 800a05c:	d100      	bne.n	800a060 <__cvt+0x34>
 800a05e:	3401      	adds	r4, #1
 800a060:	2102      	movs	r1, #2
 800a062:	e000      	b.n	800a066 <__cvt+0x3a>
 800a064:	2103      	movs	r1, #3
 800a066:	ab03      	add	r3, sp, #12
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	ab02      	add	r3, sp, #8
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4622      	mov	r2, r4
 800a070:	4633      	mov	r3, r6
 800a072:	eeb0 0b48 	vmov.f64	d0, d8
 800a076:	f001 fd2f 	bl	800bad8 <_dtoa_r>
 800a07a:	2d47      	cmp	r5, #71	; 0x47
 800a07c:	d101      	bne.n	800a082 <__cvt+0x56>
 800a07e:	07fb      	lsls	r3, r7, #31
 800a080:	d51a      	bpl.n	800a0b8 <__cvt+0x8c>
 800a082:	2d46      	cmp	r5, #70	; 0x46
 800a084:	eb00 0204 	add.w	r2, r0, r4
 800a088:	d10c      	bne.n	800a0a4 <__cvt+0x78>
 800a08a:	7803      	ldrb	r3, [r0, #0]
 800a08c:	2b30      	cmp	r3, #48	; 0x30
 800a08e:	d107      	bne.n	800a0a0 <__cvt+0x74>
 800a090:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a098:	bf1c      	itt	ne
 800a09a:	f1c4 0401 	rsbne	r4, r4, #1
 800a09e:	6034      	strne	r4, [r6, #0]
 800a0a0:	6833      	ldr	r3, [r6, #0]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ac:	bf08      	it	eq
 800a0ae:	9203      	streq	r2, [sp, #12]
 800a0b0:	2130      	movs	r1, #48	; 0x30
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d307      	bcc.n	800a0c8 <__cvt+0x9c>
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0bc:	1a1b      	subs	r3, r3, r0
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	b005      	add	sp, #20
 800a0c2:	ecbd 8b02 	vpop	{d8}
 800a0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0c8:	1c5c      	adds	r4, r3, #1
 800a0ca:	9403      	str	r4, [sp, #12]
 800a0cc:	7019      	strb	r1, [r3, #0]
 800a0ce:	e7f0      	b.n	800a0b2 <__cvt+0x86>

0800a0d0 <__exponent>:
 800a0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	bfb8      	it	lt
 800a0d8:	4249      	neglt	r1, r1
 800a0da:	f803 2b02 	strb.w	r2, [r3], #2
 800a0de:	bfb4      	ite	lt
 800a0e0:	222d      	movlt	r2, #45	; 0x2d
 800a0e2:	222b      	movge	r2, #43	; 0x2b
 800a0e4:	2909      	cmp	r1, #9
 800a0e6:	7042      	strb	r2, [r0, #1]
 800a0e8:	dd2a      	ble.n	800a140 <__exponent+0x70>
 800a0ea:	f10d 0407 	add.w	r4, sp, #7
 800a0ee:	46a4      	mov	ip, r4
 800a0f0:	270a      	movs	r7, #10
 800a0f2:	46a6      	mov	lr, r4
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0fa:	fb07 1516 	mls	r5, r7, r6, r1
 800a0fe:	3530      	adds	r5, #48	; 0x30
 800a100:	2a63      	cmp	r2, #99	; 0x63
 800a102:	f104 34ff 	add.w	r4, r4, #4294967295
 800a106:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a10a:	4631      	mov	r1, r6
 800a10c:	dcf1      	bgt.n	800a0f2 <__exponent+0x22>
 800a10e:	3130      	adds	r1, #48	; 0x30
 800a110:	f1ae 0502 	sub.w	r5, lr, #2
 800a114:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a118:	1c44      	adds	r4, r0, #1
 800a11a:	4629      	mov	r1, r5
 800a11c:	4561      	cmp	r1, ip
 800a11e:	d30a      	bcc.n	800a136 <__exponent+0x66>
 800a120:	f10d 0209 	add.w	r2, sp, #9
 800a124:	eba2 020e 	sub.w	r2, r2, lr
 800a128:	4565      	cmp	r5, ip
 800a12a:	bf88      	it	hi
 800a12c:	2200      	movhi	r2, #0
 800a12e:	4413      	add	r3, r2
 800a130:	1a18      	subs	r0, r3, r0
 800a132:	b003      	add	sp, #12
 800a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a13a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a13e:	e7ed      	b.n	800a11c <__exponent+0x4c>
 800a140:	2330      	movs	r3, #48	; 0x30
 800a142:	3130      	adds	r1, #48	; 0x30
 800a144:	7083      	strb	r3, [r0, #2]
 800a146:	70c1      	strb	r1, [r0, #3]
 800a148:	1d03      	adds	r3, r0, #4
 800a14a:	e7f1      	b.n	800a130 <__exponent+0x60>
 800a14c:	0000      	movs	r0, r0
	...

0800a150 <_printf_float>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	b08b      	sub	sp, #44	; 0x2c
 800a156:	460c      	mov	r4, r1
 800a158:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a15c:	4616      	mov	r6, r2
 800a15e:	461f      	mov	r7, r3
 800a160:	4605      	mov	r5, r0
 800a162:	f002 fd97 	bl	800cc94 <_localeconv_r>
 800a166:	f8d0 b000 	ldr.w	fp, [r0]
 800a16a:	4658      	mov	r0, fp
 800a16c:	f7f6 f8b8 	bl	80002e0 <strlen>
 800a170:	2300      	movs	r3, #0
 800a172:	9308      	str	r3, [sp, #32]
 800a174:	f8d8 3000 	ldr.w	r3, [r8]
 800a178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a17c:	6822      	ldr	r2, [r4, #0]
 800a17e:	3307      	adds	r3, #7
 800a180:	f023 0307 	bic.w	r3, r3, #7
 800a184:	f103 0108 	add.w	r1, r3, #8
 800a188:	f8c8 1000 	str.w	r1, [r8]
 800a18c:	4682      	mov	sl, r0
 800a18e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a192:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a196:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a3f8 <_printf_float+0x2a8>
 800a19a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a19e:	eeb0 6bc0 	vabs.f64	d6, d0
 800a1a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1aa:	dd24      	ble.n	800a1f6 <_printf_float+0xa6>
 800a1ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b4:	d502      	bpl.n	800a1bc <_printf_float+0x6c>
 800a1b6:	232d      	movs	r3, #45	; 0x2d
 800a1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1bc:	4b90      	ldr	r3, [pc, #576]	; (800a400 <_printf_float+0x2b0>)
 800a1be:	4891      	ldr	r0, [pc, #580]	; (800a404 <_printf_float+0x2b4>)
 800a1c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a1c4:	bf94      	ite	ls
 800a1c6:	4698      	movls	r8, r3
 800a1c8:	4680      	movhi	r8, r0
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	6123      	str	r3, [r4, #16]
 800a1ce:	f022 0204 	bic.w	r2, r2, #4
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6022      	str	r2, [r4, #0]
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	9700      	str	r7, [sp, #0]
 800a1da:	4633      	mov	r3, r6
 800a1dc:	aa09      	add	r2, sp, #36	; 0x24
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f9d3 	bl	800a58c <_printf_common>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f040 808a 	bne.w	800a300 <_printf_float+0x1b0>
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	b00b      	add	sp, #44	; 0x2c
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	eeb4 0b40 	vcmp.f64	d0, d0
 800a1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fe:	d709      	bvc.n	800a214 <_printf_float+0xc4>
 800a200:	ee10 3a90 	vmov	r3, s1
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfbc      	itt	lt
 800a208:	232d      	movlt	r3, #45	; 0x2d
 800a20a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a20e:	487e      	ldr	r0, [pc, #504]	; (800a408 <_printf_float+0x2b8>)
 800a210:	4b7e      	ldr	r3, [pc, #504]	; (800a40c <_printf_float+0x2bc>)
 800a212:	e7d5      	b.n	800a1c0 <_printf_float+0x70>
 800a214:	6863      	ldr	r3, [r4, #4]
 800a216:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a21a:	9104      	str	r1, [sp, #16]
 800a21c:	1c59      	adds	r1, r3, #1
 800a21e:	d13c      	bne.n	800a29a <_printf_float+0x14a>
 800a220:	2306      	movs	r3, #6
 800a222:	6063      	str	r3, [r4, #4]
 800a224:	2300      	movs	r3, #0
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	ab08      	add	r3, sp, #32
 800a22a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a22e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a232:	ab07      	add	r3, sp, #28
 800a234:	6861      	ldr	r1, [r4, #4]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	6022      	str	r2, [r4, #0]
 800a23a:	f10d 031b 	add.w	r3, sp, #27
 800a23e:	4628      	mov	r0, r5
 800a240:	f7ff fef4 	bl	800a02c <__cvt>
 800a244:	9b04      	ldr	r3, [sp, #16]
 800a246:	9907      	ldr	r1, [sp, #28]
 800a248:	2b47      	cmp	r3, #71	; 0x47
 800a24a:	4680      	mov	r8, r0
 800a24c:	d108      	bne.n	800a260 <_printf_float+0x110>
 800a24e:	1cc8      	adds	r0, r1, #3
 800a250:	db02      	blt.n	800a258 <_printf_float+0x108>
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	4299      	cmp	r1, r3
 800a256:	dd41      	ble.n	800a2dc <_printf_float+0x18c>
 800a258:	f1a9 0902 	sub.w	r9, r9, #2
 800a25c:	fa5f f989 	uxtb.w	r9, r9
 800a260:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a264:	d820      	bhi.n	800a2a8 <_printf_float+0x158>
 800a266:	3901      	subs	r1, #1
 800a268:	464a      	mov	r2, r9
 800a26a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a26e:	9107      	str	r1, [sp, #28]
 800a270:	f7ff ff2e 	bl	800a0d0 <__exponent>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	9004      	str	r0, [sp, #16]
 800a278:	1813      	adds	r3, r2, r0
 800a27a:	2a01      	cmp	r2, #1
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	dc02      	bgt.n	800a286 <_printf_float+0x136>
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	07d2      	lsls	r2, r2, #31
 800a284:	d501      	bpl.n	800a28a <_printf_float+0x13a>
 800a286:	3301      	adds	r3, #1
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0a2      	beq.n	800a1d8 <_printf_float+0x88>
 800a292:	232d      	movs	r3, #45	; 0x2d
 800a294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a298:	e79e      	b.n	800a1d8 <_printf_float+0x88>
 800a29a:	9904      	ldr	r1, [sp, #16]
 800a29c:	2947      	cmp	r1, #71	; 0x47
 800a29e:	d1c1      	bne.n	800a224 <_printf_float+0xd4>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1bf      	bne.n	800a224 <_printf_float+0xd4>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e7bc      	b.n	800a222 <_printf_float+0xd2>
 800a2a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a2ac:	d118      	bne.n	800a2e0 <_printf_float+0x190>
 800a2ae:	2900      	cmp	r1, #0
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	dd0b      	ble.n	800a2cc <_printf_float+0x17c>
 800a2b4:	6121      	str	r1, [r4, #16]
 800a2b6:	b913      	cbnz	r3, 800a2be <_printf_float+0x16e>
 800a2b8:	6822      	ldr	r2, [r4, #0]
 800a2ba:	07d0      	lsls	r0, r2, #31
 800a2bc:	d502      	bpl.n	800a2c4 <_printf_float+0x174>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	440b      	add	r3, r1
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	e7de      	b.n	800a28a <_printf_float+0x13a>
 800a2cc:	b913      	cbnz	r3, 800a2d4 <_printf_float+0x184>
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	07d2      	lsls	r2, r2, #31
 800a2d2:	d501      	bpl.n	800a2d8 <_printf_float+0x188>
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	e7f4      	b.n	800a2c2 <_printf_float+0x172>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e7f2      	b.n	800a2c2 <_printf_float+0x172>
 800a2dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	4299      	cmp	r1, r3
 800a2e4:	db05      	blt.n	800a2f2 <_printf_float+0x1a2>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	6121      	str	r1, [r4, #16]
 800a2ea:	07d8      	lsls	r0, r3, #31
 800a2ec:	d5ea      	bpl.n	800a2c4 <_printf_float+0x174>
 800a2ee:	1c4b      	adds	r3, r1, #1
 800a2f0:	e7e7      	b.n	800a2c2 <_printf_float+0x172>
 800a2f2:	2900      	cmp	r1, #0
 800a2f4:	bfd4      	ite	le
 800a2f6:	f1c1 0202 	rsble	r2, r1, #2
 800a2fa:	2201      	movgt	r2, #1
 800a2fc:	4413      	add	r3, r2
 800a2fe:	e7e0      	b.n	800a2c2 <_printf_float+0x172>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	055a      	lsls	r2, r3, #21
 800a304:	d407      	bmi.n	800a316 <_printf_float+0x1c6>
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	4642      	mov	r2, r8
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	d12a      	bne.n	800a36a <_printf_float+0x21a>
 800a314:	e76a      	b.n	800a1ec <_printf_float+0x9c>
 800a316:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a31a:	f240 80e2 	bls.w	800a4e2 <_printf_float+0x392>
 800a31e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a322:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32a:	d133      	bne.n	800a394 <_printf_float+0x244>
 800a32c:	4a38      	ldr	r2, [pc, #224]	; (800a410 <_printf_float+0x2c0>)
 800a32e:	2301      	movs	r3, #1
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af58 	beq.w	800a1ec <_printf_float+0x9c>
 800a33c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a340:	429a      	cmp	r2, r3
 800a342:	db02      	blt.n	800a34a <_printf_float+0x1fa>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07d8      	lsls	r0, r3, #31
 800a348:	d50f      	bpl.n	800a36a <_printf_float+0x21a>
 800a34a:	4653      	mov	r3, sl
 800a34c:	465a      	mov	r2, fp
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	f43f af49 	beq.w	800a1ec <_printf_float+0x9c>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	f104 091a 	add.w	r9, r4, #26
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	3b01      	subs	r3, #1
 800a366:	4543      	cmp	r3, r8
 800a368:	dc09      	bgt.n	800a37e <_printf_float+0x22e>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	079b      	lsls	r3, r3, #30
 800a36e:	f100 8108 	bmi.w	800a582 <_printf_float+0x432>
 800a372:	68e0      	ldr	r0, [r4, #12]
 800a374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a376:	4298      	cmp	r0, r3
 800a378:	bfb8      	it	lt
 800a37a:	4618      	movlt	r0, r3
 800a37c:	e738      	b.n	800a1f0 <_printf_float+0xa0>
 800a37e:	2301      	movs	r3, #1
 800a380:	464a      	mov	r2, r9
 800a382:	4631      	mov	r1, r6
 800a384:	4628      	mov	r0, r5
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f af2f 	beq.w	800a1ec <_printf_float+0x9c>
 800a38e:	f108 0801 	add.w	r8, r8, #1
 800a392:	e7e6      	b.n	800a362 <_printf_float+0x212>
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	dc3c      	bgt.n	800a414 <_printf_float+0x2c4>
 800a39a:	4a1d      	ldr	r2, [pc, #116]	; (800a410 <_printf_float+0x2c0>)
 800a39c:	2301      	movs	r3, #1
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f af21 	beq.w	800a1ec <_printf_float+0x9c>
 800a3aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	d102      	bne.n	800a3b8 <_printf_float+0x268>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	07d9      	lsls	r1, r3, #31
 800a3b6:	d5d8      	bpl.n	800a36a <_printf_float+0x21a>
 800a3b8:	4653      	mov	r3, sl
 800a3ba:	465a      	mov	r2, fp
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f af12 	beq.w	800a1ec <_printf_float+0x9c>
 800a3c8:	f04f 0900 	mov.w	r9, #0
 800a3cc:	f104 0a1a 	add.w	sl, r4, #26
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	425b      	negs	r3, r3
 800a3d4:	454b      	cmp	r3, r9
 800a3d6:	dc01      	bgt.n	800a3dc <_printf_float+0x28c>
 800a3d8:	9b08      	ldr	r3, [sp, #32]
 800a3da:	e795      	b.n	800a308 <_printf_float+0x1b8>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4652      	mov	r2, sl
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f af00 	beq.w	800a1ec <_printf_float+0x9c>
 800a3ec:	f109 0901 	add.w	r9, r9, #1
 800a3f0:	e7ee      	b.n	800a3d0 <_printf_float+0x280>
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	ffffffff 	.word	0xffffffff
 800a3fc:	7fefffff 	.word	0x7fefffff
 800a400:	0800e7cc 	.word	0x0800e7cc
 800a404:	0800e7d0 	.word	0x0800e7d0
 800a408:	0800e7d8 	.word	0x0800e7d8
 800a40c:	0800e7d4 	.word	0x0800e7d4
 800a410:	0800e7dc 	.word	0x0800e7dc
 800a414:	9a08      	ldr	r2, [sp, #32]
 800a416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a418:	429a      	cmp	r2, r3
 800a41a:	bfa8      	it	ge
 800a41c:	461a      	movge	r2, r3
 800a41e:	2a00      	cmp	r2, #0
 800a420:	4691      	mov	r9, r2
 800a422:	dc38      	bgt.n	800a496 <_printf_float+0x346>
 800a424:	2300      	movs	r3, #0
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a42c:	f104 021a 	add.w	r2, r4, #26
 800a430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a432:	9905      	ldr	r1, [sp, #20]
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	eba3 0309 	sub.w	r3, r3, r9
 800a43a:	428b      	cmp	r3, r1
 800a43c:	dc33      	bgt.n	800a4a6 <_printf_float+0x356>
 800a43e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a442:	429a      	cmp	r2, r3
 800a444:	db3c      	blt.n	800a4c0 <_printf_float+0x370>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	07da      	lsls	r2, r3, #31
 800a44a:	d439      	bmi.n	800a4c0 <_printf_float+0x370>
 800a44c:	9b08      	ldr	r3, [sp, #32]
 800a44e:	9a04      	ldr	r2, [sp, #16]
 800a450:	9907      	ldr	r1, [sp, #28]
 800a452:	1a9a      	subs	r2, r3, r2
 800a454:	eba3 0901 	sub.w	r9, r3, r1
 800a458:	4591      	cmp	r9, r2
 800a45a:	bfa8      	it	ge
 800a45c:	4691      	movge	r9, r2
 800a45e:	f1b9 0f00 	cmp.w	r9, #0
 800a462:	dc35      	bgt.n	800a4d0 <_printf_float+0x380>
 800a464:	f04f 0800 	mov.w	r8, #0
 800a468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a46c:	f104 0a1a 	add.w	sl, r4, #26
 800a470:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	eba3 0309 	sub.w	r3, r3, r9
 800a47a:	4543      	cmp	r3, r8
 800a47c:	f77f af75 	ble.w	800a36a <_printf_float+0x21a>
 800a480:	2301      	movs	r3, #1
 800a482:	4652      	mov	r2, sl
 800a484:	4631      	mov	r1, r6
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	f43f aeae 	beq.w	800a1ec <_printf_float+0x9c>
 800a490:	f108 0801 	add.w	r8, r8, #1
 800a494:	e7ec      	b.n	800a470 <_printf_float+0x320>
 800a496:	4613      	mov	r3, r2
 800a498:	4631      	mov	r1, r6
 800a49a:	4642      	mov	r2, r8
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d1bf      	bne.n	800a424 <_printf_float+0x2d4>
 800a4a4:	e6a2      	b.n	800a1ec <_printf_float+0x9c>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	9204      	str	r2, [sp, #16]
 800a4ae:	47b8      	blx	r7
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	f43f ae9b 	beq.w	800a1ec <_printf_float+0x9c>
 800a4b6:	9b05      	ldr	r3, [sp, #20]
 800a4b8:	9a04      	ldr	r2, [sp, #16]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	e7b7      	b.n	800a430 <_printf_float+0x2e0>
 800a4c0:	4653      	mov	r3, sl
 800a4c2:	465a      	mov	r2, fp
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	d1be      	bne.n	800a44c <_printf_float+0x2fc>
 800a4ce:	e68d      	b.n	800a1ec <_printf_float+0x9c>
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	4442      	add	r2, r8
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d1c1      	bne.n	800a464 <_printf_float+0x314>
 800a4e0:	e684      	b.n	800a1ec <_printf_float+0x9c>
 800a4e2:	9a08      	ldr	r2, [sp, #32]
 800a4e4:	2a01      	cmp	r2, #1
 800a4e6:	dc01      	bgt.n	800a4ec <_printf_float+0x39c>
 800a4e8:	07db      	lsls	r3, r3, #31
 800a4ea:	d537      	bpl.n	800a55c <_printf_float+0x40c>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f ae78 	beq.w	800a1ec <_printf_float+0x9c>
 800a4fc:	4653      	mov	r3, sl
 800a4fe:	465a      	mov	r2, fp
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f ae70 	beq.w	800a1ec <_printf_float+0x9c>
 800a50c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a510:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a518:	d01b      	beq.n	800a552 <_printf_float+0x402>
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	f108 0201 	add.w	r2, r8, #1
 800a520:	3b01      	subs	r3, #1
 800a522:	4631      	mov	r1, r6
 800a524:	4628      	mov	r0, r5
 800a526:	47b8      	blx	r7
 800a528:	3001      	adds	r0, #1
 800a52a:	d10e      	bne.n	800a54a <_printf_float+0x3fa>
 800a52c:	e65e      	b.n	800a1ec <_printf_float+0x9c>
 800a52e:	2301      	movs	r3, #1
 800a530:	464a      	mov	r2, r9
 800a532:	4631      	mov	r1, r6
 800a534:	4628      	mov	r0, r5
 800a536:	47b8      	blx	r7
 800a538:	3001      	adds	r0, #1
 800a53a:	f43f ae57 	beq.w	800a1ec <_printf_float+0x9c>
 800a53e:	f108 0801 	add.w	r8, r8, #1
 800a542:	9b08      	ldr	r3, [sp, #32]
 800a544:	3b01      	subs	r3, #1
 800a546:	4543      	cmp	r3, r8
 800a548:	dcf1      	bgt.n	800a52e <_printf_float+0x3de>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a550:	e6db      	b.n	800a30a <_printf_float+0x1ba>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	f104 091a 	add.w	r9, r4, #26
 800a55a:	e7f2      	b.n	800a542 <_printf_float+0x3f2>
 800a55c:	2301      	movs	r3, #1
 800a55e:	4642      	mov	r2, r8
 800a560:	e7df      	b.n	800a522 <_printf_float+0x3d2>
 800a562:	2301      	movs	r3, #1
 800a564:	464a      	mov	r2, r9
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f ae3d 	beq.w	800a1ec <_printf_float+0x9c>
 800a572:	f108 0801 	add.w	r8, r8, #1
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a57a:	1a5b      	subs	r3, r3, r1
 800a57c:	4543      	cmp	r3, r8
 800a57e:	dcf0      	bgt.n	800a562 <_printf_float+0x412>
 800a580:	e6f7      	b.n	800a372 <_printf_float+0x222>
 800a582:	f04f 0800 	mov.w	r8, #0
 800a586:	f104 0919 	add.w	r9, r4, #25
 800a58a:	e7f4      	b.n	800a576 <_printf_float+0x426>

0800a58c <_printf_common>:
 800a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a590:	4616      	mov	r6, r2
 800a592:	4699      	mov	r9, r3
 800a594:	688a      	ldr	r2, [r1, #8]
 800a596:	690b      	ldr	r3, [r1, #16]
 800a598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a59c:	4293      	cmp	r3, r2
 800a59e:	bfb8      	it	lt
 800a5a0:	4613      	movlt	r3, r2
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5a8:	4607      	mov	r7, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	b10a      	cbz	r2, 800a5b2 <_printf_common+0x26>
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	0699      	lsls	r1, r3, #26
 800a5b6:	bf42      	ittt	mi
 800a5b8:	6833      	ldrmi	r3, [r6, #0]
 800a5ba:	3302      	addmi	r3, #2
 800a5bc:	6033      	strmi	r3, [r6, #0]
 800a5be:	6825      	ldr	r5, [r4, #0]
 800a5c0:	f015 0506 	ands.w	r5, r5, #6
 800a5c4:	d106      	bne.n	800a5d4 <_printf_common+0x48>
 800a5c6:	f104 0a19 	add.w	sl, r4, #25
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	6832      	ldr	r2, [r6, #0]
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dc26      	bgt.n	800a622 <_printf_common+0x96>
 800a5d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5d8:	1e13      	subs	r3, r2, #0
 800a5da:	6822      	ldr	r2, [r4, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	2301      	movne	r3, #1
 800a5e0:	0692      	lsls	r2, r2, #26
 800a5e2:	d42b      	bmi.n	800a63c <_printf_common+0xb0>
 800a5e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c0      	blx	r8
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d01e      	beq.n	800a630 <_printf_common+0xa4>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	68e5      	ldr	r5, [r4, #12]
 800a5f6:	6832      	ldr	r2, [r6, #0]
 800a5f8:	f003 0306 	and.w	r3, r3, #6
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	bf08      	it	eq
 800a600:	1aad      	subeq	r5, r5, r2
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	6922      	ldr	r2, [r4, #16]
 800a606:	bf0c      	ite	eq
 800a608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a60c:	2500      	movne	r5, #0
 800a60e:	4293      	cmp	r3, r2
 800a610:	bfc4      	itt	gt
 800a612:	1a9b      	subgt	r3, r3, r2
 800a614:	18ed      	addgt	r5, r5, r3
 800a616:	2600      	movs	r6, #0
 800a618:	341a      	adds	r4, #26
 800a61a:	42b5      	cmp	r5, r6
 800a61c:	d11a      	bne.n	800a654 <_printf_common+0xc8>
 800a61e:	2000      	movs	r0, #0
 800a620:	e008      	b.n	800a634 <_printf_common+0xa8>
 800a622:	2301      	movs	r3, #1
 800a624:	4652      	mov	r2, sl
 800a626:	4649      	mov	r1, r9
 800a628:	4638      	mov	r0, r7
 800a62a:	47c0      	blx	r8
 800a62c:	3001      	adds	r0, #1
 800a62e:	d103      	bne.n	800a638 <_printf_common+0xac>
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a638:	3501      	adds	r5, #1
 800a63a:	e7c6      	b.n	800a5ca <_printf_common+0x3e>
 800a63c:	18e1      	adds	r1, r4, r3
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	2030      	movs	r0, #48	; 0x30
 800a642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a646:	4422      	add	r2, r4
 800a648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a64c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a650:	3302      	adds	r3, #2
 800a652:	e7c7      	b.n	800a5e4 <_printf_common+0x58>
 800a654:	2301      	movs	r3, #1
 800a656:	4622      	mov	r2, r4
 800a658:	4649      	mov	r1, r9
 800a65a:	4638      	mov	r0, r7
 800a65c:	47c0      	blx	r8
 800a65e:	3001      	adds	r0, #1
 800a660:	d0e6      	beq.n	800a630 <_printf_common+0xa4>
 800a662:	3601      	adds	r6, #1
 800a664:	e7d9      	b.n	800a61a <_printf_common+0x8e>
	...

0800a668 <_printf_i>:
 800a668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	7e0f      	ldrb	r7, [r1, #24]
 800a66e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a670:	2f78      	cmp	r7, #120	; 0x78
 800a672:	4691      	mov	r9, r2
 800a674:	4680      	mov	r8, r0
 800a676:	460c      	mov	r4, r1
 800a678:	469a      	mov	sl, r3
 800a67a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a67e:	d807      	bhi.n	800a690 <_printf_i+0x28>
 800a680:	2f62      	cmp	r7, #98	; 0x62
 800a682:	d80a      	bhi.n	800a69a <_printf_i+0x32>
 800a684:	2f00      	cmp	r7, #0
 800a686:	f000 80d8 	beq.w	800a83a <_printf_i+0x1d2>
 800a68a:	2f58      	cmp	r7, #88	; 0x58
 800a68c:	f000 80a3 	beq.w	800a7d6 <_printf_i+0x16e>
 800a690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a698:	e03a      	b.n	800a710 <_printf_i+0xa8>
 800a69a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a69e:	2b15      	cmp	r3, #21
 800a6a0:	d8f6      	bhi.n	800a690 <_printf_i+0x28>
 800a6a2:	a101      	add	r1, pc, #4	; (adr r1, 800a6a8 <_printf_i+0x40>)
 800a6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6a8:	0800a701 	.word	0x0800a701
 800a6ac:	0800a715 	.word	0x0800a715
 800a6b0:	0800a691 	.word	0x0800a691
 800a6b4:	0800a691 	.word	0x0800a691
 800a6b8:	0800a691 	.word	0x0800a691
 800a6bc:	0800a691 	.word	0x0800a691
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a691 	.word	0x0800a691
 800a6c8:	0800a691 	.word	0x0800a691
 800a6cc:	0800a691 	.word	0x0800a691
 800a6d0:	0800a691 	.word	0x0800a691
 800a6d4:	0800a821 	.word	0x0800a821
 800a6d8:	0800a745 	.word	0x0800a745
 800a6dc:	0800a803 	.word	0x0800a803
 800a6e0:	0800a691 	.word	0x0800a691
 800a6e4:	0800a691 	.word	0x0800a691
 800a6e8:	0800a843 	.word	0x0800a843
 800a6ec:	0800a691 	.word	0x0800a691
 800a6f0:	0800a745 	.word	0x0800a745
 800a6f4:	0800a691 	.word	0x0800a691
 800a6f8:	0800a691 	.word	0x0800a691
 800a6fc:	0800a80b 	.word	0x0800a80b
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	1d1a      	adds	r2, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	602a      	str	r2, [r5, #0]
 800a708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a710:	2301      	movs	r3, #1
 800a712:	e0a3      	b.n	800a85c <_printf_i+0x1f4>
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	6829      	ldr	r1, [r5, #0]
 800a718:	0606      	lsls	r6, r0, #24
 800a71a:	f101 0304 	add.w	r3, r1, #4
 800a71e:	d50a      	bpl.n	800a736 <_printf_i+0xce>
 800a720:	680e      	ldr	r6, [r1, #0]
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	2e00      	cmp	r6, #0
 800a726:	da03      	bge.n	800a730 <_printf_i+0xc8>
 800a728:	232d      	movs	r3, #45	; 0x2d
 800a72a:	4276      	negs	r6, r6
 800a72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a730:	485e      	ldr	r0, [pc, #376]	; (800a8ac <_printf_i+0x244>)
 800a732:	230a      	movs	r3, #10
 800a734:	e019      	b.n	800a76a <_printf_i+0x102>
 800a736:	680e      	ldr	r6, [r1, #0]
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a73e:	bf18      	it	ne
 800a740:	b236      	sxthne	r6, r6
 800a742:	e7ef      	b.n	800a724 <_printf_i+0xbc>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	6820      	ldr	r0, [r4, #0]
 800a748:	1d19      	adds	r1, r3, #4
 800a74a:	6029      	str	r1, [r5, #0]
 800a74c:	0601      	lsls	r1, r0, #24
 800a74e:	d501      	bpl.n	800a754 <_printf_i+0xec>
 800a750:	681e      	ldr	r6, [r3, #0]
 800a752:	e002      	b.n	800a75a <_printf_i+0xf2>
 800a754:	0646      	lsls	r6, r0, #25
 800a756:	d5fb      	bpl.n	800a750 <_printf_i+0xe8>
 800a758:	881e      	ldrh	r6, [r3, #0]
 800a75a:	4854      	ldr	r0, [pc, #336]	; (800a8ac <_printf_i+0x244>)
 800a75c:	2f6f      	cmp	r7, #111	; 0x6f
 800a75e:	bf0c      	ite	eq
 800a760:	2308      	moveq	r3, #8
 800a762:	230a      	movne	r3, #10
 800a764:	2100      	movs	r1, #0
 800a766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a76a:	6865      	ldr	r5, [r4, #4]
 800a76c:	60a5      	str	r5, [r4, #8]
 800a76e:	2d00      	cmp	r5, #0
 800a770:	bfa2      	ittt	ge
 800a772:	6821      	ldrge	r1, [r4, #0]
 800a774:	f021 0104 	bicge.w	r1, r1, #4
 800a778:	6021      	strge	r1, [r4, #0]
 800a77a:	b90e      	cbnz	r6, 800a780 <_printf_i+0x118>
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d04d      	beq.n	800a81c <_printf_i+0x1b4>
 800a780:	4615      	mov	r5, r2
 800a782:	fbb6 f1f3 	udiv	r1, r6, r3
 800a786:	fb03 6711 	mls	r7, r3, r1, r6
 800a78a:	5dc7      	ldrb	r7, [r0, r7]
 800a78c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a790:	4637      	mov	r7, r6
 800a792:	42bb      	cmp	r3, r7
 800a794:	460e      	mov	r6, r1
 800a796:	d9f4      	bls.n	800a782 <_printf_i+0x11a>
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d10b      	bne.n	800a7b4 <_printf_i+0x14c>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	07de      	lsls	r6, r3, #31
 800a7a0:	d508      	bpl.n	800a7b4 <_printf_i+0x14c>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4299      	cmp	r1, r3
 800a7a8:	bfde      	ittt	le
 800a7aa:	2330      	movle	r3, #48	; 0x30
 800a7ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7b4:	1b52      	subs	r2, r2, r5
 800a7b6:	6122      	str	r2, [r4, #16]
 800a7b8:	f8cd a000 	str.w	sl, [sp]
 800a7bc:	464b      	mov	r3, r9
 800a7be:	aa03      	add	r2, sp, #12
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	f7ff fee2 	bl	800a58c <_printf_common>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d14c      	bne.n	800a866 <_printf_i+0x1fe>
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	b004      	add	sp, #16
 800a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d6:	4835      	ldr	r0, [pc, #212]	; (800a8ac <_printf_i+0x244>)
 800a7d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7dc:	6829      	ldr	r1, [r5, #0]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7e4:	6029      	str	r1, [r5, #0]
 800a7e6:	061d      	lsls	r5, r3, #24
 800a7e8:	d514      	bpl.n	800a814 <_printf_i+0x1ac>
 800a7ea:	07df      	lsls	r7, r3, #31
 800a7ec:	bf44      	itt	mi
 800a7ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a7f2:	6023      	strmi	r3, [r4, #0]
 800a7f4:	b91e      	cbnz	r6, 800a7fe <_printf_i+0x196>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f023 0320 	bic.w	r3, r3, #32
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	2310      	movs	r3, #16
 800a800:	e7b0      	b.n	800a764 <_printf_i+0xfc>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	f043 0320 	orr.w	r3, r3, #32
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	2378      	movs	r3, #120	; 0x78
 800a80c:	4828      	ldr	r0, [pc, #160]	; (800a8b0 <_printf_i+0x248>)
 800a80e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a812:	e7e3      	b.n	800a7dc <_printf_i+0x174>
 800a814:	0659      	lsls	r1, r3, #25
 800a816:	bf48      	it	mi
 800a818:	b2b6      	uxthmi	r6, r6
 800a81a:	e7e6      	b.n	800a7ea <_printf_i+0x182>
 800a81c:	4615      	mov	r5, r2
 800a81e:	e7bb      	b.n	800a798 <_printf_i+0x130>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	6826      	ldr	r6, [r4, #0]
 800a824:	6961      	ldr	r1, [r4, #20]
 800a826:	1d18      	adds	r0, r3, #4
 800a828:	6028      	str	r0, [r5, #0]
 800a82a:	0635      	lsls	r5, r6, #24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	d501      	bpl.n	800a834 <_printf_i+0x1cc>
 800a830:	6019      	str	r1, [r3, #0]
 800a832:	e002      	b.n	800a83a <_printf_i+0x1d2>
 800a834:	0670      	lsls	r0, r6, #25
 800a836:	d5fb      	bpl.n	800a830 <_printf_i+0x1c8>
 800a838:	8019      	strh	r1, [r3, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	6123      	str	r3, [r4, #16]
 800a83e:	4615      	mov	r5, r2
 800a840:	e7ba      	b.n	800a7b8 <_printf_i+0x150>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	1d1a      	adds	r2, r3, #4
 800a846:	602a      	str	r2, [r5, #0]
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	6862      	ldr	r2, [r4, #4]
 800a84c:	2100      	movs	r1, #0
 800a84e:	4628      	mov	r0, r5
 800a850:	f7f5 fd4e 	bl	80002f0 <memchr>
 800a854:	b108      	cbz	r0, 800a85a <_printf_i+0x1f2>
 800a856:	1b40      	subs	r0, r0, r5
 800a858:	6060      	str	r0, [r4, #4]
 800a85a:	6863      	ldr	r3, [r4, #4]
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	2300      	movs	r3, #0
 800a860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a864:	e7a8      	b.n	800a7b8 <_printf_i+0x150>
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	462a      	mov	r2, r5
 800a86a:	4649      	mov	r1, r9
 800a86c:	4640      	mov	r0, r8
 800a86e:	47d0      	blx	sl
 800a870:	3001      	adds	r0, #1
 800a872:	d0ab      	beq.n	800a7cc <_printf_i+0x164>
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	079b      	lsls	r3, r3, #30
 800a878:	d413      	bmi.n	800a8a2 <_printf_i+0x23a>
 800a87a:	68e0      	ldr	r0, [r4, #12]
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	4298      	cmp	r0, r3
 800a880:	bfb8      	it	lt
 800a882:	4618      	movlt	r0, r3
 800a884:	e7a4      	b.n	800a7d0 <_printf_i+0x168>
 800a886:	2301      	movs	r3, #1
 800a888:	4632      	mov	r2, r6
 800a88a:	4649      	mov	r1, r9
 800a88c:	4640      	mov	r0, r8
 800a88e:	47d0      	blx	sl
 800a890:	3001      	adds	r0, #1
 800a892:	d09b      	beq.n	800a7cc <_printf_i+0x164>
 800a894:	3501      	adds	r5, #1
 800a896:	68e3      	ldr	r3, [r4, #12]
 800a898:	9903      	ldr	r1, [sp, #12]
 800a89a:	1a5b      	subs	r3, r3, r1
 800a89c:	42ab      	cmp	r3, r5
 800a89e:	dcf2      	bgt.n	800a886 <_printf_i+0x21e>
 800a8a0:	e7eb      	b.n	800a87a <_printf_i+0x212>
 800a8a2:	2500      	movs	r5, #0
 800a8a4:	f104 0619 	add.w	r6, r4, #25
 800a8a8:	e7f5      	b.n	800a896 <_printf_i+0x22e>
 800a8aa:	bf00      	nop
 800a8ac:	0800e7de 	.word	0x0800e7de
 800a8b0:	0800e7ef 	.word	0x0800e7ef

0800a8b4 <_scanf_float>:
 800a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	b087      	sub	sp, #28
 800a8ba:	4617      	mov	r7, r2
 800a8bc:	9303      	str	r3, [sp, #12]
 800a8be:	688b      	ldr	r3, [r1, #8]
 800a8c0:	1e5a      	subs	r2, r3, #1
 800a8c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a8c6:	bf83      	ittte	hi
 800a8c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a8cc:	195b      	addhi	r3, r3, r5
 800a8ce:	9302      	strhi	r3, [sp, #8]
 800a8d0:	2300      	movls	r3, #0
 800a8d2:	bf86      	itte	hi
 800a8d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a8d8:	608b      	strhi	r3, [r1, #8]
 800a8da:	9302      	strls	r3, [sp, #8]
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	468b      	mov	fp, r1
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a8e6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a8ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	465e      	mov	r6, fp
 800a8f4:	46aa      	mov	sl, r5
 800a8f6:	46a9      	mov	r9, r5
 800a8f8:	9501      	str	r5, [sp, #4]
 800a8fa:	68a2      	ldr	r2, [r4, #8]
 800a8fc:	b152      	cbz	r2, 800a914 <_scanf_float+0x60>
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2b4e      	cmp	r3, #78	; 0x4e
 800a904:	d864      	bhi.n	800a9d0 <_scanf_float+0x11c>
 800a906:	2b40      	cmp	r3, #64	; 0x40
 800a908:	d83c      	bhi.n	800a984 <_scanf_float+0xd0>
 800a90a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a90e:	b2c8      	uxtb	r0, r1
 800a910:	280e      	cmp	r0, #14
 800a912:	d93a      	bls.n	800a98a <_scanf_float+0xd6>
 800a914:	f1b9 0f00 	cmp.w	r9, #0
 800a918:	d003      	beq.n	800a922 <_scanf_float+0x6e>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a926:	f1ba 0f01 	cmp.w	sl, #1
 800a92a:	f200 8113 	bhi.w	800ab54 <_scanf_float+0x2a0>
 800a92e:	455e      	cmp	r6, fp
 800a930:	f200 8105 	bhi.w	800ab3e <_scanf_float+0x28a>
 800a934:	2501      	movs	r5, #1
 800a936:	4628      	mov	r0, r5
 800a938:	b007      	add	sp, #28
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a942:	2a0d      	cmp	r2, #13
 800a944:	d8e6      	bhi.n	800a914 <_scanf_float+0x60>
 800a946:	a101      	add	r1, pc, #4	; (adr r1, 800a94c <_scanf_float+0x98>)
 800a948:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a94c:	0800aa8b 	.word	0x0800aa8b
 800a950:	0800a915 	.word	0x0800a915
 800a954:	0800a915 	.word	0x0800a915
 800a958:	0800a915 	.word	0x0800a915
 800a95c:	0800aaeb 	.word	0x0800aaeb
 800a960:	0800aac3 	.word	0x0800aac3
 800a964:	0800a915 	.word	0x0800a915
 800a968:	0800a915 	.word	0x0800a915
 800a96c:	0800aa99 	.word	0x0800aa99
 800a970:	0800a915 	.word	0x0800a915
 800a974:	0800a915 	.word	0x0800a915
 800a978:	0800a915 	.word	0x0800a915
 800a97c:	0800a915 	.word	0x0800a915
 800a980:	0800aa51 	.word	0x0800aa51
 800a984:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a988:	e7db      	b.n	800a942 <_scanf_float+0x8e>
 800a98a:	290e      	cmp	r1, #14
 800a98c:	d8c2      	bhi.n	800a914 <_scanf_float+0x60>
 800a98e:	a001      	add	r0, pc, #4	; (adr r0, 800a994 <_scanf_float+0xe0>)
 800a990:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a994:	0800aa43 	.word	0x0800aa43
 800a998:	0800a915 	.word	0x0800a915
 800a99c:	0800aa43 	.word	0x0800aa43
 800a9a0:	0800aad7 	.word	0x0800aad7
 800a9a4:	0800a915 	.word	0x0800a915
 800a9a8:	0800a9f1 	.word	0x0800a9f1
 800a9ac:	0800aa2d 	.word	0x0800aa2d
 800a9b0:	0800aa2d 	.word	0x0800aa2d
 800a9b4:	0800aa2d 	.word	0x0800aa2d
 800a9b8:	0800aa2d 	.word	0x0800aa2d
 800a9bc:	0800aa2d 	.word	0x0800aa2d
 800a9c0:	0800aa2d 	.word	0x0800aa2d
 800a9c4:	0800aa2d 	.word	0x0800aa2d
 800a9c8:	0800aa2d 	.word	0x0800aa2d
 800a9cc:	0800aa2d 	.word	0x0800aa2d
 800a9d0:	2b6e      	cmp	r3, #110	; 0x6e
 800a9d2:	d809      	bhi.n	800a9e8 <_scanf_float+0x134>
 800a9d4:	2b60      	cmp	r3, #96	; 0x60
 800a9d6:	d8b2      	bhi.n	800a93e <_scanf_float+0x8a>
 800a9d8:	2b54      	cmp	r3, #84	; 0x54
 800a9da:	d077      	beq.n	800aacc <_scanf_float+0x218>
 800a9dc:	2b59      	cmp	r3, #89	; 0x59
 800a9de:	d199      	bne.n	800a914 <_scanf_float+0x60>
 800a9e0:	2d07      	cmp	r5, #7
 800a9e2:	d197      	bne.n	800a914 <_scanf_float+0x60>
 800a9e4:	2508      	movs	r5, #8
 800a9e6:	e029      	b.n	800aa3c <_scanf_float+0x188>
 800a9e8:	2b74      	cmp	r3, #116	; 0x74
 800a9ea:	d06f      	beq.n	800aacc <_scanf_float+0x218>
 800a9ec:	2b79      	cmp	r3, #121	; 0x79
 800a9ee:	e7f6      	b.n	800a9de <_scanf_float+0x12a>
 800a9f0:	6821      	ldr	r1, [r4, #0]
 800a9f2:	05c8      	lsls	r0, r1, #23
 800a9f4:	d51a      	bpl.n	800aa2c <_scanf_float+0x178>
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a9fc:	6021      	str	r1, [r4, #0]
 800a9fe:	f109 0901 	add.w	r9, r9, #1
 800aa02:	b11b      	cbz	r3, 800aa0c <_scanf_float+0x158>
 800aa04:	3b01      	subs	r3, #1
 800aa06:	3201      	adds	r2, #1
 800aa08:	9302      	str	r3, [sp, #8]
 800aa0a:	60a2      	str	r2, [r4, #8]
 800aa0c:	68a3      	ldr	r3, [r4, #8]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	60a3      	str	r3, [r4, #8]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	f340 8084 	ble.w	800ab2c <_scanf_float+0x278>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	603b      	str	r3, [r7, #0]
 800aa2a:	e766      	b.n	800a8fa <_scanf_float+0x46>
 800aa2c:	eb1a 0f05 	cmn.w	sl, r5
 800aa30:	f47f af70 	bne.w	800a914 <_scanf_float+0x60>
 800aa34:	6822      	ldr	r2, [r4, #0]
 800aa36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aa3a:	6022      	str	r2, [r4, #0]
 800aa3c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa40:	e7e4      	b.n	800aa0c <_scanf_float+0x158>
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	0610      	lsls	r0, r2, #24
 800aa46:	f57f af65 	bpl.w	800a914 <_scanf_float+0x60>
 800aa4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa4e:	e7f4      	b.n	800aa3a <_scanf_float+0x186>
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d10e      	bne.n	800aa74 <_scanf_float+0x1c0>
 800aa56:	f1b9 0f00 	cmp.w	r9, #0
 800aa5a:	d10e      	bne.n	800aa7a <_scanf_float+0x1c6>
 800aa5c:	6822      	ldr	r2, [r4, #0]
 800aa5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aa62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa66:	d108      	bne.n	800aa7a <_scanf_float+0x1c6>
 800aa68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa6c:	6022      	str	r2, [r4, #0]
 800aa6e:	f04f 0a01 	mov.w	sl, #1
 800aa72:	e7e3      	b.n	800aa3c <_scanf_float+0x188>
 800aa74:	f1ba 0f02 	cmp.w	sl, #2
 800aa78:	d055      	beq.n	800ab26 <_scanf_float+0x272>
 800aa7a:	2d01      	cmp	r5, #1
 800aa7c:	d002      	beq.n	800aa84 <_scanf_float+0x1d0>
 800aa7e:	2d04      	cmp	r5, #4
 800aa80:	f47f af48 	bne.w	800a914 <_scanf_float+0x60>
 800aa84:	3501      	adds	r5, #1
 800aa86:	b2ed      	uxtb	r5, r5
 800aa88:	e7d8      	b.n	800aa3c <_scanf_float+0x188>
 800aa8a:	f1ba 0f01 	cmp.w	sl, #1
 800aa8e:	f47f af41 	bne.w	800a914 <_scanf_float+0x60>
 800aa92:	f04f 0a02 	mov.w	sl, #2
 800aa96:	e7d1      	b.n	800aa3c <_scanf_float+0x188>
 800aa98:	b97d      	cbnz	r5, 800aaba <_scanf_float+0x206>
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	f47f af3c 	bne.w	800a91a <_scanf_float+0x66>
 800aaa2:	6822      	ldr	r2, [r4, #0]
 800aaa4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaa8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aaac:	f47f af39 	bne.w	800a922 <_scanf_float+0x6e>
 800aab0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	2501      	movs	r5, #1
 800aab8:	e7c0      	b.n	800aa3c <_scanf_float+0x188>
 800aaba:	2d03      	cmp	r5, #3
 800aabc:	d0e2      	beq.n	800aa84 <_scanf_float+0x1d0>
 800aabe:	2d05      	cmp	r5, #5
 800aac0:	e7de      	b.n	800aa80 <_scanf_float+0x1cc>
 800aac2:	2d02      	cmp	r5, #2
 800aac4:	f47f af26 	bne.w	800a914 <_scanf_float+0x60>
 800aac8:	2503      	movs	r5, #3
 800aaca:	e7b7      	b.n	800aa3c <_scanf_float+0x188>
 800aacc:	2d06      	cmp	r5, #6
 800aace:	f47f af21 	bne.w	800a914 <_scanf_float+0x60>
 800aad2:	2507      	movs	r5, #7
 800aad4:	e7b2      	b.n	800aa3c <_scanf_float+0x188>
 800aad6:	6822      	ldr	r2, [r4, #0]
 800aad8:	0591      	lsls	r1, r2, #22
 800aada:	f57f af1b 	bpl.w	800a914 <_scanf_float+0x60>
 800aade:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aae2:	6022      	str	r2, [r4, #0]
 800aae4:	f8cd 9004 	str.w	r9, [sp, #4]
 800aae8:	e7a8      	b.n	800aa3c <_scanf_float+0x188>
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aaf0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aaf4:	d006      	beq.n	800ab04 <_scanf_float+0x250>
 800aaf6:	0550      	lsls	r0, r2, #21
 800aaf8:	f57f af0c 	bpl.w	800a914 <_scanf_float+0x60>
 800aafc:	f1b9 0f00 	cmp.w	r9, #0
 800ab00:	f43f af0f 	beq.w	800a922 <_scanf_float+0x6e>
 800ab04:	0591      	lsls	r1, r2, #22
 800ab06:	bf58      	it	pl
 800ab08:	9901      	ldrpl	r1, [sp, #4]
 800ab0a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab0e:	bf58      	it	pl
 800ab10:	eba9 0101 	subpl.w	r1, r9, r1
 800ab14:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ab18:	bf58      	it	pl
 800ab1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab1e:	6022      	str	r2, [r4, #0]
 800ab20:	f04f 0900 	mov.w	r9, #0
 800ab24:	e78a      	b.n	800aa3c <_scanf_float+0x188>
 800ab26:	f04f 0a03 	mov.w	sl, #3
 800ab2a:	e787      	b.n	800aa3c <_scanf_float+0x188>
 800ab2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab30:	4639      	mov	r1, r7
 800ab32:	4640      	mov	r0, r8
 800ab34:	4798      	blx	r3
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f aedf 	beq.w	800a8fa <_scanf_float+0x46>
 800ab3c:	e6ea      	b.n	800a914 <_scanf_float+0x60>
 800ab3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab46:	463a      	mov	r2, r7
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4798      	blx	r3
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	6123      	str	r3, [r4, #16]
 800ab52:	e6ec      	b.n	800a92e <_scanf_float+0x7a>
 800ab54:	1e6b      	subs	r3, r5, #1
 800ab56:	2b06      	cmp	r3, #6
 800ab58:	d825      	bhi.n	800aba6 <_scanf_float+0x2f2>
 800ab5a:	2d02      	cmp	r5, #2
 800ab5c:	d836      	bhi.n	800abcc <_scanf_float+0x318>
 800ab5e:	455e      	cmp	r6, fp
 800ab60:	f67f aee8 	bls.w	800a934 <_scanf_float+0x80>
 800ab64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab6c:	463a      	mov	r2, r7
 800ab6e:	4640      	mov	r0, r8
 800ab70:	4798      	blx	r3
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	e7f1      	b.n	800ab5e <_scanf_float+0x2aa>
 800ab7a:	9802      	ldr	r0, [sp, #8]
 800ab7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab80:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ab84:	9002      	str	r0, [sp, #8]
 800ab86:	463a      	mov	r2, r7
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4798      	blx	r3
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab96:	fa5f fa8a 	uxtb.w	sl, sl
 800ab9a:	f1ba 0f02 	cmp.w	sl, #2
 800ab9e:	d1ec      	bne.n	800ab7a <_scanf_float+0x2c6>
 800aba0:	3d03      	subs	r5, #3
 800aba2:	b2ed      	uxtb	r5, r5
 800aba4:	1b76      	subs	r6, r6, r5
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	05da      	lsls	r2, r3, #23
 800abaa:	d52f      	bpl.n	800ac0c <_scanf_float+0x358>
 800abac:	055b      	lsls	r3, r3, #21
 800abae:	d510      	bpl.n	800abd2 <_scanf_float+0x31e>
 800abb0:	455e      	cmp	r6, fp
 800abb2:	f67f aebf 	bls.w	800a934 <_scanf_float+0x80>
 800abb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abbe:	463a      	mov	r2, r7
 800abc0:	4640      	mov	r0, r8
 800abc2:	4798      	blx	r3
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	e7f1      	b.n	800abb0 <_scanf_float+0x2fc>
 800abcc:	46aa      	mov	sl, r5
 800abce:	9602      	str	r6, [sp, #8]
 800abd0:	e7df      	b.n	800ab92 <_scanf_float+0x2de>
 800abd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	2965      	cmp	r1, #101	; 0x65
 800abda:	f103 33ff 	add.w	r3, r3, #4294967295
 800abde:	f106 35ff 	add.w	r5, r6, #4294967295
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	d00c      	beq.n	800ac00 <_scanf_float+0x34c>
 800abe6:	2945      	cmp	r1, #69	; 0x45
 800abe8:	d00a      	beq.n	800ac00 <_scanf_float+0x34c>
 800abea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abee:	463a      	mov	r2, r7
 800abf0:	4640      	mov	r0, r8
 800abf2:	4798      	blx	r3
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	1eb5      	subs	r5, r6, #2
 800abfe:	6123      	str	r3, [r4, #16]
 800ac00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac04:	463a      	mov	r2, r7
 800ac06:	4640      	mov	r0, r8
 800ac08:	4798      	blx	r3
 800ac0a:	462e      	mov	r6, r5
 800ac0c:	6825      	ldr	r5, [r4, #0]
 800ac0e:	f015 0510 	ands.w	r5, r5, #16
 800ac12:	d14e      	bne.n	800acb2 <_scanf_float+0x3fe>
 800ac14:	7035      	strb	r5, [r6, #0]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac20:	d119      	bne.n	800ac56 <_scanf_float+0x3a2>
 800ac22:	9b01      	ldr	r3, [sp, #4]
 800ac24:	454b      	cmp	r3, r9
 800ac26:	eba3 0209 	sub.w	r2, r3, r9
 800ac2a:	d121      	bne.n	800ac70 <_scanf_float+0x3bc>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4659      	mov	r1, fp
 800ac30:	4640      	mov	r0, r8
 800ac32:	f000 fe3b 	bl	800b8ac <_strtod_r>
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	9b03      	ldr	r3, [sp, #12]
 800ac3a:	f012 0f02 	tst.w	r2, #2
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	d021      	beq.n	800ac86 <_scanf_float+0x3d2>
 800ac42:	9903      	ldr	r1, [sp, #12]
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	600a      	str	r2, [r1, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	ed83 0b00 	vstr	d0, [r3]
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	3301      	adds	r3, #1
 800ac52:	60e3      	str	r3, [r4, #12]
 800ac54:	e66f      	b.n	800a936 <_scanf_float+0x82>
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0e7      	beq.n	800ac2c <_scanf_float+0x378>
 800ac5c:	9905      	ldr	r1, [sp, #20]
 800ac5e:	230a      	movs	r3, #10
 800ac60:	462a      	mov	r2, r5
 800ac62:	3101      	adds	r1, #1
 800ac64:	4640      	mov	r0, r8
 800ac66:	f000 fea9 	bl	800b9bc <_strtol_r>
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	9e05      	ldr	r6, [sp, #20]
 800ac6e:	1ac2      	subs	r2, r0, r3
 800ac70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ac74:	429e      	cmp	r6, r3
 800ac76:	bf28      	it	cs
 800ac78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ac7c:	490e      	ldr	r1, [pc, #56]	; (800acb8 <_scanf_float+0x404>)
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f000 f824 	bl	800accc <siprintf>
 800ac84:	e7d2      	b.n	800ac2c <_scanf_float+0x378>
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	f012 0f04 	tst.w	r2, #4
 800ac8c:	f103 0204 	add.w	r2, r3, #4
 800ac90:	600a      	str	r2, [r1, #0]
 800ac92:	d1d9      	bne.n	800ac48 <_scanf_float+0x394>
 800ac94:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	681e      	ldr	r6, [r3, #0]
 800ac9e:	d705      	bvc.n	800acac <_scanf_float+0x3f8>
 800aca0:	4806      	ldr	r0, [pc, #24]	; (800acbc <_scanf_float+0x408>)
 800aca2:	f000 f80d 	bl	800acc0 <nanf>
 800aca6:	ed86 0a00 	vstr	s0, [r6]
 800acaa:	e7d0      	b.n	800ac4e <_scanf_float+0x39a>
 800acac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800acb0:	e7f9      	b.n	800aca6 <_scanf_float+0x3f2>
 800acb2:	2500      	movs	r5, #0
 800acb4:	e63f      	b.n	800a936 <_scanf_float+0x82>
 800acb6:	bf00      	nop
 800acb8:	0800e800 	.word	0x0800e800
 800acbc:	0800ec08 	.word	0x0800ec08

0800acc0 <nanf>:
 800acc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800acc8 <nanf+0x8>
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	7fc00000 	.word	0x7fc00000

0800accc <siprintf>:
 800accc:	b40e      	push	{r1, r2, r3}
 800acce:	b500      	push	{lr}
 800acd0:	b09c      	sub	sp, #112	; 0x70
 800acd2:	ab1d      	add	r3, sp, #116	; 0x74
 800acd4:	9002      	str	r0, [sp, #8]
 800acd6:	9006      	str	r0, [sp, #24]
 800acd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acdc:	4809      	ldr	r0, [pc, #36]	; (800ad04 <siprintf+0x38>)
 800acde:	9107      	str	r1, [sp, #28]
 800ace0:	9104      	str	r1, [sp, #16]
 800ace2:	4909      	ldr	r1, [pc, #36]	; (800ad08 <siprintf+0x3c>)
 800ace4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace8:	9105      	str	r1, [sp, #20]
 800acea:	6800      	ldr	r0, [r0, #0]
 800acec:	9301      	str	r3, [sp, #4]
 800acee:	a902      	add	r1, sp, #8
 800acf0:	f002 fdfe 	bl	800d8f0 <_svfiprintf_r>
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	2200      	movs	r2, #0
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	b01c      	add	sp, #112	; 0x70
 800acfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad00:	b003      	add	sp, #12
 800ad02:	4770      	bx	lr
 800ad04:	24000030 	.word	0x24000030
 800ad08:	ffff0208 	.word	0xffff0208

0800ad0c <sulp>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	4604      	mov	r4, r0
 800ad10:	460d      	mov	r5, r1
 800ad12:	4616      	mov	r6, r2
 800ad14:	ec45 4b10 	vmov	d0, r4, r5
 800ad18:	f002 fb4c 	bl	800d3b4 <__ulp>
 800ad1c:	b17e      	cbz	r6, 800ad3e <sulp+0x32>
 800ad1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dd09      	ble.n	800ad3e <sulp+0x32>
 800ad2a:	051b      	lsls	r3, r3, #20
 800ad2c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ad30:	2000      	movs	r0, #0
 800ad32:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ad36:	ec41 0b17 	vmov	d7, r0, r1
 800ad3a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}

0800ad40 <_strtod_l>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	ed2d 8b0e 	vpush	{d8-d14}
 800ad48:	b097      	sub	sp, #92	; 0x5c
 800ad4a:	461f      	mov	r7, r3
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9312      	str	r3, [sp, #72]	; 0x48
 800ad50:	4ba1      	ldr	r3, [pc, #644]	; (800afd8 <_strtod_l+0x298>)
 800ad52:	920d      	str	r2, [sp, #52]	; 0x34
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	4604      	mov	r4, r0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	468b      	mov	fp, r1
 800ad5e:	f7f5 fabf 	bl	80002e0 <strlen>
 800ad62:	f04f 0800 	mov.w	r8, #0
 800ad66:	4605      	mov	r5, r0
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ad70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad72:	7813      	ldrb	r3, [r2, #0]
 800ad74:	2b2b      	cmp	r3, #43	; 0x2b
 800ad76:	d04d      	beq.n	800ae14 <_strtod_l+0xd4>
 800ad78:	d83a      	bhi.n	800adf0 <_strtod_l+0xb0>
 800ad7a:	2b0d      	cmp	r3, #13
 800ad7c:	d833      	bhi.n	800ade6 <_strtod_l+0xa6>
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d833      	bhi.n	800adea <_strtod_l+0xaa>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d03d      	beq.n	800ae02 <_strtod_l+0xc2>
 800ad86:	2300      	movs	r3, #0
 800ad88:	9308      	str	r3, [sp, #32]
 800ad8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ad8c:	7833      	ldrb	r3, [r6, #0]
 800ad8e:	2b30      	cmp	r3, #48	; 0x30
 800ad90:	f040 80b0 	bne.w	800aef4 <_strtod_l+0x1b4>
 800ad94:	7873      	ldrb	r3, [r6, #1]
 800ad96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad9a:	2b58      	cmp	r3, #88	; 0x58
 800ad9c:	d167      	bne.n	800ae6e <_strtod_l+0x12e>
 800ad9e:	9b08      	ldr	r3, [sp, #32]
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	ab12      	add	r3, sp, #72	; 0x48
 800ada4:	9702      	str	r7, [sp, #8]
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	4a8c      	ldr	r2, [pc, #560]	; (800afdc <_strtod_l+0x29c>)
 800adaa:	ab13      	add	r3, sp, #76	; 0x4c
 800adac:	a911      	add	r1, sp, #68	; 0x44
 800adae:	4620      	mov	r0, r4
 800adb0:	f001 fc68 	bl	800c684 <__gethex>
 800adb4:	f010 0507 	ands.w	r5, r0, #7
 800adb8:	4607      	mov	r7, r0
 800adba:	d005      	beq.n	800adc8 <_strtod_l+0x88>
 800adbc:	2d06      	cmp	r5, #6
 800adbe:	d12b      	bne.n	800ae18 <_strtod_l+0xd8>
 800adc0:	3601      	adds	r6, #1
 800adc2:	2300      	movs	r3, #0
 800adc4:	9611      	str	r6, [sp, #68]	; 0x44
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 854e 	bne.w	800b86c <_strtod_l+0xb2c>
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	b1e3      	cbz	r3, 800ae0e <_strtod_l+0xce>
 800add4:	ec49 8b17 	vmov	d7, r8, r9
 800add8:	eeb1 0b47 	vneg.f64	d0, d7
 800addc:	b017      	add	sp, #92	; 0x5c
 800adde:	ecbd 8b0e 	vpop	{d8-d14}
 800ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	d1cd      	bne.n	800ad86 <_strtod_l+0x46>
 800adea:	3201      	adds	r2, #1
 800adec:	9211      	str	r2, [sp, #68]	; 0x44
 800adee:	e7bf      	b.n	800ad70 <_strtod_l+0x30>
 800adf0:	2b2d      	cmp	r3, #45	; 0x2d
 800adf2:	d1c8      	bne.n	800ad86 <_strtod_l+0x46>
 800adf4:	2301      	movs	r3, #1
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	1c53      	adds	r3, r2, #1
 800adfa:	9311      	str	r3, [sp, #68]	; 0x44
 800adfc:	7853      	ldrb	r3, [r2, #1]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1c3      	bne.n	800ad8a <_strtod_l+0x4a>
 800ae02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f040 852d 	bne.w	800b868 <_strtod_l+0xb28>
 800ae0e:	ec49 8b10 	vmov	d0, r8, r9
 800ae12:	e7e3      	b.n	800addc <_strtod_l+0x9c>
 800ae14:	2300      	movs	r3, #0
 800ae16:	e7ee      	b.n	800adf6 <_strtod_l+0xb6>
 800ae18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae1a:	b13a      	cbz	r2, 800ae2c <_strtod_l+0xec>
 800ae1c:	2135      	movs	r1, #53	; 0x35
 800ae1e:	a814      	add	r0, sp, #80	; 0x50
 800ae20:	f002 fbd0 	bl	800d5c4 <__copybits>
 800ae24:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ae26:	4620      	mov	r0, r4
 800ae28:	f001 ff92 	bl	800cd50 <_Bfree>
 800ae2c:	3d01      	subs	r5, #1
 800ae2e:	2d04      	cmp	r5, #4
 800ae30:	d806      	bhi.n	800ae40 <_strtod_l+0x100>
 800ae32:	e8df f005 	tbb	[pc, r5]
 800ae36:	030a      	.short	0x030a
 800ae38:	1714      	.short	0x1714
 800ae3a:	0a          	.byte	0x0a
 800ae3b:	00          	.byte	0x00
 800ae3c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ae40:	073f      	lsls	r7, r7, #28
 800ae42:	d5c1      	bpl.n	800adc8 <_strtod_l+0x88>
 800ae44:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ae48:	e7be      	b.n	800adc8 <_strtod_l+0x88>
 800ae4a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800ae4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ae5c:	e7f0      	b.n	800ae40 <_strtod_l+0x100>
 800ae5e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800afe0 <_strtod_l+0x2a0>
 800ae62:	e7ed      	b.n	800ae40 <_strtod_l+0x100>
 800ae64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ae68:	f04f 38ff 	mov.w	r8, #4294967295
 800ae6c:	e7e8      	b.n	800ae40 <_strtod_l+0x100>
 800ae6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	9211      	str	r2, [sp, #68]	; 0x44
 800ae74:	785b      	ldrb	r3, [r3, #1]
 800ae76:	2b30      	cmp	r3, #48	; 0x30
 800ae78:	d0f9      	beq.n	800ae6e <_strtod_l+0x12e>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0a4      	beq.n	800adc8 <_strtod_l+0x88>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f04f 0a00 	mov.w	sl, #0
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae88:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ae8e:	f8cd a018 	str.w	sl, [sp, #24]
 800ae92:	220a      	movs	r2, #10
 800ae94:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ae96:	7807      	ldrb	r7, [r0, #0]
 800ae98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ae9c:	b2d9      	uxtb	r1, r3
 800ae9e:	2909      	cmp	r1, #9
 800aea0:	d92a      	bls.n	800aef8 <_strtod_l+0x1b8>
 800aea2:	9907      	ldr	r1, [sp, #28]
 800aea4:	462a      	mov	r2, r5
 800aea6:	f002 fe3b 	bl	800db20 <strncmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d033      	beq.n	800af16 <_strtod_l+0x1d6>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	9b06      	ldr	r3, [sp, #24]
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	2a65      	cmp	r2, #101	; 0x65
 800aeba:	d001      	beq.n	800aec0 <_strtod_l+0x180>
 800aebc:	2a45      	cmp	r2, #69	; 0x45
 800aebe:	d117      	bne.n	800aef0 <_strtod_l+0x1b0>
 800aec0:	b91b      	cbnz	r3, 800aeca <_strtod_l+0x18a>
 800aec2:	9b04      	ldr	r3, [sp, #16]
 800aec4:	4303      	orrs	r3, r0
 800aec6:	d09c      	beq.n	800ae02 <_strtod_l+0xc2>
 800aec8:	2300      	movs	r3, #0
 800aeca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800aece:	f10b 0201 	add.w	r2, fp, #1
 800aed2:	9211      	str	r2, [sp, #68]	; 0x44
 800aed4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800aed8:	2a2b      	cmp	r2, #43	; 0x2b
 800aeda:	d071      	beq.n	800afc0 <_strtod_l+0x280>
 800aedc:	2a2d      	cmp	r2, #45	; 0x2d
 800aede:	d077      	beq.n	800afd0 <_strtod_l+0x290>
 800aee0:	f04f 0e00 	mov.w	lr, #0
 800aee4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800aee8:	2d09      	cmp	r5, #9
 800aeea:	d97f      	bls.n	800afec <_strtod_l+0x2ac>
 800aeec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800aef0:	2500      	movs	r5, #0
 800aef2:	e09b      	b.n	800b02c <_strtod_l+0x2ec>
 800aef4:	2300      	movs	r3, #0
 800aef6:	e7c3      	b.n	800ae80 <_strtod_l+0x140>
 800aef8:	9906      	ldr	r1, [sp, #24]
 800aefa:	2908      	cmp	r1, #8
 800aefc:	bfdd      	ittte	le
 800aefe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800af00:	fb02 3301 	mlale	r3, r2, r1, r3
 800af04:	9309      	strle	r3, [sp, #36]	; 0x24
 800af06:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	3001      	adds	r0, #1
 800af0e:	3301      	adds	r3, #1
 800af10:	9306      	str	r3, [sp, #24]
 800af12:	9011      	str	r0, [sp, #68]	; 0x44
 800af14:	e7be      	b.n	800ae94 <_strtod_l+0x154>
 800af16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af18:	195a      	adds	r2, r3, r5
 800af1a:	9211      	str	r2, [sp, #68]	; 0x44
 800af1c:	5d5a      	ldrb	r2, [r3, r5]
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	b3a3      	cbz	r3, 800af8c <_strtod_l+0x24c>
 800af22:	4607      	mov	r7, r0
 800af24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af28:	2909      	cmp	r1, #9
 800af2a:	d912      	bls.n	800af52 <_strtod_l+0x212>
 800af2c:	2101      	movs	r1, #1
 800af2e:	e7c3      	b.n	800aeb8 <_strtod_l+0x178>
 800af30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	9211      	str	r2, [sp, #68]	; 0x44
 800af36:	785a      	ldrb	r2, [r3, #1]
 800af38:	3001      	adds	r0, #1
 800af3a:	2a30      	cmp	r2, #48	; 0x30
 800af3c:	d0f8      	beq.n	800af30 <_strtod_l+0x1f0>
 800af3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af42:	2b08      	cmp	r3, #8
 800af44:	f200 8497 	bhi.w	800b876 <_strtod_l+0xb36>
 800af48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af4a:	930a      	str	r3, [sp, #40]	; 0x28
 800af4c:	4607      	mov	r7, r0
 800af4e:	2000      	movs	r0, #0
 800af50:	4603      	mov	r3, r0
 800af52:	3a30      	subs	r2, #48	; 0x30
 800af54:	f100 0101 	add.w	r1, r0, #1
 800af58:	d012      	beq.n	800af80 <_strtod_l+0x240>
 800af5a:	440f      	add	r7, r1
 800af5c:	eb00 0c03 	add.w	ip, r0, r3
 800af60:	4619      	mov	r1, r3
 800af62:	250a      	movs	r5, #10
 800af64:	4561      	cmp	r1, ip
 800af66:	d113      	bne.n	800af90 <_strtod_l+0x250>
 800af68:	1819      	adds	r1, r3, r0
 800af6a:	2908      	cmp	r1, #8
 800af6c:	f103 0301 	add.w	r3, r3, #1
 800af70:	4403      	add	r3, r0
 800af72:	dc1c      	bgt.n	800afae <_strtod_l+0x26e>
 800af74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af76:	210a      	movs	r1, #10
 800af78:	fb01 2200 	mla	r2, r1, r0, r2
 800af7c:	9209      	str	r2, [sp, #36]	; 0x24
 800af7e:	2100      	movs	r1, #0
 800af80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af82:	1c50      	adds	r0, r2, #1
 800af84:	9011      	str	r0, [sp, #68]	; 0x44
 800af86:	7852      	ldrb	r2, [r2, #1]
 800af88:	4608      	mov	r0, r1
 800af8a:	e7cb      	b.n	800af24 <_strtod_l+0x1e4>
 800af8c:	9806      	ldr	r0, [sp, #24]
 800af8e:	e7d4      	b.n	800af3a <_strtod_l+0x1fa>
 800af90:	2908      	cmp	r1, #8
 800af92:	dc04      	bgt.n	800af9e <_strtod_l+0x25e>
 800af94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af96:	436e      	muls	r6, r5
 800af98:	9609      	str	r6, [sp, #36]	; 0x24
 800af9a:	3101      	adds	r1, #1
 800af9c:	e7e2      	b.n	800af64 <_strtod_l+0x224>
 800af9e:	f101 0e01 	add.w	lr, r1, #1
 800afa2:	f1be 0f10 	cmp.w	lr, #16
 800afa6:	bfd8      	it	le
 800afa8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800afac:	e7f5      	b.n	800af9a <_strtod_l+0x25a>
 800afae:	2b10      	cmp	r3, #16
 800afb0:	bfdc      	itt	le
 800afb2:	210a      	movle	r1, #10
 800afb4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800afb8:	e7e1      	b.n	800af7e <_strtod_l+0x23e>
 800afba:	2700      	movs	r7, #0
 800afbc:	2101      	movs	r1, #1
 800afbe:	e780      	b.n	800aec2 <_strtod_l+0x182>
 800afc0:	f04f 0e00 	mov.w	lr, #0
 800afc4:	f10b 0202 	add.w	r2, fp, #2
 800afc8:	9211      	str	r2, [sp, #68]	; 0x44
 800afca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800afce:	e789      	b.n	800aee4 <_strtod_l+0x1a4>
 800afd0:	f04f 0e01 	mov.w	lr, #1
 800afd4:	e7f6      	b.n	800afc4 <_strtod_l+0x284>
 800afd6:	bf00      	nop
 800afd8:	0800ea50 	.word	0x0800ea50
 800afdc:	0800e808 	.word	0x0800e808
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afe6:	1c55      	adds	r5, r2, #1
 800afe8:	9511      	str	r5, [sp, #68]	; 0x44
 800afea:	7852      	ldrb	r2, [r2, #1]
 800afec:	2a30      	cmp	r2, #48	; 0x30
 800afee:	d0f9      	beq.n	800afe4 <_strtod_l+0x2a4>
 800aff0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800aff4:	2d08      	cmp	r5, #8
 800aff6:	f63f af7b 	bhi.w	800aef0 <_strtod_l+0x1b0>
 800affa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800affe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b000:	9207      	str	r2, [sp, #28]
 800b002:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b004:	1c55      	adds	r5, r2, #1
 800b006:	9511      	str	r5, [sp, #68]	; 0x44
 800b008:	7852      	ldrb	r2, [r2, #1]
 800b00a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b00e:	2e09      	cmp	r6, #9
 800b010:	d937      	bls.n	800b082 <_strtod_l+0x342>
 800b012:	9e07      	ldr	r6, [sp, #28]
 800b014:	1bad      	subs	r5, r5, r6
 800b016:	2d08      	cmp	r5, #8
 800b018:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800b01c:	dc02      	bgt.n	800b024 <_strtod_l+0x2e4>
 800b01e:	4565      	cmp	r5, ip
 800b020:	bfa8      	it	ge
 800b022:	4665      	movge	r5, ip
 800b024:	f1be 0f00 	cmp.w	lr, #0
 800b028:	d000      	beq.n	800b02c <_strtod_l+0x2ec>
 800b02a:	426d      	negs	r5, r5
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d14d      	bne.n	800b0cc <_strtod_l+0x38c>
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	4303      	orrs	r3, r0
 800b034:	f47f aec8 	bne.w	800adc8 <_strtod_l+0x88>
 800b038:	2900      	cmp	r1, #0
 800b03a:	f47f aee2 	bne.w	800ae02 <_strtod_l+0xc2>
 800b03e:	2a69      	cmp	r2, #105	; 0x69
 800b040:	d027      	beq.n	800b092 <_strtod_l+0x352>
 800b042:	dc24      	bgt.n	800b08e <_strtod_l+0x34e>
 800b044:	2a49      	cmp	r2, #73	; 0x49
 800b046:	d024      	beq.n	800b092 <_strtod_l+0x352>
 800b048:	2a4e      	cmp	r2, #78	; 0x4e
 800b04a:	f47f aeda 	bne.w	800ae02 <_strtod_l+0xc2>
 800b04e:	4996      	ldr	r1, [pc, #600]	; (800b2a8 <_strtod_l+0x568>)
 800b050:	a811      	add	r0, sp, #68	; 0x44
 800b052:	f001 fd6f 	bl	800cb34 <__match>
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f aed3 	beq.w	800ae02 <_strtod_l+0xc2>
 800b05c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b28      	cmp	r3, #40	; 0x28
 800b062:	d12d      	bne.n	800b0c0 <_strtod_l+0x380>
 800b064:	4991      	ldr	r1, [pc, #580]	; (800b2ac <_strtod_l+0x56c>)
 800b066:	aa14      	add	r2, sp, #80	; 0x50
 800b068:	a811      	add	r0, sp, #68	; 0x44
 800b06a:	f001 fd77 	bl	800cb5c <__hexnan>
 800b06e:	2805      	cmp	r0, #5
 800b070:	d126      	bne.n	800b0c0 <_strtod_l+0x380>
 800b072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b074:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b078:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b07c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b080:	e6a2      	b.n	800adc8 <_strtod_l+0x88>
 800b082:	250a      	movs	r5, #10
 800b084:	fb05 250c 	mla	r5, r5, ip, r2
 800b088:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800b08c:	e7b9      	b.n	800b002 <_strtod_l+0x2c2>
 800b08e:	2a6e      	cmp	r2, #110	; 0x6e
 800b090:	e7db      	b.n	800b04a <_strtod_l+0x30a>
 800b092:	4987      	ldr	r1, [pc, #540]	; (800b2b0 <_strtod_l+0x570>)
 800b094:	a811      	add	r0, sp, #68	; 0x44
 800b096:	f001 fd4d 	bl	800cb34 <__match>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f aeb1 	beq.w	800ae02 <_strtod_l+0xc2>
 800b0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0a2:	4984      	ldr	r1, [pc, #528]	; (800b2b4 <_strtod_l+0x574>)
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	a811      	add	r0, sp, #68	; 0x44
 800b0a8:	9311      	str	r3, [sp, #68]	; 0x44
 800b0aa:	f001 fd43 	bl	800cb34 <__match>
 800b0ae:	b910      	cbnz	r0, 800b0b6 <_strtod_l+0x376>
 800b0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	9311      	str	r3, [sp, #68]	; 0x44
 800b0b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800b2c8 <_strtod_l+0x588>
 800b0ba:	f04f 0800 	mov.w	r8, #0
 800b0be:	e683      	b.n	800adc8 <_strtod_l+0x88>
 800b0c0:	487d      	ldr	r0, [pc, #500]	; (800b2b8 <_strtod_l+0x578>)
 800b0c2:	f002 fd15 	bl	800daf0 <nan>
 800b0c6:	ec59 8b10 	vmov	r8, r9, d0
 800b0ca:	e67d      	b.n	800adc8 <_strtod_l+0x88>
 800b0cc:	1bea      	subs	r2, r5, r7
 800b0ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800b0d2:	9207      	str	r2, [sp, #28]
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	bf08      	it	eq
 800b0de:	461a      	moveq	r2, r3
 800b0e0:	2b10      	cmp	r3, #16
 800b0e2:	9206      	str	r2, [sp, #24]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	bfa8      	it	ge
 800b0e8:	2210      	movge	r2, #16
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	ec59 8b17 	vmov	r8, r9, d7
 800b0f0:	dd0c      	ble.n	800b10c <_strtod_l+0x3cc>
 800b0f2:	4972      	ldr	r1, [pc, #456]	; (800b2bc <_strtod_l+0x57c>)
 800b0f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b0f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800b0fc:	ee06 aa90 	vmov	s13, sl
 800b100:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b104:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b108:	ec59 8b16 	vmov	r8, r9, d6
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	dc36      	bgt.n	800b17e <_strtod_l+0x43e>
 800b110:	9907      	ldr	r1, [sp, #28]
 800b112:	2900      	cmp	r1, #0
 800b114:	f43f ae58 	beq.w	800adc8 <_strtod_l+0x88>
 800b118:	dd23      	ble.n	800b162 <_strtod_l+0x422>
 800b11a:	2916      	cmp	r1, #22
 800b11c:	dc0b      	bgt.n	800b136 <_strtod_l+0x3f6>
 800b11e:	4b67      	ldr	r3, [pc, #412]	; (800b2bc <_strtod_l+0x57c>)
 800b120:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b124:	ed93 7b00 	vldr	d7, [r3]
 800b128:	ec49 8b16 	vmov	d6, r8, r9
 800b12c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b130:	ec59 8b17 	vmov	r8, r9, d7
 800b134:	e648      	b.n	800adc8 <_strtod_l+0x88>
 800b136:	9807      	ldr	r0, [sp, #28]
 800b138:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b13c:	4281      	cmp	r1, r0
 800b13e:	db1e      	blt.n	800b17e <_strtod_l+0x43e>
 800b140:	4a5e      	ldr	r2, [pc, #376]	; (800b2bc <_strtod_l+0x57c>)
 800b142:	f1c3 030f 	rsb	r3, r3, #15
 800b146:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b14a:	ed91 7b00 	vldr	d7, [r1]
 800b14e:	ec49 8b16 	vmov	d6, r8, r9
 800b152:	1ac3      	subs	r3, r0, r3
 800b154:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b15c:	ed92 6b00 	vldr	d6, [r2]
 800b160:	e7e4      	b.n	800b12c <_strtod_l+0x3ec>
 800b162:	9907      	ldr	r1, [sp, #28]
 800b164:	3116      	adds	r1, #22
 800b166:	db0a      	blt.n	800b17e <_strtod_l+0x43e>
 800b168:	4b54      	ldr	r3, [pc, #336]	; (800b2bc <_strtod_l+0x57c>)
 800b16a:	1b7d      	subs	r5, r7, r5
 800b16c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b170:	ed95 7b00 	vldr	d7, [r5]
 800b174:	ec49 8b16 	vmov	d6, r8, r9
 800b178:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b17c:	e7d8      	b.n	800b130 <_strtod_l+0x3f0>
 800b17e:	9907      	ldr	r1, [sp, #28]
 800b180:	1a9a      	subs	r2, r3, r2
 800b182:	440a      	add	r2, r1
 800b184:	2a00      	cmp	r2, #0
 800b186:	dd6f      	ble.n	800b268 <_strtod_l+0x528>
 800b188:	f012 000f 	ands.w	r0, r2, #15
 800b18c:	d00a      	beq.n	800b1a4 <_strtod_l+0x464>
 800b18e:	494b      	ldr	r1, [pc, #300]	; (800b2bc <_strtod_l+0x57c>)
 800b190:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b194:	ed91 7b00 	vldr	d7, [r1]
 800b198:	ec49 8b16 	vmov	d6, r8, r9
 800b19c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1a0:	ec59 8b17 	vmov	r8, r9, d7
 800b1a4:	f032 020f 	bics.w	r2, r2, #15
 800b1a8:	d04f      	beq.n	800b24a <_strtod_l+0x50a>
 800b1aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b1ae:	dd22      	ble.n	800b1f6 <_strtod_l+0x4b6>
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	462e      	mov	r6, r5
 800b1b4:	9506      	str	r5, [sp, #24]
 800b1b6:	462f      	mov	r7, r5
 800b1b8:	2322      	movs	r3, #34	; 0x22
 800b1ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800b2c8 <_strtod_l+0x588>
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	f04f 0800 	mov.w	r8, #0
 800b1c4:	9b06      	ldr	r3, [sp, #24]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f43f adfe 	beq.w	800adc8 <_strtod_l+0x88>
 800b1cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f001 fdbe 	bl	800cd50 <_Bfree>
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f001 fdba 	bl	800cd50 <_Bfree>
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 fdb6 	bl	800cd50 <_Bfree>
 800b1e4:	9906      	ldr	r1, [sp, #24]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f001 fdb2 	bl	800cd50 <_Bfree>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f001 fdae 	bl	800cd50 <_Bfree>
 800b1f4:	e5e8      	b.n	800adc8 <_strtod_l+0x88>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	ec49 8b17 	vmov	d7, r8, r9
 800b1fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800b2c0 <_strtod_l+0x580>
 800b200:	1112      	asrs	r2, r2, #4
 800b202:	4601      	mov	r1, r0
 800b204:	2a01      	cmp	r2, #1
 800b206:	dc23      	bgt.n	800b250 <_strtod_l+0x510>
 800b208:	b108      	cbz	r0, 800b20e <_strtod_l+0x4ce>
 800b20a:	ec59 8b17 	vmov	r8, r9, d7
 800b20e:	4a2c      	ldr	r2, [pc, #176]	; (800b2c0 <_strtod_l+0x580>)
 800b210:	482c      	ldr	r0, [pc, #176]	; (800b2c4 <_strtod_l+0x584>)
 800b212:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b216:	ed92 7b00 	vldr	d7, [r2]
 800b21a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b21e:	ec49 8b16 	vmov	d6, r8, r9
 800b222:	4a29      	ldr	r2, [pc, #164]	; (800b2c8 <_strtod_l+0x588>)
 800b224:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b228:	ee17 1a90 	vmov	r1, s15
 800b22c:	400a      	ands	r2, r1
 800b22e:	4282      	cmp	r2, r0
 800b230:	ec59 8b17 	vmov	r8, r9, d7
 800b234:	d8bc      	bhi.n	800b1b0 <_strtod_l+0x470>
 800b236:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b23a:	4282      	cmp	r2, r0
 800b23c:	bf86      	itte	hi
 800b23e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b2cc <_strtod_l+0x58c>
 800b242:	f04f 38ff 	movhi.w	r8, #4294967295
 800b246:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b24a:	2200      	movs	r2, #0
 800b24c:	9204      	str	r2, [sp, #16]
 800b24e:	e078      	b.n	800b342 <_strtod_l+0x602>
 800b250:	07d6      	lsls	r6, r2, #31
 800b252:	d504      	bpl.n	800b25e <_strtod_l+0x51e>
 800b254:	ed9c 6b00 	vldr	d6, [ip]
 800b258:	2001      	movs	r0, #1
 800b25a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b25e:	3101      	adds	r1, #1
 800b260:	1052      	asrs	r2, r2, #1
 800b262:	f10c 0c08 	add.w	ip, ip, #8
 800b266:	e7cd      	b.n	800b204 <_strtod_l+0x4c4>
 800b268:	d0ef      	beq.n	800b24a <_strtod_l+0x50a>
 800b26a:	4252      	negs	r2, r2
 800b26c:	f012 000f 	ands.w	r0, r2, #15
 800b270:	d00a      	beq.n	800b288 <_strtod_l+0x548>
 800b272:	4912      	ldr	r1, [pc, #72]	; (800b2bc <_strtod_l+0x57c>)
 800b274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b278:	ed91 7b00 	vldr	d7, [r1]
 800b27c:	ec49 8b16 	vmov	d6, r8, r9
 800b280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b284:	ec59 8b17 	vmov	r8, r9, d7
 800b288:	1112      	asrs	r2, r2, #4
 800b28a:	d0de      	beq.n	800b24a <_strtod_l+0x50a>
 800b28c:	2a1f      	cmp	r2, #31
 800b28e:	dd1f      	ble.n	800b2d0 <_strtod_l+0x590>
 800b290:	2500      	movs	r5, #0
 800b292:	462e      	mov	r6, r5
 800b294:	9506      	str	r5, [sp, #24]
 800b296:	462f      	mov	r7, r5
 800b298:	2322      	movs	r3, #34	; 0x22
 800b29a:	f04f 0800 	mov.w	r8, #0
 800b29e:	f04f 0900 	mov.w	r9, #0
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	e78e      	b.n	800b1c4 <_strtod_l+0x484>
 800b2a6:	bf00      	nop
 800b2a8:	0800e7d9 	.word	0x0800e7d9
 800b2ac:	0800e81c 	.word	0x0800e81c
 800b2b0:	0800e7d1 	.word	0x0800e7d1
 800b2b4:	0800e95c 	.word	0x0800e95c
 800b2b8:	0800ec08 	.word	0x0800ec08
 800b2bc:	0800eae8 	.word	0x0800eae8
 800b2c0:	0800eac0 	.word	0x0800eac0
 800b2c4:	7ca00000 	.word	0x7ca00000
 800b2c8:	7ff00000 	.word	0x7ff00000
 800b2cc:	7fefffff 	.word	0x7fefffff
 800b2d0:	f012 0110 	ands.w	r1, r2, #16
 800b2d4:	bf18      	it	ne
 800b2d6:	216a      	movne	r1, #106	; 0x6a
 800b2d8:	9104      	str	r1, [sp, #16]
 800b2da:	ec49 8b17 	vmov	d7, r8, r9
 800b2de:	49be      	ldr	r1, [pc, #760]	; (800b5d8 <_strtod_l+0x898>)
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	07d6      	lsls	r6, r2, #31
 800b2e4:	d504      	bpl.n	800b2f0 <_strtod_l+0x5b0>
 800b2e6:	ed91 6b00 	vldr	d6, [r1]
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2f0:	1052      	asrs	r2, r2, #1
 800b2f2:	f101 0108 	add.w	r1, r1, #8
 800b2f6:	d1f4      	bne.n	800b2e2 <_strtod_l+0x5a2>
 800b2f8:	b108      	cbz	r0, 800b2fe <_strtod_l+0x5be>
 800b2fa:	ec59 8b17 	vmov	r8, r9, d7
 800b2fe:	9a04      	ldr	r2, [sp, #16]
 800b300:	b1c2      	cbz	r2, 800b334 <_strtod_l+0x5f4>
 800b302:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800b306:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	4648      	mov	r0, r9
 800b30e:	dd11      	ble.n	800b334 <_strtod_l+0x5f4>
 800b310:	2a1f      	cmp	r2, #31
 800b312:	f340 812e 	ble.w	800b572 <_strtod_l+0x832>
 800b316:	2a34      	cmp	r2, #52	; 0x34
 800b318:	bfde      	ittt	le
 800b31a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800b31e:	f04f 32ff 	movle.w	r2, #4294967295
 800b322:	fa02 f101 	lslle.w	r1, r2, r1
 800b326:	f04f 0800 	mov.w	r8, #0
 800b32a:	bfcc      	ite	gt
 800b32c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b330:	ea01 0900 	andle.w	r9, r1, r0
 800b334:	ec49 8b17 	vmov	d7, r8, r9
 800b338:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	d0a6      	beq.n	800b290 <_strtod_l+0x550>
 800b342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b344:	9200      	str	r2, [sp, #0]
 800b346:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b348:	9a06      	ldr	r2, [sp, #24]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f001 fd68 	bl	800ce20 <__s2b>
 800b350:	9006      	str	r0, [sp, #24]
 800b352:	2800      	cmp	r0, #0
 800b354:	f43f af2c 	beq.w	800b1b0 <_strtod_l+0x470>
 800b358:	9b07      	ldr	r3, [sp, #28]
 800b35a:	1b7d      	subs	r5, r7, r5
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfb4      	ite	lt
 800b360:	462b      	movlt	r3, r5
 800b362:	2300      	movge	r3, #0
 800b364:	9309      	str	r3, [sp, #36]	; 0x24
 800b366:	9b07      	ldr	r3, [sp, #28]
 800b368:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b5b8 <_strtod_l+0x878>
 800b36c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b5c0 <_strtod_l+0x880>
 800b370:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b5c8 <_strtod_l+0x888>
 800b374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b378:	2500      	movs	r5, #0
 800b37a:	930c      	str	r3, [sp, #48]	; 0x30
 800b37c:	462e      	mov	r6, r5
 800b37e:	9b06      	ldr	r3, [sp, #24]
 800b380:	4620      	mov	r0, r4
 800b382:	6859      	ldr	r1, [r3, #4]
 800b384:	f001 fca4 	bl	800ccd0 <_Balloc>
 800b388:	4607      	mov	r7, r0
 800b38a:	2800      	cmp	r0, #0
 800b38c:	f43f af14 	beq.w	800b1b8 <_strtod_l+0x478>
 800b390:	9b06      	ldr	r3, [sp, #24]
 800b392:	691a      	ldr	r2, [r3, #16]
 800b394:	3202      	adds	r2, #2
 800b396:	f103 010c 	add.w	r1, r3, #12
 800b39a:	0092      	lsls	r2, r2, #2
 800b39c:	300c      	adds	r0, #12
 800b39e:	f7fe fe2f 	bl	800a000 <memcpy>
 800b3a2:	ec49 8b10 	vmov	d0, r8, r9
 800b3a6:	aa14      	add	r2, sp, #80	; 0x50
 800b3a8:	a913      	add	r1, sp, #76	; 0x4c
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f002 f87e 	bl	800d4ac <__d2b>
 800b3b0:	ec49 8b18 	vmov	d8, r8, r9
 800b3b4:	9012      	str	r0, [sp, #72]	; 0x48
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f43f aefe 	beq.w	800b1b8 <_strtod_l+0x478>
 800b3bc:	2101      	movs	r1, #1
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f001 fdc8 	bl	800cf54 <__i2b>
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f43f aef6 	beq.w	800b1b8 <_strtod_l+0x478>
 800b3cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfab      	itete	ge
 800b3d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800b3d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800b3d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800b3dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800b3e0:	bfac      	ite	ge
 800b3e2:	eb03 0b02 	addge.w	fp, r3, r2
 800b3e6:	eba2 0a03 	sublt.w	sl, r2, r3
 800b3ea:	9a04      	ldr	r2, [sp, #16]
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	440b      	add	r3, r1
 800b3f0:	4a7a      	ldr	r2, [pc, #488]	; (800b5dc <_strtod_l+0x89c>)
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b3fa:	f280 80cd 	bge.w	800b598 <_strtod_l+0x858>
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	2a1f      	cmp	r2, #31
 800b402:	eba1 0102 	sub.w	r1, r1, r2
 800b406:	f04f 0001 	mov.w	r0, #1
 800b40a:	f300 80b9 	bgt.w	800b580 <_strtod_l+0x840>
 800b40e:	fa00 f302 	lsl.w	r3, r0, r2
 800b412:	930b      	str	r3, [sp, #44]	; 0x2c
 800b414:	2300      	movs	r3, #0
 800b416:	930a      	str	r3, [sp, #40]	; 0x28
 800b418:	eb0b 0301 	add.w	r3, fp, r1
 800b41c:	9a04      	ldr	r2, [sp, #16]
 800b41e:	459b      	cmp	fp, r3
 800b420:	448a      	add	sl, r1
 800b422:	4492      	add	sl, r2
 800b424:	465a      	mov	r2, fp
 800b426:	bfa8      	it	ge
 800b428:	461a      	movge	r2, r3
 800b42a:	4552      	cmp	r2, sl
 800b42c:	bfa8      	it	ge
 800b42e:	4652      	movge	r2, sl
 800b430:	2a00      	cmp	r2, #0
 800b432:	bfc2      	ittt	gt
 800b434:	1a9b      	subgt	r3, r3, r2
 800b436:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b43a:	ebab 0b02 	subgt.w	fp, fp, r2
 800b43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b440:	2a00      	cmp	r2, #0
 800b442:	dd18      	ble.n	800b476 <_strtod_l+0x736>
 800b444:	4631      	mov	r1, r6
 800b446:	4620      	mov	r0, r4
 800b448:	930f      	str	r3, [sp, #60]	; 0x3c
 800b44a:	f001 fe43 	bl	800d0d4 <__pow5mult>
 800b44e:	4606      	mov	r6, r0
 800b450:	2800      	cmp	r0, #0
 800b452:	f43f aeb1 	beq.w	800b1b8 <_strtod_l+0x478>
 800b456:	4601      	mov	r1, r0
 800b458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b45a:	4620      	mov	r0, r4
 800b45c:	f001 fd90 	bl	800cf80 <__multiply>
 800b460:	900e      	str	r0, [sp, #56]	; 0x38
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f aea8 	beq.w	800b1b8 <_strtod_l+0x478>
 800b468:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b46a:	4620      	mov	r0, r4
 800b46c:	f001 fc70 	bl	800cd50 <_Bfree>
 800b470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b474:	9212      	str	r2, [sp, #72]	; 0x48
 800b476:	2b00      	cmp	r3, #0
 800b478:	f300 8093 	bgt.w	800b5a2 <_strtod_l+0x862>
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd08      	ble.n	800b494 <_strtod_l+0x754>
 800b482:	4639      	mov	r1, r7
 800b484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b486:	4620      	mov	r0, r4
 800b488:	f001 fe24 	bl	800d0d4 <__pow5mult>
 800b48c:	4607      	mov	r7, r0
 800b48e:	2800      	cmp	r0, #0
 800b490:	f43f ae92 	beq.w	800b1b8 <_strtod_l+0x478>
 800b494:	f1ba 0f00 	cmp.w	sl, #0
 800b498:	dd08      	ble.n	800b4ac <_strtod_l+0x76c>
 800b49a:	4639      	mov	r1, r7
 800b49c:	4652      	mov	r2, sl
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f001 fe72 	bl	800d188 <__lshift>
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f ae86 	beq.w	800b1b8 <_strtod_l+0x478>
 800b4ac:	f1bb 0f00 	cmp.w	fp, #0
 800b4b0:	dd08      	ble.n	800b4c4 <_strtod_l+0x784>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	465a      	mov	r2, fp
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f001 fe66 	bl	800d188 <__lshift>
 800b4bc:	4606      	mov	r6, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f43f ae7a 	beq.w	800b1b8 <_strtod_l+0x478>
 800b4c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f001 fee9 	bl	800d2a0 <__mdiff>
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	f43f ae71 	beq.w	800b1b8 <_strtod_l+0x478>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b4dc:	60c3      	str	r3, [r0, #12]
 800b4de:	4631      	mov	r1, r6
 800b4e0:	f001 fec2 	bl	800d268 <__mcmp>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	da7d      	bge.n	800b5e4 <_strtod_l+0x8a4>
 800b4e8:	ea5a 0308 	orrs.w	r3, sl, r8
 800b4ec:	f040 80a3 	bne.w	800b636 <_strtod_l+0x8f6>
 800b4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f040 809e 	bne.w	800b636 <_strtod_l+0x8f6>
 800b4fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4fe:	0d1b      	lsrs	r3, r3, #20
 800b500:	051b      	lsls	r3, r3, #20
 800b502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b506:	f240 8096 	bls.w	800b636 <_strtod_l+0x8f6>
 800b50a:	696b      	ldr	r3, [r5, #20]
 800b50c:	b91b      	cbnz	r3, 800b516 <_strtod_l+0x7d6>
 800b50e:	692b      	ldr	r3, [r5, #16]
 800b510:	2b01      	cmp	r3, #1
 800b512:	f340 8090 	ble.w	800b636 <_strtod_l+0x8f6>
 800b516:	4629      	mov	r1, r5
 800b518:	2201      	movs	r2, #1
 800b51a:	4620      	mov	r0, r4
 800b51c:	f001 fe34 	bl	800d188 <__lshift>
 800b520:	4631      	mov	r1, r6
 800b522:	4605      	mov	r5, r0
 800b524:	f001 fea0 	bl	800d268 <__mcmp>
 800b528:	2800      	cmp	r0, #0
 800b52a:	f340 8084 	ble.w	800b636 <_strtod_l+0x8f6>
 800b52e:	9904      	ldr	r1, [sp, #16]
 800b530:	4a2b      	ldr	r2, [pc, #172]	; (800b5e0 <_strtod_l+0x8a0>)
 800b532:	464b      	mov	r3, r9
 800b534:	2900      	cmp	r1, #0
 800b536:	f000 809d 	beq.w	800b674 <_strtod_l+0x934>
 800b53a:	ea02 0109 	and.w	r1, r2, r9
 800b53e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b542:	f300 8097 	bgt.w	800b674 <_strtod_l+0x934>
 800b546:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b54a:	f77f aea5 	ble.w	800b298 <_strtod_l+0x558>
 800b54e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b5d0 <_strtod_l+0x890>
 800b552:	ec49 8b16 	vmov	d6, r8, r9
 800b556:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b55a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b55e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	bf08      	it	eq
 800b566:	2322      	moveq	r3, #34	; 0x22
 800b568:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b56c:	bf08      	it	eq
 800b56e:	6023      	streq	r3, [r4, #0]
 800b570:	e62c      	b.n	800b1cc <_strtod_l+0x48c>
 800b572:	f04f 31ff 	mov.w	r1, #4294967295
 800b576:	fa01 f202 	lsl.w	r2, r1, r2
 800b57a:	ea02 0808 	and.w	r8, r2, r8
 800b57e:	e6d9      	b.n	800b334 <_strtod_l+0x5f4>
 800b580:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b584:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b588:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b58c:	33e2      	adds	r3, #226	; 0xe2
 800b58e:	fa00 f303 	lsl.w	r3, r0, r3
 800b592:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b596:	e73f      	b.n	800b418 <_strtod_l+0x6d8>
 800b598:	2200      	movs	r2, #0
 800b59a:	2301      	movs	r3, #1
 800b59c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b5a0:	e73a      	b.n	800b418 <_strtod_l+0x6d8>
 800b5a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f001 fdee 	bl	800d188 <__lshift>
 800b5ac:	9012      	str	r0, [sp, #72]	; 0x48
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	f47f af64 	bne.w	800b47c <_strtod_l+0x73c>
 800b5b4:	e600      	b.n	800b1b8 <_strtod_l+0x478>
 800b5b6:	bf00      	nop
 800b5b8:	94a03595 	.word	0x94a03595
 800b5bc:	3fcfffff 	.word	0x3fcfffff
 800b5c0:	94a03595 	.word	0x94a03595
 800b5c4:	3fdfffff 	.word	0x3fdfffff
 800b5c8:	35afe535 	.word	0x35afe535
 800b5cc:	3fe00000 	.word	0x3fe00000
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	39500000 	.word	0x39500000
 800b5d8:	0800e830 	.word	0x0800e830
 800b5dc:	fffffc02 	.word	0xfffffc02
 800b5e0:	7ff00000 	.word	0x7ff00000
 800b5e4:	46cb      	mov	fp, r9
 800b5e6:	d15f      	bne.n	800b6a8 <_strtod_l+0x968>
 800b5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ec:	f1ba 0f00 	cmp.w	sl, #0
 800b5f0:	d02a      	beq.n	800b648 <_strtod_l+0x908>
 800b5f2:	4aa7      	ldr	r2, [pc, #668]	; (800b890 <_strtod_l+0xb50>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d12b      	bne.n	800b650 <_strtod_l+0x910>
 800b5f8:	9b04      	ldr	r3, [sp, #16]
 800b5fa:	4642      	mov	r2, r8
 800b5fc:	b1fb      	cbz	r3, 800b63e <_strtod_l+0x8fe>
 800b5fe:	4ba5      	ldr	r3, [pc, #660]	; (800b894 <_strtod_l+0xb54>)
 800b600:	ea09 0303 	and.w	r3, r9, r3
 800b604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b608:	f04f 31ff 	mov.w	r1, #4294967295
 800b60c:	d81a      	bhi.n	800b644 <_strtod_l+0x904>
 800b60e:	0d1b      	lsrs	r3, r3, #20
 800b610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b614:	fa01 f303 	lsl.w	r3, r1, r3
 800b618:	429a      	cmp	r2, r3
 800b61a:	d119      	bne.n	800b650 <_strtod_l+0x910>
 800b61c:	4b9e      	ldr	r3, [pc, #632]	; (800b898 <_strtod_l+0xb58>)
 800b61e:	459b      	cmp	fp, r3
 800b620:	d102      	bne.n	800b628 <_strtod_l+0x8e8>
 800b622:	3201      	adds	r2, #1
 800b624:	f43f adc8 	beq.w	800b1b8 <_strtod_l+0x478>
 800b628:	4b9a      	ldr	r3, [pc, #616]	; (800b894 <_strtod_l+0xb54>)
 800b62a:	ea0b 0303 	and.w	r3, fp, r3
 800b62e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b632:	f04f 0800 	mov.w	r8, #0
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d188      	bne.n	800b54e <_strtod_l+0x80e>
 800b63c:	e5c6      	b.n	800b1cc <_strtod_l+0x48c>
 800b63e:	f04f 33ff 	mov.w	r3, #4294967295
 800b642:	e7e9      	b.n	800b618 <_strtod_l+0x8d8>
 800b644:	460b      	mov	r3, r1
 800b646:	e7e7      	b.n	800b618 <_strtod_l+0x8d8>
 800b648:	ea53 0308 	orrs.w	r3, r3, r8
 800b64c:	f43f af6f 	beq.w	800b52e <_strtod_l+0x7ee>
 800b650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b652:	b1cb      	cbz	r3, 800b688 <_strtod_l+0x948>
 800b654:	ea13 0f0b 	tst.w	r3, fp
 800b658:	d0ed      	beq.n	800b636 <_strtod_l+0x8f6>
 800b65a:	9a04      	ldr	r2, [sp, #16]
 800b65c:	4640      	mov	r0, r8
 800b65e:	4649      	mov	r1, r9
 800b660:	f1ba 0f00 	cmp.w	sl, #0
 800b664:	d014      	beq.n	800b690 <_strtod_l+0x950>
 800b666:	f7ff fb51 	bl	800ad0c <sulp>
 800b66a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b66e:	ec59 8b17 	vmov	r8, r9, d7
 800b672:	e7e0      	b.n	800b636 <_strtod_l+0x8f6>
 800b674:	4013      	ands	r3, r2
 800b676:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b67a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b67e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b682:	f04f 38ff 	mov.w	r8, #4294967295
 800b686:	e7d6      	b.n	800b636 <_strtod_l+0x8f6>
 800b688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b68a:	ea13 0f08 	tst.w	r3, r8
 800b68e:	e7e3      	b.n	800b658 <_strtod_l+0x918>
 800b690:	f7ff fb3c 	bl	800ad0c <sulp>
 800b694:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b698:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a0:	ec59 8b10 	vmov	r8, r9, d0
 800b6a4:	d1c7      	bne.n	800b636 <_strtod_l+0x8f6>
 800b6a6:	e5f7      	b.n	800b298 <_strtod_l+0x558>
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f001 ff5a 	bl	800d564 <__ratio>
 800b6b0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b6b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	d865      	bhi.n	800b78a <_strtod_l+0xa4a>
 800b6be:	f1ba 0f00 	cmp.w	sl, #0
 800b6c2:	d042      	beq.n	800b74a <_strtod_l+0xa0a>
 800b6c4:	4b75      	ldr	r3, [pc, #468]	; (800b89c <_strtod_l+0xb5c>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b6cc:	4871      	ldr	r0, [pc, #452]	; (800b894 <_strtod_l+0xb54>)
 800b6ce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b8a8 <_strtod_l+0xb68>
 800b6d2:	ea0b 0100 	and.w	r1, fp, r0
 800b6d6:	4561      	cmp	r1, ip
 800b6d8:	f040 808e 	bne.w	800b7f8 <_strtod_l+0xab8>
 800b6dc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b6e0:	ec49 8b10 	vmov	d0, r8, r9
 800b6e4:	ec43 2b1c 	vmov	d12, r2, r3
 800b6e8:	910a      	str	r1, [sp, #40]	; 0x28
 800b6ea:	f001 fe63 	bl	800d3b4 <__ulp>
 800b6ee:	ec49 8b1e 	vmov	d14, r8, r9
 800b6f2:	4868      	ldr	r0, [pc, #416]	; (800b894 <_strtod_l+0xb54>)
 800b6f4:	eeac eb00 	vfma.f64	d14, d12, d0
 800b6f8:	ee1e 3a90 	vmov	r3, s29
 800b6fc:	4a68      	ldr	r2, [pc, #416]	; (800b8a0 <_strtod_l+0xb60>)
 800b6fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b700:	4018      	ands	r0, r3
 800b702:	4290      	cmp	r0, r2
 800b704:	ec59 8b1e 	vmov	r8, r9, d14
 800b708:	d94e      	bls.n	800b7a8 <_strtod_l+0xa68>
 800b70a:	ee18 3a90 	vmov	r3, s17
 800b70e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b712:	4293      	cmp	r3, r2
 800b714:	d104      	bne.n	800b720 <_strtod_l+0x9e0>
 800b716:	ee18 3a10 	vmov	r3, s16
 800b71a:	3301      	adds	r3, #1
 800b71c:	f43f ad4c 	beq.w	800b1b8 <_strtod_l+0x478>
 800b720:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b898 <_strtod_l+0xb58>
 800b724:	f04f 38ff 	mov.w	r8, #4294967295
 800b728:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b72a:	4620      	mov	r0, r4
 800b72c:	f001 fb10 	bl	800cd50 <_Bfree>
 800b730:	4639      	mov	r1, r7
 800b732:	4620      	mov	r0, r4
 800b734:	f001 fb0c 	bl	800cd50 <_Bfree>
 800b738:	4631      	mov	r1, r6
 800b73a:	4620      	mov	r0, r4
 800b73c:	f001 fb08 	bl	800cd50 <_Bfree>
 800b740:	4629      	mov	r1, r5
 800b742:	4620      	mov	r0, r4
 800b744:	f001 fb04 	bl	800cd50 <_Bfree>
 800b748:	e619      	b.n	800b37e <_strtod_l+0x63e>
 800b74a:	f1b8 0f00 	cmp.w	r8, #0
 800b74e:	d112      	bne.n	800b776 <_strtod_l+0xa36>
 800b750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b754:	b9b3      	cbnz	r3, 800b784 <_strtod_l+0xa44>
 800b756:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b75a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b766:	bf58      	it	pl
 800b768:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b76c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b770:	ec53 2b17 	vmov	r2, r3, d7
 800b774:	e7aa      	b.n	800b6cc <_strtod_l+0x98c>
 800b776:	f1b8 0f01 	cmp.w	r8, #1
 800b77a:	d103      	bne.n	800b784 <_strtod_l+0xa44>
 800b77c:	f1b9 0f00 	cmp.w	r9, #0
 800b780:	f43f ad8a 	beq.w	800b298 <_strtod_l+0x558>
 800b784:	4b47      	ldr	r3, [pc, #284]	; (800b8a4 <_strtod_l+0xb64>)
 800b786:	2200      	movs	r2, #0
 800b788:	e79e      	b.n	800b6c8 <_strtod_l+0x988>
 800b78a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b78e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b792:	f1ba 0f00 	cmp.w	sl, #0
 800b796:	d104      	bne.n	800b7a2 <_strtod_l+0xa62>
 800b798:	eeb1 7b4d 	vneg.f64	d7, d13
 800b79c:	ec53 2b17 	vmov	r2, r3, d7
 800b7a0:	e794      	b.n	800b6cc <_strtod_l+0x98c>
 800b7a2:	eeb0 7b4d 	vmov.f64	d7, d13
 800b7a6:	e7f9      	b.n	800b79c <_strtod_l+0xa5c>
 800b7a8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1ba      	bne.n	800b728 <_strtod_l+0x9e8>
 800b7b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7b6:	0d1b      	lsrs	r3, r3, #20
 800b7b8:	051b      	lsls	r3, r3, #20
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d1b4      	bne.n	800b728 <_strtod_l+0x9e8>
 800b7be:	ec51 0b1d 	vmov	r0, r1, d13
 800b7c2:	f7f4 ffb9 	bl	8000738 <__aeabi_d2lz>
 800b7c6:	f7f4 ff71 	bl	80006ac <__aeabi_l2d>
 800b7ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7ce:	ec41 0b17 	vmov	d7, r0, r1
 800b7d2:	ea43 0308 	orr.w	r3, r3, r8
 800b7d6:	ea53 030a 	orrs.w	r3, r3, sl
 800b7da:	ee3d db47 	vsub.f64	d13, d13, d7
 800b7de:	d03c      	beq.n	800b85a <_strtod_l+0xb1a>
 800b7e0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e8:	f53f acf0 	bmi.w	800b1cc <_strtod_l+0x48c>
 800b7ec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f4:	dd98      	ble.n	800b728 <_strtod_l+0x9e8>
 800b7f6:	e4e9      	b.n	800b1cc <_strtod_l+0x48c>
 800b7f8:	9804      	ldr	r0, [sp, #16]
 800b7fa:	b1f0      	cbz	r0, 800b83a <_strtod_l+0xafa>
 800b7fc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b800:	d81b      	bhi.n	800b83a <_strtod_l+0xafa>
 800b802:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b888 <_strtod_l+0xb48>
 800b806:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80e:	d811      	bhi.n	800b834 <_strtod_l+0xaf4>
 800b810:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b814:	ee1d 3a10 	vmov	r3, s26
 800b818:	2b01      	cmp	r3, #1
 800b81a:	bf38      	it	cc
 800b81c:	2301      	movcc	r3, #1
 800b81e:	ee0d 3a10 	vmov	s26, r3
 800b822:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b826:	f1ba 0f00 	cmp.w	sl, #0
 800b82a:	d113      	bne.n	800b854 <_strtod_l+0xb14>
 800b82c:	eeb1 7b4d 	vneg.f64	d7, d13
 800b830:	ec53 2b17 	vmov	r2, r3, d7
 800b834:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b838:	1a43      	subs	r3, r0, r1
 800b83a:	eeb0 0b48 	vmov.f64	d0, d8
 800b83e:	ec43 2b1c 	vmov	d12, r2, r3
 800b842:	910a      	str	r1, [sp, #40]	; 0x28
 800b844:	f001 fdb6 	bl	800d3b4 <__ulp>
 800b848:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b84a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b84e:	ec59 8b18 	vmov	r8, r9, d8
 800b852:	e7ab      	b.n	800b7ac <_strtod_l+0xa6c>
 800b854:	eeb0 7b4d 	vmov.f64	d7, d13
 800b858:	e7ea      	b.n	800b830 <_strtod_l+0xaf0>
 800b85a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b862:	f57f af61 	bpl.w	800b728 <_strtod_l+0x9e8>
 800b866:	e4b1      	b.n	800b1cc <_strtod_l+0x48c>
 800b868:	2300      	movs	r3, #0
 800b86a:	9308      	str	r3, [sp, #32]
 800b86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b86e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	f7ff baad 	b.w	800add0 <_strtod_l+0x90>
 800b876:	2a65      	cmp	r2, #101	; 0x65
 800b878:	f43f ab9f 	beq.w	800afba <_strtod_l+0x27a>
 800b87c:	2a45      	cmp	r2, #69	; 0x45
 800b87e:	f43f ab9c 	beq.w	800afba <_strtod_l+0x27a>
 800b882:	2101      	movs	r1, #1
 800b884:	f7ff bbd4 	b.w	800b030 <_strtod_l+0x2f0>
 800b888:	ffc00000 	.word	0xffc00000
 800b88c:	41dfffff 	.word	0x41dfffff
 800b890:	000fffff 	.word	0x000fffff
 800b894:	7ff00000 	.word	0x7ff00000
 800b898:	7fefffff 	.word	0x7fefffff
 800b89c:	3ff00000 	.word	0x3ff00000
 800b8a0:	7c9fffff 	.word	0x7c9fffff
 800b8a4:	bff00000 	.word	0xbff00000
 800b8a8:	7fe00000 	.word	0x7fe00000

0800b8ac <_strtod_r>:
 800b8ac:	4b01      	ldr	r3, [pc, #4]	; (800b8b4 <_strtod_r+0x8>)
 800b8ae:	f7ff ba47 	b.w	800ad40 <_strtod_l>
 800b8b2:	bf00      	nop
 800b8b4:	24000098 	.word	0x24000098

0800b8b8 <_strtol_l.constprop.0>:
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8be:	d001      	beq.n	800b8c4 <_strtol_l.constprop.0+0xc>
 800b8c0:	2b24      	cmp	r3, #36	; 0x24
 800b8c2:	d906      	bls.n	800b8d2 <_strtol_l.constprop.0+0x1a>
 800b8c4:	f7fe fb72 	bl	8009fac <__errno>
 800b8c8:	2316      	movs	r3, #22
 800b8ca:	6003      	str	r3, [r0, #0]
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b9b8 <_strtol_l.constprop.0+0x100>
 800b8d6:	460d      	mov	r5, r1
 800b8d8:	462e      	mov	r6, r5
 800b8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b8e2:	f017 0708 	ands.w	r7, r7, #8
 800b8e6:	d1f7      	bne.n	800b8d8 <_strtol_l.constprop.0+0x20>
 800b8e8:	2c2d      	cmp	r4, #45	; 0x2d
 800b8ea:	d132      	bne.n	800b952 <_strtol_l.constprop.0+0x9a>
 800b8ec:	782c      	ldrb	r4, [r5, #0]
 800b8ee:	2701      	movs	r7, #1
 800b8f0:	1cb5      	adds	r5, r6, #2
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d05b      	beq.n	800b9ae <_strtol_l.constprop.0+0xf6>
 800b8f6:	2b10      	cmp	r3, #16
 800b8f8:	d109      	bne.n	800b90e <_strtol_l.constprop.0+0x56>
 800b8fa:	2c30      	cmp	r4, #48	; 0x30
 800b8fc:	d107      	bne.n	800b90e <_strtol_l.constprop.0+0x56>
 800b8fe:	782c      	ldrb	r4, [r5, #0]
 800b900:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b904:	2c58      	cmp	r4, #88	; 0x58
 800b906:	d14d      	bne.n	800b9a4 <_strtol_l.constprop.0+0xec>
 800b908:	786c      	ldrb	r4, [r5, #1]
 800b90a:	2310      	movs	r3, #16
 800b90c:	3502      	adds	r5, #2
 800b90e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b912:	f108 38ff 	add.w	r8, r8, #4294967295
 800b916:	f04f 0c00 	mov.w	ip, #0
 800b91a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b91e:	4666      	mov	r6, ip
 800b920:	fb03 8a19 	mls	sl, r3, r9, r8
 800b924:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b928:	f1be 0f09 	cmp.w	lr, #9
 800b92c:	d816      	bhi.n	800b95c <_strtol_l.constprop.0+0xa4>
 800b92e:	4674      	mov	r4, lr
 800b930:	42a3      	cmp	r3, r4
 800b932:	dd24      	ble.n	800b97e <_strtol_l.constprop.0+0xc6>
 800b934:	f1bc 0f00 	cmp.w	ip, #0
 800b938:	db1e      	blt.n	800b978 <_strtol_l.constprop.0+0xc0>
 800b93a:	45b1      	cmp	r9, r6
 800b93c:	d31c      	bcc.n	800b978 <_strtol_l.constprop.0+0xc0>
 800b93e:	d101      	bne.n	800b944 <_strtol_l.constprop.0+0x8c>
 800b940:	45a2      	cmp	sl, r4
 800b942:	db19      	blt.n	800b978 <_strtol_l.constprop.0+0xc0>
 800b944:	fb06 4603 	mla	r6, r6, r3, r4
 800b948:	f04f 0c01 	mov.w	ip, #1
 800b94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b950:	e7e8      	b.n	800b924 <_strtol_l.constprop.0+0x6c>
 800b952:	2c2b      	cmp	r4, #43	; 0x2b
 800b954:	bf04      	itt	eq
 800b956:	782c      	ldrbeq	r4, [r5, #0]
 800b958:	1cb5      	addeq	r5, r6, #2
 800b95a:	e7ca      	b.n	800b8f2 <_strtol_l.constprop.0+0x3a>
 800b95c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b960:	f1be 0f19 	cmp.w	lr, #25
 800b964:	d801      	bhi.n	800b96a <_strtol_l.constprop.0+0xb2>
 800b966:	3c37      	subs	r4, #55	; 0x37
 800b968:	e7e2      	b.n	800b930 <_strtol_l.constprop.0+0x78>
 800b96a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b96e:	f1be 0f19 	cmp.w	lr, #25
 800b972:	d804      	bhi.n	800b97e <_strtol_l.constprop.0+0xc6>
 800b974:	3c57      	subs	r4, #87	; 0x57
 800b976:	e7db      	b.n	800b930 <_strtol_l.constprop.0+0x78>
 800b978:	f04f 3cff 	mov.w	ip, #4294967295
 800b97c:	e7e6      	b.n	800b94c <_strtol_l.constprop.0+0x94>
 800b97e:	f1bc 0f00 	cmp.w	ip, #0
 800b982:	da05      	bge.n	800b990 <_strtol_l.constprop.0+0xd8>
 800b984:	2322      	movs	r3, #34	; 0x22
 800b986:	6003      	str	r3, [r0, #0]
 800b988:	4646      	mov	r6, r8
 800b98a:	b942      	cbnz	r2, 800b99e <_strtol_l.constprop.0+0xe6>
 800b98c:	4630      	mov	r0, r6
 800b98e:	e79e      	b.n	800b8ce <_strtol_l.constprop.0+0x16>
 800b990:	b107      	cbz	r7, 800b994 <_strtol_l.constprop.0+0xdc>
 800b992:	4276      	negs	r6, r6
 800b994:	2a00      	cmp	r2, #0
 800b996:	d0f9      	beq.n	800b98c <_strtol_l.constprop.0+0xd4>
 800b998:	f1bc 0f00 	cmp.w	ip, #0
 800b99c:	d000      	beq.n	800b9a0 <_strtol_l.constprop.0+0xe8>
 800b99e:	1e69      	subs	r1, r5, #1
 800b9a0:	6011      	str	r1, [r2, #0]
 800b9a2:	e7f3      	b.n	800b98c <_strtol_l.constprop.0+0xd4>
 800b9a4:	2430      	movs	r4, #48	; 0x30
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1b1      	bne.n	800b90e <_strtol_l.constprop.0+0x56>
 800b9aa:	2308      	movs	r3, #8
 800b9ac:	e7af      	b.n	800b90e <_strtol_l.constprop.0+0x56>
 800b9ae:	2c30      	cmp	r4, #48	; 0x30
 800b9b0:	d0a5      	beq.n	800b8fe <_strtol_l.constprop.0+0x46>
 800b9b2:	230a      	movs	r3, #10
 800b9b4:	e7ab      	b.n	800b90e <_strtol_l.constprop.0+0x56>
 800b9b6:	bf00      	nop
 800b9b8:	0800e859 	.word	0x0800e859

0800b9bc <_strtol_r>:
 800b9bc:	f7ff bf7c 	b.w	800b8b8 <_strtol_l.constprop.0>

0800b9c0 <quorem>:
 800b9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	6903      	ldr	r3, [r0, #16]
 800b9c6:	690c      	ldr	r4, [r1, #16]
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	4607      	mov	r7, r0
 800b9cc:	f2c0 8081 	blt.w	800bad2 <quorem+0x112>
 800b9d0:	3c01      	subs	r4, #1
 800b9d2:	f101 0814 	add.w	r8, r1, #20
 800b9d6:	f100 0514 	add.w	r5, r0, #20
 800b9da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9f8:	d331      	bcc.n	800ba5e <quorem+0x9e>
 800b9fa:	f04f 0e00 	mov.w	lr, #0
 800b9fe:	4640      	mov	r0, r8
 800ba00:	46ac      	mov	ip, r5
 800ba02:	46f2      	mov	sl, lr
 800ba04:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba08:	b293      	uxth	r3, r2
 800ba0a:	fb06 e303 	mla	r3, r6, r3, lr
 800ba0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	ebaa 0303 	sub.w	r3, sl, r3
 800ba18:	f8dc a000 	ldr.w	sl, [ip]
 800ba1c:	0c12      	lsrs	r2, r2, #16
 800ba1e:	fa13 f38a 	uxtah	r3, r3, sl
 800ba22:	fb06 e202 	mla	r2, r6, r2, lr
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba38:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba3c:	4581      	cmp	r9, r0
 800ba3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba42:	f84c 3b04 	str.w	r3, [ip], #4
 800ba46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba4a:	d2db      	bcs.n	800ba04 <quorem+0x44>
 800ba4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba50:	b92b      	cbnz	r3, 800ba5e <quorem+0x9e>
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	429d      	cmp	r5, r3
 800ba58:	461a      	mov	r2, r3
 800ba5a:	d32e      	bcc.n	800baba <quorem+0xfa>
 800ba5c:	613c      	str	r4, [r7, #16]
 800ba5e:	4638      	mov	r0, r7
 800ba60:	f001 fc02 	bl	800d268 <__mcmp>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	db24      	blt.n	800bab2 <quorem+0xf2>
 800ba68:	3601      	adds	r6, #1
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f04f 0c00 	mov.w	ip, #0
 800ba70:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba74:	f8d0 e000 	ldr.w	lr, [r0]
 800ba78:	b293      	uxth	r3, r2
 800ba7a:	ebac 0303 	sub.w	r3, ip, r3
 800ba7e:	0c12      	lsrs	r2, r2, #16
 800ba80:	fa13 f38e 	uxtah	r3, r3, lr
 800ba84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba92:	45c1      	cmp	r9, r8
 800ba94:	f840 3b04 	str.w	r3, [r0], #4
 800ba98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba9c:	d2e8      	bcs.n	800ba70 <quorem+0xb0>
 800ba9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baa6:	b922      	cbnz	r2, 800bab2 <quorem+0xf2>
 800baa8:	3b04      	subs	r3, #4
 800baaa:	429d      	cmp	r5, r3
 800baac:	461a      	mov	r2, r3
 800baae:	d30a      	bcc.n	800bac6 <quorem+0x106>
 800bab0:	613c      	str	r4, [r7, #16]
 800bab2:	4630      	mov	r0, r6
 800bab4:	b003      	add	sp, #12
 800bab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baba:	6812      	ldr	r2, [r2, #0]
 800babc:	3b04      	subs	r3, #4
 800babe:	2a00      	cmp	r2, #0
 800bac0:	d1cc      	bne.n	800ba5c <quorem+0x9c>
 800bac2:	3c01      	subs	r4, #1
 800bac4:	e7c7      	b.n	800ba56 <quorem+0x96>
 800bac6:	6812      	ldr	r2, [r2, #0]
 800bac8:	3b04      	subs	r3, #4
 800baca:	2a00      	cmp	r2, #0
 800bacc:	d1f0      	bne.n	800bab0 <quorem+0xf0>
 800bace:	3c01      	subs	r4, #1
 800bad0:	e7eb      	b.n	800baaa <quorem+0xea>
 800bad2:	2000      	movs	r0, #0
 800bad4:	e7ee      	b.n	800bab4 <quorem+0xf4>
	...

0800bad8 <_dtoa_r>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	ed2d 8b02 	vpush	{d8}
 800bae0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bae2:	b091      	sub	sp, #68	; 0x44
 800bae4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bae8:	ec59 8b10 	vmov	r8, r9, d0
 800baec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800baee:	9106      	str	r1, [sp, #24]
 800baf0:	4606      	mov	r6, r0
 800baf2:	9208      	str	r2, [sp, #32]
 800baf4:	930c      	str	r3, [sp, #48]	; 0x30
 800baf6:	b975      	cbnz	r5, 800bb16 <_dtoa_r+0x3e>
 800baf8:	2010      	movs	r0, #16
 800bafa:	f001 f8cf 	bl	800cc9c <malloc>
 800bafe:	4602      	mov	r2, r0
 800bb00:	6270      	str	r0, [r6, #36]	; 0x24
 800bb02:	b920      	cbnz	r0, 800bb0e <_dtoa_r+0x36>
 800bb04:	4baa      	ldr	r3, [pc, #680]	; (800bdb0 <_dtoa_r+0x2d8>)
 800bb06:	21ea      	movs	r1, #234	; 0xea
 800bb08:	48aa      	ldr	r0, [pc, #680]	; (800bdb4 <_dtoa_r+0x2dc>)
 800bb0a:	f002 f82b 	bl	800db64 <__assert_func>
 800bb0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb12:	6005      	str	r5, [r0, #0]
 800bb14:	60c5      	str	r5, [r0, #12]
 800bb16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	b151      	cbz	r1, 800bb32 <_dtoa_r+0x5a>
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	604a      	str	r2, [r1, #4]
 800bb20:	2301      	movs	r3, #1
 800bb22:	4093      	lsls	r3, r2
 800bb24:	608b      	str	r3, [r1, #8]
 800bb26:	4630      	mov	r0, r6
 800bb28:	f001 f912 	bl	800cd50 <_Bfree>
 800bb2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f1b9 0300 	subs.w	r3, r9, #0
 800bb36:	bfbb      	ittet	lt
 800bb38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb3c:	9303      	strlt	r3, [sp, #12]
 800bb3e:	2300      	movge	r3, #0
 800bb40:	2201      	movlt	r2, #1
 800bb42:	bfac      	ite	ge
 800bb44:	6023      	strge	r3, [r4, #0]
 800bb46:	6022      	strlt	r2, [r4, #0]
 800bb48:	4b9b      	ldr	r3, [pc, #620]	; (800bdb8 <_dtoa_r+0x2e0>)
 800bb4a:	9c03      	ldr	r4, [sp, #12]
 800bb4c:	43a3      	bics	r3, r4
 800bb4e:	d11c      	bne.n	800bb8a <_dtoa_r+0xb2>
 800bb50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb52:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bb5c:	ea53 0308 	orrs.w	r3, r3, r8
 800bb60:	f000 84fd 	beq.w	800c55e <_dtoa_r+0xa86>
 800bb64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb66:	b963      	cbnz	r3, 800bb82 <_dtoa_r+0xaa>
 800bb68:	4b94      	ldr	r3, [pc, #592]	; (800bdbc <_dtoa_r+0x2e4>)
 800bb6a:	e01f      	b.n	800bbac <_dtoa_r+0xd4>
 800bb6c:	4b94      	ldr	r3, [pc, #592]	; (800bdc0 <_dtoa_r+0x2e8>)
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	3308      	adds	r3, #8
 800bb72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	9801      	ldr	r0, [sp, #4]
 800bb78:	b011      	add	sp, #68	; 0x44
 800bb7a:	ecbd 8b02 	vpop	{d8}
 800bb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb82:	4b8e      	ldr	r3, [pc, #568]	; (800bdbc <_dtoa_r+0x2e4>)
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	3303      	adds	r3, #3
 800bb88:	e7f3      	b.n	800bb72 <_dtoa_r+0x9a>
 800bb8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bb8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	d10b      	bne.n	800bbb0 <_dtoa_r+0xd8>
 800bb98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	6013      	str	r3, [r2, #0]
 800bb9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 84d9 	beq.w	800c558 <_dtoa_r+0xa80>
 800bba6:	4887      	ldr	r0, [pc, #540]	; (800bdc4 <_dtoa_r+0x2ec>)
 800bba8:	6018      	str	r0, [r3, #0]
 800bbaa:	1e43      	subs	r3, r0, #1
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	e7e2      	b.n	800bb76 <_dtoa_r+0x9e>
 800bbb0:	a90f      	add	r1, sp, #60	; 0x3c
 800bbb2:	aa0e      	add	r2, sp, #56	; 0x38
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	eeb0 0b48 	vmov.f64	d0, d8
 800bbba:	f001 fc77 	bl	800d4ac <__d2b>
 800bbbe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bbc6:	2900      	cmp	r1, #0
 800bbc8:	d046      	beq.n	800bc58 <_dtoa_r+0x180>
 800bbca:	ee18 4a90 	vmov	r4, s17
 800bbce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bbd2:	ec53 2b18 	vmov	r2, r3, d8
 800bbd6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bbda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bbde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bbe2:	2400      	movs	r4, #0
 800bbe4:	ec43 2b16 	vmov	d6, r2, r3
 800bbe8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bbec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800bd98 <_dtoa_r+0x2c0>
 800bbf0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bbf4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800bda0 <_dtoa_r+0x2c8>
 800bbf8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bbfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800bda8 <_dtoa_r+0x2d0>
 800bc00:	ee07 1a90 	vmov	s15, r1
 800bc04:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bc08:	eeb0 7b46 	vmov.f64	d7, d6
 800bc0c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bc10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bc14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1c:	ee16 ba90 	vmov	fp, s13
 800bc20:	940a      	str	r4, [sp, #40]	; 0x28
 800bc22:	d508      	bpl.n	800bc36 <_dtoa_r+0x15e>
 800bc24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bc28:	eeb4 6b47 	vcmp.f64	d6, d7
 800bc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc30:	bf18      	it	ne
 800bc32:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bc36:	f1bb 0f16 	cmp.w	fp, #22
 800bc3a:	d82f      	bhi.n	800bc9c <_dtoa_r+0x1c4>
 800bc3c:	4b62      	ldr	r3, [pc, #392]	; (800bdc8 <_dtoa_r+0x2f0>)
 800bc3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc42:	ed93 7b00 	vldr	d7, [r3]
 800bc46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4e:	d501      	bpl.n	800bc54 <_dtoa_r+0x17c>
 800bc50:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc54:	2300      	movs	r3, #0
 800bc56:	e022      	b.n	800bc9e <_dtoa_r+0x1c6>
 800bc58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc5a:	4401      	add	r1, r0
 800bc5c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	bfc1      	itttt	gt
 800bc64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc68:	fa04 f303 	lslgt.w	r3, r4, r3
 800bc6c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bc70:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bc74:	bfd6      	itet	le
 800bc76:	f1c3 0320 	rsble	r3, r3, #32
 800bc7a:	ea43 0808 	orrgt.w	r8, r3, r8
 800bc7e:	fa08 f803 	lslle.w	r8, r8, r3
 800bc82:	ee07 8a90 	vmov	s15, r8
 800bc86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc8a:	3901      	subs	r1, #1
 800bc8c:	ee17 4a90 	vmov	r4, s15
 800bc90:	ec53 2b17 	vmov	r2, r3, d7
 800bc94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bc98:	2401      	movs	r4, #1
 800bc9a:	e7a3      	b.n	800bbe4 <_dtoa_r+0x10c>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bca0:	1a43      	subs	r3, r0, r1
 800bca2:	1e5a      	subs	r2, r3, #1
 800bca4:	bf45      	ittet	mi
 800bca6:	f1c3 0301 	rsbmi	r3, r3, #1
 800bcaa:	9304      	strmi	r3, [sp, #16]
 800bcac:	2300      	movpl	r3, #0
 800bcae:	2300      	movmi	r3, #0
 800bcb0:	9205      	str	r2, [sp, #20]
 800bcb2:	bf54      	ite	pl
 800bcb4:	9304      	strpl	r3, [sp, #16]
 800bcb6:	9305      	strmi	r3, [sp, #20]
 800bcb8:	f1bb 0f00 	cmp.w	fp, #0
 800bcbc:	db18      	blt.n	800bcf0 <_dtoa_r+0x218>
 800bcbe:	9b05      	ldr	r3, [sp, #20]
 800bcc0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800bcc4:	445b      	add	r3, fp
 800bcc6:	9305      	str	r3, [sp, #20]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9a06      	ldr	r2, [sp, #24]
 800bccc:	2a09      	cmp	r2, #9
 800bcce:	d849      	bhi.n	800bd64 <_dtoa_r+0x28c>
 800bcd0:	2a05      	cmp	r2, #5
 800bcd2:	bfc4      	itt	gt
 800bcd4:	3a04      	subgt	r2, #4
 800bcd6:	9206      	strgt	r2, [sp, #24]
 800bcd8:	9a06      	ldr	r2, [sp, #24]
 800bcda:	f1a2 0202 	sub.w	r2, r2, #2
 800bcde:	bfcc      	ite	gt
 800bce0:	2400      	movgt	r4, #0
 800bce2:	2401      	movle	r4, #1
 800bce4:	2a03      	cmp	r2, #3
 800bce6:	d848      	bhi.n	800bd7a <_dtoa_r+0x2a2>
 800bce8:	e8df f002 	tbb	[pc, r2]
 800bcec:	3a2c2e0b 	.word	0x3a2c2e0b
 800bcf0:	9b04      	ldr	r3, [sp, #16]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	eba3 030b 	sub.w	r3, r3, fp
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfc:	f1cb 0300 	rsb	r3, fp, #0
 800bd00:	e7e3      	b.n	800bcca <_dtoa_r+0x1f2>
 800bd02:	2200      	movs	r2, #0
 800bd04:	9207      	str	r2, [sp, #28]
 800bd06:	9a08      	ldr	r2, [sp, #32]
 800bd08:	2a00      	cmp	r2, #0
 800bd0a:	dc39      	bgt.n	800bd80 <_dtoa_r+0x2a8>
 800bd0c:	f04f 0a01 	mov.w	sl, #1
 800bd10:	46d1      	mov	r9, sl
 800bd12:	4652      	mov	r2, sl
 800bd14:	f8cd a020 	str.w	sl, [sp, #32]
 800bd18:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6079      	str	r1, [r7, #4]
 800bd1e:	2004      	movs	r0, #4
 800bd20:	f100 0c14 	add.w	ip, r0, #20
 800bd24:	4594      	cmp	ip, r2
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	d92f      	bls.n	800bd8a <_dtoa_r+0x2b2>
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd2e:	f000 ffcf 	bl	800ccd0 <_Balloc>
 800bd32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd34:	9001      	str	r0, [sp, #4]
 800bd36:	4602      	mov	r2, r0
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d149      	bne.n	800bdd0 <_dtoa_r+0x2f8>
 800bd3c:	4b23      	ldr	r3, [pc, #140]	; (800bdcc <_dtoa_r+0x2f4>)
 800bd3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd42:	e6e1      	b.n	800bb08 <_dtoa_r+0x30>
 800bd44:	2201      	movs	r2, #1
 800bd46:	e7dd      	b.n	800bd04 <_dtoa_r+0x22c>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	9207      	str	r2, [sp, #28]
 800bd4c:	9a08      	ldr	r2, [sp, #32]
 800bd4e:	eb0b 0a02 	add.w	sl, fp, r2
 800bd52:	f10a 0901 	add.w	r9, sl, #1
 800bd56:	464a      	mov	r2, r9
 800bd58:	2a01      	cmp	r2, #1
 800bd5a:	bfb8      	it	lt
 800bd5c:	2201      	movlt	r2, #1
 800bd5e:	e7db      	b.n	800bd18 <_dtoa_r+0x240>
 800bd60:	2201      	movs	r2, #1
 800bd62:	e7f2      	b.n	800bd4a <_dtoa_r+0x272>
 800bd64:	2401      	movs	r4, #1
 800bd66:	2200      	movs	r2, #0
 800bd68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800bd6c:	f04f 3aff 	mov.w	sl, #4294967295
 800bd70:	2100      	movs	r1, #0
 800bd72:	46d1      	mov	r9, sl
 800bd74:	2212      	movs	r2, #18
 800bd76:	9108      	str	r1, [sp, #32]
 800bd78:	e7ce      	b.n	800bd18 <_dtoa_r+0x240>
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	9207      	str	r2, [sp, #28]
 800bd7e:	e7f5      	b.n	800bd6c <_dtoa_r+0x294>
 800bd80:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd84:	46d1      	mov	r9, sl
 800bd86:	4652      	mov	r2, sl
 800bd88:	e7c6      	b.n	800bd18 <_dtoa_r+0x240>
 800bd8a:	3101      	adds	r1, #1
 800bd8c:	6079      	str	r1, [r7, #4]
 800bd8e:	0040      	lsls	r0, r0, #1
 800bd90:	e7c6      	b.n	800bd20 <_dtoa_r+0x248>
 800bd92:	bf00      	nop
 800bd94:	f3af 8000 	nop.w
 800bd98:	636f4361 	.word	0x636f4361
 800bd9c:	3fd287a7 	.word	0x3fd287a7
 800bda0:	8b60c8b3 	.word	0x8b60c8b3
 800bda4:	3fc68a28 	.word	0x3fc68a28
 800bda8:	509f79fb 	.word	0x509f79fb
 800bdac:	3fd34413 	.word	0x3fd34413
 800bdb0:	0800e966 	.word	0x0800e966
 800bdb4:	0800e97d 	.word	0x0800e97d
 800bdb8:	7ff00000 	.word	0x7ff00000
 800bdbc:	0800e962 	.word	0x0800e962
 800bdc0:	0800e959 	.word	0x0800e959
 800bdc4:	0800e7dd 	.word	0x0800e7dd
 800bdc8:	0800eae8 	.word	0x0800eae8
 800bdcc:	0800e9d8 	.word	0x0800e9d8
 800bdd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bdd2:	9901      	ldr	r1, [sp, #4]
 800bdd4:	6011      	str	r1, [r2, #0]
 800bdd6:	f1b9 0f0e 	cmp.w	r9, #14
 800bdda:	d86c      	bhi.n	800beb6 <_dtoa_r+0x3de>
 800bddc:	2c00      	cmp	r4, #0
 800bdde:	d06a      	beq.n	800beb6 <_dtoa_r+0x3de>
 800bde0:	f1bb 0f00 	cmp.w	fp, #0
 800bde4:	f340 80a0 	ble.w	800bf28 <_dtoa_r+0x450>
 800bde8:	49c1      	ldr	r1, [pc, #772]	; (800c0f0 <_dtoa_r+0x618>)
 800bdea:	f00b 020f 	and.w	r2, fp, #15
 800bdee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bdf2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bdf6:	ed92 7b00 	vldr	d7, [r2]
 800bdfa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800bdfe:	f000 8087 	beq.w	800bf10 <_dtoa_r+0x438>
 800be02:	4abc      	ldr	r2, [pc, #752]	; (800c0f4 <_dtoa_r+0x61c>)
 800be04:	ed92 6b08 	vldr	d6, [r2, #32]
 800be08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800be0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be10:	f001 010f 	and.w	r1, r1, #15
 800be14:	2203      	movs	r2, #3
 800be16:	48b7      	ldr	r0, [pc, #732]	; (800c0f4 <_dtoa_r+0x61c>)
 800be18:	2900      	cmp	r1, #0
 800be1a:	d17b      	bne.n	800bf14 <_dtoa_r+0x43c>
 800be1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800be24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be2a:	2900      	cmp	r1, #0
 800be2c:	f000 80a2 	beq.w	800bf74 <_dtoa_r+0x49c>
 800be30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800be34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be40:	f140 8098 	bpl.w	800bf74 <_dtoa_r+0x49c>
 800be44:	f1b9 0f00 	cmp.w	r9, #0
 800be48:	f000 8094 	beq.w	800bf74 <_dtoa_r+0x49c>
 800be4c:	f1ba 0f00 	cmp.w	sl, #0
 800be50:	dd2f      	ble.n	800beb2 <_dtoa_r+0x3da>
 800be52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800be56:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be5e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800be62:	3201      	adds	r2, #1
 800be64:	4650      	mov	r0, sl
 800be66:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800be6e:	ee07 2a90 	vmov	s15, r2
 800be72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be76:	eea7 5b06 	vfma.f64	d5, d7, d6
 800be7a:	ee15 4a90 	vmov	r4, s11
 800be7e:	ec52 1b15 	vmov	r1, r2, d5
 800be82:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800be86:	2800      	cmp	r0, #0
 800be88:	d177      	bne.n	800bf7a <_dtoa_r+0x4a2>
 800be8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800be8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be92:	ec42 1b17 	vmov	d7, r1, r2
 800be96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9e:	f300 8263 	bgt.w	800c368 <_dtoa_r+0x890>
 800bea2:	eeb1 7b47 	vneg.f64	d7, d7
 800bea6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800beaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beae:	f100 8258 	bmi.w	800c362 <_dtoa_r+0x88a>
 800beb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800beb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800beb8:	2a00      	cmp	r2, #0
 800beba:	f2c0 811d 	blt.w	800c0f8 <_dtoa_r+0x620>
 800bebe:	f1bb 0f0e 	cmp.w	fp, #14
 800bec2:	f300 8119 	bgt.w	800c0f8 <_dtoa_r+0x620>
 800bec6:	4b8a      	ldr	r3, [pc, #552]	; (800c0f0 <_dtoa_r+0x618>)
 800bec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800becc:	ed93 6b00 	vldr	d6, [r3]
 800bed0:	9b08      	ldr	r3, [sp, #32]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f280 80b7 	bge.w	800c046 <_dtoa_r+0x56e>
 800bed8:	f1b9 0f00 	cmp.w	r9, #0
 800bedc:	f300 80b3 	bgt.w	800c046 <_dtoa_r+0x56e>
 800bee0:	f040 823f 	bne.w	800c362 <_dtoa_r+0x88a>
 800bee4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bee8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800beec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef8:	464c      	mov	r4, r9
 800befa:	464f      	mov	r7, r9
 800befc:	f280 8215 	bge.w	800c32a <_dtoa_r+0x852>
 800bf00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf04:	2331      	movs	r3, #49	; 0x31
 800bf06:	f808 3b01 	strb.w	r3, [r8], #1
 800bf0a:	f10b 0b01 	add.w	fp, fp, #1
 800bf0e:	e211      	b.n	800c334 <_dtoa_r+0x85c>
 800bf10:	2202      	movs	r2, #2
 800bf12:	e780      	b.n	800be16 <_dtoa_r+0x33e>
 800bf14:	07cc      	lsls	r4, r1, #31
 800bf16:	d504      	bpl.n	800bf22 <_dtoa_r+0x44a>
 800bf18:	ed90 6b00 	vldr	d6, [r0]
 800bf1c:	3201      	adds	r2, #1
 800bf1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf22:	1049      	asrs	r1, r1, #1
 800bf24:	3008      	adds	r0, #8
 800bf26:	e777      	b.n	800be18 <_dtoa_r+0x340>
 800bf28:	d022      	beq.n	800bf70 <_dtoa_r+0x498>
 800bf2a:	f1cb 0100 	rsb	r1, fp, #0
 800bf2e:	4a70      	ldr	r2, [pc, #448]	; (800c0f0 <_dtoa_r+0x618>)
 800bf30:	f001 000f 	and.w	r0, r1, #15
 800bf34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bf38:	ed92 7b00 	vldr	d7, [r2]
 800bf3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bf40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf44:	486b      	ldr	r0, [pc, #428]	; (800c0f4 <_dtoa_r+0x61c>)
 800bf46:	1109      	asrs	r1, r1, #4
 800bf48:	2400      	movs	r4, #0
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	b929      	cbnz	r1, 800bf5a <_dtoa_r+0x482>
 800bf4e:	2c00      	cmp	r4, #0
 800bf50:	f43f af6a 	beq.w	800be28 <_dtoa_r+0x350>
 800bf54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf58:	e766      	b.n	800be28 <_dtoa_r+0x350>
 800bf5a:	07cf      	lsls	r7, r1, #31
 800bf5c:	d505      	bpl.n	800bf6a <_dtoa_r+0x492>
 800bf5e:	ed90 6b00 	vldr	d6, [r0]
 800bf62:	3201      	adds	r2, #1
 800bf64:	2401      	movs	r4, #1
 800bf66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf6a:	1049      	asrs	r1, r1, #1
 800bf6c:	3008      	adds	r0, #8
 800bf6e:	e7ed      	b.n	800bf4c <_dtoa_r+0x474>
 800bf70:	2202      	movs	r2, #2
 800bf72:	e759      	b.n	800be28 <_dtoa_r+0x350>
 800bf74:	465f      	mov	r7, fp
 800bf76:	4648      	mov	r0, r9
 800bf78:	e775      	b.n	800be66 <_dtoa_r+0x38e>
 800bf7a:	ec42 1b17 	vmov	d7, r1, r2
 800bf7e:	4a5c      	ldr	r2, [pc, #368]	; (800c0f0 <_dtoa_r+0x618>)
 800bf80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bf84:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bf88:	9a01      	ldr	r2, [sp, #4]
 800bf8a:	1814      	adds	r4, r2, r0
 800bf8c:	9a07      	ldr	r2, [sp, #28]
 800bf8e:	b352      	cbz	r2, 800bfe6 <_dtoa_r+0x50e>
 800bf90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bf94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bf98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bfa0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bfa4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bfa8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bfac:	ee14 2a90 	vmov	r2, s9
 800bfb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bfb4:	3230      	adds	r2, #48	; 0x30
 800bfb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bfba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc2:	f808 2b01 	strb.w	r2, [r8], #1
 800bfc6:	d439      	bmi.n	800c03c <_dtoa_r+0x564>
 800bfc8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bfcc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd4:	d472      	bmi.n	800c0bc <_dtoa_r+0x5e4>
 800bfd6:	45a0      	cmp	r8, r4
 800bfd8:	f43f af6b 	beq.w	800beb2 <_dtoa_r+0x3da>
 800bfdc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bfe0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bfe4:	e7e0      	b.n	800bfa8 <_dtoa_r+0x4d0>
 800bfe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bfea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bfee:	4621      	mov	r1, r4
 800bff0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bff4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bff8:	ee14 2a90 	vmov	r2, s9
 800bffc:	3230      	adds	r2, #48	; 0x30
 800bffe:	f808 2b01 	strb.w	r2, [r8], #1
 800c002:	45a0      	cmp	r8, r4
 800c004:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c008:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c00c:	d118      	bne.n	800c040 <_dtoa_r+0x568>
 800c00e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c012:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c016:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c01e:	dc4d      	bgt.n	800c0bc <_dtoa_r+0x5e4>
 800c020:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02c:	f57f af41 	bpl.w	800beb2 <_dtoa_r+0x3da>
 800c030:	4688      	mov	r8, r1
 800c032:	3901      	subs	r1, #1
 800c034:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c038:	2b30      	cmp	r3, #48	; 0x30
 800c03a:	d0f9      	beq.n	800c030 <_dtoa_r+0x558>
 800c03c:	46bb      	mov	fp, r7
 800c03e:	e02a      	b.n	800c096 <_dtoa_r+0x5be>
 800c040:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c044:	e7d6      	b.n	800bff4 <_dtoa_r+0x51c>
 800c046:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c04a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c04e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c052:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c056:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c05a:	ee15 3a10 	vmov	r3, s10
 800c05e:	3330      	adds	r3, #48	; 0x30
 800c060:	f808 3b01 	strb.w	r3, [r8], #1
 800c064:	9b01      	ldr	r3, [sp, #4]
 800c066:	eba8 0303 	sub.w	r3, r8, r3
 800c06a:	4599      	cmp	r9, r3
 800c06c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c070:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c074:	d133      	bne.n	800c0de <_dtoa_r+0x606>
 800c076:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c07a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c082:	dc1a      	bgt.n	800c0ba <_dtoa_r+0x5e2>
 800c084:	eeb4 7b46 	vcmp.f64	d7, d6
 800c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08c:	d103      	bne.n	800c096 <_dtoa_r+0x5be>
 800c08e:	ee15 3a10 	vmov	r3, s10
 800c092:	07d9      	lsls	r1, r3, #31
 800c094:	d411      	bmi.n	800c0ba <_dtoa_r+0x5e2>
 800c096:	4629      	mov	r1, r5
 800c098:	4630      	mov	r0, r6
 800c09a:	f000 fe59 	bl	800cd50 <_Bfree>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0a2:	f888 3000 	strb.w	r3, [r8]
 800c0a6:	f10b 0301 	add.w	r3, fp, #1
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f43f ad61 	beq.w	800bb76 <_dtoa_r+0x9e>
 800c0b4:	f8c3 8000 	str.w	r8, [r3]
 800c0b8:	e55d      	b.n	800bb76 <_dtoa_r+0x9e>
 800c0ba:	465f      	mov	r7, fp
 800c0bc:	4643      	mov	r3, r8
 800c0be:	4698      	mov	r8, r3
 800c0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0c4:	2a39      	cmp	r2, #57	; 0x39
 800c0c6:	d106      	bne.n	800c0d6 <_dtoa_r+0x5fe>
 800c0c8:	9a01      	ldr	r2, [sp, #4]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d1f7      	bne.n	800c0be <_dtoa_r+0x5e6>
 800c0ce:	9901      	ldr	r1, [sp, #4]
 800c0d0:	2230      	movs	r2, #48	; 0x30
 800c0d2:	3701      	adds	r7, #1
 800c0d4:	700a      	strb	r2, [r1, #0]
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	3201      	adds	r2, #1
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e7ae      	b.n	800c03c <_dtoa_r+0x564>
 800c0de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ea:	d1b2      	bne.n	800c052 <_dtoa_r+0x57a>
 800c0ec:	e7d3      	b.n	800c096 <_dtoa_r+0x5be>
 800c0ee:	bf00      	nop
 800c0f0:	0800eae8 	.word	0x0800eae8
 800c0f4:	0800eac0 	.word	0x0800eac0
 800c0f8:	9907      	ldr	r1, [sp, #28]
 800c0fa:	2900      	cmp	r1, #0
 800c0fc:	f000 80d0 	beq.w	800c2a0 <_dtoa_r+0x7c8>
 800c100:	9906      	ldr	r1, [sp, #24]
 800c102:	2901      	cmp	r1, #1
 800c104:	f300 80b4 	bgt.w	800c270 <_dtoa_r+0x798>
 800c108:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c10a:	2900      	cmp	r1, #0
 800c10c:	f000 80ac 	beq.w	800c268 <_dtoa_r+0x790>
 800c110:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c114:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c118:	461c      	mov	r4, r3
 800c11a:	930a      	str	r3, [sp, #40]	; 0x28
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	4413      	add	r3, r2
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	2101      	movs	r1, #1
 800c126:	4413      	add	r3, r2
 800c128:	4630      	mov	r0, r6
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	f000 ff12 	bl	800cf54 <__i2b>
 800c130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c132:	4607      	mov	r7, r0
 800c134:	f1b8 0f00 	cmp.w	r8, #0
 800c138:	dd0d      	ble.n	800c156 <_dtoa_r+0x67e>
 800c13a:	9a05      	ldr	r2, [sp, #20]
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	dd0a      	ble.n	800c156 <_dtoa_r+0x67e>
 800c140:	4542      	cmp	r2, r8
 800c142:	9904      	ldr	r1, [sp, #16]
 800c144:	bfa8      	it	ge
 800c146:	4642      	movge	r2, r8
 800c148:	1a89      	subs	r1, r1, r2
 800c14a:	9104      	str	r1, [sp, #16]
 800c14c:	9905      	ldr	r1, [sp, #20]
 800c14e:	eba8 0802 	sub.w	r8, r8, r2
 800c152:	1a8a      	subs	r2, r1, r2
 800c154:	9205      	str	r2, [sp, #20]
 800c156:	b303      	cbz	r3, 800c19a <_dtoa_r+0x6c2>
 800c158:	9a07      	ldr	r2, [sp, #28]
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	f000 80a5 	beq.w	800c2aa <_dtoa_r+0x7d2>
 800c160:	2c00      	cmp	r4, #0
 800c162:	dd13      	ble.n	800c18c <_dtoa_r+0x6b4>
 800c164:	4639      	mov	r1, r7
 800c166:	4622      	mov	r2, r4
 800c168:	4630      	mov	r0, r6
 800c16a:	930d      	str	r3, [sp, #52]	; 0x34
 800c16c:	f000 ffb2 	bl	800d0d4 <__pow5mult>
 800c170:	462a      	mov	r2, r5
 800c172:	4601      	mov	r1, r0
 800c174:	4607      	mov	r7, r0
 800c176:	4630      	mov	r0, r6
 800c178:	f000 ff02 	bl	800cf80 <__multiply>
 800c17c:	4629      	mov	r1, r5
 800c17e:	900a      	str	r0, [sp, #40]	; 0x28
 800c180:	4630      	mov	r0, r6
 800c182:	f000 fde5 	bl	800cd50 <_Bfree>
 800c186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c18a:	4615      	mov	r5, r2
 800c18c:	1b1a      	subs	r2, r3, r4
 800c18e:	d004      	beq.n	800c19a <_dtoa_r+0x6c2>
 800c190:	4629      	mov	r1, r5
 800c192:	4630      	mov	r0, r6
 800c194:	f000 ff9e 	bl	800d0d4 <__pow5mult>
 800c198:	4605      	mov	r5, r0
 800c19a:	2101      	movs	r1, #1
 800c19c:	4630      	mov	r0, r6
 800c19e:	f000 fed9 	bl	800cf54 <__i2b>
 800c1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	f340 8081 	ble.w	800c2ae <_dtoa_r+0x7d6>
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f000 ff8f 	bl	800d0d4 <__pow5mult>
 800c1b6:	9b06      	ldr	r3, [sp, #24]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	dd7a      	ble.n	800c2b4 <_dtoa_r+0x7dc>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c1c2:	6922      	ldr	r2, [r4, #16]
 800c1c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c1c8:	6910      	ldr	r0, [r2, #16]
 800c1ca:	f000 fe73 	bl	800ceb4 <__hi0bits>
 800c1ce:	f1c0 0020 	rsb	r0, r0, #32
 800c1d2:	9b05      	ldr	r3, [sp, #20]
 800c1d4:	4418      	add	r0, r3
 800c1d6:	f010 001f 	ands.w	r0, r0, #31
 800c1da:	f000 808c 	beq.w	800c2f6 <_dtoa_r+0x81e>
 800c1de:	f1c0 0220 	rsb	r2, r0, #32
 800c1e2:	2a04      	cmp	r2, #4
 800c1e4:	f340 8085 	ble.w	800c2f2 <_dtoa_r+0x81a>
 800c1e8:	f1c0 001c 	rsb	r0, r0, #28
 800c1ec:	9b04      	ldr	r3, [sp, #16]
 800c1ee:	4403      	add	r3, r0
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	9b05      	ldr	r3, [sp, #20]
 800c1f4:	4403      	add	r3, r0
 800c1f6:	4480      	add	r8, r0
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	9b04      	ldr	r3, [sp, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd05      	ble.n	800c20c <_dtoa_r+0x734>
 800c200:	4629      	mov	r1, r5
 800c202:	461a      	mov	r2, r3
 800c204:	4630      	mov	r0, r6
 800c206:	f000 ffbf 	bl	800d188 <__lshift>
 800c20a:	4605      	mov	r5, r0
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd05      	ble.n	800c21e <_dtoa_r+0x746>
 800c212:	4621      	mov	r1, r4
 800c214:	461a      	mov	r2, r3
 800c216:	4630      	mov	r0, r6
 800c218:	f000 ffb6 	bl	800d188 <__lshift>
 800c21c:	4604      	mov	r4, r0
 800c21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c220:	2b00      	cmp	r3, #0
 800c222:	d06a      	beq.n	800c2fa <_dtoa_r+0x822>
 800c224:	4621      	mov	r1, r4
 800c226:	4628      	mov	r0, r5
 800c228:	f001 f81e 	bl	800d268 <__mcmp>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	da64      	bge.n	800c2fa <_dtoa_r+0x822>
 800c230:	2300      	movs	r3, #0
 800c232:	4629      	mov	r1, r5
 800c234:	220a      	movs	r2, #10
 800c236:	4630      	mov	r0, r6
 800c238:	f000 fdac 	bl	800cd94 <__multadd>
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c242:	4605      	mov	r5, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 8191 	beq.w	800c56c <_dtoa_r+0xa94>
 800c24a:	4639      	mov	r1, r7
 800c24c:	2300      	movs	r3, #0
 800c24e:	220a      	movs	r2, #10
 800c250:	4630      	mov	r0, r6
 800c252:	f000 fd9f 	bl	800cd94 <__multadd>
 800c256:	f1ba 0f00 	cmp.w	sl, #0
 800c25a:	4607      	mov	r7, r0
 800c25c:	f300 808d 	bgt.w	800c37a <_dtoa_r+0x8a2>
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	2b02      	cmp	r3, #2
 800c264:	dc50      	bgt.n	800c308 <_dtoa_r+0x830>
 800c266:	e088      	b.n	800c37a <_dtoa_r+0x8a2>
 800c268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c26a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c26e:	e751      	b.n	800c114 <_dtoa_r+0x63c>
 800c270:	f109 34ff 	add.w	r4, r9, #4294967295
 800c274:	42a3      	cmp	r3, r4
 800c276:	bfbf      	itttt	lt
 800c278:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800c27a:	1ae3      	sublt	r3, r4, r3
 800c27c:	18d2      	addlt	r2, r2, r3
 800c27e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800c280:	bfb6      	itet	lt
 800c282:	4623      	movlt	r3, r4
 800c284:	1b1c      	subge	r4, r3, r4
 800c286:	2400      	movlt	r4, #0
 800c288:	f1b9 0f00 	cmp.w	r9, #0
 800c28c:	bfb5      	itete	lt
 800c28e:	9a04      	ldrlt	r2, [sp, #16]
 800c290:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c294:	eba2 0809 	sublt.w	r8, r2, r9
 800c298:	464a      	movge	r2, r9
 800c29a:	bfb8      	it	lt
 800c29c:	2200      	movlt	r2, #0
 800c29e:	e73c      	b.n	800c11a <_dtoa_r+0x642>
 800c2a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c2a4:	9f07      	ldr	r7, [sp, #28]
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	e744      	b.n	800c134 <_dtoa_r+0x65c>
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	e770      	b.n	800c190 <_dtoa_r+0x6b8>
 800c2ae:	9b06      	ldr	r3, [sp, #24]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	dc18      	bgt.n	800c2e6 <_dtoa_r+0x80e>
 800c2b4:	9b02      	ldr	r3, [sp, #8]
 800c2b6:	b9b3      	cbnz	r3, 800c2e6 <_dtoa_r+0x80e>
 800c2b8:	9b03      	ldr	r3, [sp, #12]
 800c2ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c2be:	b9a2      	cbnz	r2, 800c2ea <_dtoa_r+0x812>
 800c2c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c2c4:	0d12      	lsrs	r2, r2, #20
 800c2c6:	0512      	lsls	r2, r2, #20
 800c2c8:	b18a      	cbz	r2, 800c2ee <_dtoa_r+0x816>
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	9b05      	ldr	r3, [sp, #20]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f47f af70 	bne.w	800c1c2 <_dtoa_r+0x6ea>
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	e775      	b.n	800c1d2 <_dtoa_r+0x6fa>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e7f6      	b.n	800c2d8 <_dtoa_r+0x800>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	e7f4      	b.n	800c2d8 <_dtoa_r+0x800>
 800c2ee:	920a      	str	r2, [sp, #40]	; 0x28
 800c2f0:	e7f3      	b.n	800c2da <_dtoa_r+0x802>
 800c2f2:	d082      	beq.n	800c1fa <_dtoa_r+0x722>
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	301c      	adds	r0, #28
 800c2f8:	e778      	b.n	800c1ec <_dtoa_r+0x714>
 800c2fa:	f1b9 0f00 	cmp.w	r9, #0
 800c2fe:	dc37      	bgt.n	800c370 <_dtoa_r+0x898>
 800c300:	9b06      	ldr	r3, [sp, #24]
 800c302:	2b02      	cmp	r3, #2
 800c304:	dd34      	ble.n	800c370 <_dtoa_r+0x898>
 800c306:	46ca      	mov	sl, r9
 800c308:	f1ba 0f00 	cmp.w	sl, #0
 800c30c:	d10d      	bne.n	800c32a <_dtoa_r+0x852>
 800c30e:	4621      	mov	r1, r4
 800c310:	4653      	mov	r3, sl
 800c312:	2205      	movs	r2, #5
 800c314:	4630      	mov	r0, r6
 800c316:	f000 fd3d 	bl	800cd94 <__multadd>
 800c31a:	4601      	mov	r1, r0
 800c31c:	4604      	mov	r4, r0
 800c31e:	4628      	mov	r0, r5
 800c320:	f000 ffa2 	bl	800d268 <__mcmp>
 800c324:	2800      	cmp	r0, #0
 800c326:	f73f adeb 	bgt.w	800bf00 <_dtoa_r+0x428>
 800c32a:	9b08      	ldr	r3, [sp, #32]
 800c32c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c330:	ea6f 0b03 	mvn.w	fp, r3
 800c334:	f04f 0900 	mov.w	r9, #0
 800c338:	4621      	mov	r1, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	f000 fd08 	bl	800cd50 <_Bfree>
 800c340:	2f00      	cmp	r7, #0
 800c342:	f43f aea8 	beq.w	800c096 <_dtoa_r+0x5be>
 800c346:	f1b9 0f00 	cmp.w	r9, #0
 800c34a:	d005      	beq.n	800c358 <_dtoa_r+0x880>
 800c34c:	45b9      	cmp	r9, r7
 800c34e:	d003      	beq.n	800c358 <_dtoa_r+0x880>
 800c350:	4649      	mov	r1, r9
 800c352:	4630      	mov	r0, r6
 800c354:	f000 fcfc 	bl	800cd50 <_Bfree>
 800c358:	4639      	mov	r1, r7
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 fcf8 	bl	800cd50 <_Bfree>
 800c360:	e699      	b.n	800c096 <_dtoa_r+0x5be>
 800c362:	2400      	movs	r4, #0
 800c364:	4627      	mov	r7, r4
 800c366:	e7e0      	b.n	800c32a <_dtoa_r+0x852>
 800c368:	46bb      	mov	fp, r7
 800c36a:	4604      	mov	r4, r0
 800c36c:	4607      	mov	r7, r0
 800c36e:	e5c7      	b.n	800bf00 <_dtoa_r+0x428>
 800c370:	9b07      	ldr	r3, [sp, #28]
 800c372:	46ca      	mov	sl, r9
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 8100 	beq.w	800c57a <_dtoa_r+0xaa2>
 800c37a:	f1b8 0f00 	cmp.w	r8, #0
 800c37e:	dd05      	ble.n	800c38c <_dtoa_r+0x8b4>
 800c380:	4639      	mov	r1, r7
 800c382:	4642      	mov	r2, r8
 800c384:	4630      	mov	r0, r6
 800c386:	f000 feff 	bl	800d188 <__lshift>
 800c38a:	4607      	mov	r7, r0
 800c38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d05d      	beq.n	800c44e <_dtoa_r+0x976>
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	4630      	mov	r0, r6
 800c396:	f000 fc9b 	bl	800ccd0 <_Balloc>
 800c39a:	4680      	mov	r8, r0
 800c39c:	b928      	cbnz	r0, 800c3aa <_dtoa_r+0x8d2>
 800c39e:	4b82      	ldr	r3, [pc, #520]	; (800c5a8 <_dtoa_r+0xad0>)
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c3a6:	f7ff bbaf 	b.w	800bb08 <_dtoa_r+0x30>
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	3202      	adds	r2, #2
 800c3ae:	0092      	lsls	r2, r2, #2
 800c3b0:	f107 010c 	add.w	r1, r7, #12
 800c3b4:	300c      	adds	r0, #12
 800c3b6:	f7fd fe23 	bl	800a000 <memcpy>
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	4641      	mov	r1, r8
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f000 fee2 	bl	800d188 <__lshift>
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	4453      	add	r3, sl
 800c3ce:	9308      	str	r3, [sp, #32]
 800c3d0:	9b02      	ldr	r3, [sp, #8]
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	46b9      	mov	r9, r7
 800c3d8:	9307      	str	r3, [sp, #28]
 800c3da:	4607      	mov	r7, r0
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	9302      	str	r3, [sp, #8]
 800c3e6:	f7ff faeb 	bl	800b9c0 <quorem>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	3330      	adds	r3, #48	; 0x30
 800c3ee:	9005      	str	r0, [sp, #20]
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f6:	f000 ff37 	bl	800d268 <__mcmp>
 800c3fa:	463a      	mov	r2, r7
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	4621      	mov	r1, r4
 800c400:	4630      	mov	r0, r6
 800c402:	f000 ff4d 	bl	800d2a0 <__mdiff>
 800c406:	68c2      	ldr	r2, [r0, #12]
 800c408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40a:	4680      	mov	r8, r0
 800c40c:	bb0a      	cbnz	r2, 800c452 <_dtoa_r+0x97a>
 800c40e:	4601      	mov	r1, r0
 800c410:	4628      	mov	r0, r5
 800c412:	f000 ff29 	bl	800d268 <__mcmp>
 800c416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c418:	4602      	mov	r2, r0
 800c41a:	4641      	mov	r1, r8
 800c41c:	4630      	mov	r0, r6
 800c41e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c422:	f000 fc95 	bl	800cd50 <_Bfree>
 800c426:	9b06      	ldr	r3, [sp, #24]
 800c428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c42a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c42e:	ea43 0102 	orr.w	r1, r3, r2
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	430b      	orrs	r3, r1
 800c436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c438:	d10d      	bne.n	800c456 <_dtoa_r+0x97e>
 800c43a:	2b39      	cmp	r3, #57	; 0x39
 800c43c:	d029      	beq.n	800c492 <_dtoa_r+0x9ba>
 800c43e:	f1ba 0f00 	cmp.w	sl, #0
 800c442:	dd01      	ble.n	800c448 <_dtoa_r+0x970>
 800c444:	9b05      	ldr	r3, [sp, #20]
 800c446:	3331      	adds	r3, #49	; 0x31
 800c448:	9a02      	ldr	r2, [sp, #8]
 800c44a:	7013      	strb	r3, [r2, #0]
 800c44c:	e774      	b.n	800c338 <_dtoa_r+0x860>
 800c44e:	4638      	mov	r0, r7
 800c450:	e7b8      	b.n	800c3c4 <_dtoa_r+0x8ec>
 800c452:	2201      	movs	r2, #1
 800c454:	e7e1      	b.n	800c41a <_dtoa_r+0x942>
 800c456:	f1ba 0f00 	cmp.w	sl, #0
 800c45a:	db06      	blt.n	800c46a <_dtoa_r+0x992>
 800c45c:	9906      	ldr	r1, [sp, #24]
 800c45e:	ea41 0a0a 	orr.w	sl, r1, sl
 800c462:	9907      	ldr	r1, [sp, #28]
 800c464:	ea5a 0101 	orrs.w	r1, sl, r1
 800c468:	d120      	bne.n	800c4ac <_dtoa_r+0x9d4>
 800c46a:	2a00      	cmp	r2, #0
 800c46c:	ddec      	ble.n	800c448 <_dtoa_r+0x970>
 800c46e:	4629      	mov	r1, r5
 800c470:	2201      	movs	r2, #1
 800c472:	4630      	mov	r0, r6
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f000 fe87 	bl	800d188 <__lshift>
 800c47a:	4621      	mov	r1, r4
 800c47c:	4605      	mov	r5, r0
 800c47e:	f000 fef3 	bl	800d268 <__mcmp>
 800c482:	2800      	cmp	r0, #0
 800c484:	9b04      	ldr	r3, [sp, #16]
 800c486:	dc02      	bgt.n	800c48e <_dtoa_r+0x9b6>
 800c488:	d1de      	bne.n	800c448 <_dtoa_r+0x970>
 800c48a:	07da      	lsls	r2, r3, #31
 800c48c:	d5dc      	bpl.n	800c448 <_dtoa_r+0x970>
 800c48e:	2b39      	cmp	r3, #57	; 0x39
 800c490:	d1d8      	bne.n	800c444 <_dtoa_r+0x96c>
 800c492:	9a02      	ldr	r2, [sp, #8]
 800c494:	2339      	movs	r3, #57	; 0x39
 800c496:	7013      	strb	r3, [r2, #0]
 800c498:	4643      	mov	r3, r8
 800c49a:	4698      	mov	r8, r3
 800c49c:	3b01      	subs	r3, #1
 800c49e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c4a2:	2a39      	cmp	r2, #57	; 0x39
 800c4a4:	d051      	beq.n	800c54a <_dtoa_r+0xa72>
 800c4a6:	3201      	adds	r2, #1
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	e745      	b.n	800c338 <_dtoa_r+0x860>
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	dd03      	ble.n	800c4b8 <_dtoa_r+0x9e0>
 800c4b0:	2b39      	cmp	r3, #57	; 0x39
 800c4b2:	d0ee      	beq.n	800c492 <_dtoa_r+0x9ba>
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	e7c7      	b.n	800c448 <_dtoa_r+0x970>
 800c4b8:	9a04      	ldr	r2, [sp, #16]
 800c4ba:	9908      	ldr	r1, [sp, #32]
 800c4bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4c0:	428a      	cmp	r2, r1
 800c4c2:	d02b      	beq.n	800c51c <_dtoa_r+0xa44>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	220a      	movs	r2, #10
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f000 fc62 	bl	800cd94 <__multadd>
 800c4d0:	45b9      	cmp	r9, r7
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	f04f 0300 	mov.w	r3, #0
 800c4d8:	f04f 020a 	mov.w	r2, #10
 800c4dc:	4649      	mov	r1, r9
 800c4de:	4630      	mov	r0, r6
 800c4e0:	d107      	bne.n	800c4f2 <_dtoa_r+0xa1a>
 800c4e2:	f000 fc57 	bl	800cd94 <__multadd>
 800c4e6:	4681      	mov	r9, r0
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	9304      	str	r3, [sp, #16]
 800c4f0:	e774      	b.n	800c3dc <_dtoa_r+0x904>
 800c4f2:	f000 fc4f 	bl	800cd94 <__multadd>
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	4681      	mov	r9, r0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	220a      	movs	r2, #10
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 fc48 	bl	800cd94 <__multadd>
 800c504:	4607      	mov	r7, r0
 800c506:	e7f0      	b.n	800c4ea <_dtoa_r+0xa12>
 800c508:	f1ba 0f00 	cmp.w	sl, #0
 800c50c:	9a01      	ldr	r2, [sp, #4]
 800c50e:	bfcc      	ite	gt
 800c510:	46d0      	movgt	r8, sl
 800c512:	f04f 0801 	movle.w	r8, #1
 800c516:	4490      	add	r8, r2
 800c518:	f04f 0900 	mov.w	r9, #0
 800c51c:	4629      	mov	r1, r5
 800c51e:	2201      	movs	r2, #1
 800c520:	4630      	mov	r0, r6
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	f000 fe30 	bl	800d188 <__lshift>
 800c528:	4621      	mov	r1, r4
 800c52a:	4605      	mov	r5, r0
 800c52c:	f000 fe9c 	bl	800d268 <__mcmp>
 800c530:	2800      	cmp	r0, #0
 800c532:	dcb1      	bgt.n	800c498 <_dtoa_r+0x9c0>
 800c534:	d102      	bne.n	800c53c <_dtoa_r+0xa64>
 800c536:	9b02      	ldr	r3, [sp, #8]
 800c538:	07db      	lsls	r3, r3, #31
 800c53a:	d4ad      	bmi.n	800c498 <_dtoa_r+0x9c0>
 800c53c:	4643      	mov	r3, r8
 800c53e:	4698      	mov	r8, r3
 800c540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c544:	2a30      	cmp	r2, #48	; 0x30
 800c546:	d0fa      	beq.n	800c53e <_dtoa_r+0xa66>
 800c548:	e6f6      	b.n	800c338 <_dtoa_r+0x860>
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d1a4      	bne.n	800c49a <_dtoa_r+0x9c2>
 800c550:	f10b 0b01 	add.w	fp, fp, #1
 800c554:	2331      	movs	r3, #49	; 0x31
 800c556:	e778      	b.n	800c44a <_dtoa_r+0x972>
 800c558:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <_dtoa_r+0xad4>)
 800c55a:	f7ff bb27 	b.w	800bbac <_dtoa_r+0xd4>
 800c55e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c560:	2b00      	cmp	r3, #0
 800c562:	f47f ab03 	bne.w	800bb6c <_dtoa_r+0x94>
 800c566:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <_dtoa_r+0xad8>)
 800c568:	f7ff bb20 	b.w	800bbac <_dtoa_r+0xd4>
 800c56c:	f1ba 0f00 	cmp.w	sl, #0
 800c570:	dc03      	bgt.n	800c57a <_dtoa_r+0xaa2>
 800c572:	9b06      	ldr	r3, [sp, #24]
 800c574:	2b02      	cmp	r3, #2
 800c576:	f73f aec7 	bgt.w	800c308 <_dtoa_r+0x830>
 800c57a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	f7ff fa1d 	bl	800b9c0 <quorem>
 800c586:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c58a:	f808 3b01 	strb.w	r3, [r8], #1
 800c58e:	9a01      	ldr	r2, [sp, #4]
 800c590:	eba8 0202 	sub.w	r2, r8, r2
 800c594:	4592      	cmp	sl, r2
 800c596:	ddb7      	ble.n	800c508 <_dtoa_r+0xa30>
 800c598:	4629      	mov	r1, r5
 800c59a:	2300      	movs	r3, #0
 800c59c:	220a      	movs	r2, #10
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f000 fbf8 	bl	800cd94 <__multadd>
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	e7ea      	b.n	800c57e <_dtoa_r+0xaa6>
 800c5a8:	0800e9d8 	.word	0x0800e9d8
 800c5ac:	0800e7dc 	.word	0x0800e7dc
 800c5b0:	0800e959 	.word	0x0800e959

0800c5b4 <rshift>:
 800c5b4:	6903      	ldr	r3, [r0, #16]
 800c5b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5c2:	f100 0414 	add.w	r4, r0, #20
 800c5c6:	dd45      	ble.n	800c654 <rshift+0xa0>
 800c5c8:	f011 011f 	ands.w	r1, r1, #31
 800c5cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5d4:	d10c      	bne.n	800c5f0 <rshift+0x3c>
 800c5d6:	f100 0710 	add.w	r7, r0, #16
 800c5da:	4629      	mov	r1, r5
 800c5dc:	42b1      	cmp	r1, r6
 800c5de:	d334      	bcc.n	800c64a <rshift+0x96>
 800c5e0:	1a9b      	subs	r3, r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	1eea      	subs	r2, r5, #3
 800c5e6:	4296      	cmp	r6, r2
 800c5e8:	bf38      	it	cc
 800c5ea:	2300      	movcc	r3, #0
 800c5ec:	4423      	add	r3, r4
 800c5ee:	e015      	b.n	800c61c <rshift+0x68>
 800c5f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5f4:	f1c1 0820 	rsb	r8, r1, #32
 800c5f8:	40cf      	lsrs	r7, r1
 800c5fa:	f105 0e04 	add.w	lr, r5, #4
 800c5fe:	46a1      	mov	r9, r4
 800c600:	4576      	cmp	r6, lr
 800c602:	46f4      	mov	ip, lr
 800c604:	d815      	bhi.n	800c632 <rshift+0x7e>
 800c606:	1a9a      	subs	r2, r3, r2
 800c608:	0092      	lsls	r2, r2, #2
 800c60a:	3a04      	subs	r2, #4
 800c60c:	3501      	adds	r5, #1
 800c60e:	42ae      	cmp	r6, r5
 800c610:	bf38      	it	cc
 800c612:	2200      	movcc	r2, #0
 800c614:	18a3      	adds	r3, r4, r2
 800c616:	50a7      	str	r7, [r4, r2]
 800c618:	b107      	cbz	r7, 800c61c <rshift+0x68>
 800c61a:	3304      	adds	r3, #4
 800c61c:	1b1a      	subs	r2, r3, r4
 800c61e:	42a3      	cmp	r3, r4
 800c620:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c624:	bf08      	it	eq
 800c626:	2300      	moveq	r3, #0
 800c628:	6102      	str	r2, [r0, #16]
 800c62a:	bf08      	it	eq
 800c62c:	6143      	streq	r3, [r0, #20]
 800c62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c632:	f8dc c000 	ldr.w	ip, [ip]
 800c636:	fa0c fc08 	lsl.w	ip, ip, r8
 800c63a:	ea4c 0707 	orr.w	r7, ip, r7
 800c63e:	f849 7b04 	str.w	r7, [r9], #4
 800c642:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c646:	40cf      	lsrs	r7, r1
 800c648:	e7da      	b.n	800c600 <rshift+0x4c>
 800c64a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c64e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c652:	e7c3      	b.n	800c5dc <rshift+0x28>
 800c654:	4623      	mov	r3, r4
 800c656:	e7e1      	b.n	800c61c <rshift+0x68>

0800c658 <__hexdig_fun>:
 800c658:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c65c:	2b09      	cmp	r3, #9
 800c65e:	d802      	bhi.n	800c666 <__hexdig_fun+0xe>
 800c660:	3820      	subs	r0, #32
 800c662:	b2c0      	uxtb	r0, r0
 800c664:	4770      	bx	lr
 800c666:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c66a:	2b05      	cmp	r3, #5
 800c66c:	d801      	bhi.n	800c672 <__hexdig_fun+0x1a>
 800c66e:	3847      	subs	r0, #71	; 0x47
 800c670:	e7f7      	b.n	800c662 <__hexdig_fun+0xa>
 800c672:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c676:	2b05      	cmp	r3, #5
 800c678:	d801      	bhi.n	800c67e <__hexdig_fun+0x26>
 800c67a:	3827      	subs	r0, #39	; 0x27
 800c67c:	e7f1      	b.n	800c662 <__hexdig_fun+0xa>
 800c67e:	2000      	movs	r0, #0
 800c680:	4770      	bx	lr
	...

0800c684 <__gethex>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	ed2d 8b02 	vpush	{d8}
 800c68c:	b089      	sub	sp, #36	; 0x24
 800c68e:	ee08 0a10 	vmov	s16, r0
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	4bb4      	ldr	r3, [pc, #720]	; (800c968 <__gethex+0x2e4>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	4618      	mov	r0, r3
 800c69c:	468b      	mov	fp, r1
 800c69e:	4690      	mov	r8, r2
 800c6a0:	f7f3 fe1e 	bl	80002e0 <strlen>
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	f8db 2000 	ldr.w	r2, [fp]
 800c6aa:	4403      	add	r3, r0
 800c6ac:	4682      	mov	sl, r0
 800c6ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	1c93      	adds	r3, r2, #2
 800c6b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c6ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c6be:	32fe      	adds	r2, #254	; 0xfe
 800c6c0:	18d1      	adds	r1, r2, r3
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c6c8:	9100      	str	r1, [sp, #0]
 800c6ca:	2830      	cmp	r0, #48	; 0x30
 800c6cc:	d0f8      	beq.n	800c6c0 <__gethex+0x3c>
 800c6ce:	f7ff ffc3 	bl	800c658 <__hexdig_fun>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d13a      	bne.n	800c74e <__gethex+0xca>
 800c6d8:	9901      	ldr	r1, [sp, #4]
 800c6da:	4652      	mov	r2, sl
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f001 fa1f 	bl	800db20 <strncmp>
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d168      	bne.n	800c7ba <__gethex+0x136>
 800c6e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c6ec:	eb07 060a 	add.w	r6, r7, sl
 800c6f0:	f7ff ffb2 	bl	800c658 <__hexdig_fun>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d062      	beq.n	800c7be <__gethex+0x13a>
 800c6f8:	4633      	mov	r3, r6
 800c6fa:	7818      	ldrb	r0, [r3, #0]
 800c6fc:	2830      	cmp	r0, #48	; 0x30
 800c6fe:	461f      	mov	r7, r3
 800c700:	f103 0301 	add.w	r3, r3, #1
 800c704:	d0f9      	beq.n	800c6fa <__gethex+0x76>
 800c706:	f7ff ffa7 	bl	800c658 <__hexdig_fun>
 800c70a:	2301      	movs	r3, #1
 800c70c:	fab0 f480 	clz	r4, r0
 800c710:	0964      	lsrs	r4, r4, #5
 800c712:	4635      	mov	r5, r6
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	463a      	mov	r2, r7
 800c718:	4616      	mov	r6, r2
 800c71a:	3201      	adds	r2, #1
 800c71c:	7830      	ldrb	r0, [r6, #0]
 800c71e:	f7ff ff9b 	bl	800c658 <__hexdig_fun>
 800c722:	2800      	cmp	r0, #0
 800c724:	d1f8      	bne.n	800c718 <__gethex+0x94>
 800c726:	9901      	ldr	r1, [sp, #4]
 800c728:	4652      	mov	r2, sl
 800c72a:	4630      	mov	r0, r6
 800c72c:	f001 f9f8 	bl	800db20 <strncmp>
 800c730:	b980      	cbnz	r0, 800c754 <__gethex+0xd0>
 800c732:	b94d      	cbnz	r5, 800c748 <__gethex+0xc4>
 800c734:	eb06 050a 	add.w	r5, r6, sl
 800c738:	462a      	mov	r2, r5
 800c73a:	4616      	mov	r6, r2
 800c73c:	3201      	adds	r2, #1
 800c73e:	7830      	ldrb	r0, [r6, #0]
 800c740:	f7ff ff8a 	bl	800c658 <__hexdig_fun>
 800c744:	2800      	cmp	r0, #0
 800c746:	d1f8      	bne.n	800c73a <__gethex+0xb6>
 800c748:	1bad      	subs	r5, r5, r6
 800c74a:	00ad      	lsls	r5, r5, #2
 800c74c:	e004      	b.n	800c758 <__gethex+0xd4>
 800c74e:	2400      	movs	r4, #0
 800c750:	4625      	mov	r5, r4
 800c752:	e7e0      	b.n	800c716 <__gethex+0x92>
 800c754:	2d00      	cmp	r5, #0
 800c756:	d1f7      	bne.n	800c748 <__gethex+0xc4>
 800c758:	7833      	ldrb	r3, [r6, #0]
 800c75a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c75e:	2b50      	cmp	r3, #80	; 0x50
 800c760:	d13b      	bne.n	800c7da <__gethex+0x156>
 800c762:	7873      	ldrb	r3, [r6, #1]
 800c764:	2b2b      	cmp	r3, #43	; 0x2b
 800c766:	d02c      	beq.n	800c7c2 <__gethex+0x13e>
 800c768:	2b2d      	cmp	r3, #45	; 0x2d
 800c76a:	d02e      	beq.n	800c7ca <__gethex+0x146>
 800c76c:	1c71      	adds	r1, r6, #1
 800c76e:	f04f 0900 	mov.w	r9, #0
 800c772:	7808      	ldrb	r0, [r1, #0]
 800c774:	f7ff ff70 	bl	800c658 <__hexdig_fun>
 800c778:	1e43      	subs	r3, r0, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b18      	cmp	r3, #24
 800c77e:	d82c      	bhi.n	800c7da <__gethex+0x156>
 800c780:	f1a0 0210 	sub.w	r2, r0, #16
 800c784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c788:	f7ff ff66 	bl	800c658 <__hexdig_fun>
 800c78c:	1e43      	subs	r3, r0, #1
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b18      	cmp	r3, #24
 800c792:	d91d      	bls.n	800c7d0 <__gethex+0x14c>
 800c794:	f1b9 0f00 	cmp.w	r9, #0
 800c798:	d000      	beq.n	800c79c <__gethex+0x118>
 800c79a:	4252      	negs	r2, r2
 800c79c:	4415      	add	r5, r2
 800c79e:	f8cb 1000 	str.w	r1, [fp]
 800c7a2:	b1e4      	cbz	r4, 800c7de <__gethex+0x15a>
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bf14      	ite	ne
 800c7aa:	2700      	movne	r7, #0
 800c7ac:	2706      	moveq	r7, #6
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	b009      	add	sp, #36	; 0x24
 800c7b2:	ecbd 8b02 	vpop	{d8}
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	463e      	mov	r6, r7
 800c7bc:	4625      	mov	r5, r4
 800c7be:	2401      	movs	r4, #1
 800c7c0:	e7ca      	b.n	800c758 <__gethex+0xd4>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	1cb1      	adds	r1, r6, #2
 800c7c8:	e7d3      	b.n	800c772 <__gethex+0xee>
 800c7ca:	f04f 0901 	mov.w	r9, #1
 800c7ce:	e7fa      	b.n	800c7c6 <__gethex+0x142>
 800c7d0:	230a      	movs	r3, #10
 800c7d2:	fb03 0202 	mla	r2, r3, r2, r0
 800c7d6:	3a10      	subs	r2, #16
 800c7d8:	e7d4      	b.n	800c784 <__gethex+0x100>
 800c7da:	4631      	mov	r1, r6
 800c7dc:	e7df      	b.n	800c79e <__gethex+0x11a>
 800c7de:	1bf3      	subs	r3, r6, r7
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	2b07      	cmp	r3, #7
 800c7e6:	dc0b      	bgt.n	800c800 <__gethex+0x17c>
 800c7e8:	ee18 0a10 	vmov	r0, s16
 800c7ec:	f000 fa70 	bl	800ccd0 <_Balloc>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	b940      	cbnz	r0, 800c806 <__gethex+0x182>
 800c7f4:	4b5d      	ldr	r3, [pc, #372]	; (800c96c <__gethex+0x2e8>)
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	21de      	movs	r1, #222	; 0xde
 800c7fa:	485d      	ldr	r0, [pc, #372]	; (800c970 <__gethex+0x2ec>)
 800c7fc:	f001 f9b2 	bl	800db64 <__assert_func>
 800c800:	3101      	adds	r1, #1
 800c802:	105b      	asrs	r3, r3, #1
 800c804:	e7ee      	b.n	800c7e4 <__gethex+0x160>
 800c806:	f100 0914 	add.w	r9, r0, #20
 800c80a:	f04f 0b00 	mov.w	fp, #0
 800c80e:	f1ca 0301 	rsb	r3, sl, #1
 800c812:	f8cd 9008 	str.w	r9, [sp, #8]
 800c816:	f8cd b000 	str.w	fp, [sp]
 800c81a:	9306      	str	r3, [sp, #24]
 800c81c:	42b7      	cmp	r7, r6
 800c81e:	d340      	bcc.n	800c8a2 <__gethex+0x21e>
 800c820:	9802      	ldr	r0, [sp, #8]
 800c822:	9b00      	ldr	r3, [sp, #0]
 800c824:	f840 3b04 	str.w	r3, [r0], #4
 800c828:	eba0 0009 	sub.w	r0, r0, r9
 800c82c:	1080      	asrs	r0, r0, #2
 800c82e:	0146      	lsls	r6, r0, #5
 800c830:	6120      	str	r0, [r4, #16]
 800c832:	4618      	mov	r0, r3
 800c834:	f000 fb3e 	bl	800ceb4 <__hi0bits>
 800c838:	1a30      	subs	r0, r6, r0
 800c83a:	f8d8 6000 	ldr.w	r6, [r8]
 800c83e:	42b0      	cmp	r0, r6
 800c840:	dd63      	ble.n	800c90a <__gethex+0x286>
 800c842:	1b87      	subs	r7, r0, r6
 800c844:	4639      	mov	r1, r7
 800c846:	4620      	mov	r0, r4
 800c848:	f000 fedf 	bl	800d60a <__any_on>
 800c84c:	4682      	mov	sl, r0
 800c84e:	b1a8      	cbz	r0, 800c87c <__gethex+0x1f8>
 800c850:	1e7b      	subs	r3, r7, #1
 800c852:	1159      	asrs	r1, r3, #5
 800c854:	f003 021f 	and.w	r2, r3, #31
 800c858:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c85c:	f04f 0a01 	mov.w	sl, #1
 800c860:	fa0a f202 	lsl.w	r2, sl, r2
 800c864:	420a      	tst	r2, r1
 800c866:	d009      	beq.n	800c87c <__gethex+0x1f8>
 800c868:	4553      	cmp	r3, sl
 800c86a:	dd05      	ble.n	800c878 <__gethex+0x1f4>
 800c86c:	1eb9      	subs	r1, r7, #2
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 fecb 	bl	800d60a <__any_on>
 800c874:	2800      	cmp	r0, #0
 800c876:	d145      	bne.n	800c904 <__gethex+0x280>
 800c878:	f04f 0a02 	mov.w	sl, #2
 800c87c:	4639      	mov	r1, r7
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff fe98 	bl	800c5b4 <rshift>
 800c884:	443d      	add	r5, r7
 800c886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c88a:	42ab      	cmp	r3, r5
 800c88c:	da4c      	bge.n	800c928 <__gethex+0x2a4>
 800c88e:	ee18 0a10 	vmov	r0, s16
 800c892:	4621      	mov	r1, r4
 800c894:	f000 fa5c 	bl	800cd50 <_Bfree>
 800c898:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c89a:	2300      	movs	r3, #0
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	27a3      	movs	r7, #163	; 0xa3
 800c8a0:	e785      	b.n	800c7ae <__gethex+0x12a>
 800c8a2:	1e73      	subs	r3, r6, #1
 800c8a4:	9a05      	ldr	r2, [sp, #20]
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d019      	beq.n	800c8e4 <__gethex+0x260>
 800c8b0:	f1bb 0f20 	cmp.w	fp, #32
 800c8b4:	d107      	bne.n	800c8c6 <__gethex+0x242>
 800c8b6:	9b02      	ldr	r3, [sp, #8]
 800c8b8:	9a00      	ldr	r2, [sp, #0]
 800c8ba:	f843 2b04 	str.w	r2, [r3], #4
 800c8be:	9302      	str	r3, [sp, #8]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	469b      	mov	fp, r3
 800c8c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c8ca:	f7ff fec5 	bl	800c658 <__hexdig_fun>
 800c8ce:	9b00      	ldr	r3, [sp, #0]
 800c8d0:	f000 000f 	and.w	r0, r0, #15
 800c8d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c8d8:	4303      	orrs	r3, r0
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	f10b 0b04 	add.w	fp, fp, #4
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	e00d      	b.n	800c900 <__gethex+0x27c>
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	9a06      	ldr	r2, [sp, #24]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	42bb      	cmp	r3, r7
 800c8ec:	d3e0      	bcc.n	800c8b0 <__gethex+0x22c>
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	9901      	ldr	r1, [sp, #4]
 800c8f2:	9307      	str	r3, [sp, #28]
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	f001 f913 	bl	800db20 <strncmp>
 800c8fa:	9b07      	ldr	r3, [sp, #28]
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d1d7      	bne.n	800c8b0 <__gethex+0x22c>
 800c900:	461e      	mov	r6, r3
 800c902:	e78b      	b.n	800c81c <__gethex+0x198>
 800c904:	f04f 0a03 	mov.w	sl, #3
 800c908:	e7b8      	b.n	800c87c <__gethex+0x1f8>
 800c90a:	da0a      	bge.n	800c922 <__gethex+0x29e>
 800c90c:	1a37      	subs	r7, r6, r0
 800c90e:	4621      	mov	r1, r4
 800c910:	ee18 0a10 	vmov	r0, s16
 800c914:	463a      	mov	r2, r7
 800c916:	f000 fc37 	bl	800d188 <__lshift>
 800c91a:	1bed      	subs	r5, r5, r7
 800c91c:	4604      	mov	r4, r0
 800c91e:	f100 0914 	add.w	r9, r0, #20
 800c922:	f04f 0a00 	mov.w	sl, #0
 800c926:	e7ae      	b.n	800c886 <__gethex+0x202>
 800c928:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c92c:	42a8      	cmp	r0, r5
 800c92e:	dd72      	ble.n	800ca16 <__gethex+0x392>
 800c930:	1b45      	subs	r5, r0, r5
 800c932:	42ae      	cmp	r6, r5
 800c934:	dc36      	bgt.n	800c9a4 <__gethex+0x320>
 800c936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d02a      	beq.n	800c994 <__gethex+0x310>
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d02c      	beq.n	800c99c <__gethex+0x318>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d11c      	bne.n	800c980 <__gethex+0x2fc>
 800c946:	42ae      	cmp	r6, r5
 800c948:	d11a      	bne.n	800c980 <__gethex+0x2fc>
 800c94a:	2e01      	cmp	r6, #1
 800c94c:	d112      	bne.n	800c974 <__gethex+0x2f0>
 800c94e:	9a04      	ldr	r2, [sp, #16]
 800c950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	2301      	movs	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	f8c9 3000 	str.w	r3, [r9]
 800c95e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c960:	2762      	movs	r7, #98	; 0x62
 800c962:	601c      	str	r4, [r3, #0]
 800c964:	e723      	b.n	800c7ae <__gethex+0x12a>
 800c966:	bf00      	nop
 800c968:	0800ea50 	.word	0x0800ea50
 800c96c:	0800e9d8 	.word	0x0800e9d8
 800c970:	0800e9e9 	.word	0x0800e9e9
 800c974:	1e71      	subs	r1, r6, #1
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fe47 	bl	800d60a <__any_on>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d1e6      	bne.n	800c94e <__gethex+0x2ca>
 800c980:	ee18 0a10 	vmov	r0, s16
 800c984:	4621      	mov	r1, r4
 800c986:	f000 f9e3 	bl	800cd50 <_Bfree>
 800c98a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c98c:	2300      	movs	r3, #0
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	2750      	movs	r7, #80	; 0x50
 800c992:	e70c      	b.n	800c7ae <__gethex+0x12a>
 800c994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1f2      	bne.n	800c980 <__gethex+0x2fc>
 800c99a:	e7d8      	b.n	800c94e <__gethex+0x2ca>
 800c99c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1d5      	bne.n	800c94e <__gethex+0x2ca>
 800c9a2:	e7ed      	b.n	800c980 <__gethex+0x2fc>
 800c9a4:	1e6f      	subs	r7, r5, #1
 800c9a6:	f1ba 0f00 	cmp.w	sl, #0
 800c9aa:	d131      	bne.n	800ca10 <__gethex+0x38c>
 800c9ac:	b127      	cbz	r7, 800c9b8 <__gethex+0x334>
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fe2a 	bl	800d60a <__any_on>
 800c9b6:	4682      	mov	sl, r0
 800c9b8:	117b      	asrs	r3, r7, #5
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c9c0:	f007 071f 	and.w	r7, r7, #31
 800c9c4:	fa01 f707 	lsl.w	r7, r1, r7
 800c9c8:	421f      	tst	r7, r3
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	bf18      	it	ne
 800c9d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c9d4:	1b76      	subs	r6, r6, r5
 800c9d6:	f7ff fded 	bl	800c5b4 <rshift>
 800c9da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c9de:	2702      	movs	r7, #2
 800c9e0:	f1ba 0f00 	cmp.w	sl, #0
 800c9e4:	d048      	beq.n	800ca78 <__gethex+0x3f4>
 800c9e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d015      	beq.n	800ca1a <__gethex+0x396>
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d017      	beq.n	800ca22 <__gethex+0x39e>
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d109      	bne.n	800ca0a <__gethex+0x386>
 800c9f6:	f01a 0f02 	tst.w	sl, #2
 800c9fa:	d006      	beq.n	800ca0a <__gethex+0x386>
 800c9fc:	f8d9 0000 	ldr.w	r0, [r9]
 800ca00:	ea4a 0a00 	orr.w	sl, sl, r0
 800ca04:	f01a 0f01 	tst.w	sl, #1
 800ca08:	d10e      	bne.n	800ca28 <__gethex+0x3a4>
 800ca0a:	f047 0710 	orr.w	r7, r7, #16
 800ca0e:	e033      	b.n	800ca78 <__gethex+0x3f4>
 800ca10:	f04f 0a01 	mov.w	sl, #1
 800ca14:	e7d0      	b.n	800c9b8 <__gethex+0x334>
 800ca16:	2701      	movs	r7, #1
 800ca18:	e7e2      	b.n	800c9e0 <__gethex+0x35c>
 800ca1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca1c:	f1c3 0301 	rsb	r3, r3, #1
 800ca20:	9315      	str	r3, [sp, #84]	; 0x54
 800ca22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0f0      	beq.n	800ca0a <__gethex+0x386>
 800ca28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca2c:	f104 0314 	add.w	r3, r4, #20
 800ca30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca38:	f04f 0c00 	mov.w	ip, #0
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca42:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca46:	d01c      	beq.n	800ca82 <__gethex+0x3fe>
 800ca48:	3201      	adds	r2, #1
 800ca4a:	6002      	str	r2, [r0, #0]
 800ca4c:	2f02      	cmp	r7, #2
 800ca4e:	f104 0314 	add.w	r3, r4, #20
 800ca52:	d13f      	bne.n	800cad4 <__gethex+0x450>
 800ca54:	f8d8 2000 	ldr.w	r2, [r8]
 800ca58:	3a01      	subs	r2, #1
 800ca5a:	42b2      	cmp	r2, r6
 800ca5c:	d10a      	bne.n	800ca74 <__gethex+0x3f0>
 800ca5e:	1171      	asrs	r1, r6, #5
 800ca60:	2201      	movs	r2, #1
 800ca62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca66:	f006 061f 	and.w	r6, r6, #31
 800ca6a:	fa02 f606 	lsl.w	r6, r2, r6
 800ca6e:	421e      	tst	r6, r3
 800ca70:	bf18      	it	ne
 800ca72:	4617      	movne	r7, r2
 800ca74:	f047 0720 	orr.w	r7, r7, #32
 800ca78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca7a:	601c      	str	r4, [r3, #0]
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	601d      	str	r5, [r3, #0]
 800ca80:	e695      	b.n	800c7ae <__gethex+0x12a>
 800ca82:	4299      	cmp	r1, r3
 800ca84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca88:	d8d8      	bhi.n	800ca3c <__gethex+0x3b8>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	459b      	cmp	fp, r3
 800ca8e:	db19      	blt.n	800cac4 <__gethex+0x440>
 800ca90:	6861      	ldr	r1, [r4, #4]
 800ca92:	ee18 0a10 	vmov	r0, s16
 800ca96:	3101      	adds	r1, #1
 800ca98:	f000 f91a 	bl	800ccd0 <_Balloc>
 800ca9c:	4681      	mov	r9, r0
 800ca9e:	b918      	cbnz	r0, 800caa8 <__gethex+0x424>
 800caa0:	4b1a      	ldr	r3, [pc, #104]	; (800cb0c <__gethex+0x488>)
 800caa2:	4602      	mov	r2, r0
 800caa4:	2184      	movs	r1, #132	; 0x84
 800caa6:	e6a8      	b.n	800c7fa <__gethex+0x176>
 800caa8:	6922      	ldr	r2, [r4, #16]
 800caaa:	3202      	adds	r2, #2
 800caac:	f104 010c 	add.w	r1, r4, #12
 800cab0:	0092      	lsls	r2, r2, #2
 800cab2:	300c      	adds	r0, #12
 800cab4:	f7fd faa4 	bl	800a000 <memcpy>
 800cab8:	4621      	mov	r1, r4
 800caba:	ee18 0a10 	vmov	r0, s16
 800cabe:	f000 f947 	bl	800cd50 <_Bfree>
 800cac2:	464c      	mov	r4, r9
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cacc:	6122      	str	r2, [r4, #16]
 800cace:	2201      	movs	r2, #1
 800cad0:	615a      	str	r2, [r3, #20]
 800cad2:	e7bb      	b.n	800ca4c <__gethex+0x3c8>
 800cad4:	6922      	ldr	r2, [r4, #16]
 800cad6:	455a      	cmp	r2, fp
 800cad8:	dd0b      	ble.n	800caf2 <__gethex+0x46e>
 800cada:	2101      	movs	r1, #1
 800cadc:	4620      	mov	r0, r4
 800cade:	f7ff fd69 	bl	800c5b4 <rshift>
 800cae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae6:	3501      	adds	r5, #1
 800cae8:	42ab      	cmp	r3, r5
 800caea:	f6ff aed0 	blt.w	800c88e <__gethex+0x20a>
 800caee:	2701      	movs	r7, #1
 800caf0:	e7c0      	b.n	800ca74 <__gethex+0x3f0>
 800caf2:	f016 061f 	ands.w	r6, r6, #31
 800caf6:	d0fa      	beq.n	800caee <__gethex+0x46a>
 800caf8:	4453      	add	r3, sl
 800cafa:	f1c6 0620 	rsb	r6, r6, #32
 800cafe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cb02:	f000 f9d7 	bl	800ceb4 <__hi0bits>
 800cb06:	42b0      	cmp	r0, r6
 800cb08:	dbe7      	blt.n	800cada <__gethex+0x456>
 800cb0a:	e7f0      	b.n	800caee <__gethex+0x46a>
 800cb0c:	0800e9d8 	.word	0x0800e9d8

0800cb10 <L_shift>:
 800cb10:	f1c2 0208 	rsb	r2, r2, #8
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	b570      	push	{r4, r5, r6, lr}
 800cb18:	f1c2 0620 	rsb	r6, r2, #32
 800cb1c:	6843      	ldr	r3, [r0, #4]
 800cb1e:	6804      	ldr	r4, [r0, #0]
 800cb20:	fa03 f506 	lsl.w	r5, r3, r6
 800cb24:	432c      	orrs	r4, r5
 800cb26:	40d3      	lsrs	r3, r2
 800cb28:	6004      	str	r4, [r0, #0]
 800cb2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb2e:	4288      	cmp	r0, r1
 800cb30:	d3f4      	bcc.n	800cb1c <L_shift+0xc>
 800cb32:	bd70      	pop	{r4, r5, r6, pc}

0800cb34 <__match>:
 800cb34:	b530      	push	{r4, r5, lr}
 800cb36:	6803      	ldr	r3, [r0, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3e:	b914      	cbnz	r4, 800cb46 <__match+0x12>
 800cb40:	6003      	str	r3, [r0, #0]
 800cb42:	2001      	movs	r0, #1
 800cb44:	bd30      	pop	{r4, r5, pc}
 800cb46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb4e:	2d19      	cmp	r5, #25
 800cb50:	bf98      	it	ls
 800cb52:	3220      	addls	r2, #32
 800cb54:	42a2      	cmp	r2, r4
 800cb56:	d0f0      	beq.n	800cb3a <__match+0x6>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	e7f3      	b.n	800cb44 <__match+0x10>

0800cb5c <__hexnan>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	680b      	ldr	r3, [r1, #0]
 800cb62:	115e      	asrs	r6, r3, #5
 800cb64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb68:	f013 031f 	ands.w	r3, r3, #31
 800cb6c:	b087      	sub	sp, #28
 800cb6e:	bf18      	it	ne
 800cb70:	3604      	addne	r6, #4
 800cb72:	2500      	movs	r5, #0
 800cb74:	1f37      	subs	r7, r6, #4
 800cb76:	4690      	mov	r8, r2
 800cb78:	6802      	ldr	r2, [r0, #0]
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	4682      	mov	sl, r0
 800cb7e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb82:	46b9      	mov	r9, r7
 800cb84:	463c      	mov	r4, r7
 800cb86:	9502      	str	r5, [sp, #8]
 800cb88:	46ab      	mov	fp, r5
 800cb8a:	7851      	ldrb	r1, [r2, #1]
 800cb8c:	1c53      	adds	r3, r2, #1
 800cb8e:	9303      	str	r3, [sp, #12]
 800cb90:	b341      	cbz	r1, 800cbe4 <__hexnan+0x88>
 800cb92:	4608      	mov	r0, r1
 800cb94:	9205      	str	r2, [sp, #20]
 800cb96:	9104      	str	r1, [sp, #16]
 800cb98:	f7ff fd5e 	bl	800c658 <__hexdig_fun>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d14f      	bne.n	800cc40 <__hexnan+0xe4>
 800cba0:	9904      	ldr	r1, [sp, #16]
 800cba2:	9a05      	ldr	r2, [sp, #20]
 800cba4:	2920      	cmp	r1, #32
 800cba6:	d818      	bhi.n	800cbda <__hexnan+0x7e>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	459b      	cmp	fp, r3
 800cbac:	dd13      	ble.n	800cbd6 <__hexnan+0x7a>
 800cbae:	454c      	cmp	r4, r9
 800cbb0:	d206      	bcs.n	800cbc0 <__hexnan+0x64>
 800cbb2:	2d07      	cmp	r5, #7
 800cbb4:	dc04      	bgt.n	800cbc0 <__hexnan+0x64>
 800cbb6:	462a      	mov	r2, r5
 800cbb8:	4649      	mov	r1, r9
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff ffa8 	bl	800cb10 <L_shift>
 800cbc0:	4544      	cmp	r4, r8
 800cbc2:	d950      	bls.n	800cc66 <__hexnan+0x10a>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f1a4 0904 	sub.w	r9, r4, #4
 800cbca:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbce:	f8cd b008 	str.w	fp, [sp, #8]
 800cbd2:	464c      	mov	r4, r9
 800cbd4:	461d      	mov	r5, r3
 800cbd6:	9a03      	ldr	r2, [sp, #12]
 800cbd8:	e7d7      	b.n	800cb8a <__hexnan+0x2e>
 800cbda:	2929      	cmp	r1, #41	; 0x29
 800cbdc:	d156      	bne.n	800cc8c <__hexnan+0x130>
 800cbde:	3202      	adds	r2, #2
 800cbe0:	f8ca 2000 	str.w	r2, [sl]
 800cbe4:	f1bb 0f00 	cmp.w	fp, #0
 800cbe8:	d050      	beq.n	800cc8c <__hexnan+0x130>
 800cbea:	454c      	cmp	r4, r9
 800cbec:	d206      	bcs.n	800cbfc <__hexnan+0xa0>
 800cbee:	2d07      	cmp	r5, #7
 800cbf0:	dc04      	bgt.n	800cbfc <__hexnan+0xa0>
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff ff8a 	bl	800cb10 <L_shift>
 800cbfc:	4544      	cmp	r4, r8
 800cbfe:	d934      	bls.n	800cc6a <__hexnan+0x10e>
 800cc00:	f1a8 0204 	sub.w	r2, r8, #4
 800cc04:	4623      	mov	r3, r4
 800cc06:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc0a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc0e:	429f      	cmp	r7, r3
 800cc10:	d2f9      	bcs.n	800cc06 <__hexnan+0xaa>
 800cc12:	1b3b      	subs	r3, r7, r4
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	3304      	adds	r3, #4
 800cc1a:	3401      	adds	r4, #1
 800cc1c:	3e03      	subs	r6, #3
 800cc1e:	42b4      	cmp	r4, r6
 800cc20:	bf88      	it	hi
 800cc22:	2304      	movhi	r3, #4
 800cc24:	4443      	add	r3, r8
 800cc26:	2200      	movs	r2, #0
 800cc28:	f843 2b04 	str.w	r2, [r3], #4
 800cc2c:	429f      	cmp	r7, r3
 800cc2e:	d2fb      	bcs.n	800cc28 <__hexnan+0xcc>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	b91b      	cbnz	r3, 800cc3c <__hexnan+0xe0>
 800cc34:	4547      	cmp	r7, r8
 800cc36:	d127      	bne.n	800cc88 <__hexnan+0x12c>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	2005      	movs	r0, #5
 800cc3e:	e026      	b.n	800cc8e <__hexnan+0x132>
 800cc40:	3501      	adds	r5, #1
 800cc42:	2d08      	cmp	r5, #8
 800cc44:	f10b 0b01 	add.w	fp, fp, #1
 800cc48:	dd06      	ble.n	800cc58 <__hexnan+0xfc>
 800cc4a:	4544      	cmp	r4, r8
 800cc4c:	d9c3      	bls.n	800cbd6 <__hexnan+0x7a>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc54:	2501      	movs	r5, #1
 800cc56:	3c04      	subs	r4, #4
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	f000 000f 	and.w	r0, r0, #15
 800cc5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	e7b7      	b.n	800cbd6 <__hexnan+0x7a>
 800cc66:	2508      	movs	r5, #8
 800cc68:	e7b5      	b.n	800cbd6 <__hexnan+0x7a>
 800cc6a:	9b01      	ldr	r3, [sp, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0df      	beq.n	800cc30 <__hexnan+0xd4>
 800cc70:	f04f 32ff 	mov.w	r2, #4294967295
 800cc74:	f1c3 0320 	rsb	r3, r3, #32
 800cc78:	fa22 f303 	lsr.w	r3, r2, r3
 800cc7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc80:	401a      	ands	r2, r3
 800cc82:	f846 2c04 	str.w	r2, [r6, #-4]
 800cc86:	e7d3      	b.n	800cc30 <__hexnan+0xd4>
 800cc88:	3f04      	subs	r7, #4
 800cc8a:	e7d1      	b.n	800cc30 <__hexnan+0xd4>
 800cc8c:	2004      	movs	r0, #4
 800cc8e:	b007      	add	sp, #28
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc94 <_localeconv_r>:
 800cc94:	4800      	ldr	r0, [pc, #0]	; (800cc98 <_localeconv_r+0x4>)
 800cc96:	4770      	bx	lr
 800cc98:	24000188 	.word	0x24000188

0800cc9c <malloc>:
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <malloc+0xc>)
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f000 bd55 	b.w	800d750 <_malloc_r>
 800cca6:	bf00      	nop
 800cca8:	24000030 	.word	0x24000030

0800ccac <__ascii_mbtowc>:
 800ccac:	b082      	sub	sp, #8
 800ccae:	b901      	cbnz	r1, 800ccb2 <__ascii_mbtowc+0x6>
 800ccb0:	a901      	add	r1, sp, #4
 800ccb2:	b142      	cbz	r2, 800ccc6 <__ascii_mbtowc+0x1a>
 800ccb4:	b14b      	cbz	r3, 800ccca <__ascii_mbtowc+0x1e>
 800ccb6:	7813      	ldrb	r3, [r2, #0]
 800ccb8:	600b      	str	r3, [r1, #0]
 800ccba:	7812      	ldrb	r2, [r2, #0]
 800ccbc:	1e10      	subs	r0, r2, #0
 800ccbe:	bf18      	it	ne
 800ccc0:	2001      	movne	r0, #1
 800ccc2:	b002      	add	sp, #8
 800ccc4:	4770      	bx	lr
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	e7fb      	b.n	800ccc2 <__ascii_mbtowc+0x16>
 800ccca:	f06f 0001 	mvn.w	r0, #1
 800ccce:	e7f8      	b.n	800ccc2 <__ascii_mbtowc+0x16>

0800ccd0 <_Balloc>:
 800ccd0:	b570      	push	{r4, r5, r6, lr}
 800ccd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	b976      	cbnz	r6, 800ccf8 <_Balloc+0x28>
 800ccda:	2010      	movs	r0, #16
 800ccdc:	f7ff ffde 	bl	800cc9c <malloc>
 800cce0:	4602      	mov	r2, r0
 800cce2:	6260      	str	r0, [r4, #36]	; 0x24
 800cce4:	b920      	cbnz	r0, 800ccf0 <_Balloc+0x20>
 800cce6:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <_Balloc+0x78>)
 800cce8:	4818      	ldr	r0, [pc, #96]	; (800cd4c <_Balloc+0x7c>)
 800ccea:	2166      	movs	r1, #102	; 0x66
 800ccec:	f000 ff3a 	bl	800db64 <__assert_func>
 800ccf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccf4:	6006      	str	r6, [r0, #0]
 800ccf6:	60c6      	str	r6, [r0, #12]
 800ccf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ccfa:	68f3      	ldr	r3, [r6, #12]
 800ccfc:	b183      	cbz	r3, 800cd20 <_Balloc+0x50>
 800ccfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd06:	b9b8      	cbnz	r0, 800cd38 <_Balloc+0x68>
 800cd08:	2101      	movs	r1, #1
 800cd0a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd0e:	1d72      	adds	r2, r6, #5
 800cd10:	0092      	lsls	r2, r2, #2
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fc9a 	bl	800d64c <_calloc_r>
 800cd18:	b160      	cbz	r0, 800cd34 <_Balloc+0x64>
 800cd1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd1e:	e00e      	b.n	800cd3e <_Balloc+0x6e>
 800cd20:	2221      	movs	r2, #33	; 0x21
 800cd22:	2104      	movs	r1, #4
 800cd24:	4620      	mov	r0, r4
 800cd26:	f000 fc91 	bl	800d64c <_calloc_r>
 800cd2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd2c:	60f0      	str	r0, [r6, #12]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1e4      	bne.n	800ccfe <_Balloc+0x2e>
 800cd34:	2000      	movs	r0, #0
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
 800cd38:	6802      	ldr	r2, [r0, #0]
 800cd3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd44:	e7f7      	b.n	800cd36 <_Balloc+0x66>
 800cd46:	bf00      	nop
 800cd48:	0800e966 	.word	0x0800e966
 800cd4c:	0800ea64 	.word	0x0800ea64

0800cd50 <_Bfree>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd54:	4605      	mov	r5, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	b976      	cbnz	r6, 800cd78 <_Bfree+0x28>
 800cd5a:	2010      	movs	r0, #16
 800cd5c:	f7ff ff9e 	bl	800cc9c <malloc>
 800cd60:	4602      	mov	r2, r0
 800cd62:	6268      	str	r0, [r5, #36]	; 0x24
 800cd64:	b920      	cbnz	r0, 800cd70 <_Bfree+0x20>
 800cd66:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <_Bfree+0x3c>)
 800cd68:	4809      	ldr	r0, [pc, #36]	; (800cd90 <_Bfree+0x40>)
 800cd6a:	218a      	movs	r1, #138	; 0x8a
 800cd6c:	f000 fefa 	bl	800db64 <__assert_func>
 800cd70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd74:	6006      	str	r6, [r0, #0]
 800cd76:	60c6      	str	r6, [r0, #12]
 800cd78:	b13c      	cbz	r4, 800cd8a <_Bfree+0x3a>
 800cd7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd7c:	6862      	ldr	r2, [r4, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd84:	6021      	str	r1, [r4, #0]
 800cd86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	0800e966 	.word	0x0800e966
 800cd90:	0800ea64 	.word	0x0800ea64

0800cd94 <__multadd>:
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	690d      	ldr	r5, [r1, #16]
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	461e      	mov	r6, r3
 800cda0:	f101 0c14 	add.w	ip, r1, #20
 800cda4:	2000      	movs	r0, #0
 800cda6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdaa:	b299      	uxth	r1, r3
 800cdac:	fb02 6101 	mla	r1, r2, r1, r6
 800cdb0:	0c1e      	lsrs	r6, r3, #16
 800cdb2:	0c0b      	lsrs	r3, r1, #16
 800cdb4:	fb02 3306 	mla	r3, r2, r6, r3
 800cdb8:	b289      	uxth	r1, r1
 800cdba:	3001      	adds	r0, #1
 800cdbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdc0:	4285      	cmp	r5, r0
 800cdc2:	f84c 1b04 	str.w	r1, [ip], #4
 800cdc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdca:	dcec      	bgt.n	800cda6 <__multadd+0x12>
 800cdcc:	b30e      	cbz	r6, 800ce12 <__multadd+0x7e>
 800cdce:	68a3      	ldr	r3, [r4, #8]
 800cdd0:	42ab      	cmp	r3, r5
 800cdd2:	dc19      	bgt.n	800ce08 <__multadd+0x74>
 800cdd4:	6861      	ldr	r1, [r4, #4]
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	3101      	adds	r1, #1
 800cdda:	f7ff ff79 	bl	800ccd0 <_Balloc>
 800cdde:	4680      	mov	r8, r0
 800cde0:	b928      	cbnz	r0, 800cdee <__multadd+0x5a>
 800cde2:	4602      	mov	r2, r0
 800cde4:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <__multadd+0x84>)
 800cde6:	480d      	ldr	r0, [pc, #52]	; (800ce1c <__multadd+0x88>)
 800cde8:	21b5      	movs	r1, #181	; 0xb5
 800cdea:	f000 febb 	bl	800db64 <__assert_func>
 800cdee:	6922      	ldr	r2, [r4, #16]
 800cdf0:	3202      	adds	r2, #2
 800cdf2:	f104 010c 	add.w	r1, r4, #12
 800cdf6:	0092      	lsls	r2, r2, #2
 800cdf8:	300c      	adds	r0, #12
 800cdfa:	f7fd f901 	bl	800a000 <memcpy>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff ffa5 	bl	800cd50 <_Bfree>
 800ce06:	4644      	mov	r4, r8
 800ce08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	615e      	str	r6, [r3, #20]
 800ce10:	6125      	str	r5, [r4, #16]
 800ce12:	4620      	mov	r0, r4
 800ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce18:	0800e9d8 	.word	0x0800e9d8
 800ce1c:	0800ea64 	.word	0x0800ea64

0800ce20 <__s2b>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	460c      	mov	r4, r1
 800ce26:	4615      	mov	r5, r2
 800ce28:	461f      	mov	r7, r3
 800ce2a:	2209      	movs	r2, #9
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	4606      	mov	r6, r0
 800ce30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce34:	2100      	movs	r1, #0
 800ce36:	2201      	movs	r2, #1
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	db09      	blt.n	800ce50 <__s2b+0x30>
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7ff ff47 	bl	800ccd0 <_Balloc>
 800ce42:	b940      	cbnz	r0, 800ce56 <__s2b+0x36>
 800ce44:	4602      	mov	r2, r0
 800ce46:	4b19      	ldr	r3, [pc, #100]	; (800ceac <__s2b+0x8c>)
 800ce48:	4819      	ldr	r0, [pc, #100]	; (800ceb0 <__s2b+0x90>)
 800ce4a:	21ce      	movs	r1, #206	; 0xce
 800ce4c:	f000 fe8a 	bl	800db64 <__assert_func>
 800ce50:	0052      	lsls	r2, r2, #1
 800ce52:	3101      	adds	r1, #1
 800ce54:	e7f0      	b.n	800ce38 <__s2b+0x18>
 800ce56:	9b08      	ldr	r3, [sp, #32]
 800ce58:	6143      	str	r3, [r0, #20]
 800ce5a:	2d09      	cmp	r5, #9
 800ce5c:	f04f 0301 	mov.w	r3, #1
 800ce60:	6103      	str	r3, [r0, #16]
 800ce62:	dd16      	ble.n	800ce92 <__s2b+0x72>
 800ce64:	f104 0909 	add.w	r9, r4, #9
 800ce68:	46c8      	mov	r8, r9
 800ce6a:	442c      	add	r4, r5
 800ce6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce70:	4601      	mov	r1, r0
 800ce72:	3b30      	subs	r3, #48	; 0x30
 800ce74:	220a      	movs	r2, #10
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff ff8c 	bl	800cd94 <__multadd>
 800ce7c:	45a0      	cmp	r8, r4
 800ce7e:	d1f5      	bne.n	800ce6c <__s2b+0x4c>
 800ce80:	f1a5 0408 	sub.w	r4, r5, #8
 800ce84:	444c      	add	r4, r9
 800ce86:	1b2d      	subs	r5, r5, r4
 800ce88:	1963      	adds	r3, r4, r5
 800ce8a:	42bb      	cmp	r3, r7
 800ce8c:	db04      	blt.n	800ce98 <__s2b+0x78>
 800ce8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce92:	340a      	adds	r4, #10
 800ce94:	2509      	movs	r5, #9
 800ce96:	e7f6      	b.n	800ce86 <__s2b+0x66>
 800ce98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce9c:	4601      	mov	r1, r0
 800ce9e:	3b30      	subs	r3, #48	; 0x30
 800cea0:	220a      	movs	r2, #10
 800cea2:	4630      	mov	r0, r6
 800cea4:	f7ff ff76 	bl	800cd94 <__multadd>
 800cea8:	e7ee      	b.n	800ce88 <__s2b+0x68>
 800ceaa:	bf00      	nop
 800ceac:	0800e9d8 	.word	0x0800e9d8
 800ceb0:	0800ea64 	.word	0x0800ea64

0800ceb4 <__hi0bits>:
 800ceb4:	0c03      	lsrs	r3, r0, #16
 800ceb6:	041b      	lsls	r3, r3, #16
 800ceb8:	b9d3      	cbnz	r3, 800cef0 <__hi0bits+0x3c>
 800ceba:	0400      	lsls	r0, r0, #16
 800cebc:	2310      	movs	r3, #16
 800cebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cec2:	bf04      	itt	eq
 800cec4:	0200      	lsleq	r0, r0, #8
 800cec6:	3308      	addeq	r3, #8
 800cec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cecc:	bf04      	itt	eq
 800cece:	0100      	lsleq	r0, r0, #4
 800ced0:	3304      	addeq	r3, #4
 800ced2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ced6:	bf04      	itt	eq
 800ced8:	0080      	lsleq	r0, r0, #2
 800ceda:	3302      	addeq	r3, #2
 800cedc:	2800      	cmp	r0, #0
 800cede:	db05      	blt.n	800ceec <__hi0bits+0x38>
 800cee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cee4:	f103 0301 	add.w	r3, r3, #1
 800cee8:	bf08      	it	eq
 800ceea:	2320      	moveq	r3, #32
 800ceec:	4618      	mov	r0, r3
 800ceee:	4770      	bx	lr
 800cef0:	2300      	movs	r3, #0
 800cef2:	e7e4      	b.n	800cebe <__hi0bits+0xa>

0800cef4 <__lo0bits>:
 800cef4:	6803      	ldr	r3, [r0, #0]
 800cef6:	f013 0207 	ands.w	r2, r3, #7
 800cefa:	4601      	mov	r1, r0
 800cefc:	d00b      	beq.n	800cf16 <__lo0bits+0x22>
 800cefe:	07da      	lsls	r2, r3, #31
 800cf00:	d423      	bmi.n	800cf4a <__lo0bits+0x56>
 800cf02:	0798      	lsls	r0, r3, #30
 800cf04:	bf49      	itett	mi
 800cf06:	085b      	lsrmi	r3, r3, #1
 800cf08:	089b      	lsrpl	r3, r3, #2
 800cf0a:	2001      	movmi	r0, #1
 800cf0c:	600b      	strmi	r3, [r1, #0]
 800cf0e:	bf5c      	itt	pl
 800cf10:	600b      	strpl	r3, [r1, #0]
 800cf12:	2002      	movpl	r0, #2
 800cf14:	4770      	bx	lr
 800cf16:	b298      	uxth	r0, r3
 800cf18:	b9a8      	cbnz	r0, 800cf46 <__lo0bits+0x52>
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	2010      	movs	r0, #16
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	b90a      	cbnz	r2, 800cf26 <__lo0bits+0x32>
 800cf22:	3008      	adds	r0, #8
 800cf24:	0a1b      	lsrs	r3, r3, #8
 800cf26:	071a      	lsls	r2, r3, #28
 800cf28:	bf04      	itt	eq
 800cf2a:	091b      	lsreq	r3, r3, #4
 800cf2c:	3004      	addeq	r0, #4
 800cf2e:	079a      	lsls	r2, r3, #30
 800cf30:	bf04      	itt	eq
 800cf32:	089b      	lsreq	r3, r3, #2
 800cf34:	3002      	addeq	r0, #2
 800cf36:	07da      	lsls	r2, r3, #31
 800cf38:	d403      	bmi.n	800cf42 <__lo0bits+0x4e>
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	f100 0001 	add.w	r0, r0, #1
 800cf40:	d005      	beq.n	800cf4e <__lo0bits+0x5a>
 800cf42:	600b      	str	r3, [r1, #0]
 800cf44:	4770      	bx	lr
 800cf46:	4610      	mov	r0, r2
 800cf48:	e7e9      	b.n	800cf1e <__lo0bits+0x2a>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	4770      	bx	lr
 800cf4e:	2020      	movs	r0, #32
 800cf50:	4770      	bx	lr
	...

0800cf54 <__i2b>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	460c      	mov	r4, r1
 800cf58:	2101      	movs	r1, #1
 800cf5a:	f7ff feb9 	bl	800ccd0 <_Balloc>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	b928      	cbnz	r0, 800cf6e <__i2b+0x1a>
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <__i2b+0x24>)
 800cf64:	4805      	ldr	r0, [pc, #20]	; (800cf7c <__i2b+0x28>)
 800cf66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf6a:	f000 fdfb 	bl	800db64 <__assert_func>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	6144      	str	r4, [r0, #20]
 800cf72:	6103      	str	r3, [r0, #16]
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	0800e9d8 	.word	0x0800e9d8
 800cf7c:	0800ea64 	.word	0x0800ea64

0800cf80 <__multiply>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	4691      	mov	r9, r2
 800cf86:	690a      	ldr	r2, [r1, #16]
 800cf88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	bfb8      	it	lt
 800cf90:	460b      	movlt	r3, r1
 800cf92:	460c      	mov	r4, r1
 800cf94:	bfbc      	itt	lt
 800cf96:	464c      	movlt	r4, r9
 800cf98:	4699      	movlt	r9, r3
 800cf9a:	6927      	ldr	r7, [r4, #16]
 800cf9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cfa0:	68a3      	ldr	r3, [r4, #8]
 800cfa2:	6861      	ldr	r1, [r4, #4]
 800cfa4:	eb07 060a 	add.w	r6, r7, sl
 800cfa8:	42b3      	cmp	r3, r6
 800cfaa:	b085      	sub	sp, #20
 800cfac:	bfb8      	it	lt
 800cfae:	3101      	addlt	r1, #1
 800cfb0:	f7ff fe8e 	bl	800ccd0 <_Balloc>
 800cfb4:	b930      	cbnz	r0, 800cfc4 <__multiply+0x44>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	4b44      	ldr	r3, [pc, #272]	; (800d0cc <__multiply+0x14c>)
 800cfba:	4845      	ldr	r0, [pc, #276]	; (800d0d0 <__multiply+0x150>)
 800cfbc:	f240 115d 	movw	r1, #349	; 0x15d
 800cfc0:	f000 fdd0 	bl	800db64 <__assert_func>
 800cfc4:	f100 0514 	add.w	r5, r0, #20
 800cfc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfcc:	462b      	mov	r3, r5
 800cfce:	2200      	movs	r2, #0
 800cfd0:	4543      	cmp	r3, r8
 800cfd2:	d321      	bcc.n	800d018 <__multiply+0x98>
 800cfd4:	f104 0314 	add.w	r3, r4, #20
 800cfd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfdc:	f109 0314 	add.w	r3, r9, #20
 800cfe0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfe4:	9202      	str	r2, [sp, #8]
 800cfe6:	1b3a      	subs	r2, r7, r4
 800cfe8:	3a15      	subs	r2, #21
 800cfea:	f022 0203 	bic.w	r2, r2, #3
 800cfee:	3204      	adds	r2, #4
 800cff0:	f104 0115 	add.w	r1, r4, #21
 800cff4:	428f      	cmp	r7, r1
 800cff6:	bf38      	it	cc
 800cff8:	2204      	movcc	r2, #4
 800cffa:	9201      	str	r2, [sp, #4]
 800cffc:	9a02      	ldr	r2, [sp, #8]
 800cffe:	9303      	str	r3, [sp, #12]
 800d000:	429a      	cmp	r2, r3
 800d002:	d80c      	bhi.n	800d01e <__multiply+0x9e>
 800d004:	2e00      	cmp	r6, #0
 800d006:	dd03      	ble.n	800d010 <__multiply+0x90>
 800d008:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d05a      	beq.n	800d0c6 <__multiply+0x146>
 800d010:	6106      	str	r6, [r0, #16]
 800d012:	b005      	add	sp, #20
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	f843 2b04 	str.w	r2, [r3], #4
 800d01c:	e7d8      	b.n	800cfd0 <__multiply+0x50>
 800d01e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d022:	f1ba 0f00 	cmp.w	sl, #0
 800d026:	d024      	beq.n	800d072 <__multiply+0xf2>
 800d028:	f104 0e14 	add.w	lr, r4, #20
 800d02c:	46a9      	mov	r9, r5
 800d02e:	f04f 0c00 	mov.w	ip, #0
 800d032:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d036:	f8d9 1000 	ldr.w	r1, [r9]
 800d03a:	fa1f fb82 	uxth.w	fp, r2
 800d03e:	b289      	uxth	r1, r1
 800d040:	fb0a 110b 	mla	r1, sl, fp, r1
 800d044:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d048:	f8d9 2000 	ldr.w	r2, [r9]
 800d04c:	4461      	add	r1, ip
 800d04e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d052:	fb0a c20b 	mla	r2, sl, fp, ip
 800d056:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d05a:	b289      	uxth	r1, r1
 800d05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d060:	4577      	cmp	r7, lr
 800d062:	f849 1b04 	str.w	r1, [r9], #4
 800d066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d06a:	d8e2      	bhi.n	800d032 <__multiply+0xb2>
 800d06c:	9a01      	ldr	r2, [sp, #4]
 800d06e:	f845 c002 	str.w	ip, [r5, r2]
 800d072:	9a03      	ldr	r2, [sp, #12]
 800d074:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d078:	3304      	adds	r3, #4
 800d07a:	f1b9 0f00 	cmp.w	r9, #0
 800d07e:	d020      	beq.n	800d0c2 <__multiply+0x142>
 800d080:	6829      	ldr	r1, [r5, #0]
 800d082:	f104 0c14 	add.w	ip, r4, #20
 800d086:	46ae      	mov	lr, r5
 800d088:	f04f 0a00 	mov.w	sl, #0
 800d08c:	f8bc b000 	ldrh.w	fp, [ip]
 800d090:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d094:	fb09 220b 	mla	r2, r9, fp, r2
 800d098:	4492      	add	sl, r2
 800d09a:	b289      	uxth	r1, r1
 800d09c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d0a0:	f84e 1b04 	str.w	r1, [lr], #4
 800d0a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0a8:	f8be 1000 	ldrh.w	r1, [lr]
 800d0ac:	0c12      	lsrs	r2, r2, #16
 800d0ae:	fb09 1102 	mla	r1, r9, r2, r1
 800d0b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d0b6:	4567      	cmp	r7, ip
 800d0b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0bc:	d8e6      	bhi.n	800d08c <__multiply+0x10c>
 800d0be:	9a01      	ldr	r2, [sp, #4]
 800d0c0:	50a9      	str	r1, [r5, r2]
 800d0c2:	3504      	adds	r5, #4
 800d0c4:	e79a      	b.n	800cffc <__multiply+0x7c>
 800d0c6:	3e01      	subs	r6, #1
 800d0c8:	e79c      	b.n	800d004 <__multiply+0x84>
 800d0ca:	bf00      	nop
 800d0cc:	0800e9d8 	.word	0x0800e9d8
 800d0d0:	0800ea64 	.word	0x0800ea64

0800d0d4 <__pow5mult>:
 800d0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0d8:	4615      	mov	r5, r2
 800d0da:	f012 0203 	ands.w	r2, r2, #3
 800d0de:	4606      	mov	r6, r0
 800d0e0:	460f      	mov	r7, r1
 800d0e2:	d007      	beq.n	800d0f4 <__pow5mult+0x20>
 800d0e4:	4c25      	ldr	r4, [pc, #148]	; (800d17c <__pow5mult+0xa8>)
 800d0e6:	3a01      	subs	r2, #1
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ee:	f7ff fe51 	bl	800cd94 <__multadd>
 800d0f2:	4607      	mov	r7, r0
 800d0f4:	10ad      	asrs	r5, r5, #2
 800d0f6:	d03d      	beq.n	800d174 <__pow5mult+0xa0>
 800d0f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0fa:	b97c      	cbnz	r4, 800d11c <__pow5mult+0x48>
 800d0fc:	2010      	movs	r0, #16
 800d0fe:	f7ff fdcd 	bl	800cc9c <malloc>
 800d102:	4602      	mov	r2, r0
 800d104:	6270      	str	r0, [r6, #36]	; 0x24
 800d106:	b928      	cbnz	r0, 800d114 <__pow5mult+0x40>
 800d108:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <__pow5mult+0xac>)
 800d10a:	481e      	ldr	r0, [pc, #120]	; (800d184 <__pow5mult+0xb0>)
 800d10c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d110:	f000 fd28 	bl	800db64 <__assert_func>
 800d114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d118:	6004      	str	r4, [r0, #0]
 800d11a:	60c4      	str	r4, [r0, #12]
 800d11c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d124:	b94c      	cbnz	r4, 800d13a <__pow5mult+0x66>
 800d126:	f240 2171 	movw	r1, #625	; 0x271
 800d12a:	4630      	mov	r0, r6
 800d12c:	f7ff ff12 	bl	800cf54 <__i2b>
 800d130:	2300      	movs	r3, #0
 800d132:	f8c8 0008 	str.w	r0, [r8, #8]
 800d136:	4604      	mov	r4, r0
 800d138:	6003      	str	r3, [r0, #0]
 800d13a:	f04f 0900 	mov.w	r9, #0
 800d13e:	07eb      	lsls	r3, r5, #31
 800d140:	d50a      	bpl.n	800d158 <__pow5mult+0x84>
 800d142:	4639      	mov	r1, r7
 800d144:	4622      	mov	r2, r4
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff ff1a 	bl	800cf80 <__multiply>
 800d14c:	4639      	mov	r1, r7
 800d14e:	4680      	mov	r8, r0
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff fdfd 	bl	800cd50 <_Bfree>
 800d156:	4647      	mov	r7, r8
 800d158:	106d      	asrs	r5, r5, #1
 800d15a:	d00b      	beq.n	800d174 <__pow5mult+0xa0>
 800d15c:	6820      	ldr	r0, [r4, #0]
 800d15e:	b938      	cbnz	r0, 800d170 <__pow5mult+0x9c>
 800d160:	4622      	mov	r2, r4
 800d162:	4621      	mov	r1, r4
 800d164:	4630      	mov	r0, r6
 800d166:	f7ff ff0b 	bl	800cf80 <__multiply>
 800d16a:	6020      	str	r0, [r4, #0]
 800d16c:	f8c0 9000 	str.w	r9, [r0]
 800d170:	4604      	mov	r4, r0
 800d172:	e7e4      	b.n	800d13e <__pow5mult+0x6a>
 800d174:	4638      	mov	r0, r7
 800d176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d17a:	bf00      	nop
 800d17c:	0800ebb0 	.word	0x0800ebb0
 800d180:	0800e966 	.word	0x0800e966
 800d184:	0800ea64 	.word	0x0800ea64

0800d188 <__lshift>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	460c      	mov	r4, r1
 800d18e:	6849      	ldr	r1, [r1, #4]
 800d190:	6923      	ldr	r3, [r4, #16]
 800d192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	4607      	mov	r7, r0
 800d19a:	4691      	mov	r9, r2
 800d19c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1a0:	f108 0601 	add.w	r6, r8, #1
 800d1a4:	42b3      	cmp	r3, r6
 800d1a6:	db0b      	blt.n	800d1c0 <__lshift+0x38>
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff fd91 	bl	800ccd0 <_Balloc>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	b948      	cbnz	r0, 800d1c6 <__lshift+0x3e>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	4b2a      	ldr	r3, [pc, #168]	; (800d260 <__lshift+0xd8>)
 800d1b6:	482b      	ldr	r0, [pc, #172]	; (800d264 <__lshift+0xdc>)
 800d1b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d1bc:	f000 fcd2 	bl	800db64 <__assert_func>
 800d1c0:	3101      	adds	r1, #1
 800d1c2:	005b      	lsls	r3, r3, #1
 800d1c4:	e7ee      	b.n	800d1a4 <__lshift+0x1c>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f100 0114 	add.w	r1, r0, #20
 800d1cc:	f100 0210 	add.w	r2, r0, #16
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	4553      	cmp	r3, sl
 800d1d4:	db37      	blt.n	800d246 <__lshift+0xbe>
 800d1d6:	6920      	ldr	r0, [r4, #16]
 800d1d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1dc:	f104 0314 	add.w	r3, r4, #20
 800d1e0:	f019 091f 	ands.w	r9, r9, #31
 800d1e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d1ec:	d02f      	beq.n	800d24e <__lshift+0xc6>
 800d1ee:	f1c9 0e20 	rsb	lr, r9, #32
 800d1f2:	468a      	mov	sl, r1
 800d1f4:	f04f 0c00 	mov.w	ip, #0
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	fa02 f209 	lsl.w	r2, r2, r9
 800d1fe:	ea42 020c 	orr.w	r2, r2, ip
 800d202:	f84a 2b04 	str.w	r2, [sl], #4
 800d206:	f853 2b04 	ldr.w	r2, [r3], #4
 800d20a:	4298      	cmp	r0, r3
 800d20c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d210:	d8f2      	bhi.n	800d1f8 <__lshift+0x70>
 800d212:	1b03      	subs	r3, r0, r4
 800d214:	3b15      	subs	r3, #21
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	3304      	adds	r3, #4
 800d21c:	f104 0215 	add.w	r2, r4, #21
 800d220:	4290      	cmp	r0, r2
 800d222:	bf38      	it	cc
 800d224:	2304      	movcc	r3, #4
 800d226:	f841 c003 	str.w	ip, [r1, r3]
 800d22a:	f1bc 0f00 	cmp.w	ip, #0
 800d22e:	d001      	beq.n	800d234 <__lshift+0xac>
 800d230:	f108 0602 	add.w	r6, r8, #2
 800d234:	3e01      	subs	r6, #1
 800d236:	4638      	mov	r0, r7
 800d238:	612e      	str	r6, [r5, #16]
 800d23a:	4621      	mov	r1, r4
 800d23c:	f7ff fd88 	bl	800cd50 <_Bfree>
 800d240:	4628      	mov	r0, r5
 800d242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d246:	f842 0f04 	str.w	r0, [r2, #4]!
 800d24a:	3301      	adds	r3, #1
 800d24c:	e7c1      	b.n	800d1d2 <__lshift+0x4a>
 800d24e:	3904      	subs	r1, #4
 800d250:	f853 2b04 	ldr.w	r2, [r3], #4
 800d254:	f841 2f04 	str.w	r2, [r1, #4]!
 800d258:	4298      	cmp	r0, r3
 800d25a:	d8f9      	bhi.n	800d250 <__lshift+0xc8>
 800d25c:	e7ea      	b.n	800d234 <__lshift+0xac>
 800d25e:	bf00      	nop
 800d260:	0800e9d8 	.word	0x0800e9d8
 800d264:	0800ea64 	.word	0x0800ea64

0800d268 <__mcmp>:
 800d268:	b530      	push	{r4, r5, lr}
 800d26a:	6902      	ldr	r2, [r0, #16]
 800d26c:	690c      	ldr	r4, [r1, #16]
 800d26e:	1b12      	subs	r2, r2, r4
 800d270:	d10e      	bne.n	800d290 <__mcmp+0x28>
 800d272:	f100 0314 	add.w	r3, r0, #20
 800d276:	3114      	adds	r1, #20
 800d278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d27c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d288:	42a5      	cmp	r5, r4
 800d28a:	d003      	beq.n	800d294 <__mcmp+0x2c>
 800d28c:	d305      	bcc.n	800d29a <__mcmp+0x32>
 800d28e:	2201      	movs	r2, #1
 800d290:	4610      	mov	r0, r2
 800d292:	bd30      	pop	{r4, r5, pc}
 800d294:	4283      	cmp	r3, r0
 800d296:	d3f3      	bcc.n	800d280 <__mcmp+0x18>
 800d298:	e7fa      	b.n	800d290 <__mcmp+0x28>
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	e7f7      	b.n	800d290 <__mcmp+0x28>

0800d2a0 <__mdiff>:
 800d2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	4690      	mov	r8, r2
 800d2ae:	f7ff ffdb 	bl	800d268 <__mcmp>
 800d2b2:	1e05      	subs	r5, r0, #0
 800d2b4:	d110      	bne.n	800d2d8 <__mdiff+0x38>
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f7ff fd09 	bl	800ccd0 <_Balloc>
 800d2be:	b930      	cbnz	r0, 800d2ce <__mdiff+0x2e>
 800d2c0:	4b3a      	ldr	r3, [pc, #232]	; (800d3ac <__mdiff+0x10c>)
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	f240 2132 	movw	r1, #562	; 0x232
 800d2c8:	4839      	ldr	r0, [pc, #228]	; (800d3b0 <__mdiff+0x110>)
 800d2ca:	f000 fc4b 	bl	800db64 <__assert_func>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d8:	bfa4      	itt	ge
 800d2da:	4643      	movge	r3, r8
 800d2dc:	46a0      	movge	r8, r4
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2e4:	bfa6      	itte	ge
 800d2e6:	461c      	movge	r4, r3
 800d2e8:	2500      	movge	r5, #0
 800d2ea:	2501      	movlt	r5, #1
 800d2ec:	f7ff fcf0 	bl	800ccd0 <_Balloc>
 800d2f0:	b920      	cbnz	r0, 800d2fc <__mdiff+0x5c>
 800d2f2:	4b2e      	ldr	r3, [pc, #184]	; (800d3ac <__mdiff+0x10c>)
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2fa:	e7e5      	b.n	800d2c8 <__mdiff+0x28>
 800d2fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d300:	6926      	ldr	r6, [r4, #16]
 800d302:	60c5      	str	r5, [r0, #12]
 800d304:	f104 0914 	add.w	r9, r4, #20
 800d308:	f108 0514 	add.w	r5, r8, #20
 800d30c:	f100 0e14 	add.w	lr, r0, #20
 800d310:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d314:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d318:	f108 0210 	add.w	r2, r8, #16
 800d31c:	46f2      	mov	sl, lr
 800d31e:	2100      	movs	r1, #0
 800d320:	f859 3b04 	ldr.w	r3, [r9], #4
 800d324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d328:	fa1f f883 	uxth.w	r8, r3
 800d32c:	fa11 f18b 	uxtah	r1, r1, fp
 800d330:	0c1b      	lsrs	r3, r3, #16
 800d332:	eba1 0808 	sub.w	r8, r1, r8
 800d336:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d33a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d33e:	fa1f f888 	uxth.w	r8, r8
 800d342:	1419      	asrs	r1, r3, #16
 800d344:	454e      	cmp	r6, r9
 800d346:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d34a:	f84a 3b04 	str.w	r3, [sl], #4
 800d34e:	d8e7      	bhi.n	800d320 <__mdiff+0x80>
 800d350:	1b33      	subs	r3, r6, r4
 800d352:	3b15      	subs	r3, #21
 800d354:	f023 0303 	bic.w	r3, r3, #3
 800d358:	3304      	adds	r3, #4
 800d35a:	3415      	adds	r4, #21
 800d35c:	42a6      	cmp	r6, r4
 800d35e:	bf38      	it	cc
 800d360:	2304      	movcc	r3, #4
 800d362:	441d      	add	r5, r3
 800d364:	4473      	add	r3, lr
 800d366:	469e      	mov	lr, r3
 800d368:	462e      	mov	r6, r5
 800d36a:	4566      	cmp	r6, ip
 800d36c:	d30e      	bcc.n	800d38c <__mdiff+0xec>
 800d36e:	f10c 0203 	add.w	r2, ip, #3
 800d372:	1b52      	subs	r2, r2, r5
 800d374:	f022 0203 	bic.w	r2, r2, #3
 800d378:	3d03      	subs	r5, #3
 800d37a:	45ac      	cmp	ip, r5
 800d37c:	bf38      	it	cc
 800d37e:	2200      	movcc	r2, #0
 800d380:	441a      	add	r2, r3
 800d382:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d386:	b17b      	cbz	r3, 800d3a8 <__mdiff+0x108>
 800d388:	6107      	str	r7, [r0, #16]
 800d38a:	e7a3      	b.n	800d2d4 <__mdiff+0x34>
 800d38c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d390:	fa11 f288 	uxtah	r2, r1, r8
 800d394:	1414      	asrs	r4, r2, #16
 800d396:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d39a:	b292      	uxth	r2, r2
 800d39c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d3a0:	f84e 2b04 	str.w	r2, [lr], #4
 800d3a4:	1421      	asrs	r1, r4, #16
 800d3a6:	e7e0      	b.n	800d36a <__mdiff+0xca>
 800d3a8:	3f01      	subs	r7, #1
 800d3aa:	e7ea      	b.n	800d382 <__mdiff+0xe2>
 800d3ac:	0800e9d8 	.word	0x0800e9d8
 800d3b0:	0800ea64 	.word	0x0800ea64

0800d3b4 <__ulp>:
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	ed8d 0b00 	vstr	d0, [sp]
 800d3ba:	9b01      	ldr	r3, [sp, #4]
 800d3bc:	4912      	ldr	r1, [pc, #72]	; (800d408 <__ulp+0x54>)
 800d3be:	4019      	ands	r1, r3
 800d3c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	dd05      	ble.n	800d3d4 <__ulp+0x20>
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	ec43 2b10 	vmov	d0, r2, r3
 800d3d0:	b002      	add	sp, #8
 800d3d2:	4770      	bx	lr
 800d3d4:	4249      	negs	r1, r1
 800d3d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d3da:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d3de:	f04f 0200 	mov.w	r2, #0
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	da04      	bge.n	800d3f2 <__ulp+0x3e>
 800d3e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d3ec:	fa41 f300 	asr.w	r3, r1, r0
 800d3f0:	e7ec      	b.n	800d3cc <__ulp+0x18>
 800d3f2:	f1a0 0114 	sub.w	r1, r0, #20
 800d3f6:	291e      	cmp	r1, #30
 800d3f8:	bfda      	itte	le
 800d3fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d3fe:	fa20 f101 	lsrle.w	r1, r0, r1
 800d402:	2101      	movgt	r1, #1
 800d404:	460a      	mov	r2, r1
 800d406:	e7e1      	b.n	800d3cc <__ulp+0x18>
 800d408:	7ff00000 	.word	0x7ff00000

0800d40c <__b2d>:
 800d40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40e:	6905      	ldr	r5, [r0, #16]
 800d410:	f100 0714 	add.w	r7, r0, #20
 800d414:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d418:	1f2e      	subs	r6, r5, #4
 800d41a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d41e:	4620      	mov	r0, r4
 800d420:	f7ff fd48 	bl	800ceb4 <__hi0bits>
 800d424:	f1c0 0320 	rsb	r3, r0, #32
 800d428:	280a      	cmp	r0, #10
 800d42a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d4a8 <__b2d+0x9c>
 800d42e:	600b      	str	r3, [r1, #0]
 800d430:	dc14      	bgt.n	800d45c <__b2d+0x50>
 800d432:	f1c0 0e0b 	rsb	lr, r0, #11
 800d436:	fa24 f10e 	lsr.w	r1, r4, lr
 800d43a:	42b7      	cmp	r7, r6
 800d43c:	ea41 030c 	orr.w	r3, r1, ip
 800d440:	bf34      	ite	cc
 800d442:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d446:	2100      	movcs	r1, #0
 800d448:	3015      	adds	r0, #21
 800d44a:	fa04 f000 	lsl.w	r0, r4, r0
 800d44e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d452:	ea40 0201 	orr.w	r2, r0, r1
 800d456:	ec43 2b10 	vmov	d0, r2, r3
 800d45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45c:	42b7      	cmp	r7, r6
 800d45e:	bf3a      	itte	cc
 800d460:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d464:	f1a5 0608 	subcc.w	r6, r5, #8
 800d468:	2100      	movcs	r1, #0
 800d46a:	380b      	subs	r0, #11
 800d46c:	d017      	beq.n	800d49e <__b2d+0x92>
 800d46e:	f1c0 0c20 	rsb	ip, r0, #32
 800d472:	fa04 f500 	lsl.w	r5, r4, r0
 800d476:	42be      	cmp	r6, r7
 800d478:	fa21 f40c 	lsr.w	r4, r1, ip
 800d47c:	ea45 0504 	orr.w	r5, r5, r4
 800d480:	bf8c      	ite	hi
 800d482:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d486:	2400      	movls	r4, #0
 800d488:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d48c:	fa01 f000 	lsl.w	r0, r1, r0
 800d490:	fa24 f40c 	lsr.w	r4, r4, ip
 800d494:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d498:	ea40 0204 	orr.w	r2, r0, r4
 800d49c:	e7db      	b.n	800d456 <__b2d+0x4a>
 800d49e:	ea44 030c 	orr.w	r3, r4, ip
 800d4a2:	460a      	mov	r2, r1
 800d4a4:	e7d7      	b.n	800d456 <__b2d+0x4a>
 800d4a6:	bf00      	nop
 800d4a8:	3ff00000 	.word	0x3ff00000

0800d4ac <__d2b>:
 800d4ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4689      	mov	r9, r1
 800d4b2:	2101      	movs	r1, #1
 800d4b4:	ec57 6b10 	vmov	r6, r7, d0
 800d4b8:	4690      	mov	r8, r2
 800d4ba:	f7ff fc09 	bl	800ccd0 <_Balloc>
 800d4be:	4604      	mov	r4, r0
 800d4c0:	b930      	cbnz	r0, 800d4d0 <__d2b+0x24>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	4b25      	ldr	r3, [pc, #148]	; (800d55c <__d2b+0xb0>)
 800d4c6:	4826      	ldr	r0, [pc, #152]	; (800d560 <__d2b+0xb4>)
 800d4c8:	f240 310a 	movw	r1, #778	; 0x30a
 800d4cc:	f000 fb4a 	bl	800db64 <__assert_func>
 800d4d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d4d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4d8:	bb35      	cbnz	r5, 800d528 <__d2b+0x7c>
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	d028      	beq.n	800d532 <__d2b+0x86>
 800d4e0:	4668      	mov	r0, sp
 800d4e2:	9600      	str	r6, [sp, #0]
 800d4e4:	f7ff fd06 	bl	800cef4 <__lo0bits>
 800d4e8:	9900      	ldr	r1, [sp, #0]
 800d4ea:	b300      	cbz	r0, 800d52e <__d2b+0x82>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	40c2      	lsrs	r2, r0
 800d4fa:	6163      	str	r3, [r4, #20]
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9b01      	ldr	r3, [sp, #4]
 800d500:	61a3      	str	r3, [r4, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf14      	ite	ne
 800d506:	2202      	movne	r2, #2
 800d508:	2201      	moveq	r2, #1
 800d50a:	6122      	str	r2, [r4, #16]
 800d50c:	b1d5      	cbz	r5, 800d544 <__d2b+0x98>
 800d50e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d512:	4405      	add	r5, r0
 800d514:	f8c9 5000 	str.w	r5, [r9]
 800d518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d51c:	f8c8 0000 	str.w	r0, [r8]
 800d520:	4620      	mov	r0, r4
 800d522:	b003      	add	sp, #12
 800d524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d52c:	e7d5      	b.n	800d4da <__d2b+0x2e>
 800d52e:	6161      	str	r1, [r4, #20]
 800d530:	e7e5      	b.n	800d4fe <__d2b+0x52>
 800d532:	a801      	add	r0, sp, #4
 800d534:	f7ff fcde 	bl	800cef4 <__lo0bits>
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	6163      	str	r3, [r4, #20]
 800d53c:	2201      	movs	r2, #1
 800d53e:	6122      	str	r2, [r4, #16]
 800d540:	3020      	adds	r0, #32
 800d542:	e7e3      	b.n	800d50c <__d2b+0x60>
 800d544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d54c:	f8c9 0000 	str.w	r0, [r9]
 800d550:	6918      	ldr	r0, [r3, #16]
 800d552:	f7ff fcaf 	bl	800ceb4 <__hi0bits>
 800d556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d55a:	e7df      	b.n	800d51c <__d2b+0x70>
 800d55c:	0800e9d8 	.word	0x0800e9d8
 800d560:	0800ea64 	.word	0x0800ea64

0800d564 <__ratio>:
 800d564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	4688      	mov	r8, r1
 800d56a:	4669      	mov	r1, sp
 800d56c:	4681      	mov	r9, r0
 800d56e:	f7ff ff4d 	bl	800d40c <__b2d>
 800d572:	a901      	add	r1, sp, #4
 800d574:	4640      	mov	r0, r8
 800d576:	ec55 4b10 	vmov	r4, r5, d0
 800d57a:	ee10 aa10 	vmov	sl, s0
 800d57e:	f7ff ff45 	bl	800d40c <__b2d>
 800d582:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d586:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d58a:	1a59      	subs	r1, r3, r1
 800d58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d596:	ec57 6b10 	vmov	r6, r7, d0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfd6      	itet	le
 800d59e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5a2:	462a      	movgt	r2, r5
 800d5a4:	463a      	movle	r2, r7
 800d5a6:	46ab      	mov	fp, r5
 800d5a8:	bfd6      	itet	le
 800d5aa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d5ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d5b2:	ee00 3a90 	vmovle	s1, r3
 800d5b6:	ec4b ab17 	vmov	d7, sl, fp
 800d5ba:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d5be:	b003      	add	sp, #12
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5c4 <__copybits>:
 800d5c4:	3901      	subs	r1, #1
 800d5c6:	b570      	push	{r4, r5, r6, lr}
 800d5c8:	1149      	asrs	r1, r1, #5
 800d5ca:	6914      	ldr	r4, [r2, #16]
 800d5cc:	3101      	adds	r1, #1
 800d5ce:	f102 0314 	add.w	r3, r2, #20
 800d5d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5da:	1f05      	subs	r5, r0, #4
 800d5dc:	42a3      	cmp	r3, r4
 800d5de:	d30c      	bcc.n	800d5fa <__copybits+0x36>
 800d5e0:	1aa3      	subs	r3, r4, r2
 800d5e2:	3b11      	subs	r3, #17
 800d5e4:	f023 0303 	bic.w	r3, r3, #3
 800d5e8:	3211      	adds	r2, #17
 800d5ea:	42a2      	cmp	r2, r4
 800d5ec:	bf88      	it	hi
 800d5ee:	2300      	movhi	r3, #0
 800d5f0:	4418      	add	r0, r3
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4288      	cmp	r0, r1
 800d5f6:	d305      	bcc.n	800d604 <__copybits+0x40>
 800d5f8:	bd70      	pop	{r4, r5, r6, pc}
 800d5fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800d602:	e7eb      	b.n	800d5dc <__copybits+0x18>
 800d604:	f840 3b04 	str.w	r3, [r0], #4
 800d608:	e7f4      	b.n	800d5f4 <__copybits+0x30>

0800d60a <__any_on>:
 800d60a:	f100 0214 	add.w	r2, r0, #20
 800d60e:	6900      	ldr	r0, [r0, #16]
 800d610:	114b      	asrs	r3, r1, #5
 800d612:	4298      	cmp	r0, r3
 800d614:	b510      	push	{r4, lr}
 800d616:	db11      	blt.n	800d63c <__any_on+0x32>
 800d618:	dd0a      	ble.n	800d630 <__any_on+0x26>
 800d61a:	f011 011f 	ands.w	r1, r1, #31
 800d61e:	d007      	beq.n	800d630 <__any_on+0x26>
 800d620:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d624:	fa24 f001 	lsr.w	r0, r4, r1
 800d628:	fa00 f101 	lsl.w	r1, r0, r1
 800d62c:	428c      	cmp	r4, r1
 800d62e:	d10b      	bne.n	800d648 <__any_on+0x3e>
 800d630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d634:	4293      	cmp	r3, r2
 800d636:	d803      	bhi.n	800d640 <__any_on+0x36>
 800d638:	2000      	movs	r0, #0
 800d63a:	bd10      	pop	{r4, pc}
 800d63c:	4603      	mov	r3, r0
 800d63e:	e7f7      	b.n	800d630 <__any_on+0x26>
 800d640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d644:	2900      	cmp	r1, #0
 800d646:	d0f5      	beq.n	800d634 <__any_on+0x2a>
 800d648:	2001      	movs	r0, #1
 800d64a:	e7f6      	b.n	800d63a <__any_on+0x30>

0800d64c <_calloc_r>:
 800d64c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d64e:	fba1 2402 	umull	r2, r4, r1, r2
 800d652:	b94c      	cbnz	r4, 800d668 <_calloc_r+0x1c>
 800d654:	4611      	mov	r1, r2
 800d656:	9201      	str	r2, [sp, #4]
 800d658:	f000 f87a 	bl	800d750 <_malloc_r>
 800d65c:	9a01      	ldr	r2, [sp, #4]
 800d65e:	4605      	mov	r5, r0
 800d660:	b930      	cbnz	r0, 800d670 <_calloc_r+0x24>
 800d662:	4628      	mov	r0, r5
 800d664:	b003      	add	sp, #12
 800d666:	bd30      	pop	{r4, r5, pc}
 800d668:	220c      	movs	r2, #12
 800d66a:	6002      	str	r2, [r0, #0]
 800d66c:	2500      	movs	r5, #0
 800d66e:	e7f8      	b.n	800d662 <_calloc_r+0x16>
 800d670:	4621      	mov	r1, r4
 800d672:	f7fc fcd3 	bl	800a01c <memset>
 800d676:	e7f4      	b.n	800d662 <_calloc_r+0x16>

0800d678 <_free_r>:
 800d678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d67a:	2900      	cmp	r1, #0
 800d67c:	d044      	beq.n	800d708 <_free_r+0x90>
 800d67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d682:	9001      	str	r0, [sp, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f1a1 0404 	sub.w	r4, r1, #4
 800d68a:	bfb8      	it	lt
 800d68c:	18e4      	addlt	r4, r4, r3
 800d68e:	f000 fab3 	bl	800dbf8 <__malloc_lock>
 800d692:	4a1e      	ldr	r2, [pc, #120]	; (800d70c <_free_r+0x94>)
 800d694:	9801      	ldr	r0, [sp, #4]
 800d696:	6813      	ldr	r3, [r2, #0]
 800d698:	b933      	cbnz	r3, 800d6a8 <_free_r+0x30>
 800d69a:	6063      	str	r3, [r4, #4]
 800d69c:	6014      	str	r4, [r2, #0]
 800d69e:	b003      	add	sp, #12
 800d6a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6a4:	f000 baae 	b.w	800dc04 <__malloc_unlock>
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d908      	bls.n	800d6be <_free_r+0x46>
 800d6ac:	6825      	ldr	r5, [r4, #0]
 800d6ae:	1961      	adds	r1, r4, r5
 800d6b0:	428b      	cmp	r3, r1
 800d6b2:	bf01      	itttt	eq
 800d6b4:	6819      	ldreq	r1, [r3, #0]
 800d6b6:	685b      	ldreq	r3, [r3, #4]
 800d6b8:	1949      	addeq	r1, r1, r5
 800d6ba:	6021      	streq	r1, [r4, #0]
 800d6bc:	e7ed      	b.n	800d69a <_free_r+0x22>
 800d6be:	461a      	mov	r2, r3
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	b10b      	cbz	r3, 800d6c8 <_free_r+0x50>
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d9fa      	bls.n	800d6be <_free_r+0x46>
 800d6c8:	6811      	ldr	r1, [r2, #0]
 800d6ca:	1855      	adds	r5, r2, r1
 800d6cc:	42a5      	cmp	r5, r4
 800d6ce:	d10b      	bne.n	800d6e8 <_free_r+0x70>
 800d6d0:	6824      	ldr	r4, [r4, #0]
 800d6d2:	4421      	add	r1, r4
 800d6d4:	1854      	adds	r4, r2, r1
 800d6d6:	42a3      	cmp	r3, r4
 800d6d8:	6011      	str	r1, [r2, #0]
 800d6da:	d1e0      	bne.n	800d69e <_free_r+0x26>
 800d6dc:	681c      	ldr	r4, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	6053      	str	r3, [r2, #4]
 800d6e2:	4421      	add	r1, r4
 800d6e4:	6011      	str	r1, [r2, #0]
 800d6e6:	e7da      	b.n	800d69e <_free_r+0x26>
 800d6e8:	d902      	bls.n	800d6f0 <_free_r+0x78>
 800d6ea:	230c      	movs	r3, #12
 800d6ec:	6003      	str	r3, [r0, #0]
 800d6ee:	e7d6      	b.n	800d69e <_free_r+0x26>
 800d6f0:	6825      	ldr	r5, [r4, #0]
 800d6f2:	1961      	adds	r1, r4, r5
 800d6f4:	428b      	cmp	r3, r1
 800d6f6:	bf04      	itt	eq
 800d6f8:	6819      	ldreq	r1, [r3, #0]
 800d6fa:	685b      	ldreq	r3, [r3, #4]
 800d6fc:	6063      	str	r3, [r4, #4]
 800d6fe:	bf04      	itt	eq
 800d700:	1949      	addeq	r1, r1, r5
 800d702:	6021      	streq	r1, [r4, #0]
 800d704:	6054      	str	r4, [r2, #4]
 800d706:	e7ca      	b.n	800d69e <_free_r+0x26>
 800d708:	b003      	add	sp, #12
 800d70a:	bd30      	pop	{r4, r5, pc}
 800d70c:	24000620 	.word	0x24000620

0800d710 <sbrk_aligned>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	4e0e      	ldr	r6, [pc, #56]	; (800d74c <sbrk_aligned+0x3c>)
 800d714:	460c      	mov	r4, r1
 800d716:	6831      	ldr	r1, [r6, #0]
 800d718:	4605      	mov	r5, r0
 800d71a:	b911      	cbnz	r1, 800d722 <sbrk_aligned+0x12>
 800d71c:	f000 f9f0 	bl	800db00 <_sbrk_r>
 800d720:	6030      	str	r0, [r6, #0]
 800d722:	4621      	mov	r1, r4
 800d724:	4628      	mov	r0, r5
 800d726:	f000 f9eb 	bl	800db00 <_sbrk_r>
 800d72a:	1c43      	adds	r3, r0, #1
 800d72c:	d00a      	beq.n	800d744 <sbrk_aligned+0x34>
 800d72e:	1cc4      	adds	r4, r0, #3
 800d730:	f024 0403 	bic.w	r4, r4, #3
 800d734:	42a0      	cmp	r0, r4
 800d736:	d007      	beq.n	800d748 <sbrk_aligned+0x38>
 800d738:	1a21      	subs	r1, r4, r0
 800d73a:	4628      	mov	r0, r5
 800d73c:	f000 f9e0 	bl	800db00 <_sbrk_r>
 800d740:	3001      	adds	r0, #1
 800d742:	d101      	bne.n	800d748 <sbrk_aligned+0x38>
 800d744:	f04f 34ff 	mov.w	r4, #4294967295
 800d748:	4620      	mov	r0, r4
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	24000624 	.word	0x24000624

0800d750 <_malloc_r>:
 800d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d754:	1ccd      	adds	r5, r1, #3
 800d756:	f025 0503 	bic.w	r5, r5, #3
 800d75a:	3508      	adds	r5, #8
 800d75c:	2d0c      	cmp	r5, #12
 800d75e:	bf38      	it	cc
 800d760:	250c      	movcc	r5, #12
 800d762:	2d00      	cmp	r5, #0
 800d764:	4607      	mov	r7, r0
 800d766:	db01      	blt.n	800d76c <_malloc_r+0x1c>
 800d768:	42a9      	cmp	r1, r5
 800d76a:	d905      	bls.n	800d778 <_malloc_r+0x28>
 800d76c:	230c      	movs	r3, #12
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	2600      	movs	r6, #0
 800d772:	4630      	mov	r0, r6
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d778:	4e2e      	ldr	r6, [pc, #184]	; (800d834 <_malloc_r+0xe4>)
 800d77a:	f000 fa3d 	bl	800dbf8 <__malloc_lock>
 800d77e:	6833      	ldr	r3, [r6, #0]
 800d780:	461c      	mov	r4, r3
 800d782:	bb34      	cbnz	r4, 800d7d2 <_malloc_r+0x82>
 800d784:	4629      	mov	r1, r5
 800d786:	4638      	mov	r0, r7
 800d788:	f7ff ffc2 	bl	800d710 <sbrk_aligned>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	4604      	mov	r4, r0
 800d790:	d14d      	bne.n	800d82e <_malloc_r+0xde>
 800d792:	6834      	ldr	r4, [r6, #0]
 800d794:	4626      	mov	r6, r4
 800d796:	2e00      	cmp	r6, #0
 800d798:	d140      	bne.n	800d81c <_malloc_r+0xcc>
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	4631      	mov	r1, r6
 800d79e:	4638      	mov	r0, r7
 800d7a0:	eb04 0803 	add.w	r8, r4, r3
 800d7a4:	f000 f9ac 	bl	800db00 <_sbrk_r>
 800d7a8:	4580      	cmp	r8, r0
 800d7aa:	d13a      	bne.n	800d822 <_malloc_r+0xd2>
 800d7ac:	6821      	ldr	r1, [r4, #0]
 800d7ae:	3503      	adds	r5, #3
 800d7b0:	1a6d      	subs	r5, r5, r1
 800d7b2:	f025 0503 	bic.w	r5, r5, #3
 800d7b6:	3508      	adds	r5, #8
 800d7b8:	2d0c      	cmp	r5, #12
 800d7ba:	bf38      	it	cc
 800d7bc:	250c      	movcc	r5, #12
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ffa5 	bl	800d710 <sbrk_aligned>
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d02b      	beq.n	800d822 <_malloc_r+0xd2>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	442b      	add	r3, r5
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	e00e      	b.n	800d7f0 <_malloc_r+0xa0>
 800d7d2:	6822      	ldr	r2, [r4, #0]
 800d7d4:	1b52      	subs	r2, r2, r5
 800d7d6:	d41e      	bmi.n	800d816 <_malloc_r+0xc6>
 800d7d8:	2a0b      	cmp	r2, #11
 800d7da:	d916      	bls.n	800d80a <_malloc_r+0xba>
 800d7dc:	1961      	adds	r1, r4, r5
 800d7de:	42a3      	cmp	r3, r4
 800d7e0:	6025      	str	r5, [r4, #0]
 800d7e2:	bf18      	it	ne
 800d7e4:	6059      	strne	r1, [r3, #4]
 800d7e6:	6863      	ldr	r3, [r4, #4]
 800d7e8:	bf08      	it	eq
 800d7ea:	6031      	streq	r1, [r6, #0]
 800d7ec:	5162      	str	r2, [r4, r5]
 800d7ee:	604b      	str	r3, [r1, #4]
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f104 060b 	add.w	r6, r4, #11
 800d7f6:	f000 fa05 	bl	800dc04 <__malloc_unlock>
 800d7fa:	f026 0607 	bic.w	r6, r6, #7
 800d7fe:	1d23      	adds	r3, r4, #4
 800d800:	1af2      	subs	r2, r6, r3
 800d802:	d0b6      	beq.n	800d772 <_malloc_r+0x22>
 800d804:	1b9b      	subs	r3, r3, r6
 800d806:	50a3      	str	r3, [r4, r2]
 800d808:	e7b3      	b.n	800d772 <_malloc_r+0x22>
 800d80a:	6862      	ldr	r2, [r4, #4]
 800d80c:	42a3      	cmp	r3, r4
 800d80e:	bf0c      	ite	eq
 800d810:	6032      	streq	r2, [r6, #0]
 800d812:	605a      	strne	r2, [r3, #4]
 800d814:	e7ec      	b.n	800d7f0 <_malloc_r+0xa0>
 800d816:	4623      	mov	r3, r4
 800d818:	6864      	ldr	r4, [r4, #4]
 800d81a:	e7b2      	b.n	800d782 <_malloc_r+0x32>
 800d81c:	4634      	mov	r4, r6
 800d81e:	6876      	ldr	r6, [r6, #4]
 800d820:	e7b9      	b.n	800d796 <_malloc_r+0x46>
 800d822:	230c      	movs	r3, #12
 800d824:	603b      	str	r3, [r7, #0]
 800d826:	4638      	mov	r0, r7
 800d828:	f000 f9ec 	bl	800dc04 <__malloc_unlock>
 800d82c:	e7a1      	b.n	800d772 <_malloc_r+0x22>
 800d82e:	6025      	str	r5, [r4, #0]
 800d830:	e7de      	b.n	800d7f0 <_malloc_r+0xa0>
 800d832:	bf00      	nop
 800d834:	24000620 	.word	0x24000620

0800d838 <__ssputs_r>:
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	688e      	ldr	r6, [r1, #8]
 800d83e:	429e      	cmp	r6, r3
 800d840:	4682      	mov	sl, r0
 800d842:	460c      	mov	r4, r1
 800d844:	4690      	mov	r8, r2
 800d846:	461f      	mov	r7, r3
 800d848:	d838      	bhi.n	800d8bc <__ssputs_r+0x84>
 800d84a:	898a      	ldrh	r2, [r1, #12]
 800d84c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d850:	d032      	beq.n	800d8b8 <__ssputs_r+0x80>
 800d852:	6825      	ldr	r5, [r4, #0]
 800d854:	6909      	ldr	r1, [r1, #16]
 800d856:	eba5 0901 	sub.w	r9, r5, r1
 800d85a:	6965      	ldr	r5, [r4, #20]
 800d85c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d864:	3301      	adds	r3, #1
 800d866:	444b      	add	r3, r9
 800d868:	106d      	asrs	r5, r5, #1
 800d86a:	429d      	cmp	r5, r3
 800d86c:	bf38      	it	cc
 800d86e:	461d      	movcc	r5, r3
 800d870:	0553      	lsls	r3, r2, #21
 800d872:	d531      	bpl.n	800d8d8 <__ssputs_r+0xa0>
 800d874:	4629      	mov	r1, r5
 800d876:	f7ff ff6b 	bl	800d750 <_malloc_r>
 800d87a:	4606      	mov	r6, r0
 800d87c:	b950      	cbnz	r0, 800d894 <__ssputs_r+0x5c>
 800d87e:	230c      	movs	r3, #12
 800d880:	f8ca 3000 	str.w	r3, [sl]
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295
 800d890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d894:	6921      	ldr	r1, [r4, #16]
 800d896:	464a      	mov	r2, r9
 800d898:	f7fc fbb2 	bl	800a000 <memcpy>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	6126      	str	r6, [r4, #16]
 800d8aa:	6165      	str	r5, [r4, #20]
 800d8ac:	444e      	add	r6, r9
 800d8ae:	eba5 0509 	sub.w	r5, r5, r9
 800d8b2:	6026      	str	r6, [r4, #0]
 800d8b4:	60a5      	str	r5, [r4, #8]
 800d8b6:	463e      	mov	r6, r7
 800d8b8:	42be      	cmp	r6, r7
 800d8ba:	d900      	bls.n	800d8be <__ssputs_r+0x86>
 800d8bc:	463e      	mov	r6, r7
 800d8be:	6820      	ldr	r0, [r4, #0]
 800d8c0:	4632      	mov	r2, r6
 800d8c2:	4641      	mov	r1, r8
 800d8c4:	f000 f97e 	bl	800dbc4 <memmove>
 800d8c8:	68a3      	ldr	r3, [r4, #8]
 800d8ca:	1b9b      	subs	r3, r3, r6
 800d8cc:	60a3      	str	r3, [r4, #8]
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	4433      	add	r3, r6
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e7db      	b.n	800d890 <__ssputs_r+0x58>
 800d8d8:	462a      	mov	r2, r5
 800d8da:	f000 f999 	bl	800dc10 <_realloc_r>
 800d8de:	4606      	mov	r6, r0
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d1e1      	bne.n	800d8a8 <__ssputs_r+0x70>
 800d8e4:	6921      	ldr	r1, [r4, #16]
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	f7ff fec6 	bl	800d678 <_free_r>
 800d8ec:	e7c7      	b.n	800d87e <__ssputs_r+0x46>
	...

0800d8f0 <_svfiprintf_r>:
 800d8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	4698      	mov	r8, r3
 800d8f6:	898b      	ldrh	r3, [r1, #12]
 800d8f8:	061b      	lsls	r3, r3, #24
 800d8fa:	b09d      	sub	sp, #116	; 0x74
 800d8fc:	4607      	mov	r7, r0
 800d8fe:	460d      	mov	r5, r1
 800d900:	4614      	mov	r4, r2
 800d902:	d50e      	bpl.n	800d922 <_svfiprintf_r+0x32>
 800d904:	690b      	ldr	r3, [r1, #16]
 800d906:	b963      	cbnz	r3, 800d922 <_svfiprintf_r+0x32>
 800d908:	2140      	movs	r1, #64	; 0x40
 800d90a:	f7ff ff21 	bl	800d750 <_malloc_r>
 800d90e:	6028      	str	r0, [r5, #0]
 800d910:	6128      	str	r0, [r5, #16]
 800d912:	b920      	cbnz	r0, 800d91e <_svfiprintf_r+0x2e>
 800d914:	230c      	movs	r3, #12
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e0d1      	b.n	800dac2 <_svfiprintf_r+0x1d2>
 800d91e:	2340      	movs	r3, #64	; 0x40
 800d920:	616b      	str	r3, [r5, #20]
 800d922:	2300      	movs	r3, #0
 800d924:	9309      	str	r3, [sp, #36]	; 0x24
 800d926:	2320      	movs	r3, #32
 800d928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d930:	2330      	movs	r3, #48	; 0x30
 800d932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dadc <_svfiprintf_r+0x1ec>
 800d936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d93a:	f04f 0901 	mov.w	r9, #1
 800d93e:	4623      	mov	r3, r4
 800d940:	469a      	mov	sl, r3
 800d942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d946:	b10a      	cbz	r2, 800d94c <_svfiprintf_r+0x5c>
 800d948:	2a25      	cmp	r2, #37	; 0x25
 800d94a:	d1f9      	bne.n	800d940 <_svfiprintf_r+0x50>
 800d94c:	ebba 0b04 	subs.w	fp, sl, r4
 800d950:	d00b      	beq.n	800d96a <_svfiprintf_r+0x7a>
 800d952:	465b      	mov	r3, fp
 800d954:	4622      	mov	r2, r4
 800d956:	4629      	mov	r1, r5
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff ff6d 	bl	800d838 <__ssputs_r>
 800d95e:	3001      	adds	r0, #1
 800d960:	f000 80aa 	beq.w	800dab8 <_svfiprintf_r+0x1c8>
 800d964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d966:	445a      	add	r2, fp
 800d968:	9209      	str	r2, [sp, #36]	; 0x24
 800d96a:	f89a 3000 	ldrb.w	r3, [sl]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 80a2 	beq.w	800dab8 <_svfiprintf_r+0x1c8>
 800d974:	2300      	movs	r3, #0
 800d976:	f04f 32ff 	mov.w	r2, #4294967295
 800d97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d97e:	f10a 0a01 	add.w	sl, sl, #1
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	9307      	str	r3, [sp, #28]
 800d986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d98a:	931a      	str	r3, [sp, #104]	; 0x68
 800d98c:	4654      	mov	r4, sl
 800d98e:	2205      	movs	r2, #5
 800d990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d994:	4851      	ldr	r0, [pc, #324]	; (800dadc <_svfiprintf_r+0x1ec>)
 800d996:	f7f2 fcab 	bl	80002f0 <memchr>
 800d99a:	9a04      	ldr	r2, [sp, #16]
 800d99c:	b9d8      	cbnz	r0, 800d9d6 <_svfiprintf_r+0xe6>
 800d99e:	06d0      	lsls	r0, r2, #27
 800d9a0:	bf44      	itt	mi
 800d9a2:	2320      	movmi	r3, #32
 800d9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9a8:	0711      	lsls	r1, r2, #28
 800d9aa:	bf44      	itt	mi
 800d9ac:	232b      	movmi	r3, #43	; 0x2b
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b8:	d015      	beq.n	800d9e6 <_svfiprintf_r+0xf6>
 800d9ba:	9a07      	ldr	r2, [sp, #28]
 800d9bc:	4654      	mov	r4, sl
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f04f 0c0a 	mov.w	ip, #10
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9ca:	3b30      	subs	r3, #48	; 0x30
 800d9cc:	2b09      	cmp	r3, #9
 800d9ce:	d94e      	bls.n	800da6e <_svfiprintf_r+0x17e>
 800d9d0:	b1b0      	cbz	r0, 800da00 <_svfiprintf_r+0x110>
 800d9d2:	9207      	str	r2, [sp, #28]
 800d9d4:	e014      	b.n	800da00 <_svfiprintf_r+0x110>
 800d9d6:	eba0 0308 	sub.w	r3, r0, r8
 800d9da:	fa09 f303 	lsl.w	r3, r9, r3
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	46a2      	mov	sl, r4
 800d9e4:	e7d2      	b.n	800d98c <_svfiprintf_r+0x9c>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	1d19      	adds	r1, r3, #4
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	9103      	str	r1, [sp, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bfbb      	ittet	lt
 800d9f2:	425b      	neglt	r3, r3
 800d9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9f8:	9307      	strge	r3, [sp, #28]
 800d9fa:	9307      	strlt	r3, [sp, #28]
 800d9fc:	bfb8      	it	lt
 800d9fe:	9204      	strlt	r2, [sp, #16]
 800da00:	7823      	ldrb	r3, [r4, #0]
 800da02:	2b2e      	cmp	r3, #46	; 0x2e
 800da04:	d10c      	bne.n	800da20 <_svfiprintf_r+0x130>
 800da06:	7863      	ldrb	r3, [r4, #1]
 800da08:	2b2a      	cmp	r3, #42	; 0x2a
 800da0a:	d135      	bne.n	800da78 <_svfiprintf_r+0x188>
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	1d1a      	adds	r2, r3, #4
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	9203      	str	r2, [sp, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	bfb8      	it	lt
 800da18:	f04f 33ff 	movlt.w	r3, #4294967295
 800da1c:	3402      	adds	r4, #2
 800da1e:	9305      	str	r3, [sp, #20]
 800da20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800daec <_svfiprintf_r+0x1fc>
 800da24:	7821      	ldrb	r1, [r4, #0]
 800da26:	2203      	movs	r2, #3
 800da28:	4650      	mov	r0, sl
 800da2a:	f7f2 fc61 	bl	80002f0 <memchr>
 800da2e:	b140      	cbz	r0, 800da42 <_svfiprintf_r+0x152>
 800da30:	2340      	movs	r3, #64	; 0x40
 800da32:	eba0 000a 	sub.w	r0, r0, sl
 800da36:	fa03 f000 	lsl.w	r0, r3, r0
 800da3a:	9b04      	ldr	r3, [sp, #16]
 800da3c:	4303      	orrs	r3, r0
 800da3e:	3401      	adds	r4, #1
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da46:	4826      	ldr	r0, [pc, #152]	; (800dae0 <_svfiprintf_r+0x1f0>)
 800da48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da4c:	2206      	movs	r2, #6
 800da4e:	f7f2 fc4f 	bl	80002f0 <memchr>
 800da52:	2800      	cmp	r0, #0
 800da54:	d038      	beq.n	800dac8 <_svfiprintf_r+0x1d8>
 800da56:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <_svfiprintf_r+0x1f4>)
 800da58:	bb1b      	cbnz	r3, 800daa2 <_svfiprintf_r+0x1b2>
 800da5a:	9b03      	ldr	r3, [sp, #12]
 800da5c:	3307      	adds	r3, #7
 800da5e:	f023 0307 	bic.w	r3, r3, #7
 800da62:	3308      	adds	r3, #8
 800da64:	9303      	str	r3, [sp, #12]
 800da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da68:	4433      	add	r3, r6
 800da6a:	9309      	str	r3, [sp, #36]	; 0x24
 800da6c:	e767      	b.n	800d93e <_svfiprintf_r+0x4e>
 800da6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da72:	460c      	mov	r4, r1
 800da74:	2001      	movs	r0, #1
 800da76:	e7a5      	b.n	800d9c4 <_svfiprintf_r+0xd4>
 800da78:	2300      	movs	r3, #0
 800da7a:	3401      	adds	r4, #1
 800da7c:	9305      	str	r3, [sp, #20]
 800da7e:	4619      	mov	r1, r3
 800da80:	f04f 0c0a 	mov.w	ip, #10
 800da84:	4620      	mov	r0, r4
 800da86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da8a:	3a30      	subs	r2, #48	; 0x30
 800da8c:	2a09      	cmp	r2, #9
 800da8e:	d903      	bls.n	800da98 <_svfiprintf_r+0x1a8>
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0c5      	beq.n	800da20 <_svfiprintf_r+0x130>
 800da94:	9105      	str	r1, [sp, #20]
 800da96:	e7c3      	b.n	800da20 <_svfiprintf_r+0x130>
 800da98:	fb0c 2101 	mla	r1, ip, r1, r2
 800da9c:	4604      	mov	r4, r0
 800da9e:	2301      	movs	r3, #1
 800daa0:	e7f0      	b.n	800da84 <_svfiprintf_r+0x194>
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	462a      	mov	r2, r5
 800daa8:	4b0f      	ldr	r3, [pc, #60]	; (800dae8 <_svfiprintf_r+0x1f8>)
 800daaa:	a904      	add	r1, sp, #16
 800daac:	4638      	mov	r0, r7
 800daae:	f7fc fb4f 	bl	800a150 <_printf_float>
 800dab2:	1c42      	adds	r2, r0, #1
 800dab4:	4606      	mov	r6, r0
 800dab6:	d1d6      	bne.n	800da66 <_svfiprintf_r+0x176>
 800dab8:	89ab      	ldrh	r3, [r5, #12]
 800daba:	065b      	lsls	r3, r3, #25
 800dabc:	f53f af2c 	bmi.w	800d918 <_svfiprintf_r+0x28>
 800dac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dac2:	b01d      	add	sp, #116	; 0x74
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	ab03      	add	r3, sp, #12
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	462a      	mov	r2, r5
 800dace:	4b06      	ldr	r3, [pc, #24]	; (800dae8 <_svfiprintf_r+0x1f8>)
 800dad0:	a904      	add	r1, sp, #16
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7fc fdc8 	bl	800a668 <_printf_i>
 800dad8:	e7eb      	b.n	800dab2 <_svfiprintf_r+0x1c2>
 800dada:	bf00      	nop
 800dadc:	0800ebbc 	.word	0x0800ebbc
 800dae0:	0800ebc6 	.word	0x0800ebc6
 800dae4:	0800a151 	.word	0x0800a151
 800dae8:	0800d839 	.word	0x0800d839
 800daec:	0800ebc2 	.word	0x0800ebc2

0800daf0 <nan>:
 800daf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800daf8 <nan+0x8>
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop
 800daf8:	00000000 	.word	0x00000000
 800dafc:	7ff80000 	.word	0x7ff80000

0800db00 <_sbrk_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d06      	ldr	r5, [pc, #24]	; (800db1c <_sbrk_r+0x1c>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	602b      	str	r3, [r5, #0]
 800db0c:	f7f4 fac6 	bl	800209c <_sbrk>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_sbrk_r+0x1a>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b103      	cbz	r3, 800db1a <_sbrk_r+0x1a>
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	24000628 	.word	0x24000628

0800db20 <strncmp>:
 800db20:	b510      	push	{r4, lr}
 800db22:	b17a      	cbz	r2, 800db44 <strncmp+0x24>
 800db24:	4603      	mov	r3, r0
 800db26:	3901      	subs	r1, #1
 800db28:	1884      	adds	r4, r0, r2
 800db2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db32:	4290      	cmp	r0, r2
 800db34:	d101      	bne.n	800db3a <strncmp+0x1a>
 800db36:	42a3      	cmp	r3, r4
 800db38:	d101      	bne.n	800db3e <strncmp+0x1e>
 800db3a:	1a80      	subs	r0, r0, r2
 800db3c:	bd10      	pop	{r4, pc}
 800db3e:	2800      	cmp	r0, #0
 800db40:	d1f3      	bne.n	800db2a <strncmp+0xa>
 800db42:	e7fa      	b.n	800db3a <strncmp+0x1a>
 800db44:	4610      	mov	r0, r2
 800db46:	e7f9      	b.n	800db3c <strncmp+0x1c>

0800db48 <__ascii_wctomb>:
 800db48:	b149      	cbz	r1, 800db5e <__ascii_wctomb+0x16>
 800db4a:	2aff      	cmp	r2, #255	; 0xff
 800db4c:	bf85      	ittet	hi
 800db4e:	238a      	movhi	r3, #138	; 0x8a
 800db50:	6003      	strhi	r3, [r0, #0]
 800db52:	700a      	strbls	r2, [r1, #0]
 800db54:	f04f 30ff 	movhi.w	r0, #4294967295
 800db58:	bf98      	it	ls
 800db5a:	2001      	movls	r0, #1
 800db5c:	4770      	bx	lr
 800db5e:	4608      	mov	r0, r1
 800db60:	4770      	bx	lr
	...

0800db64 <__assert_func>:
 800db64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db66:	4614      	mov	r4, r2
 800db68:	461a      	mov	r2, r3
 800db6a:	4b09      	ldr	r3, [pc, #36]	; (800db90 <__assert_func+0x2c>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4605      	mov	r5, r0
 800db70:	68d8      	ldr	r0, [r3, #12]
 800db72:	b14c      	cbz	r4, 800db88 <__assert_func+0x24>
 800db74:	4b07      	ldr	r3, [pc, #28]	; (800db94 <__assert_func+0x30>)
 800db76:	9100      	str	r1, [sp, #0]
 800db78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db7c:	4906      	ldr	r1, [pc, #24]	; (800db98 <__assert_func+0x34>)
 800db7e:	462b      	mov	r3, r5
 800db80:	f000 f80e 	bl	800dba0 <fiprintf>
 800db84:	f000 fa8c 	bl	800e0a0 <abort>
 800db88:	4b04      	ldr	r3, [pc, #16]	; (800db9c <__assert_func+0x38>)
 800db8a:	461c      	mov	r4, r3
 800db8c:	e7f3      	b.n	800db76 <__assert_func+0x12>
 800db8e:	bf00      	nop
 800db90:	24000030 	.word	0x24000030
 800db94:	0800ebcd 	.word	0x0800ebcd
 800db98:	0800ebda 	.word	0x0800ebda
 800db9c:	0800ec08 	.word	0x0800ec08

0800dba0 <fiprintf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	b503      	push	{r0, r1, lr}
 800dba4:	4601      	mov	r1, r0
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	4805      	ldr	r0, [pc, #20]	; (800dbc0 <fiprintf+0x20>)
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	6800      	ldr	r0, [r0, #0]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	f000 f885 	bl	800dcc0 <_vfiprintf_r>
 800dbb6:	b002      	add	sp, #8
 800dbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	4770      	bx	lr
 800dbc0:	24000030 	.word	0x24000030

0800dbc4 <memmove>:
 800dbc4:	4288      	cmp	r0, r1
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	eb01 0402 	add.w	r4, r1, r2
 800dbcc:	d902      	bls.n	800dbd4 <memmove+0x10>
 800dbce:	4284      	cmp	r4, r0
 800dbd0:	4623      	mov	r3, r4
 800dbd2:	d807      	bhi.n	800dbe4 <memmove+0x20>
 800dbd4:	1e43      	subs	r3, r0, #1
 800dbd6:	42a1      	cmp	r1, r4
 800dbd8:	d008      	beq.n	800dbec <memmove+0x28>
 800dbda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbe2:	e7f8      	b.n	800dbd6 <memmove+0x12>
 800dbe4:	4402      	add	r2, r0
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	428a      	cmp	r2, r1
 800dbea:	d100      	bne.n	800dbee <memmove+0x2a>
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbf6:	e7f7      	b.n	800dbe8 <memmove+0x24>

0800dbf8 <__malloc_lock>:
 800dbf8:	4801      	ldr	r0, [pc, #4]	; (800dc00 <__malloc_lock+0x8>)
 800dbfa:	f000 bc11 	b.w	800e420 <__retarget_lock_acquire_recursive>
 800dbfe:	bf00      	nop
 800dc00:	2400062c 	.word	0x2400062c

0800dc04 <__malloc_unlock>:
 800dc04:	4801      	ldr	r0, [pc, #4]	; (800dc0c <__malloc_unlock+0x8>)
 800dc06:	f000 bc0c 	b.w	800e422 <__retarget_lock_release_recursive>
 800dc0a:	bf00      	nop
 800dc0c:	2400062c 	.word	0x2400062c

0800dc10 <_realloc_r>:
 800dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc14:	4680      	mov	r8, r0
 800dc16:	4614      	mov	r4, r2
 800dc18:	460e      	mov	r6, r1
 800dc1a:	b921      	cbnz	r1, 800dc26 <_realloc_r+0x16>
 800dc1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc20:	4611      	mov	r1, r2
 800dc22:	f7ff bd95 	b.w	800d750 <_malloc_r>
 800dc26:	b92a      	cbnz	r2, 800dc34 <_realloc_r+0x24>
 800dc28:	f7ff fd26 	bl	800d678 <_free_r>
 800dc2c:	4625      	mov	r5, r4
 800dc2e:	4628      	mov	r0, r5
 800dc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc34:	f000 fc5c 	bl	800e4f0 <_malloc_usable_size_r>
 800dc38:	4284      	cmp	r4, r0
 800dc3a:	4607      	mov	r7, r0
 800dc3c:	d802      	bhi.n	800dc44 <_realloc_r+0x34>
 800dc3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc42:	d812      	bhi.n	800dc6a <_realloc_r+0x5a>
 800dc44:	4621      	mov	r1, r4
 800dc46:	4640      	mov	r0, r8
 800dc48:	f7ff fd82 	bl	800d750 <_malloc_r>
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d0ed      	beq.n	800dc2e <_realloc_r+0x1e>
 800dc52:	42bc      	cmp	r4, r7
 800dc54:	4622      	mov	r2, r4
 800dc56:	4631      	mov	r1, r6
 800dc58:	bf28      	it	cs
 800dc5a:	463a      	movcs	r2, r7
 800dc5c:	f7fc f9d0 	bl	800a000 <memcpy>
 800dc60:	4631      	mov	r1, r6
 800dc62:	4640      	mov	r0, r8
 800dc64:	f7ff fd08 	bl	800d678 <_free_r>
 800dc68:	e7e1      	b.n	800dc2e <_realloc_r+0x1e>
 800dc6a:	4635      	mov	r5, r6
 800dc6c:	e7df      	b.n	800dc2e <_realloc_r+0x1e>

0800dc6e <__sfputc_r>:
 800dc6e:	6893      	ldr	r3, [r2, #8]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	b410      	push	{r4}
 800dc76:	6093      	str	r3, [r2, #8]
 800dc78:	da08      	bge.n	800dc8c <__sfputc_r+0x1e>
 800dc7a:	6994      	ldr	r4, [r2, #24]
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	db01      	blt.n	800dc84 <__sfputc_r+0x16>
 800dc80:	290a      	cmp	r1, #10
 800dc82:	d103      	bne.n	800dc8c <__sfputc_r+0x1e>
 800dc84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc88:	f000 b94a 	b.w	800df20 <__swbuf_r>
 800dc8c:	6813      	ldr	r3, [r2, #0]
 800dc8e:	1c58      	adds	r0, r3, #1
 800dc90:	6010      	str	r0, [r2, #0]
 800dc92:	7019      	strb	r1, [r3, #0]
 800dc94:	4608      	mov	r0, r1
 800dc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <__sfputs_r>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460f      	mov	r7, r1
 800dca2:	4614      	mov	r4, r2
 800dca4:	18d5      	adds	r5, r2, r3
 800dca6:	42ac      	cmp	r4, r5
 800dca8:	d101      	bne.n	800dcae <__sfputs_r+0x12>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	e007      	b.n	800dcbe <__sfputs_r+0x22>
 800dcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb2:	463a      	mov	r2, r7
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff ffda 	bl	800dc6e <__sfputc_r>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	d1f3      	bne.n	800dca6 <__sfputs_r+0xa>
 800dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcc0 <_vfiprintf_r>:
 800dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	b09d      	sub	sp, #116	; 0x74
 800dcc8:	4614      	mov	r4, r2
 800dcca:	4698      	mov	r8, r3
 800dccc:	4606      	mov	r6, r0
 800dcce:	b118      	cbz	r0, 800dcd8 <_vfiprintf_r+0x18>
 800dcd0:	6983      	ldr	r3, [r0, #24]
 800dcd2:	b90b      	cbnz	r3, 800dcd8 <_vfiprintf_r+0x18>
 800dcd4:	f000 fb06 	bl	800e2e4 <__sinit>
 800dcd8:	4b89      	ldr	r3, [pc, #548]	; (800df00 <_vfiprintf_r+0x240>)
 800dcda:	429d      	cmp	r5, r3
 800dcdc:	d11b      	bne.n	800dd16 <_vfiprintf_r+0x56>
 800dcde:	6875      	ldr	r5, [r6, #4]
 800dce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce2:	07d9      	lsls	r1, r3, #31
 800dce4:	d405      	bmi.n	800dcf2 <_vfiprintf_r+0x32>
 800dce6:	89ab      	ldrh	r3, [r5, #12]
 800dce8:	059a      	lsls	r2, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_vfiprintf_r+0x32>
 800dcec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcee:	f000 fb97 	bl	800e420 <__retarget_lock_acquire_recursive>
 800dcf2:	89ab      	ldrh	r3, [r5, #12]
 800dcf4:	071b      	lsls	r3, r3, #28
 800dcf6:	d501      	bpl.n	800dcfc <_vfiprintf_r+0x3c>
 800dcf8:	692b      	ldr	r3, [r5, #16]
 800dcfa:	b9eb      	cbnz	r3, 800dd38 <_vfiprintf_r+0x78>
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f000 f960 	bl	800dfc4 <__swsetup_r>
 800dd04:	b1c0      	cbz	r0, 800dd38 <_vfiprintf_r+0x78>
 800dd06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd08:	07dc      	lsls	r4, r3, #31
 800dd0a:	d50e      	bpl.n	800dd2a <_vfiprintf_r+0x6a>
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd10:	b01d      	add	sp, #116	; 0x74
 800dd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd16:	4b7b      	ldr	r3, [pc, #492]	; (800df04 <_vfiprintf_r+0x244>)
 800dd18:	429d      	cmp	r5, r3
 800dd1a:	d101      	bne.n	800dd20 <_vfiprintf_r+0x60>
 800dd1c:	68b5      	ldr	r5, [r6, #8]
 800dd1e:	e7df      	b.n	800dce0 <_vfiprintf_r+0x20>
 800dd20:	4b79      	ldr	r3, [pc, #484]	; (800df08 <_vfiprintf_r+0x248>)
 800dd22:	429d      	cmp	r5, r3
 800dd24:	bf08      	it	eq
 800dd26:	68f5      	ldreq	r5, [r6, #12]
 800dd28:	e7da      	b.n	800dce0 <_vfiprintf_r+0x20>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	0598      	lsls	r0, r3, #22
 800dd2e:	d4ed      	bmi.n	800dd0c <_vfiprintf_r+0x4c>
 800dd30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd32:	f000 fb76 	bl	800e422 <__retarget_lock_release_recursive>
 800dd36:	e7e9      	b.n	800dd0c <_vfiprintf_r+0x4c>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd42:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd46:	2330      	movs	r3, #48	; 0x30
 800dd48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df0c <_vfiprintf_r+0x24c>
 800dd4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd50:	f04f 0901 	mov.w	r9, #1
 800dd54:	4623      	mov	r3, r4
 800dd56:	469a      	mov	sl, r3
 800dd58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd5c:	b10a      	cbz	r2, 800dd62 <_vfiprintf_r+0xa2>
 800dd5e:	2a25      	cmp	r2, #37	; 0x25
 800dd60:	d1f9      	bne.n	800dd56 <_vfiprintf_r+0x96>
 800dd62:	ebba 0b04 	subs.w	fp, sl, r4
 800dd66:	d00b      	beq.n	800dd80 <_vfiprintf_r+0xc0>
 800dd68:	465b      	mov	r3, fp
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7ff ff94 	bl	800dc9c <__sfputs_r>
 800dd74:	3001      	adds	r0, #1
 800dd76:	f000 80aa 	beq.w	800dece <_vfiprintf_r+0x20e>
 800dd7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd7c:	445a      	add	r2, fp
 800dd7e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd80:	f89a 3000 	ldrb.w	r3, [sl]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f000 80a2 	beq.w	800dece <_vfiprintf_r+0x20e>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd94:	f10a 0a01 	add.w	sl, sl, #1
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	9307      	str	r3, [sp, #28]
 800dd9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dda0:	931a      	str	r3, [sp, #104]	; 0x68
 800dda2:	4654      	mov	r4, sl
 800dda4:	2205      	movs	r2, #5
 800dda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddaa:	4858      	ldr	r0, [pc, #352]	; (800df0c <_vfiprintf_r+0x24c>)
 800ddac:	f7f2 faa0 	bl	80002f0 <memchr>
 800ddb0:	9a04      	ldr	r2, [sp, #16]
 800ddb2:	b9d8      	cbnz	r0, 800ddec <_vfiprintf_r+0x12c>
 800ddb4:	06d1      	lsls	r1, r2, #27
 800ddb6:	bf44      	itt	mi
 800ddb8:	2320      	movmi	r3, #32
 800ddba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddbe:	0713      	lsls	r3, r2, #28
 800ddc0:	bf44      	itt	mi
 800ddc2:	232b      	movmi	r3, #43	; 0x2b
 800ddc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc8:	f89a 3000 	ldrb.w	r3, [sl]
 800ddcc:	2b2a      	cmp	r3, #42	; 0x2a
 800ddce:	d015      	beq.n	800ddfc <_vfiprintf_r+0x13c>
 800ddd0:	9a07      	ldr	r2, [sp, #28]
 800ddd2:	4654      	mov	r4, sl
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f04f 0c0a 	mov.w	ip, #10
 800ddda:	4621      	mov	r1, r4
 800dddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dde0:	3b30      	subs	r3, #48	; 0x30
 800dde2:	2b09      	cmp	r3, #9
 800dde4:	d94e      	bls.n	800de84 <_vfiprintf_r+0x1c4>
 800dde6:	b1b0      	cbz	r0, 800de16 <_vfiprintf_r+0x156>
 800dde8:	9207      	str	r2, [sp, #28]
 800ddea:	e014      	b.n	800de16 <_vfiprintf_r+0x156>
 800ddec:	eba0 0308 	sub.w	r3, r0, r8
 800ddf0:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	9304      	str	r3, [sp, #16]
 800ddf8:	46a2      	mov	sl, r4
 800ddfa:	e7d2      	b.n	800dda2 <_vfiprintf_r+0xe2>
 800ddfc:	9b03      	ldr	r3, [sp, #12]
 800ddfe:	1d19      	adds	r1, r3, #4
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	9103      	str	r1, [sp, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	bfbb      	ittet	lt
 800de08:	425b      	neglt	r3, r3
 800de0a:	f042 0202 	orrlt.w	r2, r2, #2
 800de0e:	9307      	strge	r3, [sp, #28]
 800de10:	9307      	strlt	r3, [sp, #28]
 800de12:	bfb8      	it	lt
 800de14:	9204      	strlt	r2, [sp, #16]
 800de16:	7823      	ldrb	r3, [r4, #0]
 800de18:	2b2e      	cmp	r3, #46	; 0x2e
 800de1a:	d10c      	bne.n	800de36 <_vfiprintf_r+0x176>
 800de1c:	7863      	ldrb	r3, [r4, #1]
 800de1e:	2b2a      	cmp	r3, #42	; 0x2a
 800de20:	d135      	bne.n	800de8e <_vfiprintf_r+0x1ce>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	1d1a      	adds	r2, r3, #4
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	9203      	str	r2, [sp, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	bfb8      	it	lt
 800de2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800de32:	3402      	adds	r4, #2
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df1c <_vfiprintf_r+0x25c>
 800de3a:	7821      	ldrb	r1, [r4, #0]
 800de3c:	2203      	movs	r2, #3
 800de3e:	4650      	mov	r0, sl
 800de40:	f7f2 fa56 	bl	80002f0 <memchr>
 800de44:	b140      	cbz	r0, 800de58 <_vfiprintf_r+0x198>
 800de46:	2340      	movs	r3, #64	; 0x40
 800de48:	eba0 000a 	sub.w	r0, r0, sl
 800de4c:	fa03 f000 	lsl.w	r0, r3, r0
 800de50:	9b04      	ldr	r3, [sp, #16]
 800de52:	4303      	orrs	r3, r0
 800de54:	3401      	adds	r4, #1
 800de56:	9304      	str	r3, [sp, #16]
 800de58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5c:	482c      	ldr	r0, [pc, #176]	; (800df10 <_vfiprintf_r+0x250>)
 800de5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de62:	2206      	movs	r2, #6
 800de64:	f7f2 fa44 	bl	80002f0 <memchr>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d03f      	beq.n	800deec <_vfiprintf_r+0x22c>
 800de6c:	4b29      	ldr	r3, [pc, #164]	; (800df14 <_vfiprintf_r+0x254>)
 800de6e:	bb1b      	cbnz	r3, 800deb8 <_vfiprintf_r+0x1f8>
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	3307      	adds	r3, #7
 800de74:	f023 0307 	bic.w	r3, r3, #7
 800de78:	3308      	adds	r3, #8
 800de7a:	9303      	str	r3, [sp, #12]
 800de7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7e:	443b      	add	r3, r7
 800de80:	9309      	str	r3, [sp, #36]	; 0x24
 800de82:	e767      	b.n	800dd54 <_vfiprintf_r+0x94>
 800de84:	fb0c 3202 	mla	r2, ip, r2, r3
 800de88:	460c      	mov	r4, r1
 800de8a:	2001      	movs	r0, #1
 800de8c:	e7a5      	b.n	800ddda <_vfiprintf_r+0x11a>
 800de8e:	2300      	movs	r3, #0
 800de90:	3401      	adds	r4, #1
 800de92:	9305      	str	r3, [sp, #20]
 800de94:	4619      	mov	r1, r3
 800de96:	f04f 0c0a 	mov.w	ip, #10
 800de9a:	4620      	mov	r0, r4
 800de9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dea0:	3a30      	subs	r2, #48	; 0x30
 800dea2:	2a09      	cmp	r2, #9
 800dea4:	d903      	bls.n	800deae <_vfiprintf_r+0x1ee>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0c5      	beq.n	800de36 <_vfiprintf_r+0x176>
 800deaa:	9105      	str	r1, [sp, #20]
 800deac:	e7c3      	b.n	800de36 <_vfiprintf_r+0x176>
 800deae:	fb0c 2101 	mla	r1, ip, r1, r2
 800deb2:	4604      	mov	r4, r0
 800deb4:	2301      	movs	r3, #1
 800deb6:	e7f0      	b.n	800de9a <_vfiprintf_r+0x1da>
 800deb8:	ab03      	add	r3, sp, #12
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	462a      	mov	r2, r5
 800debe:	4b16      	ldr	r3, [pc, #88]	; (800df18 <_vfiprintf_r+0x258>)
 800dec0:	a904      	add	r1, sp, #16
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7fc f944 	bl	800a150 <_printf_float>
 800dec8:	4607      	mov	r7, r0
 800deca:	1c78      	adds	r0, r7, #1
 800decc:	d1d6      	bne.n	800de7c <_vfiprintf_r+0x1bc>
 800dece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ded0:	07d9      	lsls	r1, r3, #31
 800ded2:	d405      	bmi.n	800dee0 <_vfiprintf_r+0x220>
 800ded4:	89ab      	ldrh	r3, [r5, #12]
 800ded6:	059a      	lsls	r2, r3, #22
 800ded8:	d402      	bmi.n	800dee0 <_vfiprintf_r+0x220>
 800deda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dedc:	f000 faa1 	bl	800e422 <__retarget_lock_release_recursive>
 800dee0:	89ab      	ldrh	r3, [r5, #12]
 800dee2:	065b      	lsls	r3, r3, #25
 800dee4:	f53f af12 	bmi.w	800dd0c <_vfiprintf_r+0x4c>
 800dee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deea:	e711      	b.n	800dd10 <_vfiprintf_r+0x50>
 800deec:	ab03      	add	r3, sp, #12
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	462a      	mov	r2, r5
 800def2:	4b09      	ldr	r3, [pc, #36]	; (800df18 <_vfiprintf_r+0x258>)
 800def4:	a904      	add	r1, sp, #16
 800def6:	4630      	mov	r0, r6
 800def8:	f7fc fbb6 	bl	800a668 <_printf_i>
 800defc:	e7e4      	b.n	800dec8 <_vfiprintf_r+0x208>
 800defe:	bf00      	nop
 800df00:	0800ec2c 	.word	0x0800ec2c
 800df04:	0800ec4c 	.word	0x0800ec4c
 800df08:	0800ec0c 	.word	0x0800ec0c
 800df0c:	0800ebbc 	.word	0x0800ebbc
 800df10:	0800ebc6 	.word	0x0800ebc6
 800df14:	0800a151 	.word	0x0800a151
 800df18:	0800dc9d 	.word	0x0800dc9d
 800df1c:	0800ebc2 	.word	0x0800ebc2

0800df20 <__swbuf_r>:
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df22:	460e      	mov	r6, r1
 800df24:	4614      	mov	r4, r2
 800df26:	4605      	mov	r5, r0
 800df28:	b118      	cbz	r0, 800df32 <__swbuf_r+0x12>
 800df2a:	6983      	ldr	r3, [r0, #24]
 800df2c:	b90b      	cbnz	r3, 800df32 <__swbuf_r+0x12>
 800df2e:	f000 f9d9 	bl	800e2e4 <__sinit>
 800df32:	4b21      	ldr	r3, [pc, #132]	; (800dfb8 <__swbuf_r+0x98>)
 800df34:	429c      	cmp	r4, r3
 800df36:	d12b      	bne.n	800df90 <__swbuf_r+0x70>
 800df38:	686c      	ldr	r4, [r5, #4]
 800df3a:	69a3      	ldr	r3, [r4, #24]
 800df3c:	60a3      	str	r3, [r4, #8]
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	071a      	lsls	r2, r3, #28
 800df42:	d52f      	bpl.n	800dfa4 <__swbuf_r+0x84>
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	b36b      	cbz	r3, 800dfa4 <__swbuf_r+0x84>
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	6820      	ldr	r0, [r4, #0]
 800df4c:	1ac0      	subs	r0, r0, r3
 800df4e:	6963      	ldr	r3, [r4, #20]
 800df50:	b2f6      	uxtb	r6, r6
 800df52:	4283      	cmp	r3, r0
 800df54:	4637      	mov	r7, r6
 800df56:	dc04      	bgt.n	800df62 <__swbuf_r+0x42>
 800df58:	4621      	mov	r1, r4
 800df5a:	4628      	mov	r0, r5
 800df5c:	f000 f92e 	bl	800e1bc <_fflush_r>
 800df60:	bb30      	cbnz	r0, 800dfb0 <__swbuf_r+0x90>
 800df62:	68a3      	ldr	r3, [r4, #8]
 800df64:	3b01      	subs	r3, #1
 800df66:	60a3      	str	r3, [r4, #8]
 800df68:	6823      	ldr	r3, [r4, #0]
 800df6a:	1c5a      	adds	r2, r3, #1
 800df6c:	6022      	str	r2, [r4, #0]
 800df6e:	701e      	strb	r6, [r3, #0]
 800df70:	6963      	ldr	r3, [r4, #20]
 800df72:	3001      	adds	r0, #1
 800df74:	4283      	cmp	r3, r0
 800df76:	d004      	beq.n	800df82 <__swbuf_r+0x62>
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	07db      	lsls	r3, r3, #31
 800df7c:	d506      	bpl.n	800df8c <__swbuf_r+0x6c>
 800df7e:	2e0a      	cmp	r6, #10
 800df80:	d104      	bne.n	800df8c <__swbuf_r+0x6c>
 800df82:	4621      	mov	r1, r4
 800df84:	4628      	mov	r0, r5
 800df86:	f000 f919 	bl	800e1bc <_fflush_r>
 800df8a:	b988      	cbnz	r0, 800dfb0 <__swbuf_r+0x90>
 800df8c:	4638      	mov	r0, r7
 800df8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <__swbuf_r+0x9c>)
 800df92:	429c      	cmp	r4, r3
 800df94:	d101      	bne.n	800df9a <__swbuf_r+0x7a>
 800df96:	68ac      	ldr	r4, [r5, #8]
 800df98:	e7cf      	b.n	800df3a <__swbuf_r+0x1a>
 800df9a:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <__swbuf_r+0xa0>)
 800df9c:	429c      	cmp	r4, r3
 800df9e:	bf08      	it	eq
 800dfa0:	68ec      	ldreq	r4, [r5, #12]
 800dfa2:	e7ca      	b.n	800df3a <__swbuf_r+0x1a>
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f000 f80c 	bl	800dfc4 <__swsetup_r>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d0cb      	beq.n	800df48 <__swbuf_r+0x28>
 800dfb0:	f04f 37ff 	mov.w	r7, #4294967295
 800dfb4:	e7ea      	b.n	800df8c <__swbuf_r+0x6c>
 800dfb6:	bf00      	nop
 800dfb8:	0800ec2c 	.word	0x0800ec2c
 800dfbc:	0800ec4c 	.word	0x0800ec4c
 800dfc0:	0800ec0c 	.word	0x0800ec0c

0800dfc4 <__swsetup_r>:
 800dfc4:	4b32      	ldr	r3, [pc, #200]	; (800e090 <__swsetup_r+0xcc>)
 800dfc6:	b570      	push	{r4, r5, r6, lr}
 800dfc8:	681d      	ldr	r5, [r3, #0]
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460c      	mov	r4, r1
 800dfce:	b125      	cbz	r5, 800dfda <__swsetup_r+0x16>
 800dfd0:	69ab      	ldr	r3, [r5, #24]
 800dfd2:	b913      	cbnz	r3, 800dfda <__swsetup_r+0x16>
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f000 f985 	bl	800e2e4 <__sinit>
 800dfda:	4b2e      	ldr	r3, [pc, #184]	; (800e094 <__swsetup_r+0xd0>)
 800dfdc:	429c      	cmp	r4, r3
 800dfde:	d10f      	bne.n	800e000 <__swsetup_r+0x3c>
 800dfe0:	686c      	ldr	r4, [r5, #4]
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfe8:	0719      	lsls	r1, r3, #28
 800dfea:	d42c      	bmi.n	800e046 <__swsetup_r+0x82>
 800dfec:	06dd      	lsls	r5, r3, #27
 800dfee:	d411      	bmi.n	800e014 <__swsetup_r+0x50>
 800dff0:	2309      	movs	r3, #9
 800dff2:	6033      	str	r3, [r6, #0]
 800dff4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dff8:	81a3      	strh	r3, [r4, #12]
 800dffa:	f04f 30ff 	mov.w	r0, #4294967295
 800dffe:	e03e      	b.n	800e07e <__swsetup_r+0xba>
 800e000:	4b25      	ldr	r3, [pc, #148]	; (800e098 <__swsetup_r+0xd4>)
 800e002:	429c      	cmp	r4, r3
 800e004:	d101      	bne.n	800e00a <__swsetup_r+0x46>
 800e006:	68ac      	ldr	r4, [r5, #8]
 800e008:	e7eb      	b.n	800dfe2 <__swsetup_r+0x1e>
 800e00a:	4b24      	ldr	r3, [pc, #144]	; (800e09c <__swsetup_r+0xd8>)
 800e00c:	429c      	cmp	r4, r3
 800e00e:	bf08      	it	eq
 800e010:	68ec      	ldreq	r4, [r5, #12]
 800e012:	e7e6      	b.n	800dfe2 <__swsetup_r+0x1e>
 800e014:	0758      	lsls	r0, r3, #29
 800e016:	d512      	bpl.n	800e03e <__swsetup_r+0x7a>
 800e018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e01a:	b141      	cbz	r1, 800e02e <__swsetup_r+0x6a>
 800e01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e020:	4299      	cmp	r1, r3
 800e022:	d002      	beq.n	800e02a <__swsetup_r+0x66>
 800e024:	4630      	mov	r0, r6
 800e026:	f7ff fb27 	bl	800d678 <_free_r>
 800e02a:	2300      	movs	r3, #0
 800e02c:	6363      	str	r3, [r4, #52]	; 0x34
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	2300      	movs	r3, #0
 800e038:	6063      	str	r3, [r4, #4]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	f043 0308 	orr.w	r3, r3, #8
 800e044:	81a3      	strh	r3, [r4, #12]
 800e046:	6923      	ldr	r3, [r4, #16]
 800e048:	b94b      	cbnz	r3, 800e05e <__swsetup_r+0x9a>
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e054:	d003      	beq.n	800e05e <__swsetup_r+0x9a>
 800e056:	4621      	mov	r1, r4
 800e058:	4630      	mov	r0, r6
 800e05a:	f000 fa09 	bl	800e470 <__smakebuf_r>
 800e05e:	89a0      	ldrh	r0, [r4, #12]
 800e060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e064:	f010 0301 	ands.w	r3, r0, #1
 800e068:	d00a      	beq.n	800e080 <__swsetup_r+0xbc>
 800e06a:	2300      	movs	r3, #0
 800e06c:	60a3      	str	r3, [r4, #8]
 800e06e:	6963      	ldr	r3, [r4, #20]
 800e070:	425b      	negs	r3, r3
 800e072:	61a3      	str	r3, [r4, #24]
 800e074:	6923      	ldr	r3, [r4, #16]
 800e076:	b943      	cbnz	r3, 800e08a <__swsetup_r+0xc6>
 800e078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e07c:	d1ba      	bne.n	800dff4 <__swsetup_r+0x30>
 800e07e:	bd70      	pop	{r4, r5, r6, pc}
 800e080:	0781      	lsls	r1, r0, #30
 800e082:	bf58      	it	pl
 800e084:	6963      	ldrpl	r3, [r4, #20]
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	e7f4      	b.n	800e074 <__swsetup_r+0xb0>
 800e08a:	2000      	movs	r0, #0
 800e08c:	e7f7      	b.n	800e07e <__swsetup_r+0xba>
 800e08e:	bf00      	nop
 800e090:	24000030 	.word	0x24000030
 800e094:	0800ec2c 	.word	0x0800ec2c
 800e098:	0800ec4c 	.word	0x0800ec4c
 800e09c:	0800ec0c 	.word	0x0800ec0c

0800e0a0 <abort>:
 800e0a0:	b508      	push	{r3, lr}
 800e0a2:	2006      	movs	r0, #6
 800e0a4:	f000 fa54 	bl	800e550 <raise>
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	f7f3 ff7f 	bl	8001fac <_exit>
	...

0800e0b0 <__sflush_r>:
 800e0b0:	898a      	ldrh	r2, [r1, #12]
 800e0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	0710      	lsls	r0, r2, #28
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	d458      	bmi.n	800e170 <__sflush_r+0xc0>
 800e0be:	684b      	ldr	r3, [r1, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc05      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dc02      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	d0f9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	d032      	beq.n	800e148 <__sflush_r+0x98>
 800e0e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	075a      	lsls	r2, r3, #29
 800e0e8:	d505      	bpl.n	800e0f6 <__sflush_r+0x46>
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	1ac0      	subs	r0, r0, r3
 800e0ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f0:	b10b      	cbz	r3, 800e0f6 <__sflush_r+0x46>
 800e0f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f4:	1ac0      	subs	r0, r0, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0fc:	6a21      	ldr	r1, [r4, #32]
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b0      	blx	r6
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	d106      	bne.n	800e116 <__sflush_r+0x66>
 800e108:	6829      	ldr	r1, [r5, #0]
 800e10a:	291d      	cmp	r1, #29
 800e10c:	d82c      	bhi.n	800e168 <__sflush_r+0xb8>
 800e10e:	4a2a      	ldr	r2, [pc, #168]	; (800e1b8 <__sflush_r+0x108>)
 800e110:	40ca      	lsrs	r2, r1
 800e112:	07d6      	lsls	r6, r2, #31
 800e114:	d528      	bpl.n	800e168 <__sflush_r+0xb8>
 800e116:	2200      	movs	r2, #0
 800e118:	6062      	str	r2, [r4, #4]
 800e11a:	04d9      	lsls	r1, r3, #19
 800e11c:	6922      	ldr	r2, [r4, #16]
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	d504      	bpl.n	800e12c <__sflush_r+0x7c>
 800e122:	1c42      	adds	r2, r0, #1
 800e124:	d101      	bne.n	800e12a <__sflush_r+0x7a>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	b903      	cbnz	r3, 800e12c <__sflush_r+0x7c>
 800e12a:	6560      	str	r0, [r4, #84]	; 0x54
 800e12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	2900      	cmp	r1, #0
 800e132:	d0ca      	beq.n	800e0ca <__sflush_r+0x1a>
 800e134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d002      	beq.n	800e142 <__sflush_r+0x92>
 800e13c:	4628      	mov	r0, r5
 800e13e:	f7ff fa9b 	bl	800d678 <_free_r>
 800e142:	2000      	movs	r0, #0
 800e144:	6360      	str	r0, [r4, #52]	; 0x34
 800e146:	e7c1      	b.n	800e0cc <__sflush_r+0x1c>
 800e148:	6a21      	ldr	r1, [r4, #32]
 800e14a:	2301      	movs	r3, #1
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	1c41      	adds	r1, r0, #1
 800e152:	d1c7      	bne.n	800e0e4 <__sflush_r+0x34>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0c4      	beq.n	800e0e4 <__sflush_r+0x34>
 800e15a:	2b1d      	cmp	r3, #29
 800e15c:	d001      	beq.n	800e162 <__sflush_r+0xb2>
 800e15e:	2b16      	cmp	r3, #22
 800e160:	d101      	bne.n	800e166 <__sflush_r+0xb6>
 800e162:	602f      	str	r7, [r5, #0]
 800e164:	e7b1      	b.n	800e0ca <__sflush_r+0x1a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	e7ad      	b.n	800e0cc <__sflush_r+0x1c>
 800e170:	690f      	ldr	r7, [r1, #16]
 800e172:	2f00      	cmp	r7, #0
 800e174:	d0a9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e176:	0793      	lsls	r3, r2, #30
 800e178:	680e      	ldr	r6, [r1, #0]
 800e17a:	bf08      	it	eq
 800e17c:	694b      	ldreq	r3, [r1, #20]
 800e17e:	600f      	str	r7, [r1, #0]
 800e180:	bf18      	it	ne
 800e182:	2300      	movne	r3, #0
 800e184:	eba6 0807 	sub.w	r8, r6, r7
 800e188:	608b      	str	r3, [r1, #8]
 800e18a:	f1b8 0f00 	cmp.w	r8, #0
 800e18e:	dd9c      	ble.n	800e0ca <__sflush_r+0x1a>
 800e190:	6a21      	ldr	r1, [r4, #32]
 800e192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e194:	4643      	mov	r3, r8
 800e196:	463a      	mov	r2, r7
 800e198:	4628      	mov	r0, r5
 800e19a:	47b0      	blx	r6
 800e19c:	2800      	cmp	r0, #0
 800e19e:	dc06      	bgt.n	800e1ae <__sflush_r+0xfe>
 800e1a0:	89a3      	ldrh	r3, [r4, #12]
 800e1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	e78e      	b.n	800e0cc <__sflush_r+0x1c>
 800e1ae:	4407      	add	r7, r0
 800e1b0:	eba8 0800 	sub.w	r8, r8, r0
 800e1b4:	e7e9      	b.n	800e18a <__sflush_r+0xda>
 800e1b6:	bf00      	nop
 800e1b8:	20400001 	.word	0x20400001

0800e1bc <_fflush_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	690b      	ldr	r3, [r1, #16]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b913      	cbnz	r3, 800e1cc <_fflush_r+0x10>
 800e1c6:	2500      	movs	r5, #0
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	b118      	cbz	r0, 800e1d6 <_fflush_r+0x1a>
 800e1ce:	6983      	ldr	r3, [r0, #24]
 800e1d0:	b90b      	cbnz	r3, 800e1d6 <_fflush_r+0x1a>
 800e1d2:	f000 f887 	bl	800e2e4 <__sinit>
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <_fflush_r+0x6c>)
 800e1d8:	429c      	cmp	r4, r3
 800e1da:	d11b      	bne.n	800e214 <_fflush_r+0x58>
 800e1dc:	686c      	ldr	r4, [r5, #4]
 800e1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0ef      	beq.n	800e1c6 <_fflush_r+0xa>
 800e1e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1e8:	07d0      	lsls	r0, r2, #31
 800e1ea:	d404      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1ec:	0599      	lsls	r1, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f000 f915 	bl	800e420 <__retarget_lock_acquire_recursive>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	f7ff ff59 	bl	800e0b0 <__sflush_r>
 800e1fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e200:	07da      	lsls	r2, r3, #31
 800e202:	4605      	mov	r5, r0
 800e204:	d4e0      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e206:	89a3      	ldrh	r3, [r4, #12]
 800e208:	059b      	lsls	r3, r3, #22
 800e20a:	d4dd      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e20e:	f000 f908 	bl	800e422 <__retarget_lock_release_recursive>
 800e212:	e7d9      	b.n	800e1c8 <_fflush_r+0xc>
 800e214:	4b05      	ldr	r3, [pc, #20]	; (800e22c <_fflush_r+0x70>)
 800e216:	429c      	cmp	r4, r3
 800e218:	d101      	bne.n	800e21e <_fflush_r+0x62>
 800e21a:	68ac      	ldr	r4, [r5, #8]
 800e21c:	e7df      	b.n	800e1de <_fflush_r+0x22>
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <_fflush_r+0x74>)
 800e220:	429c      	cmp	r4, r3
 800e222:	bf08      	it	eq
 800e224:	68ec      	ldreq	r4, [r5, #12]
 800e226:	e7da      	b.n	800e1de <_fflush_r+0x22>
 800e228:	0800ec2c 	.word	0x0800ec2c
 800e22c:	0800ec4c 	.word	0x0800ec4c
 800e230:	0800ec0c 	.word	0x0800ec0c

0800e234 <std>:
 800e234:	2300      	movs	r3, #0
 800e236:	b510      	push	{r4, lr}
 800e238:	4604      	mov	r4, r0
 800e23a:	e9c0 3300 	strd	r3, r3, [r0]
 800e23e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e242:	6083      	str	r3, [r0, #8]
 800e244:	8181      	strh	r1, [r0, #12]
 800e246:	6643      	str	r3, [r0, #100]	; 0x64
 800e248:	81c2      	strh	r2, [r0, #14]
 800e24a:	6183      	str	r3, [r0, #24]
 800e24c:	4619      	mov	r1, r3
 800e24e:	2208      	movs	r2, #8
 800e250:	305c      	adds	r0, #92	; 0x5c
 800e252:	f7fb fee3 	bl	800a01c <memset>
 800e256:	4b05      	ldr	r3, [pc, #20]	; (800e26c <std+0x38>)
 800e258:	6263      	str	r3, [r4, #36]	; 0x24
 800e25a:	4b05      	ldr	r3, [pc, #20]	; (800e270 <std+0x3c>)
 800e25c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e25e:	4b05      	ldr	r3, [pc, #20]	; (800e274 <std+0x40>)
 800e260:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e262:	4b05      	ldr	r3, [pc, #20]	; (800e278 <std+0x44>)
 800e264:	6224      	str	r4, [r4, #32]
 800e266:	6323      	str	r3, [r4, #48]	; 0x30
 800e268:	bd10      	pop	{r4, pc}
 800e26a:	bf00      	nop
 800e26c:	0800e589 	.word	0x0800e589
 800e270:	0800e5ab 	.word	0x0800e5ab
 800e274:	0800e5e3 	.word	0x0800e5e3
 800e278:	0800e607 	.word	0x0800e607

0800e27c <_cleanup_r>:
 800e27c:	4901      	ldr	r1, [pc, #4]	; (800e284 <_cleanup_r+0x8>)
 800e27e:	f000 b8af 	b.w	800e3e0 <_fwalk_reent>
 800e282:	bf00      	nop
 800e284:	0800e1bd 	.word	0x0800e1bd

0800e288 <__sfmoreglue>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	2268      	movs	r2, #104	; 0x68
 800e28c:	1e4d      	subs	r5, r1, #1
 800e28e:	4355      	muls	r5, r2
 800e290:	460e      	mov	r6, r1
 800e292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e296:	f7ff fa5b 	bl	800d750 <_malloc_r>
 800e29a:	4604      	mov	r4, r0
 800e29c:	b140      	cbz	r0, 800e2b0 <__sfmoreglue+0x28>
 800e29e:	2100      	movs	r1, #0
 800e2a0:	e9c0 1600 	strd	r1, r6, [r0]
 800e2a4:	300c      	adds	r0, #12
 800e2a6:	60a0      	str	r0, [r4, #8]
 800e2a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e2ac:	f7fb feb6 	bl	800a01c <memset>
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}

0800e2b4 <__sfp_lock_acquire>:
 800e2b4:	4801      	ldr	r0, [pc, #4]	; (800e2bc <__sfp_lock_acquire+0x8>)
 800e2b6:	f000 b8b3 	b.w	800e420 <__retarget_lock_acquire_recursive>
 800e2ba:	bf00      	nop
 800e2bc:	2400062d 	.word	0x2400062d

0800e2c0 <__sfp_lock_release>:
 800e2c0:	4801      	ldr	r0, [pc, #4]	; (800e2c8 <__sfp_lock_release+0x8>)
 800e2c2:	f000 b8ae 	b.w	800e422 <__retarget_lock_release_recursive>
 800e2c6:	bf00      	nop
 800e2c8:	2400062d 	.word	0x2400062d

0800e2cc <__sinit_lock_acquire>:
 800e2cc:	4801      	ldr	r0, [pc, #4]	; (800e2d4 <__sinit_lock_acquire+0x8>)
 800e2ce:	f000 b8a7 	b.w	800e420 <__retarget_lock_acquire_recursive>
 800e2d2:	bf00      	nop
 800e2d4:	2400062e 	.word	0x2400062e

0800e2d8 <__sinit_lock_release>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	; (800e2e0 <__sinit_lock_release+0x8>)
 800e2da:	f000 b8a2 	b.w	800e422 <__retarget_lock_release_recursive>
 800e2de:	bf00      	nop
 800e2e0:	2400062e 	.word	0x2400062e

0800e2e4 <__sinit>:
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	f7ff fff0 	bl	800e2cc <__sinit_lock_acquire>
 800e2ec:	69a3      	ldr	r3, [r4, #24]
 800e2ee:	b11b      	cbz	r3, 800e2f8 <__sinit+0x14>
 800e2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2f4:	f7ff bff0 	b.w	800e2d8 <__sinit_lock_release>
 800e2f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2fc:	6523      	str	r3, [r4, #80]	; 0x50
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <__sinit+0x68>)
 800e300:	4a13      	ldr	r2, [pc, #76]	; (800e350 <__sinit+0x6c>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	62a2      	str	r2, [r4, #40]	; 0x28
 800e306:	42a3      	cmp	r3, r4
 800e308:	bf04      	itt	eq
 800e30a:	2301      	moveq	r3, #1
 800e30c:	61a3      	streq	r3, [r4, #24]
 800e30e:	4620      	mov	r0, r4
 800e310:	f000 f820 	bl	800e354 <__sfp>
 800e314:	6060      	str	r0, [r4, #4]
 800e316:	4620      	mov	r0, r4
 800e318:	f000 f81c 	bl	800e354 <__sfp>
 800e31c:	60a0      	str	r0, [r4, #8]
 800e31e:	4620      	mov	r0, r4
 800e320:	f000 f818 	bl	800e354 <__sfp>
 800e324:	2200      	movs	r2, #0
 800e326:	60e0      	str	r0, [r4, #12]
 800e328:	2104      	movs	r1, #4
 800e32a:	6860      	ldr	r0, [r4, #4]
 800e32c:	f7ff ff82 	bl	800e234 <std>
 800e330:	68a0      	ldr	r0, [r4, #8]
 800e332:	2201      	movs	r2, #1
 800e334:	2109      	movs	r1, #9
 800e336:	f7ff ff7d 	bl	800e234 <std>
 800e33a:	68e0      	ldr	r0, [r4, #12]
 800e33c:	2202      	movs	r2, #2
 800e33e:	2112      	movs	r1, #18
 800e340:	f7ff ff78 	bl	800e234 <std>
 800e344:	2301      	movs	r3, #1
 800e346:	61a3      	str	r3, [r4, #24]
 800e348:	e7d2      	b.n	800e2f0 <__sinit+0xc>
 800e34a:	bf00      	nop
 800e34c:	0800e7c8 	.word	0x0800e7c8
 800e350:	0800e27d 	.word	0x0800e27d

0800e354 <__sfp>:
 800e354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e356:	4607      	mov	r7, r0
 800e358:	f7ff ffac 	bl	800e2b4 <__sfp_lock_acquire>
 800e35c:	4b1e      	ldr	r3, [pc, #120]	; (800e3d8 <__sfp+0x84>)
 800e35e:	681e      	ldr	r6, [r3, #0]
 800e360:	69b3      	ldr	r3, [r6, #24]
 800e362:	b913      	cbnz	r3, 800e36a <__sfp+0x16>
 800e364:	4630      	mov	r0, r6
 800e366:	f7ff ffbd 	bl	800e2e4 <__sinit>
 800e36a:	3648      	adds	r6, #72	; 0x48
 800e36c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e370:	3b01      	subs	r3, #1
 800e372:	d503      	bpl.n	800e37c <__sfp+0x28>
 800e374:	6833      	ldr	r3, [r6, #0]
 800e376:	b30b      	cbz	r3, 800e3bc <__sfp+0x68>
 800e378:	6836      	ldr	r6, [r6, #0]
 800e37a:	e7f7      	b.n	800e36c <__sfp+0x18>
 800e37c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e380:	b9d5      	cbnz	r5, 800e3b8 <__sfp+0x64>
 800e382:	4b16      	ldr	r3, [pc, #88]	; (800e3dc <__sfp+0x88>)
 800e384:	60e3      	str	r3, [r4, #12]
 800e386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e38a:	6665      	str	r5, [r4, #100]	; 0x64
 800e38c:	f000 f847 	bl	800e41e <__retarget_lock_init_recursive>
 800e390:	f7ff ff96 	bl	800e2c0 <__sfp_lock_release>
 800e394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e39c:	6025      	str	r5, [r4, #0]
 800e39e:	61a5      	str	r5, [r4, #24]
 800e3a0:	2208      	movs	r2, #8
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e3a8:	f7fb fe38 	bl	800a01c <memset>
 800e3ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e3b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b8:	3468      	adds	r4, #104	; 0x68
 800e3ba:	e7d9      	b.n	800e370 <__sfp+0x1c>
 800e3bc:	2104      	movs	r1, #4
 800e3be:	4638      	mov	r0, r7
 800e3c0:	f7ff ff62 	bl	800e288 <__sfmoreglue>
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	6030      	str	r0, [r6, #0]
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d1d5      	bne.n	800e378 <__sfp+0x24>
 800e3cc:	f7ff ff78 	bl	800e2c0 <__sfp_lock_release>
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	e7ee      	b.n	800e3b4 <__sfp+0x60>
 800e3d6:	bf00      	nop
 800e3d8:	0800e7c8 	.word	0x0800e7c8
 800e3dc:	ffff0001 	.word	0xffff0001

0800e3e0 <_fwalk_reent>:
 800e3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	4688      	mov	r8, r1
 800e3e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3ec:	2700      	movs	r7, #0
 800e3ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3f2:	f1b9 0901 	subs.w	r9, r9, #1
 800e3f6:	d505      	bpl.n	800e404 <_fwalk_reent+0x24>
 800e3f8:	6824      	ldr	r4, [r4, #0]
 800e3fa:	2c00      	cmp	r4, #0
 800e3fc:	d1f7      	bne.n	800e3ee <_fwalk_reent+0xe>
 800e3fe:	4638      	mov	r0, r7
 800e400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e404:	89ab      	ldrh	r3, [r5, #12]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d907      	bls.n	800e41a <_fwalk_reent+0x3a>
 800e40a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e40e:	3301      	adds	r3, #1
 800e410:	d003      	beq.n	800e41a <_fwalk_reent+0x3a>
 800e412:	4629      	mov	r1, r5
 800e414:	4630      	mov	r0, r6
 800e416:	47c0      	blx	r8
 800e418:	4307      	orrs	r7, r0
 800e41a:	3568      	adds	r5, #104	; 0x68
 800e41c:	e7e9      	b.n	800e3f2 <_fwalk_reent+0x12>

0800e41e <__retarget_lock_init_recursive>:
 800e41e:	4770      	bx	lr

0800e420 <__retarget_lock_acquire_recursive>:
 800e420:	4770      	bx	lr

0800e422 <__retarget_lock_release_recursive>:
 800e422:	4770      	bx	lr

0800e424 <__swhatbuf_r>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	460e      	mov	r6, r1
 800e428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42c:	2900      	cmp	r1, #0
 800e42e:	b096      	sub	sp, #88	; 0x58
 800e430:	4614      	mov	r4, r2
 800e432:	461d      	mov	r5, r3
 800e434:	da08      	bge.n	800e448 <__swhatbuf_r+0x24>
 800e436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	602a      	str	r2, [r5, #0]
 800e43e:	061a      	lsls	r2, r3, #24
 800e440:	d410      	bmi.n	800e464 <__swhatbuf_r+0x40>
 800e442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e446:	e00e      	b.n	800e466 <__swhatbuf_r+0x42>
 800e448:	466a      	mov	r2, sp
 800e44a:	f000 f903 	bl	800e654 <_fstat_r>
 800e44e:	2800      	cmp	r0, #0
 800e450:	dbf1      	blt.n	800e436 <__swhatbuf_r+0x12>
 800e452:	9a01      	ldr	r2, [sp, #4]
 800e454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e45c:	425a      	negs	r2, r3
 800e45e:	415a      	adcs	r2, r3
 800e460:	602a      	str	r2, [r5, #0]
 800e462:	e7ee      	b.n	800e442 <__swhatbuf_r+0x1e>
 800e464:	2340      	movs	r3, #64	; 0x40
 800e466:	2000      	movs	r0, #0
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	b016      	add	sp, #88	; 0x58
 800e46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e470 <__smakebuf_r>:
 800e470:	898b      	ldrh	r3, [r1, #12]
 800e472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e474:	079d      	lsls	r5, r3, #30
 800e476:	4606      	mov	r6, r0
 800e478:	460c      	mov	r4, r1
 800e47a:	d507      	bpl.n	800e48c <__smakebuf_r+0x1c>
 800e47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e480:	6023      	str	r3, [r4, #0]
 800e482:	6123      	str	r3, [r4, #16]
 800e484:	2301      	movs	r3, #1
 800e486:	6163      	str	r3, [r4, #20]
 800e488:	b002      	add	sp, #8
 800e48a:	bd70      	pop	{r4, r5, r6, pc}
 800e48c:	ab01      	add	r3, sp, #4
 800e48e:	466a      	mov	r2, sp
 800e490:	f7ff ffc8 	bl	800e424 <__swhatbuf_r>
 800e494:	9900      	ldr	r1, [sp, #0]
 800e496:	4605      	mov	r5, r0
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff f959 	bl	800d750 <_malloc_r>
 800e49e:	b948      	cbnz	r0, 800e4b4 <__smakebuf_r+0x44>
 800e4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4a4:	059a      	lsls	r2, r3, #22
 800e4a6:	d4ef      	bmi.n	800e488 <__smakebuf_r+0x18>
 800e4a8:	f023 0303 	bic.w	r3, r3, #3
 800e4ac:	f043 0302 	orr.w	r3, r3, #2
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	e7e3      	b.n	800e47c <__smakebuf_r+0xc>
 800e4b4:	4b0d      	ldr	r3, [pc, #52]	; (800e4ec <__smakebuf_r+0x7c>)
 800e4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	6020      	str	r0, [r4, #0]
 800e4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4c0:	81a3      	strh	r3, [r4, #12]
 800e4c2:	9b00      	ldr	r3, [sp, #0]
 800e4c4:	6163      	str	r3, [r4, #20]
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	6120      	str	r0, [r4, #16]
 800e4ca:	b15b      	cbz	r3, 800e4e4 <__smakebuf_r+0x74>
 800e4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f000 f8d1 	bl	800e678 <_isatty_r>
 800e4d6:	b128      	cbz	r0, 800e4e4 <__smakebuf_r+0x74>
 800e4d8:	89a3      	ldrh	r3, [r4, #12]
 800e4da:	f023 0303 	bic.w	r3, r3, #3
 800e4de:	f043 0301 	orr.w	r3, r3, #1
 800e4e2:	81a3      	strh	r3, [r4, #12]
 800e4e4:	89a0      	ldrh	r0, [r4, #12]
 800e4e6:	4305      	orrs	r5, r0
 800e4e8:	81a5      	strh	r5, [r4, #12]
 800e4ea:	e7cd      	b.n	800e488 <__smakebuf_r+0x18>
 800e4ec:	0800e27d 	.word	0x0800e27d

0800e4f0 <_malloc_usable_size_r>:
 800e4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4f4:	1f18      	subs	r0, r3, #4
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	bfbc      	itt	lt
 800e4fa:	580b      	ldrlt	r3, [r1, r0]
 800e4fc:	18c0      	addlt	r0, r0, r3
 800e4fe:	4770      	bx	lr

0800e500 <_raise_r>:
 800e500:	291f      	cmp	r1, #31
 800e502:	b538      	push	{r3, r4, r5, lr}
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	d904      	bls.n	800e514 <_raise_r+0x14>
 800e50a:	2316      	movs	r3, #22
 800e50c:	6003      	str	r3, [r0, #0]
 800e50e:	f04f 30ff 	mov.w	r0, #4294967295
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e516:	b112      	cbz	r2, 800e51e <_raise_r+0x1e>
 800e518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e51c:	b94b      	cbnz	r3, 800e532 <_raise_r+0x32>
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 f830 	bl	800e584 <_getpid_r>
 800e524:	462a      	mov	r2, r5
 800e526:	4601      	mov	r1, r0
 800e528:	4620      	mov	r0, r4
 800e52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e52e:	f000 b817 	b.w	800e560 <_kill_r>
 800e532:	2b01      	cmp	r3, #1
 800e534:	d00a      	beq.n	800e54c <_raise_r+0x4c>
 800e536:	1c59      	adds	r1, r3, #1
 800e538:	d103      	bne.n	800e542 <_raise_r+0x42>
 800e53a:	2316      	movs	r3, #22
 800e53c:	6003      	str	r3, [r0, #0]
 800e53e:	2001      	movs	r0, #1
 800e540:	e7e7      	b.n	800e512 <_raise_r+0x12>
 800e542:	2400      	movs	r4, #0
 800e544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e548:	4628      	mov	r0, r5
 800e54a:	4798      	blx	r3
 800e54c:	2000      	movs	r0, #0
 800e54e:	e7e0      	b.n	800e512 <_raise_r+0x12>

0800e550 <raise>:
 800e550:	4b02      	ldr	r3, [pc, #8]	; (800e55c <raise+0xc>)
 800e552:	4601      	mov	r1, r0
 800e554:	6818      	ldr	r0, [r3, #0]
 800e556:	f7ff bfd3 	b.w	800e500 <_raise_r>
 800e55a:	bf00      	nop
 800e55c:	24000030 	.word	0x24000030

0800e560 <_kill_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4d07      	ldr	r5, [pc, #28]	; (800e580 <_kill_r+0x20>)
 800e564:	2300      	movs	r3, #0
 800e566:	4604      	mov	r4, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	4611      	mov	r1, r2
 800e56c:	602b      	str	r3, [r5, #0]
 800e56e:	f7f3 fd0d 	bl	8001f8c <_kill>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	d102      	bne.n	800e57c <_kill_r+0x1c>
 800e576:	682b      	ldr	r3, [r5, #0]
 800e578:	b103      	cbz	r3, 800e57c <_kill_r+0x1c>
 800e57a:	6023      	str	r3, [r4, #0]
 800e57c:	bd38      	pop	{r3, r4, r5, pc}
 800e57e:	bf00      	nop
 800e580:	24000628 	.word	0x24000628

0800e584 <_getpid_r>:
 800e584:	f7f3 bcfa 	b.w	8001f7c <_getpid>

0800e588 <__sread>:
 800e588:	b510      	push	{r4, lr}
 800e58a:	460c      	mov	r4, r1
 800e58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e590:	f000 f894 	bl	800e6bc <_read_r>
 800e594:	2800      	cmp	r0, #0
 800e596:	bfab      	itete	ge
 800e598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e59a:	89a3      	ldrhlt	r3, [r4, #12]
 800e59c:	181b      	addge	r3, r3, r0
 800e59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5a2:	bfac      	ite	ge
 800e5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5a6:	81a3      	strhlt	r3, [r4, #12]
 800e5a8:	bd10      	pop	{r4, pc}

0800e5aa <__swrite>:
 800e5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ae:	461f      	mov	r7, r3
 800e5b0:	898b      	ldrh	r3, [r1, #12]
 800e5b2:	05db      	lsls	r3, r3, #23
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	4616      	mov	r6, r2
 800e5ba:	d505      	bpl.n	800e5c8 <__swrite+0x1e>
 800e5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c0:	2302      	movs	r3, #2
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f000 f868 	bl	800e698 <_lseek_r>
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5d2:	81a3      	strh	r3, [r4, #12]
 800e5d4:	4632      	mov	r2, r6
 800e5d6:	463b      	mov	r3, r7
 800e5d8:	4628      	mov	r0, r5
 800e5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5de:	f000 b817 	b.w	800e610 <_write_r>

0800e5e2 <__sseek>:
 800e5e2:	b510      	push	{r4, lr}
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5ea:	f000 f855 	bl	800e698 <_lseek_r>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	89a3      	ldrh	r3, [r4, #12]
 800e5f2:	bf15      	itete	ne
 800e5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5fe:	81a3      	strheq	r3, [r4, #12]
 800e600:	bf18      	it	ne
 800e602:	81a3      	strhne	r3, [r4, #12]
 800e604:	bd10      	pop	{r4, pc}

0800e606 <__sclose>:
 800e606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e60a:	f000 b813 	b.w	800e634 <_close_r>
	...

0800e610 <_write_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4d07      	ldr	r5, [pc, #28]	; (800e630 <_write_r+0x20>)
 800e614:	4604      	mov	r4, r0
 800e616:	4608      	mov	r0, r1
 800e618:	4611      	mov	r1, r2
 800e61a:	2200      	movs	r2, #0
 800e61c:	602a      	str	r2, [r5, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	f7f3 fceb 	bl	8001ffa <_write>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d102      	bne.n	800e62e <_write_r+0x1e>
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	b103      	cbz	r3, 800e62e <_write_r+0x1e>
 800e62c:	6023      	str	r3, [r4, #0]
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
 800e630:	24000628 	.word	0x24000628

0800e634 <_close_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d06      	ldr	r5, [pc, #24]	; (800e650 <_close_r+0x1c>)
 800e638:	2300      	movs	r3, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	4608      	mov	r0, r1
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	f7f3 fcf7 	bl	8002032 <_close>
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	d102      	bne.n	800e64e <_close_r+0x1a>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	b103      	cbz	r3, 800e64e <_close_r+0x1a>
 800e64c:	6023      	str	r3, [r4, #0]
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	24000628 	.word	0x24000628

0800e654 <_fstat_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d07      	ldr	r5, [pc, #28]	; (800e674 <_fstat_r+0x20>)
 800e658:	2300      	movs	r3, #0
 800e65a:	4604      	mov	r4, r0
 800e65c:	4608      	mov	r0, r1
 800e65e:	4611      	mov	r1, r2
 800e660:	602b      	str	r3, [r5, #0]
 800e662:	f7f3 fcf2 	bl	800204a <_fstat>
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	d102      	bne.n	800e670 <_fstat_r+0x1c>
 800e66a:	682b      	ldr	r3, [r5, #0]
 800e66c:	b103      	cbz	r3, 800e670 <_fstat_r+0x1c>
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	bd38      	pop	{r3, r4, r5, pc}
 800e672:	bf00      	nop
 800e674:	24000628 	.word	0x24000628

0800e678 <_isatty_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d06      	ldr	r5, [pc, #24]	; (800e694 <_isatty_r+0x1c>)
 800e67c:	2300      	movs	r3, #0
 800e67e:	4604      	mov	r4, r0
 800e680:	4608      	mov	r0, r1
 800e682:	602b      	str	r3, [r5, #0]
 800e684:	f7f3 fcf1 	bl	800206a <_isatty>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_isatty_r+0x1a>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_isatty_r+0x1a>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	24000628 	.word	0x24000628

0800e698 <_lseek_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4d07      	ldr	r5, [pc, #28]	; (800e6b8 <_lseek_r+0x20>)
 800e69c:	4604      	mov	r4, r0
 800e69e:	4608      	mov	r0, r1
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	602a      	str	r2, [r5, #0]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f7f3 fcea 	bl	8002080 <_lseek>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_lseek_r+0x1e>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_lseek_r+0x1e>
 800e6b4:	6023      	str	r3, [r4, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	24000628 	.word	0x24000628

0800e6bc <_read_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d07      	ldr	r5, [pc, #28]	; (800e6dc <_read_r+0x20>)
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	4608      	mov	r0, r1
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	602a      	str	r2, [r5, #0]
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	f7f3 fc78 	bl	8001fc0 <_read>
 800e6d0:	1c43      	adds	r3, r0, #1
 800e6d2:	d102      	bne.n	800e6da <_read_r+0x1e>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	b103      	cbz	r3, 800e6da <_read_r+0x1e>
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	24000628 	.word	0x24000628

0800e6e0 <_init>:
 800e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e2:	bf00      	nop
 800e6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6e6:	bc08      	pop	{r3}
 800e6e8:	469e      	mov	lr, r3
 800e6ea:	4770      	bx	lr

0800e6ec <_fini>:
 800e6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ee:	bf00      	nop
 800e6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6f2:	bc08      	pop	{r3}
 800e6f4:	469e      	mov	lr, r3
 800e6f6:	4770      	bx	lr
