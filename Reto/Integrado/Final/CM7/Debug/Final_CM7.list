
Final_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027d0  0800d1b8  0800d1b8  0001d1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f988  0800f988  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f988  0800f988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f990  0800f990  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f990  0800f990  0001f990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f994  0800f994  0001f994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0800f998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cfc  240001f0  0800fb88  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000eec  0800fb88  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ba5  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003473  00000000  00000000  00040dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00044238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  00045ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d052  00000000  00000000  00047210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e93e  00000000  00000000  00084262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00191021  00000000  00000000  000a2ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00233bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f1c  00000000  00000000  00233c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d19c 	.word	0x0800d19c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800d19c 	.word	0x0800d19c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 babe 	b.w	8000924 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f950 	bl	8000654 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__mulsc3>:
 80003c0:	ee60 6a01 	vmul.f32	s13, s0, s2
 80003c4:	ee20 6aa1 	vmul.f32	s12, s1, s3
 80003c8:	ee20 5a21 	vmul.f32	s10, s0, s3
 80003cc:	ee76 7ac6 	vsub.f32	s15, s13, s12
 80003d0:	ee61 5a20 	vmul.f32	s11, s2, s1
 80003d4:	eef4 7a67 	vcmp.f32	s15, s15
 80003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003dc:	ee35 7a25 	vadd.f32	s14, s10, s11
 80003e0:	d604      	bvs.n	80003ec <__mulsc3+0x2c>
 80003e2:	eeb0 0a67 	vmov.f32	s0, s15
 80003e6:	eef0 0a47 	vmov.f32	s1, s14
 80003ea:	4770      	bx	lr
 80003ec:	eeb4 7a47 	vcmp.f32	s14, s14
 80003f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f4:	d7f5      	bvc.n	80003e2 <__mulsc3+0x22>
 80003f6:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000644 <__mulsc3+0x284>
 80003fa:	eeb0 4ac0 	vabs.f32	s8, s0
 80003fe:	eeb4 4a64 	vcmp.f32	s8, s9
 8000402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000406:	bfcc      	ite	gt
 8000408:	2301      	movgt	r3, #1
 800040a:	2300      	movle	r3, #0
 800040c:	eeb0 4ae0 	vabs.f32	s8, s1
 8000410:	f300 809d 	bgt.w	800054e <__mulsc3+0x18e>
 8000414:	eeb4 4a64 	vcmp.f32	s8, s9
 8000418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041c:	f300 8097 	bgt.w	800054e <__mulsc3+0x18e>
 8000420:	2300      	movs	r3, #0
 8000422:	eddf 4a88 	vldr	s9, [pc, #544]	; 8000644 <__mulsc3+0x284>
 8000426:	eeb0 4ac1 	vabs.f32	s8, s2
 800042a:	eeb4 4a64 	vcmp.f32	s8, s9
 800042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000432:	eef0 3ae1 	vabs.f32	s7, s3
 8000436:	dc48      	bgt.n	80004ca <__mulsc3+0x10a>
 8000438:	eef4 3a64 	vcmp.f32	s7, s9
 800043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000440:	dc43      	bgt.n	80004ca <__mulsc3+0x10a>
 8000442:	bb9b      	cbnz	r3, 80004ac <__mulsc3+0xec>
 8000444:	eef0 6ae6 	vabs.f32	s13, s13
 8000448:	eef4 6a64 	vcmp.f32	s13, s9
 800044c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000450:	dc14      	bgt.n	800047c <__mulsc3+0xbc>
 8000452:	eeb0 6ac6 	vabs.f32	s12, s12
 8000456:	eeb4 6a64 	vcmp.f32	s12, s9
 800045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800045e:	dc0d      	bgt.n	800047c <__mulsc3+0xbc>
 8000460:	eeb0 5ac5 	vabs.f32	s10, s10
 8000464:	eeb4 5a64 	vcmp.f32	s10, s9
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	dc06      	bgt.n	800047c <__mulsc3+0xbc>
 800046e:	eef0 5ae5 	vabs.f32	s11, s11
 8000472:	eef4 5a64 	vcmp.f32	s11, s9
 8000476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047a:	ddb2      	ble.n	80003e2 <__mulsc3+0x22>
 800047c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000484:	f180 80d3 	bvs.w	800062e <__mulsc3+0x26e>
 8000488:	eef4 0a60 	vcmp.f32	s1, s1
 800048c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000490:	f180 80c3 	bvs.w	800061a <__mulsc3+0x25a>
 8000494:	eeb4 1a41 	vcmp.f32	s2, s2
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	f180 80b3 	bvs.w	8000606 <__mulsc3+0x246>
 80004a0:	eef4 1a61 	vcmp.f32	s3, s3
 80004a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a8:	f180 80a3 	bvs.w	80005f2 <__mulsc3+0x232>
 80004ac:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 80004b0:	ee60 0a81 	vmul.f32	s1, s1, s2
 80004b4:	eee0 7a01 	vfma.f32	s15, s0, s2
 80004b8:	eee0 0a21 	vfma.f32	s1, s0, s3
 80004bc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000648 <__mulsc3+0x288>
 80004c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004c4:	ee20 7a87 	vmul.f32	s14, s1, s14
 80004c8:	e78b      	b.n	80003e2 <__mulsc3+0x22>
 80004ca:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000644 <__mulsc3+0x284>
 80004ce:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000644 <__mulsc3+0x284>
 80004d2:	eeb4 4a67 	vcmp.f32	s8, s15
 80004d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004da:	bfcc      	ite	gt
 80004dc:	2301      	movgt	r3, #1
 80004de:	2300      	movle	r3, #0
 80004e0:	ee07 3a90 	vmov	s15, r3
 80004e4:	ee11 3a10 	vmov	r3, s2
 80004e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	eef0 7ae7 	vabs.f32	s15, s15
 80004f2:	eef4 3a47 	vcmp.f32	s7, s14
 80004f6:	bfb8      	it	lt
 80004f8:	eef1 7a67 	vneglt.f32	s15, s15
 80004fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000500:	bfcc      	ite	gt
 8000502:	2301      	movgt	r3, #1
 8000504:	2300      	movle	r3, #0
 8000506:	eeb0 1a67 	vmov.f32	s2, s15
 800050a:	ee07 3a90 	vmov	s15, r3
 800050e:	ee11 3a90 	vmov	r3, s3
 8000512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000516:	2b00      	cmp	r3, #0
 8000518:	eef0 7ae7 	vabs.f32	s15, s15
 800051c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000520:	bfb8      	it	lt
 8000522:	eef1 7a67 	vneglt.f32	s15, s15
 8000526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052a:	eef0 1a67 	vmov.f32	s3, s15
 800052e:	d64c      	bvs.n	80005ca <__mulsc3+0x20a>
 8000530:	eef4 0a60 	vcmp.f32	s1, s1
 8000534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000538:	d7b8      	bvc.n	80004ac <__mulsc3+0xec>
 800053a:	ee10 3a90 	vmov	r3, s1
 800053e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800064c <__mulsc3+0x28c>
 8000542:	eddf 7a43 	vldr	s15, [pc, #268]	; 8000650 <__mulsc3+0x290>
 8000546:	2b00      	cmp	r3, #0
 8000548:	fe67 0a27 	vselge.f32	s1, s14, s15
 800054c:	e7ae      	b.n	80004ac <__mulsc3+0xec>
 800054e:	ee04 3a90 	vmov	s9, r3
 8000552:	eddf 3a3c 	vldr	s7, [pc, #240]	; 8000644 <__mulsc3+0x284>
 8000556:	ee10 3a10 	vmov	r3, s0
 800055a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800055e:	2b00      	cmp	r3, #0
 8000560:	eef0 4ae4 	vabs.f32	s9, s9
 8000564:	eeb4 4a63 	vcmp.f32	s8, s7
 8000568:	bfb8      	it	lt
 800056a:	eef1 4a64 	vneglt.f32	s9, s9
 800056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000572:	bfcc      	ite	gt
 8000574:	2301      	movgt	r3, #1
 8000576:	2300      	movle	r3, #0
 8000578:	eeb0 0a64 	vmov.f32	s0, s9
 800057c:	ee04 3a90 	vmov	s9, r3
 8000580:	ee10 3a90 	vmov	r3, s1
 8000584:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000588:	2b00      	cmp	r3, #0
 800058a:	eef0 4ae4 	vabs.f32	s9, s9
 800058e:	eeb4 1a41 	vcmp.f32	s2, s2
 8000592:	bfb8      	it	lt
 8000594:	eef1 4a64 	vneglt.f32	s9, s9
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	eef0 0a64 	vmov.f32	s1, s9
 80005a0:	d61d      	bvs.n	80005de <__mulsc3+0x21e>
 80005a2:	eef4 1a61 	vcmp.f32	s3, s3
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	bf78      	it	vc
 80005ac:	2301      	movvc	r3, #1
 80005ae:	f5ff af38 	bvc.w	8000422 <__mulsc3+0x62>
 80005b2:	ee11 3a90 	vmov	r3, s3
 80005b6:	ed9f 4a25 	vldr	s8, [pc, #148]	; 800064c <__mulsc3+0x28c>
 80005ba:	eddf 4a25 	vldr	s9, [pc, #148]	; 8000650 <__mulsc3+0x290>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f04f 0301 	mov.w	r3, #1
 80005c4:	fe64 1a24 	vselge.f32	s3, s8, s9
 80005c8:	e72b      	b.n	8000422 <__mulsc3+0x62>
 80005ca:	ee10 3a10 	vmov	r3, s0
 80005ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800064c <__mulsc3+0x28c>
 80005d2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8000650 <__mulsc3+0x290>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	fe27 0a27 	vselge.f32	s0, s14, s15
 80005dc:	e7a8      	b.n	8000530 <__mulsc3+0x170>
 80005de:	ee11 3a10 	vmov	r3, s2
 80005e2:	ed9f 4a1a 	vldr	s8, [pc, #104]	; 800064c <__mulsc3+0x28c>
 80005e6:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8000650 <__mulsc3+0x290>
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe24 1a24 	vselge.f32	s2, s8, s9
 80005f0:	e7d7      	b.n	80005a2 <__mulsc3+0x1e2>
 80005f2:	ee11 3a90 	vmov	r3, s3
 80005f6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800064c <__mulsc3+0x28c>
 80005fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000650 <__mulsc3+0x290>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000604:	e752      	b.n	80004ac <__mulsc3+0xec>
 8000606:	ee11 3a10 	vmov	r3, s2
 800060a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800064c <__mulsc3+0x28c>
 800060e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000650 <__mulsc3+0x290>
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000618:	e742      	b.n	80004a0 <__mulsc3+0xe0>
 800061a:	ee10 3a90 	vmov	r3, s1
 800061e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800064c <__mulsc3+0x28c>
 8000622:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000650 <__mulsc3+0x290>
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe67 0a27 	vselge.f32	s1, s14, s15
 800062c:	e732      	b.n	8000494 <__mulsc3+0xd4>
 800062e:	ee10 3a10 	vmov	r3, s0
 8000632:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800064c <__mulsc3+0x28c>
 8000636:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000650 <__mulsc3+0x290>
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000640:	e722      	b.n	8000488 <__mulsc3+0xc8>
 8000642:	bf00      	nop
 8000644:	7f7fffff 	.word	0x7f7fffff
 8000648:	7f800000 	.word	0x7f800000
 800064c:	00000000 	.word	0x00000000
 8000650:	80000000 	.word	0x80000000

08000654 <__udivmoddi4>:
 8000654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000658:	9d08      	ldr	r5, [sp, #32]
 800065a:	4604      	mov	r4, r0
 800065c:	468e      	mov	lr, r1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d14d      	bne.n	80006fe <__udivmoddi4+0xaa>
 8000662:	428a      	cmp	r2, r1
 8000664:	4694      	mov	ip, r2
 8000666:	d969      	bls.n	800073c <__udivmoddi4+0xe8>
 8000668:	fab2 f282 	clz	r2, r2
 800066c:	b152      	cbz	r2, 8000684 <__udivmoddi4+0x30>
 800066e:	fa01 f302 	lsl.w	r3, r1, r2
 8000672:	f1c2 0120 	rsb	r1, r2, #32
 8000676:	fa20 f101 	lsr.w	r1, r0, r1
 800067a:	fa0c fc02 	lsl.w	ip, ip, r2
 800067e:	ea41 0e03 	orr.w	lr, r1, r3
 8000682:	4094      	lsls	r4, r2
 8000684:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000688:	0c21      	lsrs	r1, r4, #16
 800068a:	fbbe f6f8 	udiv	r6, lr, r8
 800068e:	fa1f f78c 	uxth.w	r7, ip
 8000692:	fb08 e316 	mls	r3, r8, r6, lr
 8000696:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069a:	fb06 f107 	mul.w	r1, r6, r7
 800069e:	4299      	cmp	r1, r3
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x64>
 80006a2:	eb1c 0303 	adds.w	r3, ip, r3
 80006a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006aa:	f080 811f 	bcs.w	80008ec <__udivmoddi4+0x298>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 811c 	bls.w	80008ec <__udivmoddi4+0x298>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	4463      	add	r3, ip
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c0:	fb08 3310 	mls	r3, r8, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 f707 	mul.w	r7, r0, r7
 80006cc:	42a7      	cmp	r7, r4
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x92>
 80006d0:	eb1c 0404 	adds.w	r4, ip, r4
 80006d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d8:	f080 810a 	bcs.w	80008f0 <__udivmoddi4+0x29c>
 80006dc:	42a7      	cmp	r7, r4
 80006de:	f240 8107 	bls.w	80008f0 <__udivmoddi4+0x29c>
 80006e2:	4464      	add	r4, ip
 80006e4:	3802      	subs	r0, #2
 80006e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ea:	1be4      	subs	r4, r4, r7
 80006ec:	2600      	movs	r6, #0
 80006ee:	b11d      	cbz	r5, 80006f8 <__udivmoddi4+0xa4>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c5 4300 	strd	r4, r3, [r5]
 80006f8:	4631      	mov	r1, r6
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0xc2>
 8000702:	2d00      	cmp	r5, #0
 8000704:	f000 80ef 	beq.w	80008e6 <__udivmoddi4+0x292>
 8000708:	2600      	movs	r6, #0
 800070a:	e9c5 0100 	strd	r0, r1, [r5]
 800070e:	4630      	mov	r0, r6
 8000710:	4631      	mov	r1, r6
 8000712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000716:	fab3 f683 	clz	r6, r3
 800071a:	2e00      	cmp	r6, #0
 800071c:	d14a      	bne.n	80007b4 <__udivmoddi4+0x160>
 800071e:	428b      	cmp	r3, r1
 8000720:	d302      	bcc.n	8000728 <__udivmoddi4+0xd4>
 8000722:	4282      	cmp	r2, r0
 8000724:	f200 80f9 	bhi.w	800091a <__udivmoddi4+0x2c6>
 8000728:	1a84      	subs	r4, r0, r2
 800072a:	eb61 0303 	sbc.w	r3, r1, r3
 800072e:	2001      	movs	r0, #1
 8000730:	469e      	mov	lr, r3
 8000732:	2d00      	cmp	r5, #0
 8000734:	d0e0      	beq.n	80006f8 <__udivmoddi4+0xa4>
 8000736:	e9c5 4e00 	strd	r4, lr, [r5]
 800073a:	e7dd      	b.n	80006f8 <__udivmoddi4+0xa4>
 800073c:	b902      	cbnz	r2, 8000740 <__udivmoddi4+0xec>
 800073e:	deff      	udf	#255	; 0xff
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	2a00      	cmp	r2, #0
 8000746:	f040 8092 	bne.w	800086e <__udivmoddi4+0x21a>
 800074a:	eba1 010c 	sub.w	r1, r1, ip
 800074e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000752:	fa1f fe8c 	uxth.w	lr, ip
 8000756:	2601      	movs	r6, #1
 8000758:	0c20      	lsrs	r0, r4, #16
 800075a:	fbb1 f3f7 	udiv	r3, r1, r7
 800075e:	fb07 1113 	mls	r1, r7, r3, r1
 8000762:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000766:	fb0e f003 	mul.w	r0, lr, r3
 800076a:	4288      	cmp	r0, r1
 800076c:	d908      	bls.n	8000780 <__udivmoddi4+0x12c>
 800076e:	eb1c 0101 	adds.w	r1, ip, r1
 8000772:	f103 38ff 	add.w	r8, r3, #4294967295
 8000776:	d202      	bcs.n	800077e <__udivmoddi4+0x12a>
 8000778:	4288      	cmp	r0, r1
 800077a:	f200 80cb 	bhi.w	8000914 <__udivmoddi4+0x2c0>
 800077e:	4643      	mov	r3, r8
 8000780:	1a09      	subs	r1, r1, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	fbb1 f0f7 	udiv	r0, r1, r7
 8000788:	fb07 1110 	mls	r1, r7, r0, r1
 800078c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000790:	fb0e fe00 	mul.w	lr, lr, r0
 8000794:	45a6      	cmp	lr, r4
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x156>
 8000798:	eb1c 0404 	adds.w	r4, ip, r4
 800079c:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a0:	d202      	bcs.n	80007a8 <__udivmoddi4+0x154>
 80007a2:	45a6      	cmp	lr, r4
 80007a4:	f200 80bb 	bhi.w	800091e <__udivmoddi4+0x2ca>
 80007a8:	4608      	mov	r0, r1
 80007aa:	eba4 040e 	sub.w	r4, r4, lr
 80007ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b2:	e79c      	b.n	80006ee <__udivmoddi4+0x9a>
 80007b4:	f1c6 0720 	rsb	r7, r6, #32
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80007be:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c2:	fa20 f407 	lsr.w	r4, r0, r7
 80007c6:	fa01 f306 	lsl.w	r3, r1, r6
 80007ca:	431c      	orrs	r4, r3
 80007cc:	40f9      	lsrs	r1, r7
 80007ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d2:	fa00 f306 	lsl.w	r3, r0, r6
 80007d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80007da:	0c20      	lsrs	r0, r4, #16
 80007dc:	fa1f fe8c 	uxth.w	lr, ip
 80007e0:	fb09 1118 	mls	r1, r9, r8, r1
 80007e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e8:	fb08 f00e 	mul.w	r0, r8, lr
 80007ec:	4288      	cmp	r0, r1
 80007ee:	fa02 f206 	lsl.w	r2, r2, r6
 80007f2:	d90b      	bls.n	800080c <__udivmoddi4+0x1b8>
 80007f4:	eb1c 0101 	adds.w	r1, ip, r1
 80007f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80007fc:	f080 8088 	bcs.w	8000910 <__udivmoddi4+0x2bc>
 8000800:	4288      	cmp	r0, r1
 8000802:	f240 8085 	bls.w	8000910 <__udivmoddi4+0x2bc>
 8000806:	f1a8 0802 	sub.w	r8, r8, #2
 800080a:	4461      	add	r1, ip
 800080c:	1a09      	subs	r1, r1, r0
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb1 f0f9 	udiv	r0, r1, r9
 8000814:	fb09 1110 	mls	r1, r9, r0, r1
 8000818:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800081c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000820:	458e      	cmp	lr, r1
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x1e2>
 8000824:	eb1c 0101 	adds.w	r1, ip, r1
 8000828:	f100 34ff 	add.w	r4, r0, #4294967295
 800082c:	d26c      	bcs.n	8000908 <__udivmoddi4+0x2b4>
 800082e:	458e      	cmp	lr, r1
 8000830:	d96a      	bls.n	8000908 <__udivmoddi4+0x2b4>
 8000832:	3802      	subs	r0, #2
 8000834:	4461      	add	r1, ip
 8000836:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083a:	fba0 9402 	umull	r9, r4, r0, r2
 800083e:	eba1 010e 	sub.w	r1, r1, lr
 8000842:	42a1      	cmp	r1, r4
 8000844:	46c8      	mov	r8, r9
 8000846:	46a6      	mov	lr, r4
 8000848:	d356      	bcc.n	80008f8 <__udivmoddi4+0x2a4>
 800084a:	d053      	beq.n	80008f4 <__udivmoddi4+0x2a0>
 800084c:	b15d      	cbz	r5, 8000866 <__udivmoddi4+0x212>
 800084e:	ebb3 0208 	subs.w	r2, r3, r8
 8000852:	eb61 010e 	sbc.w	r1, r1, lr
 8000856:	fa01 f707 	lsl.w	r7, r1, r7
 800085a:	fa22 f306 	lsr.w	r3, r2, r6
 800085e:	40f1      	lsrs	r1, r6
 8000860:	431f      	orrs	r7, r3
 8000862:	e9c5 7100 	strd	r7, r1, [r5]
 8000866:	2600      	movs	r6, #0
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	40d8      	lsrs	r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa21 f303 	lsr.w	r3, r1, r3
 800087c:	4091      	lsls	r1, r2
 800087e:	4301      	orrs	r1, r0
 8000880:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000884:	fa1f fe8c 	uxth.w	lr, ip
 8000888:	fbb3 f0f7 	udiv	r0, r3, r7
 800088c:	fb07 3610 	mls	r6, r7, r0, r3
 8000890:	0c0b      	lsrs	r3, r1, #16
 8000892:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000896:	fb00 f60e 	mul.w	r6, r0, lr
 800089a:	429e      	cmp	r6, r3
 800089c:	fa04 f402 	lsl.w	r4, r4, r2
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x260>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80008aa:	d22f      	bcs.n	800090c <__udivmoddi4+0x2b8>
 80008ac:	429e      	cmp	r6, r3
 80008ae:	d92d      	bls.n	800090c <__udivmoddi4+0x2b8>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1b9b      	subs	r3, r3, r6
 80008b6:	b289      	uxth	r1, r1
 80008b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80008bc:	fb07 3316 	mls	r3, r7, r6, r3
 80008c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c4:	fb06 f30e 	mul.w	r3, r6, lr
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x28a>
 80008cc:	eb1c 0101 	adds.w	r1, ip, r1
 80008d0:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d4:	d216      	bcs.n	8000904 <__udivmoddi4+0x2b0>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d914      	bls.n	8000904 <__udivmoddi4+0x2b0>
 80008da:	3e02      	subs	r6, #2
 80008dc:	4461      	add	r1, ip
 80008de:	1ac9      	subs	r1, r1, r3
 80008e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e4:	e738      	b.n	8000758 <__udivmoddi4+0x104>
 80008e6:	462e      	mov	r6, r5
 80008e8:	4628      	mov	r0, r5
 80008ea:	e705      	b.n	80006f8 <__udivmoddi4+0xa4>
 80008ec:	4606      	mov	r6, r0
 80008ee:	e6e3      	b.n	80006b8 <__udivmoddi4+0x64>
 80008f0:	4618      	mov	r0, r3
 80008f2:	e6f8      	b.n	80006e6 <__udivmoddi4+0x92>
 80008f4:	454b      	cmp	r3, r9
 80008f6:	d2a9      	bcs.n	800084c <__udivmoddi4+0x1f8>
 80008f8:	ebb9 0802 	subs.w	r8, r9, r2
 80008fc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000900:	3801      	subs	r0, #1
 8000902:	e7a3      	b.n	800084c <__udivmoddi4+0x1f8>
 8000904:	4646      	mov	r6, r8
 8000906:	e7ea      	b.n	80008de <__udivmoddi4+0x28a>
 8000908:	4620      	mov	r0, r4
 800090a:	e794      	b.n	8000836 <__udivmoddi4+0x1e2>
 800090c:	4640      	mov	r0, r8
 800090e:	e7d1      	b.n	80008b4 <__udivmoddi4+0x260>
 8000910:	46d0      	mov	r8, sl
 8000912:	e77b      	b.n	800080c <__udivmoddi4+0x1b8>
 8000914:	3b02      	subs	r3, #2
 8000916:	4461      	add	r1, ip
 8000918:	e732      	b.n	8000780 <__udivmoddi4+0x12c>
 800091a:	4630      	mov	r0, r6
 800091c:	e709      	b.n	8000732 <__udivmoddi4+0xde>
 800091e:	4464      	add	r4, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e742      	b.n	80007aa <__udivmoddi4+0x156>

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <SystemInit+0xfc>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <SystemInit+0xfc>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800093c:	4b39      	ldr	r3, [pc, #228]	; (8000a24 <SystemInit+0xfc>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <SystemInit+0xfc>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000948:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <SystemInit+0x100>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <SystemInit+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <SystemInit+0x100>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000964:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <SystemInit+0x104>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <SystemInit+0x104>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <SystemInit+0x104>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <SystemInit+0x104>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	492c      	ldr	r1, [pc, #176]	; (8000a2c <SystemInit+0x104>)
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <SystemInit+0x108>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <SystemInit+0x100>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <SystemInit+0x100>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <SystemInit+0x100>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <SystemInit+0x104>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <SystemInit+0x104>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemInit+0x104>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <SystemInit+0x104>)
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <SystemInit+0x10c>)
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <SystemInit+0x104>)
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <SystemInit+0x110>)
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <SystemInit+0x104>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <SystemInit+0x114>)
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SystemInit+0x104>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SystemInit+0x104>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <SystemInit+0x114>)
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <SystemInit+0x104>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SystemInit+0x104>)
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <SystemInit+0x114>)
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <SystemInit+0x104>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemInit+0x104>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <SystemInit+0x104>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <SystemInit+0x104>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0x118>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <SystemInit+0x118>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <SystemInit+0x11c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <SystemInit+0x120>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a0a:	d202      	bcs.n	8000a12 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x124>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <SystemInit+0x128>)
 8000a14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a18:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	52002000 	.word	0x52002000
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a34:	02020200 	.word	0x02020200
 8000a38:	01ff0000 	.word	0x01ff0000
 8000a3c:	01010280 	.word	0x01010280
 8000a40:	580000c0 	.word	0x580000c0
 8000a44:	5c001000 	.word	0x5c001000
 8000a48:	ffff0000 	.word	0xffff0000
 8000a4c:	51008108 	.word	0x51008108
 8000a50:	52004000 	.word	0x52004000

08000a54 <reverse_bit>:
#include <complex.h>
#include <math.h>

typedef float complex cplx;

int reverse_bit(int n, int length){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    int reverse = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < length; i++){
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	e00c      	b.n	8000a82 <reverse_bit+0x2e>
        reverse = (reverse << 1) | (n & 1);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	005a      	lsls	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
        n = n >> 1;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	105b      	asrs	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < length; i++){
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbee      	blt.n	8000a68 <reverse_bit+0x14>
    }
    return reverse;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <fft>:

void fft(float *arr, int size, cplx *xFFT){
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b09d      	sub	sp, #116	; 0x74
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
    int num_bit = log2(size);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	eeb0 0b47 	vmov.f64	d0, d7
 8000ab2:	f00b f8f9 	bl	800bca8 <log>
 8000ab6:	eeb0 6b40 	vmov.f64	d6, d0
 8000aba:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8000d08 <fft+0x270>
 8000abe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ac2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ac6:	ee17 3a90 	vmov	r3, s15
 8000aca:	657b      	str	r3, [r7, #84]	; 0x54
    for(int i = 0; i < size; i++){
 8000acc:	2300      	movs	r3, #0
 8000ace:	667b      	str	r3, [r7, #100]	; 0x64
 8000ad0:	e013      	b.n	8000afa <fft+0x62>
        xFFT[reverse_bit(i, num_bit)] =  arr[i];
 8000ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000ade:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000ae0:	f7ff ffb8 	bl	8000a54 <reverse_bit>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	601c      	str	r4, [r3, #0]
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < size; i++){
 8000af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af6:	3301      	adds	r3, #1
 8000af8:	667b      	str	r3, [r7, #100]	; 0x64
 8000afa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbe7      	blt.n	8000ad2 <fft+0x3a>
    }

    int q = round(log(size)/log(2));
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b10:	f00b f8ca 	bl	800bca8 <log>
 8000b14:	eeb0 6b40 	vmov.f64	d6, d0
 8000b18:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8000d08 <fft+0x270>
 8000b1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b20:	eeb0 0b47 	vmov.f64	d0, d7
 8000b24:	f00b fcfc 	bl	800c520 <round>
 8000b28:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b30:	ee17 3a90 	vmov	r3, s15
 8000b34:	653b      	str	r3, [r7, #80]	; 0x50
    for(int s = 1; s < q+1; s++){
 8000b36:	2301      	movs	r3, #1
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
 8000b3a:	e0d9      	b.n	8000cf0 <fft+0x258>
        int m = pow(2,s);
 8000b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b46:	eeb0 1b47 	vmov.f64	d1, d7
 8000b4a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8000b4e:	f00b fa47 	bl	800bfe0 <pow>
 8000b52:	eeb0 7b40 	vmov.f64	d7, d0
 8000b56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b5a:	ee17 3a90 	vmov	r3, s15
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        int m2 = m/2;
 8000b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da00      	bge.n	8000b68 <fft+0xd0>
 8000b66:	3301      	adds	r3, #1
 8000b68:	105b      	asrs	r3, r3, #1
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
        cplx w = 1;
 8000b6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
 8000b72:	f04f 0300 	mov.w	r3, #0
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
        cplx wm = cexp(I*(M_PI/m2));
 8000b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b82:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000d10 <fft+0x278>
 8000b86:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b8a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8000d18 <fft+0x280>
 8000b8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b92:	ec51 0b16 	vmov	r0, r1, d6
 8000b96:	ec53 2b17 	vmov	r2, r3, d7
 8000b9a:	ec41 0b16 	vmov	d6, r0, r1
 8000b9e:	ec43 2b17 	vmov	d7, r2, r3
 8000ba2:	eeb0 0b46 	vmov.f64	d0, d6
 8000ba6:	eeb0 1b47 	vmov.f64	d1, d7
 8000baa:	f00a ff6d 	bl	800ba88 <cexp>
 8000bae:	eeb0 6b40 	vmov.f64	d6, d0
 8000bb2:	eeb0 7b41 	vmov.f64	d7, d1
 8000bb6:	eef7 6bc6 	vcvt.f32.f64	s13, d6
 8000bba:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 8000bbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8000bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bca:	63ba      	str	r2, [r7, #56]	; 0x38
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(int j = 1; j < m2+1; j++){
 8000bce:	2301      	movs	r3, #1
 8000bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000bde:	e07f      	b.n	8000ce0 <fft+0x248>
            for(int k = j; k < size+1; k+=m){
 8000be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000be2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000be4:	e063      	b.n	8000cae <fft+0x216>
                cplx t = w * xFFT[k+m2-1];
 8000be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bea:	4413      	add	r3, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c02:	eef0 1a47 	vmov.f32	s3, s14
 8000c06:	eeb0 1a67 	vmov.f32	s2, s15
 8000c0a:	edd7 0a08 	vldr	s1, [r7, #32]
 8000c0e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000c12:	f7ff fbd5 	bl	80003c0 <__mulsc3>
 8000c16:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 8000c1a:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c24:	61bb      	str	r3, [r7, #24]
                cplx u = xFFT[k-1];
 8000c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	617a      	str	r2, [r7, #20]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	62ba      	str	r2, [r7, #40]	; 0x28
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
                xFFT[k-1] = u + t;
 8000c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c46:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c5e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000c62:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c6a:	ed83 7a00 	vstr	s14, [r3]
 8000c6e:	edc3 7a01 	vstr	s15, [r3, #4]
                xFFT[k+m2-1] = u - t;
 8000c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c76:	4413      	add	r3, r2
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c92:	edd7 6a04 	vldr	s13, [r7, #16]
 8000c96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c9e:	ed83 7a00 	vstr	s14, [r3]
 8000ca2:	edc3 7a01 	vstr	s15, [r3, #4]
            for(int k = j; k < size+1; k+=m){
 8000ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000caa:	4413      	add	r3, r2
 8000cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	da97      	bge.n	8000be6 <fft+0x14e>
            }
            w = w * wm;
 8000cb6:	edd7 1a1a 	vldr	s3, [r7, #104]	; 0x68
 8000cba:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 8000cbe:	edd7 0a08 	vldr	s1, [r7, #32]
 8000cc2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000cc6:	f7ff fb7b 	bl	80003c0 <__mulsc3>
 8000cca:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8000cce:	edc7 0a11 	vstr	s1, [r7, #68]	; 0x44
 8000cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd8:	623b      	str	r3, [r7, #32]
        for(int j = 1; j < m2+1; j++){
 8000cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cdc:	3301      	adds	r3, #1
 8000cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f6bf af7b 	bge.w	8000be0 <fft+0x148>
    for(int s = 1; s < q+1; s++){
 8000cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cec:	3301      	adds	r3, #1
 8000cee:	663b      	str	r3, [r7, #96]	; 0x60
 8000cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f6bf af21 	bge.w	8000b3c <fft+0xa4>
        }

    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3774      	adds	r7, #116	; 0x74
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	f3af 8000 	nop.w
 8000d08:	fefa39ef 	.word	0xfefa39ef
 8000d0c:	3fe62e42 	.word	0x3fe62e42
 8000d10:	54442d18 	.word	0x54442d18
 8000d14:	400921fb 	.word	0x400921fb
	...

08000d20 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f023 030f 	bic.w	r3, r3, #15
 8000d30:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f043 030c 	orr.w	r3, r3, #12
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	f043 030c 	orr.w	r3, r3, #12
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d60:	f107 0208 	add.w	r2, r7, #8
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2304      	movs	r3, #4
 8000d6a:	214e      	movs	r1, #78	; 0x4e
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <lcd_send_cmd+0x5c>)
 8000d6e:	f002 ff0d 	bl	8003b8c <HAL_I2C_Master_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	240002ac 	.word	0x240002ac

08000d80 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f023 030f 	bic.w	r3, r3, #15
 8000d90:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f043 030d 	orr.w	r3, r3, #13
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	f043 0309 	orr.w	r3, r3, #9
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	f043 030d 	orr.w	r3, r3, #13
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	f043 0309 	orr.w	r3, r3, #9
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dc0:	f107 0208 	add.w	r2, r7, #8
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2304      	movs	r3, #4
 8000dca:	214e      	movs	r1, #78	; 0x4e
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <lcd_send_data+0x5c>)
 8000dce:	f002 fedd 	bl	8003b8c <HAL_I2C_Master_Transmit>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	240002ac 	.word	0x240002ac

08000de0 <lcd_clear>:

void lcd_clear (void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000de6:	2080      	movs	r0, #128	; 0x80
 8000de8:	f7ff ff9a 	bl	8000d20 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	e005      	b.n	8000dfe <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000df2:	2020      	movs	r0, #32
 8000df4:	f7ff ffc4 	bl	8000d80 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b45      	cmp	r3, #69	; 0x45
 8000e02:	ddf6      	ble.n	8000df2 <lcd_clear+0x12>
	}
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <lcd_put_cur+0x18>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d005      	beq.n	8000e30 <lcd_put_cur+0x22>
 8000e24:	e009      	b.n	8000e3a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	603b      	str	r3, [r7, #0]
            break;
 8000e2e:	e004      	b.n	8000e3a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e36:	603b      	str	r3, [r7, #0]
            break;
 8000e38:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff6e 	bl	8000d20 <lcd_send_cmd>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <lcd_init>:


void lcd_init (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e50:	2032      	movs	r0, #50	; 0x32
 8000e52:	f001 f8c5 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e56:	2030      	movs	r0, #48	; 0x30
 8000e58:	f7ff ff62 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e5c:	2005      	movs	r0, #5
 8000e5e:	f001 f8bf 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e62:	2030      	movs	r0, #48	; 0x30
 8000e64:	f7ff ff5c 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f001 f8b9 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e6e:	2030      	movs	r0, #48	; 0x30
 8000e70:	f7ff ff56 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(10);
 8000e74:	200a      	movs	r0, #10
 8000e76:	f001 f8b3 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e7a:	2020      	movs	r0, #32
 8000e7c:	f7ff ff50 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(10);
 8000e80:	200a      	movs	r0, #10
 8000e82:	f001 f8ad 	bl	8001fe0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e86:	2028      	movs	r0, #40	; 0x28
 8000e88:	f7ff ff4a 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f001 f8a7 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e92:	2008      	movs	r0, #8
 8000e94:	f7ff ff44 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f001 f8a1 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff ff3e 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f001 f89b 	bl	8001fe0 <HAL_Delay>
	HAL_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f001 f898 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000eb0:	2006      	movs	r0, #6
 8000eb2:	f7ff ff35 	bl	8000d20 <lcd_send_cmd>
	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 f892 	bl	8001fe0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	f7ff ff2f 	bl	8000d20 <lcd_send_cmd>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ece:	e006      	b.n	8000ede <lcd_send_string+0x18>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff51 	bl	8000d80 <lcd_send_data>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f4      	bne.n	8000ed0 <lcd_send_string+0xa>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efa:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000efc:	bf00      	nop
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <main+0xd4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <main+0x24>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcf4      	bgt.n	8000efe <main+0xe>
  if ( timeout < 0 )
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da01      	bge.n	8000f1e <main+0x2e>
  {
  Error_Handler();
 8000f1a:	f000 fc1d 	bl	8001758 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 ffcd 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f859 	bl	8000fd8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <main+0xd4>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <main+0xd4>)
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <main+0xd4>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f002 fd3f 	bl	80039c8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f002 fd55 	bl	80039fc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f56:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f58:	bf00      	nop
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <main+0xd4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <main+0x80>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dcf4      	bgt.n	8000f5a <main+0x6a>
if ( timeout < 0 )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da01      	bge.n	8000f7a <main+0x8a>
{
Error_Handler();
 8000f76:	f000 fbef 	bl	8001758 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 fa51 	bl	8001420 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f7e:	f000 f975 	bl	800126c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000f82:	f000 fa01 	bl	8001388 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000f86:	f000 f8a3 	bl	80010d0 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000f8a:	f000 f9af 	bl	80012ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  print_int(&huart3, "PROYECTO FINAL ROBOGOD\r\n", 0);	// Prueba de comunicación UART
 8000f8e:	2200      	movs	r2, #0
 8000f90:	490d      	ldr	r1, [pc, #52]	; (8000fc8 <main+0xd8>)
 8000f92:	480e      	ldr	r0, [pc, #56]	; (8000fcc <main+0xdc>)
 8000f94:	f000 ff38 	bl	8001e08 <print_int>

  lcd_init();											// Inicialización del LCD
 8000f98:	f7ff ff58 	bl	8000e4c <lcd_init>
  lcd_clear();											// Limpieza de la memoria del LCD
 8000f9c:	f7ff ff20 	bl	8000de0 <lcd_clear>

  MPU6050_status(&hi2c2); 								// Revisión de conexión del MPU6050
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <main+0xe0>)
 8000fa2:	f000 fbdf 	bl	8001764 <MPU6050_status>
  MPU6050_init(&hi2c2);									// Inicialización del MPU6050
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <main+0xe0>)
 8000fa8:	f000 fbf8 	bl	800179c <MPU6050_init>

  // Interrupciones para el semáforo
  HAL_NVIC_SetPriority(HSEM1_IRQn, 10, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	210a      	movs	r1, #10
 8000fb0:	207d      	movs	r0, #125	; 0x7d
 8000fb2:	f001 f920 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000fb6:	207d      	movs	r0, #125	; 0x7d
 8000fb8:	f001 f937 	bl	800222a <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start_IT(&htim2);						// Inicialización del timer 2 (interrupción 128 Hz)
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <main+0xe4>)
 8000fbe:	f006 f921 	bl	8007204 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <main+0xd2>
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	0800d1b8 	.word	0x0800d1b8
 8000fcc:	24000344 	.word	0x24000344
 8000fd0:	240002ac 	.word	0x240002ac
 8000fd4:	240002f8 	.word	0x240002f8

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09c      	sub	sp, #112	; 0x70
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	224c      	movs	r2, #76	; 0x4c
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 ff14 	bl	8008e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2220      	movs	r2, #32
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f007 ff0e 	bl	8008e14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f003 fd2f 	bl	8004a5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <SystemClock_Config+0xf0>)
 8001004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <SystemClock_Config+0xf0>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <SystemClock_Config+0xf0>)
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <SystemClock_Config+0xf4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <SystemClock_Config+0xf4>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <SystemClock_Config+0xf4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001034:	bf00      	nop
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <SystemClock_Config+0xf4>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800103e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001042:	d1f8      	bne.n	8001036 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001048:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	2302      	movs	r3, #2
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800105a:	2312      	movs	r3, #18
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001062:	2303      	movs	r3, #3
 8001064:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800106a:	230c      	movs	r3, #12
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800106e:	2302      	movs	r3, #2
 8001070:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001072:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001076:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fd47 	bl	8004b10 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001088:	f000 fb66 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	233f      	movs	r3, #63	; 0x3f
 800108e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2303      	movs	r3, #3
 8001092:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 f95b 	bl	800536c <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010bc:	f000 fb4c 	bl	8001758 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3770      	adds	r7, #112	; 0x70
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58000400 	.word	0x58000400
 80010cc:	58024800 	.word	0x58024800

080010d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010d6:	4a61      	ldr	r2, [pc, #388]	; (800125c <MX_FDCAN1_Init+0x18c>)
 80010d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010da:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80010fa:	2205      	movs	r2, #5
 80010fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001100:	2208      	movs	r2, #8
 8001102:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1f;
 8001104:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001106:	221f      	movs	r2, #31
 8001108:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800110c:	2208      	movs	r2, #8
 800110e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001110:	4b51      	ldr	r3, [pc, #324]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001112:	2201      	movs	r2, #1
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001118:	2201      	movs	r2, #1
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800111e:	2201      	movs	r2, #1
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001124:	2201      	movs	r2, #1
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001130:	2201      	movs	r2, #1
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800113c:	2201      	movs	r2, #1
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001142:	2204      	movs	r2, #4
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001148:	2200      	movs	r2, #0
 800114a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800114e:	2204      	movs	r2, #4
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001154:	2200      	movs	r2, #0
 8001156:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800115a:	2204      	movs	r2, #4
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001160:	2200      	movs	r2, #0
 8001162:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001166:	2200      	movs	r2, #0
 8001168:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800116c:	2201      	movs	r2, #1
 800116e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001172:	2200      	movs	r2, #0
 8001174:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_FDCAN1_Init+0x188>)
 8001178:	2204      	movs	r2, #4
 800117a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800117c:	4836      	ldr	r0, [pc, #216]	; (8001258 <MX_FDCAN1_Init+0x188>)
 800117e:	f001 f86f 	bl	8002260 <HAL_FDCAN_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001188:	f000 fae6 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <MX_FDCAN1_Init+0x190>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <MX_FDCAN1_Init+0x190>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterIndex = 0;
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_FDCAN1_Init+0x190>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType  = FDCAN_FILTER_MASK;
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_FDCAN1_Init+0x190>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MX_FDCAN1_Init+0x190>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x321;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_FDCAN1_Init+0x190>)
 80011ac:	f240 3221 	movw	r2, #801	; 0x321
 80011b0:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_FDCAN1_Init+0x190>)
 80011b4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80011b8:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80011ba:	4929      	ldr	r1, [pc, #164]	; (8001260 <MX_FDCAN1_Init+0x190>)
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80011be:	f001 fa2d 	bl	800261c <HAL_FDCAN_ConfigFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_FDCAN1_Init+0xfc>
  {
	  /* Filter configuration Error */
	  Error_Handler();
 80011c8:	f000 fac6 	bl	8001758 <Error_Handler>
  }

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80011cc:	4822      	ldr	r0, [pc, #136]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80011ce:	f001 fa9b 	bl	8002708 <HAL_FDCAN_Start>
  {

  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80011d2:	2200      	movs	r2, #0
 80011d4:	2101      	movs	r1, #1
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_FDCAN1_Init+0x188>)
 80011d8:	f001 fc8a 	bl	8002af0 <HAL_FDCAN_ActivateNotification>

  }


  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x1BC;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_FDCAN1_Init+0x194>)
 80011de:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80011e2:	601a      	str	r2, [r3, #0]
  //0 and 0x7FF, if IdType is FDCAN_STANDARD_ID
  TxHeader1.IdType = FDCAN_EXTENDED_ID;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_FDCAN1_Init+0x194>)
 80011e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ea:	605a      	str	r2, [r3, #4]
  //Data frame = FDCAN_DATA_FRAME
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_FDCAN1_Init+0x194>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  //8 bytes data field = FDCAN_DLC_BYTES_8
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_FDCAN1_Init+0x194>)
 80011f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f8:	60da      	str	r2, [r3, #12]
  //Transmitting node is error active = FDCAN_ESI_ACTIVE
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_FDCAN1_Init+0x194>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  //FDCAN frames transmitted/received without bit rate switching = FDCAN_BRS_OFF
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_FDCAN1_Init+0x194>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  //Frame transmitted/received in Classic CAN format = FDCAN_FRAME_CLASSIC
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_FDCAN1_Init+0x194>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_FDCAN1_Init+0x194>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_FDCAN1_Init+0x194>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]

  // Configure TX Header for FDCAN1
  TxHeader2.Identifier = 0X00FEEE;
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_FDCAN1_Init+0x198>)
 800121a:	f64f 62ee 	movw	r2, #65262	; 0xfeee
 800121e:	601a      	str	r2, [r3, #0]
  //0 and 0x7FF, if IdType is FDCAN_STANDARD_ID
  TxHeader2.IdType = FDCAN_EXTENDED_ID;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_FDCAN1_Init+0x198>)
 8001222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001226:	605a      	str	r2, [r3, #4]
  //Data frame = FDCAN_DATA_FRAME
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_FDCAN1_Init+0x198>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  //8 bytes data field = FDCAN_DLC_BYTES_8
  TxHeader2.DataLength = FDCAN_DLC_BYTES_8;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_FDCAN1_Init+0x198>)
 8001230:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001234:	60da      	str	r2, [r3, #12]
  //Transmitting node is error active = FDCAN_ESI_ACTIVE
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_FDCAN1_Init+0x198>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  //FDCAN frames transmitted/received without bit rate switching = FDCAN_BRS_OFF
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_FDCAN1_Init+0x198>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  //Frame transmitted/received in Classic CAN format = FDCAN_FRAME_CLASSIC
  TxHeader2.FDFormat = FDCAN_CLASSIC_CAN;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_FDCAN1_Init+0x198>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_FDCAN1_Init+0x198>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_FDCAN1_Init+0x198>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400020c 	.word	0x2400020c
 800125c:	4000a000 	.word	0x4000a000
 8001260:	24000e70 	.word	0x24000e70
 8001264:	24000e1c 	.word	0x24000e1c
 8001268:	24000e40 	.word	0x24000e40

0800126c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_I2C2_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <MX_I2C2_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_I2C2_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_I2C2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C2_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012a8:	f002 fbe0 	bl	8003a6c <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 fa51 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012ba:	f003 fb37 	bl	800492c <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fa48 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012cc:	f003 fb79 	bl	80049c2 <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fa3f 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	240002ac 	.word	0x240002ac
 80012e4:	40005800 	.word	0x40005800
 80012e8:	00909fce 	.word	0x00909fce

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM2_Init+0x98>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM2_Init+0x98>)
 8001314:	224a      	movs	r2, #74	; 0x4a
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7813 - 1;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM2_Init+0x98>)
 8001320:	f641 6284 	movw	r2, #7812	; 0x1e84
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_TIM2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_TIM2_Init+0x98>)
 8001334:	f005 ff0e 	bl	8007154 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800133e:	f000 fa0b 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM2_Init+0x98>)
 8001350:	f006 f91e 	bl	8007590 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135a:	f000 f9fd 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_TIM2_Init+0x98>)
 800136c:	f006 fb68 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f000 f9ef 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	240002f8 	.word	0x240002f8

08001388 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_USART3_UART_Init+0x90>)
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <MX_USART3_UART_Init+0x94>)
 8001390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_USART3_UART_Init+0x90>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013d2:	f006 fbe1 	bl	8007b98 <HAL_UART_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013dc:	f000 f9bc 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013e4:	f007 fc14 	bl	8008c10 <HAL_UARTEx_SetTxFifoThreshold>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ee:	f000 f9b3 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f2:	2100      	movs	r1, #0
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <MX_USART3_UART_Init+0x90>)
 80013f6:	f007 fc49 	bl	8008c8c <HAL_UARTEx_SetRxFifoThreshold>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001400:	f000 f9aa 	bl	8001758 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_USART3_UART_Init+0x90>)
 8001406:	f007 fbca 	bl	8008b9e <HAL_UARTEx_DisableFifoMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001410:	f000 f9a2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24000344 	.word	0x24000344
 800141c:	40004800 	.word	0x40004800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <MX_GPIO_Init+0x8c>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_GPIO_Init+0x8c>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	4a10      	ldr	r2, [pc, #64]	; (80014ac <MX_GPIO_Init+0x8c>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_GPIO_Init+0x8c>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	58024400 	.word	0x58024400

080014b0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
// CAN
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_FDCAN_RxFifo0Callback+0x84>)
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80014c2:	f001 f9a7 	bl	8002814 <HAL_FDCAN_GetRxMessage>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12c      	bne.n	8001526 <HAL_FDCAN_RxFifo0Callback+0x76>
		if(RxHeader.Identifier == 0x1F9){
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_FDCAN_RxFifo0Callback+0x84>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f240 12f9 	movw	r2, #505	; 0x1f9
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d126      	bne.n	8001526 <HAL_FDCAN_RxFifo0Callback+0x76>
			uint8_t vBuffer[4];
			vBuffer[0] = RxData[0];
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014da:	f993 3000 	ldrsb.w	r3, [r3]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	733b      	strb	r3, [r7, #12]
			vBuffer[1] = RxData[1];
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
			vBuffer[2] = RxData[2];
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73bb      	strb	r3, [r7, #14]
			vBuffer[3] = RxData[3];
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_FDCAN_RxFifo0Callback+0x80>)
 80014f8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	73fb      	strb	r3, [r7, #15]

			ref = *(float *)&vBuffer;
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001508:	6013      	str	r3, [r2, #0]

			HAL_HSEM_FastTake(HSEM_ID_0);
 800150a:	2000      	movs	r0, #0
 800150c:	f002 fa5c 	bl	80039c8 <HAL_HSEM_FastTake>
			xfr_ptr->reference = ref;
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6013      	str	r3, [r2, #0]
			HAL_HSEM_Release(HSEM_ID_0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f002 fa6e 	bl	80039fc <HAL_HSEM_Release>

			fftFlag = 1;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]

		}
	}
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000010 	.word	0x24000010
 8001534:	24000df4 	.word	0x24000df4
 8001538:	2400020c 	.word	0x2400020c
 800153c:	2400000c 	.word	0x2400000c
 8001540:	38001000 	.word	0x38001000
 8001544:	24000008 	.word	0x24000008

08001548 <lcd_display>:

void lcd_display(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	lcd_clear();
 800154c:	f7ff fc48 	bl	8000de0 <lcd_clear>
	lcd_put_cur(0, 0);
 8001550:	2100      	movs	r1, #0
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fc5b 	bl	8000e0e <lcd_put_cur>
	lcd_buf_len = sprintf(lcd_buf, "Ref: %.2f psi", ref);
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <lcd_display+0xac>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001562:	ec53 2b17 	vmov	r2, r3, d7
 8001566:	4924      	ldr	r1, [pc, #144]	; (80015f8 <lcd_display+0xb0>)
 8001568:	4824      	ldr	r0, [pc, #144]	; (80015fc <lcd_display+0xb4>)
 800156a:	f008 f89f 	bl	80096ac <siprintf>
 800156e:	4603      	mov	r3, r0
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <lcd_display+0xb8>)
 8001574:	801a      	strh	r2, [r3, #0]
	lcd_send_string(lcd_buf);
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <lcd_display+0xb4>)
 8001578:	f7ff fca5 	bl	8000ec6 <lcd_send_string>
	lcd_put_cur(1, 0);
 800157c:	2100      	movs	r1, #0
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fc45 	bl	8000e0e <lcd_put_cur>
	lcd_buf_len = sprintf(lcd_buf, "Press: %.2f psi", press);
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <lcd_display+0xbc>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158e:	ec53 2b17 	vmov	r2, r3, d7
 8001592:	491d      	ldr	r1, [pc, #116]	; (8001608 <lcd_display+0xc0>)
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <lcd_display+0xb4>)
 8001596:	f008 f889 	bl	80096ac <siprintf>
 800159a:	4603      	mov	r3, r0
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <lcd_display+0xb8>)
 80015a0:	801a      	strh	r2, [r3, #0]
	lcd_send_string(lcd_buf);
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <lcd_display+0xb4>)
 80015a4:	f7ff fc8f 	bl	8000ec6 <lcd_send_string>

	press = xfr_ptr->pressure;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <lcd_display+0xc4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a15      	ldr	r2, [pc, #84]	; (8001604 <lcd_display+0xbc>)
 80015ae:	6013      	str	r3, [r2, #0]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader2, TxData2) != HAL_OK){}
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <lcd_display+0xc8>)
 80015b2:	4918      	ldr	r1, [pc, #96]	; (8001614 <lcd_display+0xcc>)
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <lcd_display+0xd0>)
 80015b6:	f001 f8d2 	bl	800275e <HAL_FDCAN_AddMessageToTxFifoQ>

	pressureBuffer = (uint8_t*)(&press);
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <lcd_display+0xd4>)
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <lcd_display+0xbc>)
 80015be:	601a      	str	r2, [r3, #0]
	TxData2[0] = pressureBuffer[0];
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <lcd_display+0xd4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f993 2000 	ldrsb.w	r2, [r3]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <lcd_display+0xc8>)
 80015ca:	701a      	strb	r2, [r3, #0]
	TxData2[1] = pressureBuffer[1];
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <lcd_display+0xd4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <lcd_display+0xc8>)
 80015d6:	705a      	strb	r2, [r3, #1]
	TxData2[2] = pressureBuffer[2];
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <lcd_display+0xd4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <lcd_display+0xc8>)
 80015e2:	709a      	strb	r2, [r3, #2]
	TxData2[3] = pressureBuffer[3];
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <lcd_display+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <lcd_display+0xc8>)
 80015ee:	70da      	strb	r2, [r3, #3]

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2400000c 	.word	0x2400000c
 80015f8:	0800d1d4 	.word	0x0800d1d4
 80015fc:	24000de0 	.word	0x24000de0
 8001600:	24000df0 	.word	0x24000df0
 8001604:	24000ddc 	.word	0x24000ddc
 8001608:	0800d1e4 	.word	0x0800d1e4
 800160c:	38001000 	.word	0x38001000
 8001610:	24000e68 	.word	0x24000e68
 8001614:	24000e40 	.word	0x24000e40
 8001618:	2400020c 	.word	0x2400020c
 800161c:	24000e64 	.word	0x24000e64

08001620 <HAL_TIM_PeriodElapsedCallback>:

// Interrupción por timer (TIM2) a 128 Hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a40      	ldr	r2, [pc, #256]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d179      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x104>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001630:	2101      	movs	r1, #1
 8001632:	483f      	ldr	r0, [pc, #252]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001634:	f002 f9ad 	bl	8003992 <HAL_GPIO_TogglePin>
		/* Si el número de muestras es cero,
		 * se guarda el tiempo transcurrido
		 * para contar el tiempo de muestreo
		 * total.
		 */
		gyr = MPU6050_read_gyro(&hi2c2);						// Lectura del giroscopio del MPU6050
 8001638:	483e      	ldr	r0, [pc, #248]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800163a:	f000 f901 	bl	8001840 <MPU6050_read_gyro>
 800163e:	4603      	mov	r3, r0
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001642:	6013      	str	r3, [r2, #0]

		// Guardado de muestras en los arreglos
		muestras_x[nm] = gyr[0];
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3c      	ldr	r2, [pc, #240]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800164a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800164e:	4610      	mov	r0, r2
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	493b      	ldr	r1, [pc, #236]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001654:	0083      	lsls	r3, r0, #2
 8001656:	440b      	add	r3, r1
 8001658:	601a      	str	r2, [r3, #0]
		muestras_y[nm] = gyr[1];
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a37      	ldr	r2, [pc, #220]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001660:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001664:	4610      	mov	r0, r2
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4936      	ldr	r1, [pc, #216]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800166a:	0083      	lsls	r3, r0, #2
 800166c:	440b      	add	r3, r1
 800166e:	601a      	str	r2, [r3, #0]
		muestras_z[nm] = gyr[2];
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001676:	f9b2 2000 	ldrsh.w	r2, [r2]
 800167a:	4610      	mov	r0, r2
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4932      	ldr	r1, [pc, #200]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001680:	0083      	lsls	r3, r0, #2
 8001682:	440b      	add	r3, r1
 8001684:	601a      	str	r2, [r3, #0]

		lcd_display();
 8001686:	f7ff ff5f 	bl	8001548 <lcd_display>
		nm++;												// Incremento del contador de muestras
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	b29b      	uxth	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b29b      	uxth	r3, r3
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800169a:	801a      	strh	r2, [r3, #0]

		if(nm == MT){
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	2b80      	cmp	r3, #128	; 0x80
 80016a4:	d13e      	bne.n	8001724 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_Base_Stop_IT(&htim2);					  	// Desactivación de la interrupción
 80016a6:	4821      	ldr	r0, [pc, #132]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80016a8:	f005 fe24 	bl	80072f4 <HAL_TIM_Base_Stop_IT>

			//print_int(&huart3, "Muestras: %u\r\n", nm);
			if(fftFlag == 1){
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d131      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0xf8>
				fft(muestras_x, sizeof(muestras_x)/sizeof(muestras_x[0]), fft_x);
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ba:	f7ff f9ed 	bl	8000a98 <fft>
				//fft(muestras_x, sizeof(muestras_y)/sizeof(muestras_y[0]), fft_y);
				//fft(muestras_x, sizeof(muestras_z)/sizeof(muestras_z[0]), fft_z);
				for (int i = 0; i < MT; i++){
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e023      	b.n	800170c <HAL_TIM_PeriodElapsedCallback+0xec>
					send_data_float(&huart3, creal(fft_x[i]));
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	481d      	ldr	r0, [pc, #116]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016e0:	f000 fbb0 	bl	8001e44 <send_data_float>
					send_data_float(&huart3, cimag(fft_x[i]));
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	4814      	ldr	r0, [pc, #80]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001702:	f000 fb9f 	bl	8001e44 <send_data_float>
				for (int i = 0; i < MT; i++){
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b7f      	cmp	r3, #127	; 0x7f
 8001710:	ddd8      	ble.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0xa4>
				}
				fftFlag = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
			}
			nm = 0;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim2);						// Reinicio de la interrupción
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001720:	f005 fd70 	bl	8007204 <HAL_TIM_Base_Start_IT>

		}
	}
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	240002f8 	.word	0x240002f8
 8001730:	58020400 	.word	0x58020400
 8001734:	240002ac 	.word	0x240002ac
 8001738:	24000dd8 	.word	0x24000dd8
 800173c:	240003d4 	.word	0x240003d4
 8001740:	240003d8 	.word	0x240003d8
 8001744:	240005d8 	.word	0x240005d8
 8001748:	240007d8 	.word	0x240007d8
 800174c:	24000008 	.word	0x24000008
 8001750:	240009d8 	.word	0x240009d8
 8001754:	24000344 	.word	0x24000344

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <MPU6050_status>:

// Lectura del MPU6050
uint8_t check, data;
float gyrF[3];

void MPU6050_status(I2C_HandleTypeDef *hi2c){
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDR, 1, 3000);
 800176c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001770:	2201      	movs	r2, #1
 8001772:	21d0      	movs	r1, #208	; 0xd0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f002 fd2b 	bl	80041d0 <HAL_I2C_IsDeviceReady>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <MPU6050_status+0x2a>
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <MPU6050_status+0x34>)
 800178a:	f002 f8e9 	bl	8003960 <HAL_GPIO_WritePin>
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58020400 	.word	0x58020400

0800179c <MPU6050_init>:

uint8_t MPU6050_init(I2C_HandleTypeDef *hi2c){
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 3000);
 80017a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	2301      	movs	r3, #1
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MPU6050_init+0x98>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2275      	movs	r2, #117	; 0x75
 80017b6:	21d0      	movs	r1, #208	; 0xd0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f002 fbef 	bl	8003f9c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80017be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c2:	f000 fc0d 	bl	8001fe0 <HAL_Delay>

	data = 0x00;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MPU6050_init+0x9c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 3000);
 80017cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MPU6050_init+0x9c>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	226b      	movs	r2, #107	; 0x6b
 80017de:	21d0      	movs	r1, #208	; 0xd0
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f002 fac7 	bl	8003d74 <HAL_I2C_Mem_Write>
	data = 0b10000011;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MPU6050_init+0x9c>)
 80017e8:	2283      	movs	r2, #131	; 0x83
 80017ea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, SMPLRT_DIV, 1, &data, 1, 3000);
 80017ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MPU6050_init+0x9c>)
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	2219      	movs	r2, #25
 80017fe:	21d0      	movs	r1, #208	; 0xd0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f002 fab7 	bl	8003d74 <HAL_I2C_Mem_Write>
	data = 0x00;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MPU6050_init+0x9c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 3000);
 800180c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MPU6050_init+0x9c>)
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	221b      	movs	r2, #27
 800181e:	21d0      	movs	r1, #208	; 0xd0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f002 faa7 	bl	8003d74 <HAL_I2C_Mem_Write>

	return check;
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <MPU6050_init+0x98>)
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	24000e90 	.word	0x24000e90
 8001838:	24000e91 	.word	0x24000e91
 800183c:	00000000 	.word	0x00000000

08001840 <MPU6050_read_gyro>:

float *MPU6050_read_gyro(I2C_HandleTypeDef *hi2c){
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af04      	add	r7, sp, #16
 8001846:	6078      	str	r0, [r7, #4]
	uint8_t read_gyro[6];

	HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, GYRO_XOUT_H, 1, read_gyro, 6, 3000);
 8001848:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2306      	movs	r3, #6
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	2243      	movs	r2, #67	; 0x43
 800185c:	21d0      	movs	r1, #208	; 0xd0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f002 fb9c 	bl	8003f9c <HAL_I2C_Mem_Read>

	gyrF[0] = ((int16_t)(read_gyro[0] << 8 | read_gyro[1]))/131.0;
 8001864:	7a3b      	ldrb	r3, [r7, #8]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7a7b      	ldrb	r3, [r7, #9]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21b      	sxth	r3, r3
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800187a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80018e8 <MPU6050_read_gyro+0xa8>
 800187e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001882:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MPU6050_read_gyro+0xb0>)
 8001888:	edc3 7a00 	vstr	s15, [r3]
	gyrF[1] = ((int16_t)(read_gyro[2] << 8 | read_gyro[3]))/131.0;
 800188c:	7abb      	ldrb	r3, [r7, #10]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018a2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80018e8 <MPU6050_read_gyro+0xa8>
 80018a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MPU6050_read_gyro+0xb0>)
 80018b0:	edc3 7a01 	vstr	s15, [r3, #4]
	gyrF[2] = ((int16_t)(read_gyro[4] << 8 | read_gyro[5]))/131.0;
 80018b4:	7b3b      	ldrb	r3, [r7, #12]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	7b7b      	ldrb	r3, [r7, #13]
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018ca:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80018e8 <MPU6050_read_gyro+0xa8>
 80018ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MPU6050_read_gyro+0xb0>)
 80018d8:	edc3 7a02 	vstr	s15, [r3, #8]

	return gyrF;
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <MPU6050_read_gyro+0xb0>)
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40606000 	.word	0x40606000
 80018f0:	24000e94 	.word	0x24000e94

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_MspInit+0x3c>)
 80018fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_MspInit+0x3c>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_MspInit+0x3c>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 10, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	210a      	movs	r1, #10
 800191c:	207d      	movs	r0, #125	; 0x7d
 800191e:	f000 fc6a 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001922:	207d      	movs	r0, #125	; 0x7d
 8001924:	f000 fc81 	bl	800222a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400

08001934 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b8      	sub	sp, #224	; 0xe0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	22bc      	movs	r2, #188	; 0xbc
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f007 fa5d 	bl	8008e14 <memset>
  if(hfdcan->Instance==FDCAN1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_FDCAN_MspInit+0xd0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d14a      	bne.n	80019fa <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001968:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800196a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800196e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4618      	mov	r0, r3
 8001976:	f004 f885 	bl	8005a84 <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001980:	f7ff feea 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 8001986:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 8001996:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_FDCAN_MspInit+0xd4>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019c0:	2303      	movs	r3, #3
 80019c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019d8:	2309      	movs	r3, #9
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019e2:	4619      	mov	r1, r3
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <HAL_FDCAN_MspInit+0xd8>)
 80019e6:	f001 fe0b 	bl	8003600 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2013      	movs	r0, #19
 80019f0:	f000 fc01 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80019f4:	2013      	movs	r0, #19
 80019f6:	f000 fc18 	bl	800222a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	37e0      	adds	r7, #224	; 0xe0
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	4000a000 	.word	0x4000a000
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58020c00 	.word	0x58020c00

08001a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0b8      	sub	sp, #224	; 0xe0
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	22bc      	movs	r2, #188	; 0xbc
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 f9ef 	bl	8008e14 <memset>
  if(hi2c->Instance==I2C2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <HAL_I2C_MspInit+0xc0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d142      	bne.n	8001ac6 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a40:	2308      	movs	r3, #8
 8001a42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 f818 	bl	8005a84 <HAL_RCCEx_PeriphCLKConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a5a:	f7ff fe7d 	bl	8001758 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	2312      	movs	r3, #18
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a96:	2304      	movs	r3, #4
 8001a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_I2C_MspInit+0xc8>)
 8001aa4:	f001 fdac 	bl	8003600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_I2C_MspInit+0xc4>)
 8001aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	37e0      	adds	r7, #224	; 0xe0
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58020400 	.word	0x58020400

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d116      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	201c      	movs	r0, #28
 8001b12:	f000 fb70 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b16:	201c      	movs	r0, #28
 8001b18:	f000 fb87 	bl	800222a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	58024400 	.word	0x58024400

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b8      	sub	sp, #224	; 0xe0
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	22bc      	movs	r2, #188	; 0xbc
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 f963 	bl	8008e14 <memset>
  if(huart->Instance==USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <HAL_UART_MspInit+0xc0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d142      	bne.n	8001bde <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 ff8c 	bl	8005a84 <HAL_RCCEx_PeriphCLKConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b72:	f7ff fdf1 	bl	8001758 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_UART_MspInit+0xc4>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_UART_MspInit+0xc8>)
 8001bda:	f001 fd11 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	37e0      	adds	r7, #224	; 0xe0
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40004800 	.word	0x40004800
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	58020c00 	.word	0x58020c00

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <MemManage_Handler+0x4>

08001c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c40:	f000 f9ae 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c4e:	f000 ffc9 	bl	8002be4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2400020c 	.word	0x2400020c

08001c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM2_IRQHandler+0x10>)
 8001c62:	f005 fb76 	bl	8007352 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	240002f8 	.word	0x240002f8

08001c70 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001c74:	f001 fed6 	bl	8003a24 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
	return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c96:	f007 f885 	bl	8008da4 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0x12>

08001cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
	}

return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf1      	blt.n	8001d0c <_write+0x12>
	}
	return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f006 ffea 	bl	8008da4 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24080000 	.word	0x24080000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	24000ea0 	.word	0x24000ea0
 8001e04:	24000ef0 	.word	0x24000ef0

08001e08 <print_int>:

typedef float complex cplx;
char uart_buf[50];
uint16_t uart_buf_len;

void print_int(UART_HandleTypeDef *huart, char *string, int var){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	uart_buf_len = sprintf(uart_buf, string, var);
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	4808      	ldr	r0, [pc, #32]	; (8001e3c <print_int+0x34>)
 8001e1a:	f007 fc47 	bl	80096ac <siprintf>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <print_int+0x38>)
 8001e24:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <print_int+0x38>)
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	2364      	movs	r3, #100	; 0x64
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <print_int+0x34>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f005 ff02 	bl	8007c38 <HAL_UART_Transmit>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000ea4 	.word	0x24000ea4
 8001e40:	24000ed6 	.word	0x24000ed6

08001e44 <send_data_float>:

void send_data(UART_HandleTypeDef *huart, uint8_t *arr, uint8_t size){
	HAL_UART_Transmit(huart, (uint8_t *)arr, size, 100);
}

void send_data_float(UART_HandleTypeDef *huart, float var){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	ed87 0a00 	vstr	s0, [r7]
	uint8_t *chptr;
	chptr = (uint8_t *)(&var);
 8001e50:	463b      	mov	r3, r7
 8001e52:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(huart, (uint8_t *)chptr, 4, 100);
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	2204      	movs	r2, #4
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f005 feec 	bl	8007c38 <HAL_UART_Transmit>
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f7fe fd5c 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f006 ff8b 	bl	8008db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7ff f829 	bl	8000ef0 <main>
  bx  lr
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ea4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ea8:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001eac:	0800f998 	.word	0x0800f998
  ldr r2, =_sbss
 8001eb0:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8001eb4:	24000eec 	.word	0x24000eec

08001eb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC3_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f000 f98c 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ec8:	f003 fc06 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_Init+0x68>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	4913      	ldr	r1, [pc, #76]	; (8001f28 <HAL_Init+0x6c>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_Init+0x68>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_Init+0x6c>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_Init+0x70>)
 8001efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_Init+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f814 	bl	8001f34 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e002      	b.n	8001f1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f16:	f7ff fced 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	58024400 	.word	0x58024400
 8001f28:	0800d240 	.word	0x0800d240
 8001f2c:	24000004 	.word	0x24000004
 8001f30:	24000000 	.word	0x24000000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_InitTick+0x60>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e021      	b.n	8001f8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_InitTick+0x64>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_InitTick+0x60>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f971 	bl	8002246 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f93b 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x68>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2400001c 	.word	0x2400001c
 8001f98:	24000000 	.word	0x24000000
 8001f9c:	24000018 	.word	0x24000018

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	2400001c 	.word	0x2400001c
 8001fc4:	24000ed8 	.word	0x24000ed8

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	24000ed8 	.word	0x24000ed8

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2400001c 	.word	0x2400001c

08002028 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetREVID+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0c1b      	lsrs	r3, r3, #16
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	5c001000 	.word	0x5c001000

08002040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <__NVIC_SetPriorityGrouping+0x40>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	4313      	orrs	r3, r2
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x40>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00
 8002084:	05fa0000 	.word	0x05fa0000

08002088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__NVIC_GetPriorityGrouping+0x18>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	f003 0307 	and.w	r3, r3, #7
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db0b      	blt.n	80020ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	f003 021f 	and.w	r2, r3, #31
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <__NVIC_EnableIRQ+0x38>)
 80020be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2001      	movs	r0, #1
 80020c6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db0a      	blt.n	800210a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <__NVIC_SetPriority+0x4c>)
 80020fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fe:	0112      	lsls	r2, r2, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	440b      	add	r3, r1
 8002104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002108:	e00a      	b.n	8002120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <__NVIC_SetPriority+0x50>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	3b04      	subs	r3, #4
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	440b      	add	r3, r1
 800211e:	761a      	strb	r2, [r3, #24]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff8e 	bl	80020e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff29 	bl	8002040 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff40 	bl	8002088 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff90 	bl	8002134 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5f 	bl	80020e0 <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff33 	bl	80020a4 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa4 	bl	800219c <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b098      	sub	sp, #96	; 0x60
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002268:	4a84      	ldr	r2, [pc, #528]	; (800247c <HAL_FDCAN_Init+0x21c>)
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4611      	mov	r1, r2
 8002270:	224c      	movs	r2, #76	; 0x4c
 8002272:	4618      	mov	r0, r3
 8002274:	f006 fdc0 	bl	8008df8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1c6      	b.n	8002610 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <HAL_FDCAN_Init+0x220>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d106      	bne.n	800229a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fb40 	bl	8001934 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0210 	bic.w	r2, r2, #16
 80022c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c4:	f7ff fe80 	bl	8001fc8 <HAL_GetTick>
 80022c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022ca:	e014      	b.n	80022f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022cc:	f7ff fe7c 	bl	8001fc8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d90d      	bls.n	80022f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e18c      	b.n	8002610 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d0e3      	beq.n	80022cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff fe58 	bl	8001fc8 <HAL_GetTick>
 8002318:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800231a:	e014      	b.n	8002346 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800231c:	f7ff fe54 	bl	8001fc8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d90d      	bls.n	8002346 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e164      	b.n	8002610 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0e3      	beq.n	800231c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0202 	orr.w	r2, r2, #2
 8002362:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7c1b      	ldrb	r3, [r3, #16]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d108      	bne.n	800237e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	619a      	str	r2, [r3, #24]
 800237c:	e007      	b.n	800238e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7c5b      	ldrb	r3, [r3, #17]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	e007      	b.n	80023b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7c9b      	ldrb	r3, [r3, #18]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	e007      	b.n	80023e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002406:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0204 	orr.w	r2, r2, #4
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	e030      	b.n	8002494 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02c      	beq.n	8002494 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d020      	beq.n	8002484 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002450:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0210 	orr.w	r2, r2, #16
 8002460:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d114      	bne.n	8002494 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	619a      	str	r2, [r3, #24]
 800247a:	e00b      	b.n	8002494 <HAL_FDCAN_Init+0x234>
 800247c:	0800d1f4 	.word	0x0800d1f4
 8002480:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	3b01      	subs	r3, #1
 800249a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c8:	d115      	bne.n	80024f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	3b01      	subs	r3, #1
 80024d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	4413      	add	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d011      	beq.n	8002546 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800252a:	f023 0107 	bic.w	r1, r3, #7
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3360      	adds	r3, #96	; 0x60
 8002536:	443b      	add	r3, r7
 8002538:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d011      	beq.n	8002572 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002556:	f023 0107 	bic.w	r1, r3, #7
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	3360      	adds	r3, #96	; 0x60
 8002562:	443b      	add	r3, r7
 8002564:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002582:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	443b      	add	r3, r7
 8002590:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002594:	011a      	lsls	r2, r3, #4
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025b0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3360      	adds	r3, #96	; 0x60
 80025bc:	443b      	add	r3, r7
 80025be:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025c2:	021a      	lsls	r2, r3, #8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_FDCAN_Init+0x3b8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d107      	bne.n	80025e8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f022 0203 	bic.w	r2, r2, #3
 80025e6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fdf9 	bl	80031f8 <FDCAN_CalcultateRamBlockAddresses>
 8002606:	4603      	mov	r3, r0
 8002608:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800260c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002610:	4618      	mov	r0, r3
 8002612:	3760      	adds	r7, #96	; 0x60
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	4000a000 	.word	0x4000a000

0800261c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800262c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <HAL_FDCAN_ConfigFilter+0x1e>
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d157      	bne.n	80026ea <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d12b      	bne.n	800269a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d10d      	bne.n	8002666 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002656:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800265c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800265e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e00e      	b.n	8002684 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002672:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800267a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e025      	b.n	80026e6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	075a      	lsls	r2, r3, #29
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	d103      	bne.n	80026b8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e006      	b.n	80026c6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	079a      	lsls	r2, r3, #30
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3304      	adds	r3, #4
 80026de:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e008      	b.n	80026fc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f0:	f043 0202 	orr.w	r2, r3, #2
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d111      	bne.n	8002740 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e008      	b.n	8002752 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d141      	bne.n	80027fa <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800277e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e038      	b.n	800280c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e026      	b.n	800280c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fe95 	bl	8003504 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e008      	b.n	800280c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002800:	f043 0208 	orr.w	r2, r3, #8
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002814:	b480      	push	{r7}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800282c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800282e:	7efb      	ldrb	r3, [r7, #27]
 8002830:	2b02      	cmp	r3, #2
 8002832:	f040 814b 	bne.w	8002acc <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d14d      	bne.n	80028d8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002844:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e13e      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e12c      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800288c:	0e1b      	lsrs	r3, r3, #24
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10b      	bne.n	80028ae <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800289e:	0fdb      	lsrs	r3, r3, #31
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a8:	d101      	bne.n	80028ae <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	69f9      	ldr	r1, [r7, #28]
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e069      	b.n	80029ac <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b41      	cmp	r3, #65	; 0x41
 80028dc:	d14d      	bne.n	800297a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0ed      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800290a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0db      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800292e:	0e1b      	lsrs	r3, r3, #24
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10b      	bne.n	8002950 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002940:	0fdb      	lsrs	r3, r3, #31
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294a:	d101      	bne.n	8002950 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	4413      	add	r3, r2
 8002962:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	69f9      	ldr	r1, [r7, #28]
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	e018      	b.n	80029ac <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d309      	bcc.n	8002998 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0a2      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e005      	b.n	80029dc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3304      	adds	r3, #4
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e1b      	lsrs	r3, r3, #24
 8002a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0fda      	lsrs	r2, r3, #31
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3304      	adds	r3, #4
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	e00a      	b.n	8002a66 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	441a      	add	r2, r3
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	3301      	adds	r3, #1
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	461a      	mov	r2, r3
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d3eb      	bcc.n	8002a50 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d105      	bne.n	8002a8a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002a88:	e01e      	b.n	8002ac8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b41      	cmp	r3, #65	; 0x41
 8002a8e:	d105      	bne.n	8002a9c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a9a:	e015      	b.n	8002ac8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b1f      	cmp	r3, #31
 8002aa0:	d808      	bhi.n	8002ab4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002ab2:	e009      	b.n	8002ac8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e008      	b.n	8002ade <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	372c      	adds	r7, #44	; 0x2c
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	0800d250 	.word	0x0800d250

08002af0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002b02:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_FDCAN_ActivateNotification+0x20>
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d155      	bne.n	8002bbc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b2e:	e014      	b.n	8002b5a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d108      	bne.n	8002b52 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0202 	orr.w	r2, r2, #2
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b50:	e003      	b.n	8002b5a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2203      	movs	r2, #3
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_FDCAN_ActivateNotification+0xec>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	6553      	str	r3, [r2, #84]	; 0x54
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	490b      	ldr	r1, [pc, #44]	; (8002be0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e008      	b.n	8002bce <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	3fcfffff 	.word	0x3fcfffff
 8002be0:	4000a800 	.word	0x4000a800

08002be4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b096      	sub	sp, #88	; 0x58
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002bec:	4b9a      	ldr	r3, [pc, #616]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	079b      	lsls	r3, r3, #30
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002bf4:	4b98      	ldr	r3, [pc, #608]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	079b      	lsls	r3, r3, #30
 8002bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c0a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c14:	4013      	ands	r3, r2
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c44:	4013      	ands	r3, r2
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c74:	4013      	ands	r3, r2
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8002caa:	4b6b      	ldr	r3, [pc, #428]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fa54 	bl	800315e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb8:	0a9b      	lsrs	r3, r3, #10
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01d      	beq.n	8002cfe <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	0a9b      	lsrs	r3, r3, #10
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d017      	beq.n	8002cfe <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cee:	651a      	str	r2, [r3, #80]	; 0x50
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002cf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa07 	bl	800310c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_FDCAN_IRQHandler+0x278>)
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d10:	4a51      	ldr	r2, [pc, #324]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	0f9b      	lsrs	r3, r3, #30
 8002d16:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9c0 	bl	80030a0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_FDCAN_IRQHandler+0x278>)
 8002d2e:	400b      	ands	r3, r1
 8002d30:	6513      	str	r3, [r2, #80]	; 0x50
 8002d32:	4a49      	ldr	r2, [pc, #292]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d36:	0f9b      	lsrs	r3, r3, #30
 8002d38:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9ba 	bl	80030b6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_FDCAN_IRQHandler+0x278>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	6513      	str	r3, [r2, #80]	; 0x50
 8002d54:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d58:	0f9b      	lsrs	r3, r3, #30
 8002d5a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002d5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fba6 	bl	80014b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_FDCAN_IRQHandler+0x278>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	6513      	str	r3, [r2, #80]	; 0x50
 8002d76:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7a:	0f9b      	lsrs	r3, r3, #30
 8002d7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002d7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f9a3 	bl	80030cc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	0adb      	lsrs	r3, r3, #11
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	0adb      	lsrs	r3, r3, #11
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da6:	651a      	str	r2, [r3, #80]	; 0x50
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f997 	bl	80030e2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db6:	0a5b      	lsrs	r3, r3, #9
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01d      	beq.n	8002dfc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de0:	4013      	ands	r3, r2
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f97d 	bl	80030f6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	0cdb      	lsrs	r3, r3, #19
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	0cdb      	lsrs	r3, r3, #19
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e1c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f97c 	bl	8003122 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <HAL_FDCAN_IRQHandler+0x274>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	e004      	b.n	8002e60 <HAL_FDCAN_IRQHandler+0x27c>
 8002e56:	bf00      	nop
 8002e58:	4000a800 	.word	0x4000a800
 8002e5c:	3fcfffff 	.word	0x3fcfffff
 8002e60:	f000 f969 	bl	8003136 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e84:	651a      	str	r2, [r3, #80]	; 0x50
 8002e86:	4b83      	ldr	r3, [pc, #524]	; (8003094 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f95c 	bl	800314a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	0c5b      	lsrs	r3, r3, #17
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	0c5b      	lsrs	r3, r3, #17
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00f      	beq.n	8002eca <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8002eb4:	4b77      	ldr	r3, [pc, #476]	; (8003094 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ec0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002ed8:	400b      	ands	r3, r1
 8002eda:	6513      	str	r3, [r2, #80]	; 0x50
 8002edc:	4a6d      	ldr	r2, [pc, #436]	; (8003094 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee0:	0f9b      	lsrs	r3, r3, #30
 8002ee2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002ee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f94d 	bl	8003186 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ef8:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	6513      	str	r3, [r2, #80]	; 0x50
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	0f9b      	lsrs	r3, r3, #30
 8002f04:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a60      	ldr	r2, [pc, #384]	; (800309c <HAL_FDCAN_IRQHandler+0x4b8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	f040 80ac 	bne.w	800307a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a4 	beq.w	800307a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	4013      	ands	r3, r2
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	4013      	ands	r3, r2
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	4013      	ands	r3, r2
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002f84:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002f9c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8e6 	bl	800319c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fdc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8e6 	bl	80031b2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01a      	beq.n	8003028 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b29b      	uxth	r3, r3
 8003008:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003014:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	6939      	ldr	r1, [r7, #16]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8d0 	bl	80031c8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8d1 	bl	80031e0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f874 	bl	8003172 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800308a:	bf00      	nop
 800308c:	3758      	adds	r7, #88	; 0x58
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	4000a800 	.word	0x4000a800
 8003098:	3fcfffff 	.word	0x3fcfffff
 800309c:	4000a000 	.word	0x4000a000

080030a0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800320e:	4ba7      	ldr	r3, [pc, #668]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003210:	4013      	ands	r3, r2
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	0091      	lsls	r1, r2, #2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	430b      	orrs	r3, r1
 800321c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003228:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4413      	add	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800324e:	4b97      	ldr	r3, [pc, #604]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	0091      	lsls	r1, r2, #2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	430b      	orrs	r3, r1
 800325c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4413      	add	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003290:	4b86      	ldr	r3, [pc, #536]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	0091      	lsls	r1, r2, #2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	041a      	lsls	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032d8:	4b74      	ldr	r3, [pc, #464]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032da:	4013      	ands	r3, r2
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	0091      	lsls	r1, r2, #2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032f2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003320:	4b62      	ldr	r3, [pc, #392]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	0091      	lsls	r1, r2, #2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4413      	add	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800334c:	4b57      	ldr	r3, [pc, #348]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	0091      	lsls	r1, r2, #2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	430b      	orrs	r3, r1
 800335a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003366:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4413      	add	r3, r2
 8003384:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800338e:	4b47      	ldr	r3, [pc, #284]	; (80034ac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003390:	4013      	ands	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	0091      	lsls	r1, r2, #2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	430b      	orrs	r3, r1
 800339c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033a8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80033c4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80033de:	4413      	add	r3, r2
 80033e0:	009a      	lsls	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d915      	bls.n	80034d4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80034a8:	e006      	b.n	80034b8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80034aa:	bf00      	nop
 80034ac:	ffff0003 	.word	0xffff0003
 80034b0:	10002b00 	.word	0x10002b00
 80034b4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2203      	movs	r2, #3
 80034cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e010      	b.n	80034f6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e005      	b.n	80034e8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3f3      	bcc.n	80034dc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003522:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800352a:	4313      	orrs	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e00a      	b.n	8003546 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003538:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800353e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003544:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003550:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003556:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800355c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3304      	adds	r3, #4
 8003586:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	3304      	adds	r3, #4
 8003592:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e020      	b.n	80035dc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3303      	adds	r3, #3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	3302      	adds	r3, #2
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	440b      	add	r3, r1
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80035b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3301      	adds	r3, #1
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	440b      	add	r3, r1
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80035c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	440a      	add	r2, r1
 80035c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80035ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	3304      	adds	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3304      	adds	r3, #4
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	4a06      	ldr	r2, [pc, #24]	; (80035fc <FDCAN_CopyMessageToRAM+0xf8>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	461a      	mov	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d3d5      	bcc.n	800359a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	3724      	adds	r7, #36	; 0x24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	0800d250 	.word	0x0800d250

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800360e:	4b89      	ldr	r3, [pc, #548]	; (8003834 <HAL_GPIO_Init+0x234>)
 8003610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003612:	e194      	b.n	800393e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8186 	beq.w	8003938 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <HAL_GPIO_Init+0x44>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d130      	bne.n	80036a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800367a:	2201      	movs	r2, #1
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 0201 	and.w	r2, r3, #1
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d017      	beq.n	80036e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d123      	bne.n	8003736 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80e0 	beq.w	8003938 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <HAL_GPIO_Init+0x238>)
 800377a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_GPIO_Init+0x238>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_GPIO_Init+0x238>)
 800378a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_GPIO_Init+0x23c>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_GPIO_Init+0x240>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d052      	beq.n	8003868 <HAL_GPIO_Init+0x268>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <HAL_GPIO_Init+0x244>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d031      	beq.n	800382e <HAL_GPIO_Init+0x22e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_GPIO_Init+0x248>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02b      	beq.n	800382a <HAL_GPIO_Init+0x22a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_GPIO_Init+0x24c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d025      	beq.n	8003826 <HAL_GPIO_Init+0x226>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_GPIO_Init+0x250>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <HAL_GPIO_Init+0x222>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_GPIO_Init+0x254>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d019      	beq.n	800381e <HAL_GPIO_Init+0x21e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <HAL_GPIO_Init+0x258>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0x21a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <HAL_GPIO_Init+0x25c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00d      	beq.n	8003816 <HAL_GPIO_Init+0x216>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <HAL_GPIO_Init+0x260>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <HAL_GPIO_Init+0x212>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_GPIO_Init+0x264>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_GPIO_Init+0x20e>
 800380a:	2309      	movs	r3, #9
 800380c:	e02d      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800380e:	230a      	movs	r3, #10
 8003810:	e02b      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003812:	2308      	movs	r3, #8
 8003814:	e029      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003816:	2307      	movs	r3, #7
 8003818:	e027      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800381a:	2306      	movs	r3, #6
 800381c:	e025      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800381e:	2305      	movs	r3, #5
 8003820:	e023      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003822:	2304      	movs	r3, #4
 8003824:	e021      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003826:	2303      	movs	r3, #3
 8003828:	e01f      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800382a:	2302      	movs	r3, #2
 800382c:	e01d      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800382e:	2301      	movs	r3, #1
 8003830:	e01b      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003832:	bf00      	nop
 8003834:	58000080 	.word	0x58000080
 8003838:	58024400 	.word	0x58024400
 800383c:	58000400 	.word	0x58000400
 8003840:	58020000 	.word	0x58020000
 8003844:	58020400 	.word	0x58020400
 8003848:	58020800 	.word	0x58020800
 800384c:	58020c00 	.word	0x58020c00
 8003850:	58021000 	.word	0x58021000
 8003854:	58021400 	.word	0x58021400
 8003858:	58021800 	.word	0x58021800
 800385c:	58021c00 	.word	0x58021c00
 8003860:	58022000 	.word	0x58022000
 8003864:	58022400 	.word	0x58022400
 8003868:	2300      	movs	r3, #0
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f002 0203 	and.w	r2, r2, #3
 8003870:	0092      	lsls	r2, r2, #2
 8003872:	4093      	lsls	r3, r2
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387a:	4938      	ldr	r1, [pc, #224]	; (800395c <HAL_GPIO_Init+0x35c>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f ae63 	bne.w	8003614 <HAL_GPIO_Init+0x14>
  }
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	3724      	adds	r7, #36	; 0x24
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	58000400 	.word	0x58000400

08003960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
 800396c:	4613      	mov	r3, r2
 800396e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800397c:	e003      	b.n	8003986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	041a      	lsls	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4013      	ands	r3, r2
 80039aa:	041a      	lsls	r2, r3, #16
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	400b      	ands	r3, r1
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	619a      	str	r2, [r3, #24]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_HSEM_FastTake+0x2c>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3320      	adds	r3, #32
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_HSEM_FastTake+0x30>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	58026400 	.word	0x58026400
 80039f8:	80000300 	.word	0x80000300

080039fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a06:	4906      	ldr	r1, [pc, #24]	; (8003a20 <HAL_HSEM_Release+0x24>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	58026400 	.word	0x58026400

08003a24 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_HSEM_IRQHandler+0x30>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_HSEM_IRQHandler+0x30>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	4906      	ldr	r1, [pc, #24]	; (8003a54 <HAL_HSEM_IRQHandler+0x30>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <HAL_HSEM_IRQHandler+0x30>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f807 	bl	8003a58 <HAL_HSEM_FreeCallback>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	58026500 	.word	0x58026500

08003a58 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd ffbc 	bl	8001a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	e006      	b.n	8003af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d104      	bne.n	8003b06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_I2C_Init+0x11c>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	02008000 	.word	0x02008000

08003b8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	f040 80da 	bne.w	8003d62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2C_Master_Transmit+0x30>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0d3      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fa00 	bl	8001fc8 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fcce 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0be      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2221      	movs	r2, #33	; 0x21
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2bff      	cmp	r3, #255	; 0xff
 8003c16:	d90e      	bls.n	8003c36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fe4a 	bl	80048c8 <I2C_TransferConfig>
 8003c34:	e06c      	b.n	8003d10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	8979      	ldrh	r1, [r7, #10]
 8003c48:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fe39 	bl	80048c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c56:	e05b      	b.n	8003d10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	6a39      	ldr	r1, [r7, #32]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fccb 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e07b      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d034      	beq.n	8003d10 <HAL_I2C_Master_Transmit+0x184>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d130      	bne.n	8003d10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fc5d 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04d      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2bff      	cmp	r3, #255	; 0xff
 8003cd0:	d90e      	bls.n	8003cf0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fded 	bl	80048c8 <I2C_TransferConfig>
 8003cee:	e00f      	b.n	8003d10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	8979      	ldrh	r1, [r7, #10]
 8003d02:	2300      	movs	r3, #0
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fddc 	bl	80048c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d19e      	bne.n	8003c58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fcaa 	bl	8004678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e01a      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2220      	movs	r2, #32
 8003d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d42:	400b      	ands	r3, r1
 8003d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	80002000 	.word	0x80002000
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f040 80f9 	bne.w	8003f8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_I2C_Mem_Write+0x34>
 8003da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0ed      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_I2C_Mem_Write+0x4e>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0e6      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dca:	f7fe f8fd 	bl	8001fc8 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2319      	movs	r3, #25
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fbcb 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0d1      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	; 0x21
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e14:	88f8      	ldrh	r0, [r7, #6]
 8003e16:	893a      	ldrh	r2, [r7, #8]
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4603      	mov	r3, r0
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fadb 	bl	80043e0 <I2C_RequestMemoryWrite>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0a9      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2bff      	cmp	r3, #255	; 0xff
 8003e44:	d90e      	bls.n	8003e64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fd33 	bl	80048c8 <I2C_TransferConfig>
 8003e62:	e00f      	b.n	8003e84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fd22 	bl	80048c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fbb5 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e07b      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d034      	beq.n	8003f3c <HAL_I2C_Mem_Write+0x1c8>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d130      	bne.n	8003f3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb47 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04d      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2bff      	cmp	r3, #255	; 0xff
 8003efc:	d90e      	bls.n	8003f1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fcd7 	bl	80048c8 <I2C_TransferConfig>
 8003f1a:	e00f      	b.n	8003f3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	8979      	ldrh	r1, [r7, #10]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fcc6 	bl	80048c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d19e      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fb94 	bl	8004678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e01a      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <HAL_I2C_Mem_Write+0x224>)
 8003f6e:	400b      	ands	r3, r1
 8003f70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	fe00e800 	.word	0xfe00e800

08003f9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	817b      	strh	r3, [r7, #10]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	813b      	strh	r3, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	f040 80fd 	bne.w	80041be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x34>
 8003fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0f1      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_I2C_Mem_Read+0x4e>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0ea      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ff2:	f7fd ffe9 	bl	8001fc8 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fab7 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0d5      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2222      	movs	r2, #34	; 0x22
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800403c:	88f8      	ldrh	r0, [r7, #6]
 800403e:	893a      	ldrh	r2, [r7, #8]
 8004040:	8979      	ldrh	r1, [r7, #10]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4603      	mov	r3, r0
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fa1b 	bl	8004488 <I2C_RequestMemoryRead>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0ad      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d90e      	bls.n	800408c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	b2da      	uxtb	r2, r3
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_I2C_Mem_Read+0x22c>)
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fc1f 	bl	80048c8 <I2C_TransferConfig>
 800408a:	e00f      	b.n	80040ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	8979      	ldrh	r1, [r7, #10]
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <HAL_I2C_Mem_Read+0x22c>)
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fc0e 	bl	80048c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	2200      	movs	r2, #0
 80040b4:	2104      	movs	r1, #4
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fa5e 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07c      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d034      	beq.n	800416c <HAL_I2C_Mem_Read+0x1d0>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d130      	bne.n	800416c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2200      	movs	r2, #0
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa2f 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e04d      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2bff      	cmp	r3, #255	; 0xff
 800412c:	d90e      	bls.n	800414c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	b2da      	uxtb	r2, r3
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	2300      	movs	r3, #0
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fbbf 	bl	80048c8 <I2C_TransferConfig>
 800414a:	e00f      	b.n	800416c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	8979      	ldrh	r1, [r7, #10]
 800415e:	2300      	movs	r3, #0
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fbae 	bl	80048c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d19a      	bne.n	80040ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa7c 	bl	8004678 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e01a      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2220      	movs	r2, #32
 8004190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_I2C_Mem_Read+0x230>)
 800419e:	400b      	ands	r3, r1
 80041a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	80002400 	.word	0x80002400
 80041cc:	fe00e800 	.word	0xfe00e800

080041d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	460b      	mov	r3, r1
 80041de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	f040 80ef 	bne.w	80043d0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	d101      	bne.n	8004206 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	e0e5      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_I2C_IsDeviceReady+0x44>
 8004210:	2302      	movs	r3, #2
 8004212:	e0de      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_I2C_IsDeviceReady+0x6e>
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_I2C_IsDeviceReady+0x20c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	e004      	b.n	8004248 <HAL_I2C_IsDeviceReady+0x78>
 800423e:	897b      	ldrh	r3, [r7, #10]
 8004240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004244:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800424e:	f7fd febb 	bl	8001fc8 <HAL_GetTick>
 8004252:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004280:	e034      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d01a      	beq.n	80042c0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fd fe9d 	bl	8001fc8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <HAL_I2C_IsDeviceReady+0xd0>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10f      	bne.n	80042c0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e088      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_I2C_IsDeviceReady+0x128>
 80042f2:	7fbb      	ldrb	r3, [r7, #30]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0c4      	beq.n	8004282 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d01a      	beq.n	800433c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	2120      	movs	r1, #32
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f931 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e058      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2220      	movs	r2, #32
 8004326:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e04a      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	2120      	movs	r1, #32
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f916 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e03d      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2210      	movs	r2, #16
 800435c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2220      	movs	r2, #32
 8004364:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d118      	bne.n	80043a0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	2120      	movs	r1, #32
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f8f5 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e01c      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	f63f af3d 	bhi.w	800422a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	02002000 	.word	0x02002000

080043e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	8979      	ldrh	r1, [r7, #10]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <I2C_RequestMemoryWrite+0xa4>)
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fa5d 	bl	80048c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8f0 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02c      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
 8004432:	e015      	b.n	8004460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8d6 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e012      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f884 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	80002000 	.word	0x80002000

08004488 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	460b      	mov	r3, r1
 800449c:	813b      	strh	r3, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	8979      	ldrh	r1, [r7, #10]
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <I2C_RequestMemoryRead+0xa4>)
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fa0a 	bl	80048c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f89d 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e02c      	b.n	8004522 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28
 80044d8:	e015      	b.n	8004506 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044da:	893b      	ldrh	r3, [r7, #8]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	69b9      	ldr	r1, [r7, #24]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f883 	bl	80045f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e012      	b.n	8004522 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044fc:	893b      	ldrh	r3, [r7, #8]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2200      	movs	r2, #0
 800450e:	2140      	movs	r1, #64	; 0x40
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f831 	bl	8004578 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	80002000 	.word	0x80002000

08004530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d103      	bne.n	800454e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d007      	beq.n	800456c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	619a      	str	r2, [r3, #24]
  }
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004588:	e022      	b.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d01e      	beq.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7fd fd19 	bl	8001fc8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d113      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e00f      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d0cd      	beq.n	800458a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004604:	e02c      	b.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f870 	bl	80046f0 <I2C_IsErrorOccurred>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e02a      	b.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d01e      	beq.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd fcd1 	bl	8001fc8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d113      	bne.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e007      	b.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d1cb      	bne.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004684:	e028      	b.n	80046d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f830 	bl	80046f0 <I2C_IsErrorOccurred>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e026      	b.n	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fd fc95 	bl	8001fc8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d113      	bne.n	80046d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d1cf      	bne.n	8004686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d075      	beq.n	8004808 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2210      	movs	r2, #16
 8004722:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004724:	e056      	b.n	80047d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d052      	beq.n	80047d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fd fc4b 	bl	8001fc8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_IsErrorOccurred+0x54>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d147      	bne.n	80047d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004756:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	d12e      	bne.n	80047c6 <I2C_IsErrorOccurred+0xd6>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476e:	d02a      	beq.n	80047c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d027      	beq.n	80047c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004784:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004786:	f7fd fc1f 	bl	8001fc8 <HAL_GetTick>
 800478a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800478c:	e01b      	b.n	80047c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800478e:	f7fd fc1b 	bl	8001fc8 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b19      	cmp	r3, #25
 800479a:	d914      	bls.n	80047c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d1dc      	bne.n	800478e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d003      	beq.n	80047ea <I2C_IsErrorOccurred+0xfa>
 80047e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d09d      	beq.n	8004726 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800482a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01c      	beq.n	80048b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fe56 	bl	8004530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <I2C_IsErrorOccurred+0x1d4>)
 8004890:	400b      	ands	r3, r1
 8004892:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	; 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	fe00e800 	.word	0xfe00e800

080048c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e0:	7a7b      	ldrb	r3, [r7, #9]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	0d5b      	lsrs	r3, r3, #21
 8004902:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <I2C_TransferConfig+0x60>)
 8004908:	430b      	orrs	r3, r1
 800490a:	43db      	mvns	r3, r3
 800490c:	ea02 0103 	and.w	r1, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	03ff63ff 	.word	0x03ff63ff

0800492c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	d138      	bne.n	80049b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800494c:	2302      	movs	r3, #2
 800494e:	e032      	b.n	80049b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800497e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d139      	bne.n	8004a4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e033      	b.n	8004a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2224      	movs	r2, #36	; 0x24
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004a64:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d00a      	beq.n	8004a86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a70:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d001      	beq.n	8004a82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e040      	b.n	8004b04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e03e      	b.n	8004b04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a86:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a8e:	491f      	ldr	r1, [pc, #124]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a96:	f7fd fa97 	bl	8001fc8 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a9c:	e009      	b.n	8004ab2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a9e:	f7fd fa93 	bl	8001fc8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aac:	d901      	bls.n	8004ab2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e028      	b.n	8004b04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d1ee      	bne.n	8004a9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b1e      	cmp	r3, #30
 8004ac4:	d008      	beq.n	8004ad8 <HAL_PWREx_ConfigSupply+0x7c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aca:	d005      	beq.n	8004ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b1d      	cmp	r3, #29
 8004ad0:	d002      	beq.n	8004ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8004ad6:	d114      	bne.n	8004b02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ad8:	f7fd fa76 	bl	8001fc8 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004ade:	e009      	b.n	8004af4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ae0:	f7fd fa72 	bl	8001fc8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aee:	d901      	bls.n	8004af4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e007      	b.n	8004b04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	58024800 	.word	0x58024800

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	; 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f000 bc1d 	b.w	800535e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8087 	beq.w	8004c40 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b32:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b3c:	4b96      	ldr	r3, [pc, #600]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d007      	beq.n	8004b58 <HAL_RCC_OscConfig+0x48>
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2b18      	cmp	r3, #24
 8004b4c:	d110      	bne.n	8004b70 <HAL_RCC_OscConfig+0x60>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d10b      	bne.n	8004b70 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	4b8f      	ldr	r3, [pc, #572]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d06c      	beq.n	8004c3e <HAL_RCC_OscConfig+0x12e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d168      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e3f6      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x78>
 8004b7a:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a86      	ldr	r2, [pc, #536]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e02e      	b.n	8004be6 <HAL_RCC_OscConfig+0xd6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x9a>
 8004b90:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b7e      	ldr	r3, [pc, #504]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e01d      	b.n	8004be6 <HAL_RCC_OscConfig+0xd6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0xbe>
 8004bb4:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a77      	ldr	r2, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a74      	ldr	r2, [pc, #464]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	e00b      	b.n	8004be6 <HAL_RCC_OscConfig+0xd6>
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a71      	ldr	r2, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b6f      	ldr	r3, [pc, #444]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6e      	ldr	r2, [pc, #440]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d013      	beq.n	8004c16 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fd f9eb 	bl	8001fc8 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bf6:	f7fd f9e7 	bl	8001fc8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	; 0x64
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e3aa      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c08:	4b63      	ldr	r3, [pc, #396]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0xe6>
 8004c14:	e014      	b.n	8004c40 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fd f9d7 	bl	8001fc8 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fd f9d3 	bl	8001fc8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e396      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCC_OscConfig+0x10e>
 8004c3c:	e000      	b.n	8004c40 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80cb 	beq.w	8004de4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4e:	4b52      	ldr	r3, [pc, #328]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c56:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c58:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_RCC_OscConfig+0x164>
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	2b18      	cmp	r3, #24
 8004c68:	d156      	bne.n	8004d18 <HAL_RCC_OscConfig+0x208>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d151      	bne.n	8004d18 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c74:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_OscConfig+0x17c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e368      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 0219 	bic.w	r2, r3, #25
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	493f      	ldr	r1, [pc, #252]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9e:	f7fd f993 	bl	8001fc8 <HAL_GetTick>
 8004ca2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fd f98f 	bl	8001fc8 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e352      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb8:	4b37      	ldr	r3, [pc, #220]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	f7fd f9b0 	bl	8002028 <HAL_GetREVID>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d817      	bhi.n	8004d02 <HAL_RCC_OscConfig+0x1f2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d108      	bne.n	8004cec <HAL_RCC_OscConfig+0x1dc>
 8004cda:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ce2:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cea:	e07b      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	4927      	ldr	r1, [pc, #156]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d00:	e070      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d02:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	4921      	ldr	r1, [pc, #132]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d16:	e065      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d048      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 0219 	bic.w	r2, r3, #25
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	491a      	ldr	r1, [pc, #104]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fd f949 	bl	8001fc8 <HAL_GetTick>
 8004d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fd f945 	bl	8001fc8 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e308      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	f7fd f966 	bl	8002028 <HAL_GetREVID>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d81a      	bhi.n	8004d9c <HAL_RCC_OscConfig+0x28c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d108      	bne.n	8004d80 <HAL_RCC_OscConfig+0x270>
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	e031      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	4902      	ldr	r1, [pc, #8]	; (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
 8004d94:	e026      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	4997      	ldr	r1, [pc, #604]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	e018      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db2:	4b95      	ldr	r3, [pc, #596]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a94      	ldr	r2, [pc, #592]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f903 	bl	8001fc8 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fd f8ff 	bl	8001fc8 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e2c2      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dd8:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a9 	beq.w	8004f44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dfc:	4b82      	ldr	r3, [pc, #520]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d007      	beq.n	8004e18 <HAL_RCC_OscConfig+0x308>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b18      	cmp	r3, #24
 8004e0c:	d13a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x374>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d135      	bne.n	8004e84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_OscConfig+0x320>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e296      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e30:	f7fd f8fa 	bl	8002028 <HAL_GetREVID>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d817      	bhi.n	8004e6e <HAL_RCC_OscConfig+0x35e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x348>
 8004e46:	4b70      	ldr	r3, [pc, #448]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e4e:	4a6e      	ldr	r2, [pc, #440]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e54:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e56:	e075      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	069b      	lsls	r3, r3, #26
 8004e66:	4968      	ldr	r1, [pc, #416]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e6c:	e06a      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e6e:	4b66      	ldr	r3, [pc, #408]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	4962      	ldr	r1, [pc, #392]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e82:	e05f      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d042      	beq.n	8004f12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e8c:	4b5e      	ldr	r3, [pc, #376]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5d      	ldr	r2, [pc, #372]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd f896 	bl	8001fc8 <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004ea0:	f7fd f892 	bl	8001fc8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e255      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eb2:	4b55      	ldr	r3, [pc, #340]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ebe:	f7fd f8b3 	bl	8002028 <HAL_GetREVID>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d817      	bhi.n	8004efc <HAL_RCC_OscConfig+0x3ec>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d108      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3d6>
 8004ed4:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004edc:	4a4a      	ldr	r2, [pc, #296]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ee2:	6053      	str	r3, [r2, #4]
 8004ee4:	e02e      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
 8004ee6:	4b48      	ldr	r3, [pc, #288]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	069b      	lsls	r3, r3, #26
 8004ef4:	4944      	ldr	r1, [pc, #272]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
 8004efa:	e023      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
 8004efc:	4b42      	ldr	r3, [pc, #264]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	493f      	ldr	r1, [pc, #252]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
 8004f10:	e018      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3c      	ldr	r2, [pc, #240]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fd f853 	bl	8001fc8 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f26:	f7fd f84f 	bl	8001fc8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e212      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f38:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d036      	beq.n	8004fbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fd f830 	bl	8001fc8 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7fd f82c 	bl	8001fc8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1ef      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f7e:	4b22      	ldr	r3, [pc, #136]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x45c>
 8004f8a:	e018      	b.n	8004fbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fd f816 	bl	8001fc8 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7fd f812 	bl	8001fc8 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1d5      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d039      	beq.n	800503e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01c      	beq.n	800500c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fde:	f7fc fff3 	bl	8001fc8 <HAL_GetTick>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004fe6:	f7fc ffef 	bl	8001fc8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1b2      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4d6>
 8005004:	e01b      	b.n	800503e <HAL_RCC_OscConfig+0x52e>
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800500c:	4b9b      	ldr	r3, [pc, #620]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a9a      	ldr	r2, [pc, #616]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005018:	f7fc ffd6 	bl	8001fc8 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005020:	f7fc ffd2 	bl	8001fc8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e195      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005032:	4b92      	ldr	r3, [pc, #584]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8081 	beq.w	800514e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800504c:	4b8c      	ldr	r3, [pc, #560]	; (8005280 <HAL_RCC_OscConfig+0x770>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a8b      	ldr	r2, [pc, #556]	; (8005280 <HAL_RCC_OscConfig+0x770>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005058:	f7fc ffb6 	bl	8001fc8 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fc ffb2 	bl	8001fc8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e175      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005072:	4b83      	ldr	r3, [pc, #524]	; (8005280 <HAL_RCC_OscConfig+0x770>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d106      	bne.n	8005094 <HAL_RCC_OscConfig+0x584>
 8005086:	4b7d      	ldr	r3, [pc, #500]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
 8005092:	e02d      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x5a6>
 800509c:	4b77      	ldr	r3, [pc, #476]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a76      	ldr	r2, [pc, #472]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	4b74      	ldr	r3, [pc, #464]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a73      	ldr	r2, [pc, #460]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	e01c      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5c8>
 80050be:	4b6f      	ldr	r3, [pc, #444]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a6e      	ldr	r2, [pc, #440]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f043 0304 	orr.w	r3, r3, #4
 80050c8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ca:	4b6c      	ldr	r3, [pc, #432]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a6b      	ldr	r2, [pc, #428]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 80050d8:	4b68      	ldr	r3, [pc, #416]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a67      	ldr	r2, [pc, #412]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b65      	ldr	r3, [pc, #404]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a64      	ldr	r2, [pc, #400]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fc ff66 	bl	8001fc8 <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fc ff62 	bl	8001fc8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e123      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005116:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ee      	beq.n	8005100 <HAL_RCC_OscConfig+0x5f0>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc ff50 	bl	8001fc8 <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fc ff4c 	bl	8001fc8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e10d      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005142:	4b4e      	ldr	r3, [pc, #312]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8102 	beq.w	800535c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005158:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005160:	2b18      	cmp	r3, #24
 8005162:	f000 80bd 	beq.w	80052e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b02      	cmp	r3, #2
 800516c:	f040 809e 	bne.w	80052ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a41      	ldr	r2, [pc, #260]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800517a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fc ff24 	bl	8001fc8 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005184:	f7fc ff20 	bl	8001fc8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0e3      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	4b37      	ldr	r3, [pc, #220]	; (8005284 <HAL_RCC_OscConfig+0x774>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	430a      	orrs	r2, r1
 80051b6:	4931      	ldr	r1, [pc, #196]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	; 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051ec:	4923      	ldr	r1, [pc, #140]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80051f2:	4b22      	ldr	r3, [pc, #136]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	4a21      	ldr	r2, [pc, #132]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800520a:	00d2      	lsls	r2, r2, #3
 800520c:	491b      	ldr	r1, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f023 020c 	bic.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	4917      	ldr	r1, [pc, #92]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f023 0202 	bic.w	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	4912      	ldr	r1, [pc, #72]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a10      	ldr	r2, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005240:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a04      	ldr	r2, [pc, #16]	; (800527c <HAL_RCC_OscConfig+0x76c>)
 800526c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fc fea9 	bl	8001fc8 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005278:	e011      	b.n	800529e <HAL_RCC_OscConfig+0x78e>
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	58024800 	.word	0x58024800
 8005284:	fffffc0c 	.word	0xfffffc0c
 8005288:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc fe9c 	bl	8001fc8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e05f      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800529e:	4b32      	ldr	r3, [pc, #200]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x77c>
 80052aa:	e057      	b.n	800535c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fc fe86 	bl	8001fc8 <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fc fe82 	bl	8001fc8 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e045      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x7b0>
 80052de:	e03d      	b.n	800535c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052e0:	4b21      	ldr	r3, [pc, #132]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_RCC_OscConfig+0x858>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d031      	beq.n	8005358 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d12a      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d122      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11a      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0a5b      	lsrs	r3, r3, #9
 8005326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d111      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d108      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3730      	adds	r7, #48	; 0x30
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400

0800536c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e19c      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005380:	4b8a      	ldr	r3, [pc, #552]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d910      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b87      	ldr	r3, [pc, #540]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 020f 	bic.w	r2, r3, #15
 8005396:	4985      	ldr	r1, [pc, #532]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b83      	ldr	r3, [pc, #524]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e184      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d010      	beq.n	80053de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	4b7b      	ldr	r3, [pc, #492]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d908      	bls.n	80053de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053cc:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	4975      	ldr	r1, [pc, #468]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d908      	bls.n	800540c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053fa:	4b6d      	ldr	r3, [pc, #436]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	496a      	ldr	r1, [pc, #424]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005408:	4313      	orrs	r3, r2
 800540a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	4b64      	ldr	r3, [pc, #400]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005424:	429a      	cmp	r2, r3
 8005426:	d908      	bls.n	800543a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005428:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	495e      	ldr	r1, [pc, #376]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005436:	4313      	orrs	r3, r2
 8005438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005452:	429a      	cmp	r2, r3
 8005454:	d908      	bls.n	8005468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005456:	4b56      	ldr	r3, [pc, #344]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	4953      	ldr	r1, [pc, #332]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005464:	4313      	orrs	r3, r2
 8005466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	429a      	cmp	r2, r3
 8005482:	d908      	bls.n	8005496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f023 020f 	bic.w	r2, r3, #15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4947      	ldr	r1, [pc, #284]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005492:	4313      	orrs	r3, r2
 8005494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d055      	beq.n	800554e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054a2:	4b43      	ldr	r3, [pc, #268]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	4940      	ldr	r1, [pc, #256]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054bc:	4b3c      	ldr	r3, [pc, #240]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d121      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0f6      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d4:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d115      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0ea      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d107      	bne.n	80054fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0de      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0d6      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800550c:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f023 0207 	bic.w	r2, r3, #7
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4925      	ldr	r1, [pc, #148]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551e:	f7fc fd53 	bl	8001fc8 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005524:	e00a      	b.n	800553c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005526:	f7fc fd4f 	bl	8001fc8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f241 3288 	movw	r2, #5000	; 0x1388
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0be      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553c:	4b1c      	ldr	r3, [pc, #112]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	429a      	cmp	r2, r3
 800554c:	d1eb      	bne.n	8005526 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	429a      	cmp	r2, r3
 8005568:	d208      	bcs.n	800557c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556a:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f023 020f 	bic.w	r2, r3, #15
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	490e      	ldr	r1, [pc, #56]	; (80055b0 <HAL_RCC_ClockConfig+0x244>)
 8005578:	4313      	orrs	r3, r2
 800557a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d214      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b08      	ldr	r3, [pc, #32]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 020f 	bic.w	r2, r3, #15
 8005592:	4906      	ldr	r1, [pc, #24]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559a:	4b04      	ldr	r3, [pc, #16]	; (80055ac <HAL_RCC_ClockConfig+0x240>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e086      	b.n	80056ba <HAL_RCC_ClockConfig+0x34e>
 80055ac:	52002000 	.word	0x52002000
 80055b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d208      	bcs.n	80055e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055d0:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	4939      	ldr	r1, [pc, #228]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d208      	bcs.n	8005610 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	492e      	ldr	r1, [pc, #184]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 800560c:	4313      	orrs	r3, r2
 800560e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d010      	beq.n	800563e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005628:	429a      	cmp	r2, r3
 800562a:	d208      	bcs.n	800563e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4922      	ldr	r1, [pc, #136]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 800563a:	4313      	orrs	r3, r2
 800563c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005656:	429a      	cmp	r2, r3
 8005658:	d208      	bcs.n	800566c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	4917      	ldr	r1, [pc, #92]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 8005668:	4313      	orrs	r3, r2
 800566a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800566c:	f000 f834 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	4912      	ldr	r1, [pc, #72]	; (80056c8 <HAL_RCC_ClockConfig+0x35c>)
 800567e:	5ccb      	ldrb	r3, [r1, r3]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
 8005688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <HAL_RCC_ClockConfig+0x358>)
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	4a0d      	ldr	r2, [pc, #52]	; (80056c8 <HAL_RCC_ClockConfig+0x35c>)
 8005694:	5cd3      	ldrb	r3, [r2, r3]
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <HAL_RCC_ClockConfig+0x360>)
 80056a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056a4:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <HAL_RCC_ClockConfig+0x364>)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <HAL_RCC_ClockConfig+0x368>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc fc40 	bl	8001f34 <HAL_InitTick>
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400
 80056c8:	0800d240 	.word	0x0800d240
 80056cc:	24000004 	.word	0x24000004
 80056d0:	24000000 	.word	0x24000000
 80056d4:	24000018 	.word	0x24000018

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056de:	4bb3      	ldr	r3, [pc, #716]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e6:	2b18      	cmp	r3, #24
 80056e8:	f200 8155 	bhi.w	8005996 <HAL_RCC_GetSysClockFreq+0x2be>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005759 	.word	0x08005759
 80056f8:	08005997 	.word	0x08005997
 80056fc:	08005997 	.word	0x08005997
 8005700:	08005997 	.word	0x08005997
 8005704:	08005997 	.word	0x08005997
 8005708:	08005997 	.word	0x08005997
 800570c:	08005997 	.word	0x08005997
 8005710:	08005997 	.word	0x08005997
 8005714:	0800577f 	.word	0x0800577f
 8005718:	08005997 	.word	0x08005997
 800571c:	08005997 	.word	0x08005997
 8005720:	08005997 	.word	0x08005997
 8005724:	08005997 	.word	0x08005997
 8005728:	08005997 	.word	0x08005997
 800572c:	08005997 	.word	0x08005997
 8005730:	08005997 	.word	0x08005997
 8005734:	08005785 	.word	0x08005785
 8005738:	08005997 	.word	0x08005997
 800573c:	08005997 	.word	0x08005997
 8005740:	08005997 	.word	0x08005997
 8005744:	08005997 	.word	0x08005997
 8005748:	08005997 	.word	0x08005997
 800574c:	08005997 	.word	0x08005997
 8005750:	08005997 	.word	0x08005997
 8005754:	0800578b 	.word	0x0800578b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005758:	4b94      	ldr	r3, [pc, #592]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005764:	4b91      	ldr	r3, [pc, #580]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	08db      	lsrs	r3, r3, #3
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	4a90      	ldr	r2, [pc, #576]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005776:	e111      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005778:	4b8d      	ldr	r3, [pc, #564]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800577a:	61bb      	str	r3, [r7, #24]
    break;
 800577c:	e10e      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800577e:	4b8d      	ldr	r3, [pc, #564]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005780:	61bb      	str	r3, [r7, #24]
    break;
 8005782:	e10b      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005784:	4b8c      	ldr	r3, [pc, #560]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005786:	61bb      	str	r3, [r7, #24]
    break;
 8005788:	e108      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800578a:	4b88      	ldr	r3, [pc, #544]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005794:	4b85      	ldr	r3, [pc, #532]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057a0:	4b82      	ldr	r3, [pc, #520]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057aa:	4b80      	ldr	r3, [pc, #512]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	08db      	lsrs	r3, r3, #3
 80057b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80e1 	beq.w	8005990 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	f000 8083 	beq.w	80058dc <HAL_RCC_GetSysClockFreq+0x204>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	f200 80a1 	bhi.w	8005920 <HAL_RCC_GetSysClockFreq+0x248>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_RCC_GetSysClockFreq+0x114>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d056      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057ea:	e099      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ec:	4b6f      	ldr	r3, [pc, #444]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02d      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057f8:	4b6c      	ldr	r3, [pc, #432]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	4a6b      	ldr	r2, [pc, #428]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
 8005808:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005832:	ed97 6a02 	vldr	s12, [r7, #8]
 8005836:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800583a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005852:	e087      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 6a02 	vldr	s12, [r7, #8]
 800587a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800587e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005896:	e065      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058aa:	4b40      	ldr	r3, [pc, #256]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80058be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058da:	e043      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005902:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800591e:	e021      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800592e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	ed97 6a02 	vldr	s12, [r7, #8]
 8005946:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005962:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	0a5b      	lsrs	r3, r3, #9
 800596a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800596e:	3301      	adds	r3, #1
 8005970:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800597c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005988:	ee17 3a90 	vmov	r3, s15
 800598c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800598e:	e005      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
    break;
 8005994:	e002      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005998:	61bb      	str	r3, [r7, #24]
    break;
 800599a:	bf00      	nop
  }

  return sysclockfreq;
 800599c:	69bb      	ldr	r3, [r7, #24]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3724      	adds	r7, #36	; 0x24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
 80059b0:	03d09000 	.word	0x03d09000
 80059b4:	003d0900 	.word	0x003d0900
 80059b8:	007a1200 	.word	0x007a1200
 80059bc:	46000000 	.word	0x46000000
 80059c0:	4c742400 	.word	0x4c742400
 80059c4:	4a742400 	.word	0x4a742400
 80059c8:	4af42400 	.word	0x4af42400

080059cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059d2:	f7ff fe81 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	490f      	ldr	r1, [pc, #60]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80059fa:	5cd3      	ldrb	r3, [r2, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	fa22 f303 	lsr.w	r3, r2, r3
 8005a06:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	0800d240 	.word	0x0800d240
 8005a24:	24000004 	.word	0x24000004
 8005a28:	24000000 	.word	0x24000000

08005a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a30:	f7ff ffcc 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a34:	4602      	mov	r2, r0
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	4904      	ldr	r1, [pc, #16]	; (8005a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a42:	5ccb      	ldrb	r3, [r1, r3]
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	58024400 	.word	0x58024400
 8005a54:	0800d240 	.word	0x0800d240

08005a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a5c:	f7ff ffb6 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a60:	4602      	mov	r2, r0
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	4904      	ldr	r1, [pc, #16]	; (8005a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	58024400 	.word	0x58024400
 8005a80:	0800d240 	.word	0x0800d240

08005a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a90:	2300      	movs	r3, #0
 8005a92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d03f      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aa8:	d02a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aae:	d824      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab4:	d018      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aba:	d81e      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac4:	d007      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ac6:	e018      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac8:	4ba3      	ldr	r3, [pc, #652]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	4aa2      	ldr	r2, [pc, #648]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ad4:	e015      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2102      	movs	r1, #2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 f9d5 	bl	8006e8c <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ae6:	e00c      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fa7e 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
      break;
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b08:	4b93      	ldr	r3, [pc, #588]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b14:	4990      	ldr	r1, [pc, #576]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	650b      	str	r3, [r1, #80]	; 0x50
 8005b1a:	e001      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d03d      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d826      	bhi.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b51 	.word	0x08005b51
 8005b40:	08005b5f 	.word	0x08005b5f
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b89 	.word	0x08005b89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b50:	4b81      	ldr	r3, [pc, #516]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4a80      	ldr	r2, [pc, #512]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b5c:	e015      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 f991 	bl	8006e8c <RCCEx_PLL2_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b6e:	e00c      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3324      	adds	r3, #36	; 0x24
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fa3a 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
      break;
 8005b86:	e000      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b90:	4b71      	ldr	r3, [pc, #452]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	f023 0207 	bic.w	r2, r3, #7
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	496e      	ldr	r1, [pc, #440]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ba2:	e001      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d042      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbc:	d02b      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc2:	d825      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bc4:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc6:	d028      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bc8:	2bc0      	cmp	r3, #192	; 0xc0
 8005bca:	d821      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d016      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005bd0:	2b80      	cmp	r3, #128	; 0x80
 8005bd2:	d81d      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d007      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005bdc:	e018      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bde:	4b5e      	ldr	r3, [pc, #376]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bea:	e017      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 f94a 	bl	8006e8c <RCCEx_PLL2_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005bfc:	e00e      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3324      	adds	r3, #36	; 0x24
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f9f3 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c0e:	e005      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
      break;
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c22:	4b4d      	ldr	r3, [pc, #308]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	494a      	ldr	r1, [pc, #296]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	650b      	str	r3, [r1, #80]	; 0x50
 8005c34:	e001      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d049      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c50:	d030      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005c52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c56:	d82a      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c5c:	d02c      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005c5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c62:	d824      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c68:	d018      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c6e:	d81e      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c78:	d007      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c7a:	e018      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7c:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4a35      	ldr	r2, [pc, #212]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c88:	e017      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f8fb 	bl	8006e8c <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e00e      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f9a4 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cac:	e005      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cba:	7dfb      	ldrb	r3, [r7, #23]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cce:	4922      	ldr	r1, [pc, #136]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	658b      	str	r3, [r1, #88]	; 0x58
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d04b      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf0:	d030      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf6:	d82a      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005cf8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cfc:	d02e      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005cfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d02:	d824      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d08:	d018      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d0e:	d81e      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d18:	d007      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d1a:	e018      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d28:	e019      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f8ab 	bl	8006e8c <RCCEx_PLL2_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d3a:	e010      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3324      	adds	r3, #36	; 0x24
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f954 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d4c:	e007      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
      break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005d54:	bf00      	nop
 8005d56:	e002      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d58:	58024400 	.word	0x58024400
      break;
 8005d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d64:	4b99      	ldr	r3, [pc, #612]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d72:	4996      	ldr	r1, [pc, #600]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	658b      	str	r3, [r1, #88]	; 0x58
 8005d78:	e001      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d032      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8e:	2b30      	cmp	r3, #48	; 0x30
 8005d90:	d01c      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005d92:	2b30      	cmp	r3, #48	; 0x30
 8005d94:	d817      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d00c      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d813      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d10f      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da6:	4b89      	ldr	r3, [pc, #548]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	4a88      	ldr	r2, [pc, #544]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005db2:	e00e      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	2102      	movs	r1, #2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 f866 	bl	8006e8c <RCCEx_PLL2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dca:	e002      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dd8:	4b7c      	ldr	r3, [pc, #496]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de4:	4979      	ldr	r1, [pc, #484]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dea:	e001      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d047      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e04:	d030      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e0a:	d82a      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e10:	d02c      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e16:	d824      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	d018      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e22:	d81e      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d007      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005e2e:	e018      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e30:	4b66      	ldr	r3, [pc, #408]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	4a65      	ldr	r2, [pc, #404]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e3c:	e017      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 f821 	bl	8006e8c <RCCEx_PLL2_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e4e:	e00e      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3324      	adds	r3, #36	; 0x24
 8005e54:	2100      	movs	r1, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f8ca 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e60:	e005      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
      break;
 8005e66:	e002      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005e6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e74:	4b55      	ldr	r3, [pc, #340]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	4952      	ldr	r1, [pc, #328]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	650b      	str	r3, [r1, #80]	; 0x50
 8005e86:	e001      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d049      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea0:	d02e      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea6:	d828      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eac:	d02a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eb2:	d822      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005eb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eb8:	d026      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005eba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ebe:	d81c      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ec4:	d010      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eca:	d816      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01d      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d111      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	2101      	movs	r1, #1
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 ffd5 	bl	8006e8c <RCCEx_PLL2_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ee6:	e012      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3324      	adds	r3, #36	; 0x24
 8005eec:	2101      	movs	r1, #1
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 f87e 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ef8:	e009      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
      break;
 8005efe:	e006      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f00:	bf00      	nop
 8005f02:	e004      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f04:	bf00      	nop
 8005f06:	e002      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f14:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	492a      	ldr	r1, [pc, #168]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	650b      	str	r3, [r1, #80]	; 0x50
 8005f26:	e001      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d04d      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f42:	d02e      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f48:	d828      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d02a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f54:	d822      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f5a:	d026      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f60:	d81c      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f66:	d010      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6c:	d816      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01d      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f76:	d111      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 ff84 	bl	8006e8c <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f88:	e012      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3324      	adds	r3, #36	; 0x24
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f82d 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005f9a:	e009      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa0:	e006      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fa6:	bf00      	nop
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fc4:	4901      	ldr	r1, [pc, #4]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	658b      	str	r3, [r1, #88]	; 0x58
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d02f      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe8:	d00e      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fee:	d814      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff8:	d10f      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffa:	4baf      	ldr	r3, [pc, #700]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	4aae      	ldr	r2, [pc, #696]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006004:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006006:	e00c      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	2101      	movs	r1, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff3c 	bl	8006e8c <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
      break;
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006028:	4ba3      	ldr	r3, [pc, #652]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800602a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006034:	49a0      	ldr	r1, [pc, #640]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006036:	4313      	orrs	r3, r2
 8006038:	650b      	str	r3, [r1, #80]	; 0x50
 800603a:	e001      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d032      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	2b03      	cmp	r3, #3
 8006052:	d81b      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006093 	.word	0x08006093
 8006060:	0800606d 	.word	0x0800606d
 8006064:	0800607b 	.word	0x0800607b
 8006068:	08006093 	.word	0x08006093
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606c:	4b92      	ldr	r3, [pc, #584]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a91      	ldr	r2, [pc, #580]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006078:	e00c      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f000 ff03 	bl	8006e8c <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	75fb      	strb	r3, [r7, #23]
      break;
 8006090:	e000      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800609a:	4b87      	ldr	r3, [pc, #540]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	4984      	ldr	r1, [pc, #528]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060ac:	e001      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8086 	beq.w	80061cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060c0:	4b7e      	ldr	r3, [pc, #504]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a7d      	ldr	r2, [pc, #500]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060cc:	f7fb ff7c 	bl	8001fc8 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060d2:	e009      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d4:	f7fb ff78 	bl	8001fc8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	; 0x64
 80060e0:	d902      	bls.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	75fb      	strb	r3, [r7, #23]
        break;
 80060e6:	e005      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e8:	4b74      	ldr	r3, [pc, #464]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ef      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d166      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060fa:	4b6f      	ldr	r3, [pc, #444]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006104:	4053      	eors	r3, r2
 8006106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800610e:	4b6a      	ldr	r3, [pc, #424]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006116:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006118:	4b67      	ldr	r3, [pc, #412]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a66      	ldr	r2, [pc, #408]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800611e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006124:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a63      	ldr	r2, [pc, #396]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800612a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006130:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d115      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fb ff41 	bl	8001fc8 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006148:	e00b      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fb ff3d 	bl	8001fc8 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d902      	bls.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	75fb      	strb	r3, [r7, #23]
            break;
 8006160:	e005      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006162:	4b55      	ldr	r3, [pc, #340]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ed      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d126      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800617a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006182:	d10d      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006184:	4b4c      	ldr	r3, [pc, #304]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006192:	0919      	lsrs	r1, r3, #4
 8006194:	4b4a      	ldr	r3, [pc, #296]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006196:	400b      	ands	r3, r1
 8006198:	4947      	ldr	r1, [pc, #284]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800619a:	4313      	orrs	r3, r2
 800619c:	610b      	str	r3, [r1, #16]
 800619e:	e005      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80061a0:	4b45      	ldr	r3, [pc, #276]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4a44      	ldr	r2, [pc, #272]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061aa:	6113      	str	r3, [r2, #16]
 80061ac:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ba:	493f      	ldr	r1, [pc, #252]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	670b      	str	r3, [r1, #112]	; 0x70
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	75bb      	strb	r3, [r7, #22]
 80061c6:	e001      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8085 	beq.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	2b28      	cmp	r3, #40	; 0x28
 80061e0:	d866      	bhi.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	080062c5 	.word	0x080062c5
 80061ec:	080062b1 	.word	0x080062b1
 80061f0:	080062b1 	.word	0x080062b1
 80061f4:	080062b1 	.word	0x080062b1
 80061f8:	080062b1 	.word	0x080062b1
 80061fc:	080062b1 	.word	0x080062b1
 8006200:	080062b1 	.word	0x080062b1
 8006204:	080062b1 	.word	0x080062b1
 8006208:	0800628d 	.word	0x0800628d
 800620c:	080062b1 	.word	0x080062b1
 8006210:	080062b1 	.word	0x080062b1
 8006214:	080062b1 	.word	0x080062b1
 8006218:	080062b1 	.word	0x080062b1
 800621c:	080062b1 	.word	0x080062b1
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062b1 	.word	0x080062b1
 8006228:	0800629f 	.word	0x0800629f
 800622c:	080062b1 	.word	0x080062b1
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080062b1 	.word	0x080062b1
 8006238:	080062b1 	.word	0x080062b1
 800623c:	080062b1 	.word	0x080062b1
 8006240:	080062b1 	.word	0x080062b1
 8006244:	080062b1 	.word	0x080062b1
 8006248:	080062c5 	.word	0x080062c5
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	080062b1 	.word	0x080062b1
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062c5 	.word	0x080062c5
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c5 	.word	0x080062c5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	2101      	movs	r1, #1
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fdfa 	bl	8006e8c <RCCEx_PLL2_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800629c:	e013      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3324      	adds	r3, #36	; 0x24
 80062a2:	2101      	movs	r1, #1
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fea3 	bl	8006ff0 <RCCEx_PLL3_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062ae:	e00a      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
      break;
 80062b4:	e007      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80062b6:	bf00      	nop
 80062b8:	58024400 	.word	0x58024400
 80062bc:	58024800 	.word	0x58024800
 80062c0:	00ffffcf 	.word	0x00ffffcf
      break;
 80062c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062cc:	4b96      	ldr	r3, [pc, #600]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d8:	4993      	ldr	r1, [pc, #588]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	654b      	str	r3, [r1, #84]	; 0x54
 80062de:	e001      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d038      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d821      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006343 	.word	0x08006343
 8006304:	08006319 	.word	0x08006319
 8006308:	0800632b 	.word	0x0800632b
 800630c:	08006343 	.word	0x08006343
 8006310:	08006343 	.word	0x08006343
 8006314:	08006343 	.word	0x08006343
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fdb4 	bl	8006e8c <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006328:	e00c      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2101      	movs	r1, #1
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fe5d 	bl	8006ff0 <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e000      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800634a:	4b77      	ldr	r3, [pc, #476]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f023 0207 	bic.w	r2, r3, #7
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006356:	4974      	ldr	r1, [pc, #464]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006358:	4313      	orrs	r3, r2
 800635a:	654b      	str	r3, [r1, #84]	; 0x54
 800635c:	e001      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d03a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	2b05      	cmp	r3, #5
 8006376:	d821      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063c3 	.word	0x080063c3
 8006384:	08006399 	.word	0x08006399
 8006388:	080063ab 	.word	0x080063ab
 800638c:	080063c3 	.word	0x080063c3
 8006390:	080063c3 	.word	0x080063c3
 8006394:	080063c3 	.word	0x080063c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	2101      	movs	r1, #1
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fd74 	bl	8006e8c <RCCEx_PLL2_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063a8:	e00c      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	2101      	movs	r1, #1
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fe1d 	bl	8006ff0 <RCCEx_PLL3_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
      break;
 80063c0:	e000      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80063c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063ca:	4b57      	ldr	r3, [pc, #348]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	f023 0207 	bic.w	r2, r3, #7
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	4953      	ldr	r1, [pc, #332]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	658b      	str	r3, [r1, #88]	; 0x58
 80063de:	e001      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d04b      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063fa:	d02e      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80063fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006400:	d828      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006406:	d02a      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d822      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800640e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006412:	d026      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006418:	d81c      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800641a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800641e:	d010      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006424:	d816      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01d      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800642a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642e:	d111      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fd28 	bl	8006e8c <RCCEx_PLL2_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006440:	e012      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	2102      	movs	r1, #2
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fdd1 	bl	8006ff0 <RCCEx_PLL3_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006452:	e009      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
      break;
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800645a:	bf00      	nop
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647c:	492a      	ldr	r1, [pc, #168]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	654b      	str	r3, [r1, #84]	; 0x54
 8006482:	e001      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d04d      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800649a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800649e:	d02e      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80064a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064a4:	d828      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d02a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d822      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b6:	d026      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80064b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064bc:	d81c      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c2:	d010      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	d816      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d01d      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80064ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d2:	d111      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fcd6 	bl	8006e8c <RCCEx_PLL2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064e4:	e012      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fd7f 	bl	8006ff0 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80064f6:	e009      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	e006      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80064fe:	bf00      	nop
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800650a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10c      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006516:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006520:	4901      	ldr	r1, [pc, #4]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006522:	4313      	orrs	r3, r2
 8006524:	658b      	str	r3, [r1, #88]	; 0x58
 8006526:	e003      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d04b      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006542:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006546:	d02e      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006548:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800654c:	d828      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d02a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d822      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800655a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800655e:	d026      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006560:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006564:	d81c      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656a:	d010      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800656c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006570:	d816      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01d      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	d111      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc82 	bl	8006e8c <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800658c:	e012      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3324      	adds	r3, #36	; 0x24
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fd2b 	bl	8006ff0 <RCCEx_PLL3_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800659e:	e009      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
      break;
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065a6:	bf00      	nop
 80065a8:	e004      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065aa:	bf00      	nop
 80065ac:	e002      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80065b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065ba:	4b9d      	ldr	r3, [pc, #628]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c8:	4999      	ldr	r1, [pc, #612]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	658b      	str	r3, [r1, #88]	; 0x58
 80065ce:	e001      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	d10a      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	2102      	movs	r1, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fcfc 	bl	8006ff0 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006602:	4b8b      	ldr	r3, [pc, #556]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006606:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006610:	4987      	ldr	r1, [pc, #540]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006612:	4313      	orrs	r3, r2
 8006614:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01a      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662c:	d10a      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3324      	adds	r3, #36	; 0x24
 8006632:	2102      	movs	r1, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fcdb 	bl	8006ff0 <RCCEx_PLL3_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006644:	4b7a      	ldr	r3, [pc, #488]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006652:	4977      	ldr	r1, [pc, #476]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006654:	4313      	orrs	r3, r2
 8006656:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d034      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800666a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800666e:	d01d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006674:	d817      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800667a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667e:	d009      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006680:	e011      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fbff 	bl	8006e8c <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006692:	e00c      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	2102      	movs	r1, #2
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fca8 	bl	8006ff0 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80066ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b4:	4b5e      	ldr	r3, [pc, #376]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066c2:	495b      	ldr	r1, [pc, #364]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	658b      	str	r3, [r1, #88]	; 0x58
 80066c8:	e001      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d033      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066e4:	d01c      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80066e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ea:	d816      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80066ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f0:	d003      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80066f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f6:	d007      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80066f8:	e00f      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066fa:	4b4d      	ldr	r3, [pc, #308]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	4a4c      	ldr	r2, [pc, #304]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006704:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006706:	e00c      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3324      	adds	r3, #36	; 0x24
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fc6e 	bl	8006ff0 <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
      break;
 800671e:	e000      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006728:	4b41      	ldr	r3, [pc, #260]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006736:	493e      	ldr	r1, [pc, #248]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006738:	4313      	orrs	r3, r2
 800673a:	654b      	str	r3, [r1, #84]	; 0x54
 800673c:	e001      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d029      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675a:	d007      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675e:	4b34      	ldr	r3, [pc, #208]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a33      	ldr	r2, [pc, #204]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800676a:	e00b      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb8a 	bl	8006e8c <RCCEx_PLL2_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800677c:	e002      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	4926      	ldr	r1, [pc, #152]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006798:	4313      	orrs	r3, r2
 800679a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800679c:	e001      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3324      	adds	r3, #36	; 0x24
 80067b2:	2102      	movs	r1, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fc1b 	bl	8006ff0 <RCCEx_PLL3_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d033      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d8:	d017      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d811      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e4:	d013      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ea:	d80b      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f4:	d106      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a0d      	ldr	r2, [pc, #52]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006802:	e007      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
      break;
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10c      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006826:	4902      	ldr	r1, [pc, #8]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006828:	4313      	orrs	r3, r2
 800682a:	654b      	str	r3, [r1, #84]	; 0x54
 800682c:	e004      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800682e:	bf00      	nop
 8006830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006844:	4b31      	ldr	r3, [pc, #196]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	492e      	ldr	r1, [pc, #184]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006852:	4313      	orrs	r3, r2
 8006854:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006870:	4926      	ldr	r1, [pc, #152]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006872:	4313      	orrs	r3, r2
 8006874:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006882:	4b22      	ldr	r3, [pc, #136]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006886:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688e:	491f      	ldr	r1, [pc, #124]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006890:	4313      	orrs	r3, r2
 8006892:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068aa:	6113      	str	r3, [r2, #16]
 80068ac:	4b17      	ldr	r3, [pc, #92]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068b6:	4915      	ldr	r1, [pc, #84]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da08      	bge.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068c4:	4b11      	ldr	r3, [pc, #68]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d0:	490e      	ldr	r1, [pc, #56]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	4906      	ldr	r1, [pc, #24]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80068f6:	7dbb      	ldrb	r3, [r7, #22]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	58024400 	.word	0x58024400

08006910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006914:	f7ff f85a 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	0800d240 	.word	0x0800d240

0800693c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006944:	4ba1      	ldr	r3, [pc, #644]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800694e:	4b9f      	ldr	r3, [pc, #636]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	0b1b      	lsrs	r3, r3, #12
 8006954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800695a:	4b9c      	ldr	r3, [pc, #624]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006966:	4b99      	ldr	r3, [pc, #612]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8111 	beq.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	f000 8083 	beq.w	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b02      	cmp	r3, #2
 8006996:	f200 80a1 	bhi.w	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d056      	beq.n	8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069a6:	e099      	b.n	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a8:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02d      	beq.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b4:	4b85      	ldr	r3, [pc, #532]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	4a84      	ldr	r2, [pc, #528]	; (8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a0e:	e087      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a22:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a52:	e065      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a66:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a96:	e043      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b48      	ldr	r3, [pc, #288]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ada:	e021      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b46:	ee17 2a90 	vmov	r2, s15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b74:	ee17 2a90 	vmov	r2, s15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba2:	ee17 2a90 	vmov	r2, s15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	3724      	adds	r7, #36	; 0x24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	46000000 	.word	0x46000000
 8006bd8:	4c742400 	.word	0x4c742400
 8006bdc:	4a742400 	.word	0x4a742400
 8006be0:	4af42400 	.word	0x4af42400

08006be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bec:	4ba1      	ldr	r3, [pc, #644]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006bf6:	4b9f      	ldr	r3, [pc, #636]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c02:	4b9c      	ldr	r3, [pc, #624]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c0e:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8111 	beq.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f200 80a1 	bhi.w	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c4e:	e099      	b.n	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b88      	ldr	r3, [pc, #544]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d02d      	beq.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5c:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a84      	ldr	r2, [pc, #528]	; (8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b7b      	ldr	r3, [pc, #492]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cb6:	e087      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cfa:	e065      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e043      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b48      	ldr	r3, [pc, #288]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	e021      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006df6:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4a:	ee17 2a90 	vmov	r2, s15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e52:	e008      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]
}
 8006e66:	bf00      	nop
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	46000000 	.word	0x46000000
 8006e80:	4c742400 	.word	0x4c742400
 8006e84:	4a742400 	.word	0x4a742400
 8006e88:	4af42400 	.word	0x4af42400

08006e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e9a:	4b53      	ldr	r3, [pc, #332]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d101      	bne.n	8006eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e099      	b.n	8006fde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a4e      	ldr	r2, [pc, #312]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fb f887 	bl	8001fc8 <HAL_GetTick>
 8006eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ebc:	e008      	b.n	8006ed0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ebe:	f7fb f883 	bl	8001fc8 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e086      	b.n	8006fde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ed0:	4b45      	ldr	r3, [pc, #276]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006edc:	4b42      	ldr	r3, [pc, #264]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	493f      	ldr	r1, [pc, #252]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	628b      	str	r3, [r1, #40]	; 0x28
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	025b      	lsls	r3, r3, #9
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f20:	4931      	ldr	r1, [pc, #196]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f26:	4b30      	ldr	r3, [pc, #192]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	492d      	ldr	r1, [pc, #180]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f38:	4b2b      	ldr	r3, [pc, #172]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	f023 0220 	bic.w	r2, r3, #32
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	4928      	ldr	r1, [pc, #160]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f4a:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	f023 0310 	bic.w	r3, r3, #16
 8006f54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f56:	4b24      	ldr	r3, [pc, #144]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <RCCEx_PLL2_Config+0x160>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	69d2      	ldr	r2, [r2, #28]
 8006f62:	00d2      	lsls	r2, r2, #3
 8006f64:	4920      	ldr	r1, [pc, #128]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f6a:	4b1f      	ldr	r3, [pc, #124]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	4a1e      	ldr	r2, [pc, #120]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f70:	f043 0310 	orr.w	r3, r3, #16
 8006f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f88:	e00f      	b.n	8006faa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d106      	bne.n	8006f9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f90:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f9c:	e005      	b.n	8006faa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a0e      	ldr	r2, [pc, #56]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb6:	f7fb f807 	bl	8001fc8 <HAL_GetTick>
 8006fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fbc:	e008      	b.n	8006fd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006fbe:	f7fb f803 	bl	8001fc8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	ffff0007 	.word	0xffff0007

08006ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ffe:	4b53      	ldr	r3, [pc, #332]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	2b03      	cmp	r3, #3
 8007008:	d101      	bne.n	800700e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e099      	b.n	8007142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800700e:	4b4f      	ldr	r3, [pc, #316]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a4e      	ldr	r2, [pc, #312]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701a:	f7fa ffd5 	bl	8001fc8 <HAL_GetTick>
 800701e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007020:	e008      	b.n	8007034 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007022:	f7fa ffd1 	bl	8001fc8 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e086      	b.n	8007142 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007034:	4b45      	ldr	r3, [pc, #276]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f0      	bne.n	8007022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007040:	4b42      	ldr	r3, [pc, #264]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	051b      	lsls	r3, r3, #20
 800704e:	493f      	ldr	r1, [pc, #252]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	628b      	str	r3, [r1, #40]	; 0x28
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	3b01      	subs	r3, #1
 800705a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	3b01      	subs	r3, #1
 8007064:	025b      	lsls	r3, r3, #9
 8007066:	b29b      	uxth	r3, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	3b01      	subs	r3, #1
 8007070:	041b      	lsls	r3, r3, #16
 8007072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	3b01      	subs	r3, #1
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007084:	4931      	ldr	r1, [pc, #196]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	492d      	ldr	r1, [pc, #180]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007098:	4313      	orrs	r3, r2
 800709a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800709c:	4b2b      	ldr	r3, [pc, #172]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	4928      	ldr	r1, [pc, #160]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070ae:	4b27      	ldr	r3, [pc, #156]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	4a26      	ldr	r2, [pc, #152]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <RCCEx_PLL3_Config+0x160>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	69d2      	ldr	r2, [r2, #28]
 80070c6:	00d2      	lsls	r2, r2, #3
 80070c8:	4920      	ldr	r1, [pc, #128]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070ce:	4b1f      	ldr	r3, [pc, #124]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a1e      	ldr	r2, [pc, #120]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070e0:	4b1a      	ldr	r3, [pc, #104]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	4a19      	ldr	r2, [pc, #100]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070ec:	e00f      	b.n	800710e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a14      	ldr	r2, [pc, #80]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 80070fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007100:	e005      	b.n	800710e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	4a11      	ldr	r2, [pc, #68]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800710c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a0e      	ldr	r2, [pc, #56]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711a:	f7fa ff55 	bl	8001fc8 <HAL_GetTick>
 800711e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007120:	e008      	b.n	8007134 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007122:	f7fa ff51 	bl	8001fc8 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e006      	b.n	8007142 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <RCCEx_PLL3_Config+0x15c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
 8007150:	ffff0007 	.word	0xffff0007

08007154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e049      	b.n	80071fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fa fcae 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f000 fb1c 	bl	80077d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e054      	b.n	80072c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d022      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d01d      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIM_Base_Start_IT+0xd8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1f      	ldr	r2, [pc, #124]	; (80072e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00e      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1c      	ldr	r2, [pc, #112]	; (80072e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x80>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <HAL_TIM_Base_Start_IT+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d115      	bne.n	80072b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_TIM_Base_Start_IT+0xec>)
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b06      	cmp	r3, #6
 8007294:	d015      	beq.n	80072c2 <HAL_TIM_Base_Start_IT+0xbe>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d011      	beq.n	80072c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ae:	e008      	b.n	80072c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e000      	b.n	80072c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40010400 	.word	0x40010400
 80072e8:	40001800 	.word	0x40001800
 80072ec:	40014000 	.word	0x40014000
 80072f0:	00010007 	.word	0x00010007

080072f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0201 	bic.w	r2, r2, #1
 800730a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	f241 1311 	movw	r3, #4369	; 0x1111
 8007316:	4013      	ands	r3, r2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10f      	bne.n	800733c <HAL_TIM_Base_Stop_IT+0x48>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	f240 4344 	movw	r3, #1092	; 0x444
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d107      	bne.n	800733c <HAL_TIM_Base_Stop_IT+0x48>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b02      	cmp	r3, #2
 8007366:	d122      	bne.n	80073ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d11b      	bne.n	80073ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0202 	mvn.w	r2, #2
 800737e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f9fd 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 800739a:	e005      	b.n	80073a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f9ef 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa00 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d122      	bne.n	8007402 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d11b      	bne.n	8007402 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0204 	mvn.w	r2, #4
 80073d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f9d3 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 80073ee:	e005      	b.n	80073fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f9c5 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f9d6 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b08      	cmp	r3, #8
 800740e:	d122      	bne.n	8007456 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b08      	cmp	r3, #8
 800741c:	d11b      	bne.n	8007456 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0208 	mvn.w	r2, #8
 8007426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2204      	movs	r2, #4
 800742c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9a9 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 8007442:	e005      	b.n	8007450 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f99b 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9ac 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b10      	cmp	r3, #16
 8007462:	d122      	bne.n	80074aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b10      	cmp	r3, #16
 8007470:	d11b      	bne.n	80074aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0210 	mvn.w	r2, #16
 800747a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2208      	movs	r2, #8
 8007480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f97f 	bl	8007794 <HAL_TIM_IC_CaptureCallback>
 8007496:	e005      	b.n	80074a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f971 	bl	8007780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f982 	bl	80077a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d10e      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d107      	bne.n	80074d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0201 	mvn.w	r2, #1
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fa f8a5 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d10e      	bne.n	8007502 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ee:	2b80      	cmp	r3, #128	; 0x80
 80074f0:	d107      	bne.n	8007502 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fb37 	bl	8007b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007510:	d10e      	bne.n	8007530 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d107      	bne.n	8007530 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fb2a 	bl	8007b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	d10e      	bne.n	800755c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d107      	bne.n	800755c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f930 	bl	80077bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b20      	cmp	r3, #32
 8007568:	d10e      	bne.n	8007588 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b20      	cmp	r3, #32
 8007576:	d107      	bne.n	8007588 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0220 	mvn.w	r2, #32
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 faea 	bl	8007b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_TIM_ConfigClockSource+0x1c>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0dc      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x1d6>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4b6a      	ldr	r3, [pc, #424]	; (8007770 <HAL_TIM_ConfigClockSource+0x1e0>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a64      	ldr	r2, [pc, #400]	; (8007774 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f000 80a9 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 80075e8:	4a62      	ldr	r2, [pc, #392]	; (8007774 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f200 80ae 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 80075f0:	4a61      	ldr	r2, [pc, #388]	; (8007778 <HAL_TIM_ConfigClockSource+0x1e8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f000 80a1 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 80075f8:	4a5f      	ldr	r2, [pc, #380]	; (8007778 <HAL_TIM_ConfigClockSource+0x1e8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f200 80a6 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007600:	4a5e      	ldr	r2, [pc, #376]	; (800777c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f000 8099 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007608:	4a5c      	ldr	r2, [pc, #368]	; (800777c <HAL_TIM_ConfigClockSource+0x1ec>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f200 809e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007610:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007614:	f000 8091 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800761c:	f200 8096 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007624:	f000 8089 	beq.w	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800762c:	f200 808e 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007634:	d03e      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x124>
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763a:	f200 8087 	bhi.w	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	f000 8086 	beq.w	8007752 <HAL_TIM_ConfigClockSource+0x1c2>
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764a:	d87f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 800764c:	2b70      	cmp	r3, #112	; 0x70
 800764e:	d01a      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0xf6>
 8007650:	2b70      	cmp	r3, #112	; 0x70
 8007652:	d87b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007654:	2b60      	cmp	r3, #96	; 0x60
 8007656:	d050      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0x16a>
 8007658:	2b60      	cmp	r3, #96	; 0x60
 800765a:	d877      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 800765c:	2b50      	cmp	r3, #80	; 0x50
 800765e:	d03c      	beq.n	80076da <HAL_TIM_ConfigClockSource+0x14a>
 8007660:	2b50      	cmp	r3, #80	; 0x50
 8007662:	d873      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d058      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x18a>
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d86f      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 800766c:	2b30      	cmp	r3, #48	; 0x30
 800766e:	d064      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007670:	2b30      	cmp	r3, #48	; 0x30
 8007672:	d86b      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d060      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d867      	bhi.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d05c      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007680:	2b10      	cmp	r3, #16
 8007682:	d05a      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x1aa>
 8007684:	e062      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f000 f9b3 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	609a      	str	r2, [r3, #8]
      break;
 80076b2:	e04f      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6899      	ldr	r1, [r3, #8]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f000 f99c 	bl	8007a00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076d6:	609a      	str	r2, [r3, #8]
      break;
 80076d8:	e03c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6859      	ldr	r1, [r3, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f000 f90c 	bl	8007904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2150      	movs	r1, #80	; 0x50
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f966 	bl	80079c4 <TIM_ITRx_SetConfig>
      break;
 80076f8:	e02c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	461a      	mov	r2, r3
 8007708:	f000 f92b 	bl	8007962 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2160      	movs	r1, #96	; 0x60
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f956 	bl	80079c4 <TIM_ITRx_SetConfig>
      break;
 8007718:	e01c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6859      	ldr	r1, [r3, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	461a      	mov	r2, r3
 8007728:	f000 f8ec 	bl	8007904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2140      	movs	r1, #64	; 0x40
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f946 	bl	80079c4 <TIM_ITRx_SetConfig>
      break;
 8007738:	e00c      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f000 f93d 	bl	80079c4 <TIM_ITRx_SetConfig>
      break;
 800774a:	e003      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e000      	b.n	8007754 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	ffceff88 	.word	0xffceff88
 8007774:	00100040 	.word	0x00100040
 8007778:	00100030 	.word	0x00100030
 800777c:	00100020 	.word	0x00100020

08007780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a40      	ldr	r2, [pc, #256]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d013      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ee:	d00f      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a3d      	ldr	r2, [pc, #244]	; (80078e8 <TIM_Base_SetConfig+0x118>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a3c      	ldr	r2, [pc, #240]	; (80078ec <TIM_Base_SetConfig+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a3b      	ldr	r2, [pc, #236]	; (80078f0 <TIM_Base_SetConfig+0x120>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a3a      	ldr	r2, [pc, #232]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d108      	bne.n	8007822 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2f      	ldr	r2, [pc, #188]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d01f      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007830:	d01b      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2c      	ldr	r2, [pc, #176]	; (80078e8 <TIM_Base_SetConfig+0x118>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d017      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a2b      	ldr	r2, [pc, #172]	; (80078ec <TIM_Base_SetConfig+0x11c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <TIM_Base_SetConfig+0x120>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00f      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a29      	ldr	r2, [pc, #164]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00b      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a28      	ldr	r2, [pc, #160]	; (80078f8 <TIM_Base_SetConfig+0x128>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d007      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a27      	ldr	r2, [pc, #156]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d003      	beq.n	800786a <TIM_Base_SetConfig+0x9a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a26      	ldr	r2, [pc, #152]	; (8007900 <TIM_Base_SetConfig+0x130>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d108      	bne.n	800787c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <TIM_Base_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00f      	beq.n	80078c8 <TIM_Base_SetConfig+0xf8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a12      	ldr	r2, [pc, #72]	; (80078f4 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_Base_SetConfig+0xf8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <TIM_Base_SetConfig+0x128>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d007      	beq.n	80078c8 <TIM_Base_SetConfig+0xf8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a10      	ldr	r2, [pc, #64]	; (80078fc <TIM_Base_SetConfig+0x12c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_Base_SetConfig+0xf8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a0f      	ldr	r2, [pc, #60]	; (8007900 <TIM_Base_SetConfig+0x130>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d103      	bne.n	80078d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	615a      	str	r2, [r3, #20]
}
 80078d6:	bf00      	nop
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40010400 	.word	0x40010400
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40014400 	.word	0x40014400
 8007900:	40014800 	.word	0x40014800

08007904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f023 0201 	bic.w	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800792e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 030a 	bic.w	r3, r3, #10
 8007940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007962:	b480      	push	{r7}
 8007964:	b087      	sub	sp, #28
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0210 	bic.w	r2, r3, #16
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800798c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800799e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <TIM_ITRx_SetConfig+0x38>)
 80079d8:	4013      	ands	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	f043 0307 	orr.w	r3, r3, #7
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	609a      	str	r2, [r3, #8]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	ffcfff8f 	.word	0xffcfff8f

08007a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	021a      	lsls	r2, r3, #8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	609a      	str	r2, [r3, #8]
}
 8007a34:	bf00      	nop
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e06d      	b.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2f      	ldr	r2, [pc, #188]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1a      	ldr	r2, [pc, #104]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10c      	bne.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40001800 	.word	0x40001800
 8007b58:	40014000 	.word	0x40014000

08007b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e042      	b.n	8007c30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7f9 ffb3 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2224      	movs	r2, #36	; 0x24
 8007bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8c2 	bl	8007d64 <UART_SetConfig>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e022      	b.n	8007c30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fe1e 	bl	8008834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fea5 	bl	8008978 <UART_CheckIdleState>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	f040 8083 	bne.w	8007d5a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_UART_Transmit+0x28>
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e07b      	b.n	8007d5c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_UART_Transmit+0x3a>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e074      	b.n	8007d5c <HAL_UART_Transmit+0x124>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c8a:	f7fa f99d 	bl	8001fc8 <HAL_GetTick>
 8007c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	88fa      	ldrh	r2, [r7, #6]
 8007c94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca8:	d108      	bne.n	8007cbc <HAL_UART_Transmit+0x84>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d104      	bne.n	8007cbc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	e003      	b.n	8007cc4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007ccc:	e02c      	b.n	8007d28 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fe98 	bl	8008a0e <UART_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e039      	b.n	8007d5c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	3302      	adds	r3, #2
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	e007      	b.n	8007d16 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	781a      	ldrb	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1cc      	bne.n	8007cce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2140      	movs	r1, #64	; 0x40
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fe65 	bl	8008a0e <UART_WaitOnFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e006      	b.n	8007d5c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e000      	b.n	8007d5c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d68:	b092      	sub	sp, #72	; 0x48
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4bbe      	ldr	r3, [pc, #760]	; (800808c <UART_SetConfig+0x328>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	6812      	ldr	r2, [r2, #0]
 8007d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4ab3      	ldr	r2, [pc, #716]	; (8008090 <UART_SetConfig+0x32c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d004      	beq.n	8007dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	4baf      	ldr	r3, [pc, #700]	; (8008094 <UART_SetConfig+0x330>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	f023 010f 	bic.w	r1, r3, #15
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4aa6      	ldr	r2, [pc, #664]	; (8008098 <UART_SetConfig+0x334>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d177      	bne.n	8007ef4 <UART_SetConfig+0x190>
 8007e04:	4ba5      	ldr	r3, [pc, #660]	; (800809c <UART_SetConfig+0x338>)
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0c:	2b28      	cmp	r3, #40	; 0x28
 8007e0e:	d86d      	bhi.n	8007eec <UART_SetConfig+0x188>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0xb4>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007ebd 	.word	0x08007ebd
 8007e1c:	08007eed 	.word	0x08007eed
 8007e20:	08007eed 	.word	0x08007eed
 8007e24:	08007eed 	.word	0x08007eed
 8007e28:	08007eed 	.word	0x08007eed
 8007e2c:	08007eed 	.word	0x08007eed
 8007e30:	08007eed 	.word	0x08007eed
 8007e34:	08007eed 	.word	0x08007eed
 8007e38:	08007ec5 	.word	0x08007ec5
 8007e3c:	08007eed 	.word	0x08007eed
 8007e40:	08007eed 	.word	0x08007eed
 8007e44:	08007eed 	.word	0x08007eed
 8007e48:	08007eed 	.word	0x08007eed
 8007e4c:	08007eed 	.word	0x08007eed
 8007e50:	08007eed 	.word	0x08007eed
 8007e54:	08007eed 	.word	0x08007eed
 8007e58:	08007ecd 	.word	0x08007ecd
 8007e5c:	08007eed 	.word	0x08007eed
 8007e60:	08007eed 	.word	0x08007eed
 8007e64:	08007eed 	.word	0x08007eed
 8007e68:	08007eed 	.word	0x08007eed
 8007e6c:	08007eed 	.word	0x08007eed
 8007e70:	08007eed 	.word	0x08007eed
 8007e74:	08007eed 	.word	0x08007eed
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007eed 	.word	0x08007eed
 8007e80:	08007eed 	.word	0x08007eed
 8007e84:	08007eed 	.word	0x08007eed
 8007e88:	08007eed 	.word	0x08007eed
 8007e8c:	08007eed 	.word	0x08007eed
 8007e90:	08007eed 	.word	0x08007eed
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007eed 	.word	0x08007eed
 8007ea0:	08007eed 	.word	0x08007eed
 8007ea4:	08007eed 	.word	0x08007eed
 8007ea8:	08007eed 	.word	0x08007eed
 8007eac:	08007eed 	.word	0x08007eed
 8007eb0:	08007eed 	.word	0x08007eed
 8007eb4:	08007eed 	.word	0x08007eed
 8007eb8:	08007ee5 	.word	0x08007ee5
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec2:	e222      	b.n	800830a <UART_SetConfig+0x5a6>
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eca:	e21e      	b.n	800830a <UART_SetConfig+0x5a6>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e21a      	b.n	800830a <UART_SetConfig+0x5a6>
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eda:	e216      	b.n	800830a <UART_SetConfig+0x5a6>
 8007edc:	2320      	movs	r3, #32
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee2:	e212      	b.n	800830a <UART_SetConfig+0x5a6>
 8007ee4:	2340      	movs	r3, #64	; 0x40
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eea:	e20e      	b.n	800830a <UART_SetConfig+0x5a6>
 8007eec:	2380      	movs	r3, #128	; 0x80
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef2:	e20a      	b.n	800830a <UART_SetConfig+0x5a6>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a69      	ldr	r2, [pc, #420]	; (80080a0 <UART_SetConfig+0x33c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d130      	bne.n	8007f60 <UART_SetConfig+0x1fc>
 8007efe:	4b67      	ldr	r3, [pc, #412]	; (800809c <UART_SetConfig+0x338>)
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	2b05      	cmp	r3, #5
 8007f08:	d826      	bhi.n	8007f58 <UART_SetConfig+0x1f4>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0x1ac>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f29 	.word	0x08007f29
 8007f14:	08007f31 	.word	0x08007f31
 8007f18:	08007f39 	.word	0x08007f39
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f49 	.word	0x08007f49
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2e:	e1ec      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e1e8      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e1e4      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f46:	e1e0      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f48:	2320      	movs	r3, #32
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4e:	e1dc      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f56:	e1d8      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f58:	2380      	movs	r3, #128	; 0x80
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5e:	e1d4      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a4f      	ldr	r2, [pc, #316]	; (80080a4 <UART_SetConfig+0x340>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d130      	bne.n	8007fcc <UART_SetConfig+0x268>
 8007f6a:	4b4c      	ldr	r3, [pc, #304]	; (800809c <UART_SetConfig+0x338>)
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d826      	bhi.n	8007fc4 <UART_SetConfig+0x260>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <UART_SetConfig+0x218>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007f95 	.word	0x08007f95
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	08007fa5 	.word	0x08007fa5
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9a:	e1b6      	b.n	800830a <UART_SetConfig+0x5a6>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e1b2      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e1ae      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e1aa      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e1a6      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e1a2      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e19e      	b.n	800830a <UART_SetConfig+0x5a6>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a35      	ldr	r2, [pc, #212]	; (80080a8 <UART_SetConfig+0x344>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d130      	bne.n	8008038 <UART_SetConfig+0x2d4>
 8007fd6:	4b31      	ldr	r3, [pc, #196]	; (800809c <UART_SetConfig+0x338>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d826      	bhi.n	8008030 <UART_SetConfig+0x2cc>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x284>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e180      	b.n	800830a <UART_SetConfig+0x5a6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e17c      	b.n	800830a <UART_SetConfig+0x5a6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e178      	b.n	800830a <UART_SetConfig+0x5a6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e174      	b.n	800830a <UART_SetConfig+0x5a6>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e170      	b.n	800830a <UART_SetConfig+0x5a6>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e16c      	b.n	800830a <UART_SetConfig+0x5a6>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e168      	b.n	800830a <UART_SetConfig+0x5a6>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a1b      	ldr	r2, [pc, #108]	; (80080ac <UART_SetConfig+0x348>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d142      	bne.n	80080c8 <UART_SetConfig+0x364>
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <UART_SetConfig+0x338>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d838      	bhi.n	80080c0 <UART_SetConfig+0x35c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x2f0>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	080080b1 	.word	0x080080b1
 8008068:	080080b9 	.word	0x080080b9
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e14a      	b.n	800830a <UART_SetConfig+0x5a6>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e146      	b.n	800830a <UART_SetConfig+0x5a6>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e142      	b.n	800830a <UART_SetConfig+0x5a6>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e13e      	b.n	800830a <UART_SetConfig+0x5a6>
 800808c:	cfff69f3 	.word	0xcfff69f3
 8008090:	58000c00 	.word	0x58000c00
 8008094:	11fff4ff 	.word	0x11fff4ff
 8008098:	40011000 	.word	0x40011000
 800809c:	58024400 	.word	0x58024400
 80080a0:	40004400 	.word	0x40004400
 80080a4:	40004800 	.word	0x40004800
 80080a8:	40004c00 	.word	0x40004c00
 80080ac:	40005000 	.word	0x40005000
 80080b0:	2320      	movs	r3, #32
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e128      	b.n	800830a <UART_SetConfig+0x5a6>
 80080b8:	2340      	movs	r3, #64	; 0x40
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e124      	b.n	800830a <UART_SetConfig+0x5a6>
 80080c0:	2380      	movs	r3, #128	; 0x80
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e120      	b.n	800830a <UART_SetConfig+0x5a6>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4acb      	ldr	r2, [pc, #812]	; (80083fc <UART_SetConfig+0x698>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d176      	bne.n	80081c0 <UART_SetConfig+0x45c>
 80080d2:	4bcb      	ldr	r3, [pc, #812]	; (8008400 <UART_SetConfig+0x69c>)
 80080d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080da:	2b28      	cmp	r3, #40	; 0x28
 80080dc:	d86c      	bhi.n	80081b8 <UART_SetConfig+0x454>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x380>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008189 	.word	0x08008189
 80080e8:	080081b9 	.word	0x080081b9
 80080ec:	080081b9 	.word	0x080081b9
 80080f0:	080081b9 	.word	0x080081b9
 80080f4:	080081b9 	.word	0x080081b9
 80080f8:	080081b9 	.word	0x080081b9
 80080fc:	080081b9 	.word	0x080081b9
 8008100:	080081b9 	.word	0x080081b9
 8008104:	08008191 	.word	0x08008191
 8008108:	080081b9 	.word	0x080081b9
 800810c:	080081b9 	.word	0x080081b9
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081b9 	.word	0x080081b9
 8008118:	080081b9 	.word	0x080081b9
 800811c:	080081b9 	.word	0x080081b9
 8008120:	080081b9 	.word	0x080081b9
 8008124:	08008199 	.word	0x08008199
 8008128:	080081b9 	.word	0x080081b9
 800812c:	080081b9 	.word	0x080081b9
 8008130:	080081b9 	.word	0x080081b9
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081b9 	.word	0x080081b9
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081b9 	.word	0x080081b9
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	080081b9 	.word	0x080081b9
 8008160:	080081b9 	.word	0x080081b9
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081b9 	.word	0x080081b9
 800816c:	080081b9 	.word	0x080081b9
 8008170:	080081b9 	.word	0x080081b9
 8008174:	080081b9 	.word	0x080081b9
 8008178:	080081b9 	.word	0x080081b9
 800817c:	080081b9 	.word	0x080081b9
 8008180:	080081b9 	.word	0x080081b9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818e:	e0bc      	b.n	800830a <UART_SetConfig+0x5a6>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e0b8      	b.n	800830a <UART_SetConfig+0x5a6>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e0b4      	b.n	800830a <UART_SetConfig+0x5a6>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e0b0      	b.n	800830a <UART_SetConfig+0x5a6>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e0ac      	b.n	800830a <UART_SetConfig+0x5a6>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e0a8      	b.n	800830a <UART_SetConfig+0x5a6>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e0a4      	b.n	800830a <UART_SetConfig+0x5a6>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a8f      	ldr	r2, [pc, #572]	; (8008404 <UART_SetConfig+0x6a0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d130      	bne.n	800822c <UART_SetConfig+0x4c8>
 80081ca:	4b8d      	ldr	r3, [pc, #564]	; (8008400 <UART_SetConfig+0x69c>)
 80081cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d826      	bhi.n	8008224 <UART_SetConfig+0x4c0>
 80081d6:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <UART_SetConfig+0x478>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f5 	.word	0x080081f5
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008205 	.word	0x08008205
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e086      	b.n	800830a <UART_SetConfig+0x5a6>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e082      	b.n	800830a <UART_SetConfig+0x5a6>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e07e      	b.n	800830a <UART_SetConfig+0x5a6>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e07a      	b.n	800830a <UART_SetConfig+0x5a6>
 8008214:	2320      	movs	r3, #32
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e076      	b.n	800830a <UART_SetConfig+0x5a6>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e072      	b.n	800830a <UART_SetConfig+0x5a6>
 8008224:	2380      	movs	r3, #128	; 0x80
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e06e      	b.n	800830a <UART_SetConfig+0x5a6>
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a75      	ldr	r2, [pc, #468]	; (8008408 <UART_SetConfig+0x6a4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d130      	bne.n	8008298 <UART_SetConfig+0x534>
 8008236:	4b72      	ldr	r3, [pc, #456]	; (8008400 <UART_SetConfig+0x69c>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	2b05      	cmp	r3, #5
 8008240:	d826      	bhi.n	8008290 <UART_SetConfig+0x52c>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x4e4>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008261 	.word	0x08008261
 800824c:	08008269 	.word	0x08008269
 8008250:	08008271 	.word	0x08008271
 8008254:	08008279 	.word	0x08008279
 8008258:	08008281 	.word	0x08008281
 800825c:	08008289 	.word	0x08008289
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e050      	b.n	800830a <UART_SetConfig+0x5a6>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e04c      	b.n	800830a <UART_SetConfig+0x5a6>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e048      	b.n	800830a <UART_SetConfig+0x5a6>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e044      	b.n	800830a <UART_SetConfig+0x5a6>
 8008280:	2320      	movs	r3, #32
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e040      	b.n	800830a <UART_SetConfig+0x5a6>
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e03c      	b.n	800830a <UART_SetConfig+0x5a6>
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e038      	b.n	800830a <UART_SetConfig+0x5a6>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a5b      	ldr	r2, [pc, #364]	; (800840c <UART_SetConfig+0x6a8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <UART_SetConfig+0x5a0>
 80082a2:	4b57      	ldr	r3, [pc, #348]	; (8008400 <UART_SetConfig+0x69c>)
 80082a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <UART_SetConfig+0x598>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0x550>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2302      	movs	r3, #2
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e01a      	b.n	800830a <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e016      	b.n	800830a <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e012      	b.n	800830a <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e00e      	b.n	800830a <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e00a      	b.n	800830a <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e006      	b.n	800830a <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e002      	b.n	800830a <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a3f      	ldr	r2, [pc, #252]	; (800840c <UART_SetConfig+0x6a8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	f040 80f8 	bne.w	8008506 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008316:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800831a:	2b20      	cmp	r3, #32
 800831c:	dc46      	bgt.n	80083ac <UART_SetConfig+0x648>
 800831e:	2b02      	cmp	r3, #2
 8008320:	f2c0 8082 	blt.w	8008428 <UART_SetConfig+0x6c4>
 8008324:	3b02      	subs	r3, #2
 8008326:	2b1e      	cmp	r3, #30
 8008328:	d87e      	bhi.n	8008428 <UART_SetConfig+0x6c4>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <UART_SetConfig+0x5cc>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	080083b3 	.word	0x080083b3
 8008334:	08008429 	.word	0x08008429
 8008338:	080083bb 	.word	0x080083bb
 800833c:	08008429 	.word	0x08008429
 8008340:	08008429 	.word	0x08008429
 8008344:	08008429 	.word	0x08008429
 8008348:	080083cb 	.word	0x080083cb
 800834c:	08008429 	.word	0x08008429
 8008350:	08008429 	.word	0x08008429
 8008354:	08008429 	.word	0x08008429
 8008358:	08008429 	.word	0x08008429
 800835c:	08008429 	.word	0x08008429
 8008360:	08008429 	.word	0x08008429
 8008364:	08008429 	.word	0x08008429
 8008368:	080083db 	.word	0x080083db
 800836c:	08008429 	.word	0x08008429
 8008370:	08008429 	.word	0x08008429
 8008374:	08008429 	.word	0x08008429
 8008378:	08008429 	.word	0x08008429
 800837c:	08008429 	.word	0x08008429
 8008380:	08008429 	.word	0x08008429
 8008384:	08008429 	.word	0x08008429
 8008388:	08008429 	.word	0x08008429
 800838c:	08008429 	.word	0x08008429
 8008390:	08008429 	.word	0x08008429
 8008394:	08008429 	.word	0x08008429
 8008398:	08008429 	.word	0x08008429
 800839c:	08008429 	.word	0x08008429
 80083a0:	08008429 	.word	0x08008429
 80083a4:	08008429 	.word	0x08008429
 80083a8:	0800841b 	.word	0x0800841b
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d037      	beq.n	8008420 <UART_SetConfig+0x6bc>
 80083b0:	e03a      	b.n	8008428 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083b2:	f7fe faad 	bl	8006910 <HAL_RCCEx_GetD3PCLK1Freq>
 80083b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083b8:	e03c      	b.n	8008434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fabc 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e034      	b.n	8008434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ca:	f107 0318 	add.w	r3, r7, #24
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fc08 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e02c      	b.n	8008434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <UART_SetConfig+0x69c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d016      	beq.n	8008414 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <UART_SetConfig+0x69c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	08db      	lsrs	r3, r3, #3
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	4a07      	ldr	r2, [pc, #28]	; (8008410 <UART_SetConfig+0x6ac>)
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083f8:	e01c      	b.n	8008434 <UART_SetConfig+0x6d0>
 80083fa:	bf00      	nop
 80083fc:	40011400 	.word	0x40011400
 8008400:	58024400 	.word	0x58024400
 8008404:	40007800 	.word	0x40007800
 8008408:	40007c00 	.word	0x40007c00
 800840c:	58000c00 	.word	0x58000c00
 8008410:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008414:	4b9d      	ldr	r3, [pc, #628]	; (800868c <UART_SetConfig+0x928>)
 8008416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008418:	e00c      	b.n	8008434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800841a:	4b9d      	ldr	r3, [pc, #628]	; (8008690 <UART_SetConfig+0x92c>)
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800841e:	e009      	b.n	8008434 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008426:	e005      	b.n	8008434 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008432:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 81de 	beq.w	80087f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	4a94      	ldr	r2, [pc, #592]	; (8008694 <UART_SetConfig+0x930>)
 8008442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008446:	461a      	mov	r2, r3
 8008448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844a:	fbb3 f3f2 	udiv	r3, r3, r2
 800844e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845c:	429a      	cmp	r2, r3
 800845e:	d305      	bcc.n	800846c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008468:	429a      	cmp	r2, r3
 800846a:	d903      	bls.n	8008474 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008472:	e1c1      	b.n	80087f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	2200      	movs	r2, #0
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	60fa      	str	r2, [r7, #12]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	4a84      	ldr	r2, [pc, #528]	; (8008694 <UART_SetConfig+0x930>)
 8008482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008486:	b29b      	uxth	r3, r3
 8008488:	2200      	movs	r2, #0
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008496:	f7f7 ff7b 	bl	8000390 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	020b      	lsls	r3, r1, #8
 80084ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084b0:	0202      	lsls	r2, r0, #8
 80084b2:	6979      	ldr	r1, [r7, #20]
 80084b4:	6849      	ldr	r1, [r1, #4]
 80084b6:	0849      	lsrs	r1, r1, #1
 80084b8:	2000      	movs	r0, #0
 80084ba:	460c      	mov	r4, r1
 80084bc:	4605      	mov	r5, r0
 80084be:	eb12 0804 	adds.w	r8, r2, r4
 80084c2:	eb43 0905 	adc.w	r9, r3, r5
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	469a      	mov	sl, r3
 80084ce:	4693      	mov	fp, r2
 80084d0:	4652      	mov	r2, sl
 80084d2:	465b      	mov	r3, fp
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f7 ff5a 	bl	8000390 <__aeabi_uldivmod>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4613      	mov	r3, r2
 80084e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ea:	d308      	bcc.n	80084fe <UART_SetConfig+0x79a>
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f2:	d204      	bcs.n	80084fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	e17c      	b.n	80087f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008504:	e178      	b.n	80087f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800850e:	f040 80c5 	bne.w	800869c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008512:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008516:	2b20      	cmp	r3, #32
 8008518:	dc48      	bgt.n	80085ac <UART_SetConfig+0x848>
 800851a:	2b00      	cmp	r3, #0
 800851c:	db7b      	blt.n	8008616 <UART_SetConfig+0x8b2>
 800851e:	2b20      	cmp	r3, #32
 8008520:	d879      	bhi.n	8008616 <UART_SetConfig+0x8b2>
 8008522:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <UART_SetConfig+0x7c4>)
 8008524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008528:	080085b3 	.word	0x080085b3
 800852c:	080085bb 	.word	0x080085bb
 8008530:	08008617 	.word	0x08008617
 8008534:	08008617 	.word	0x08008617
 8008538:	080085c3 	.word	0x080085c3
 800853c:	08008617 	.word	0x08008617
 8008540:	08008617 	.word	0x08008617
 8008544:	08008617 	.word	0x08008617
 8008548:	080085d3 	.word	0x080085d3
 800854c:	08008617 	.word	0x08008617
 8008550:	08008617 	.word	0x08008617
 8008554:	08008617 	.word	0x08008617
 8008558:	08008617 	.word	0x08008617
 800855c:	08008617 	.word	0x08008617
 8008560:	08008617 	.word	0x08008617
 8008564:	08008617 	.word	0x08008617
 8008568:	080085e3 	.word	0x080085e3
 800856c:	08008617 	.word	0x08008617
 8008570:	08008617 	.word	0x08008617
 8008574:	08008617 	.word	0x08008617
 8008578:	08008617 	.word	0x08008617
 800857c:	08008617 	.word	0x08008617
 8008580:	08008617 	.word	0x08008617
 8008584:	08008617 	.word	0x08008617
 8008588:	08008617 	.word	0x08008617
 800858c:	08008617 	.word	0x08008617
 8008590:	08008617 	.word	0x08008617
 8008594:	08008617 	.word	0x08008617
 8008598:	08008617 	.word	0x08008617
 800859c:	08008617 	.word	0x08008617
 80085a0:	08008617 	.word	0x08008617
 80085a4:	08008617 	.word	0x08008617
 80085a8:	08008609 	.word	0x08008609
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	d02e      	beq.n	800860e <UART_SetConfig+0x8aa>
 80085b0:	e031      	b.n	8008616 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b2:	f7fd fa3b 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 80085b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085b8:	e033      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ba:	f7fd fa4d 	bl	8005a58 <HAL_RCC_GetPCLK2Freq>
 80085be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085c0:	e02f      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe f9b8 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d0:	e027      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085d2:	f107 0318 	add.w	r3, r7, #24
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fb04 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e0:	e01f      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e2:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <UART_SetConfig+0x934>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ee:	4b2a      	ldr	r3, [pc, #168]	; (8008698 <UART_SetConfig+0x934>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	08db      	lsrs	r3, r3, #3
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	4a24      	ldr	r2, [pc, #144]	; (800868c <UART_SetConfig+0x928>)
 80085fa:	fa22 f303 	lsr.w	r3, r2, r3
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008600:	e00f      	b.n	8008622 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008602:	4b22      	ldr	r3, [pc, #136]	; (800868c <UART_SetConfig+0x928>)
 8008604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008606:	e00c      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008608:	4b21      	ldr	r3, [pc, #132]	; (8008690 <UART_SetConfig+0x92c>)
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860c:	e009      	b.n	8008622 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800860e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008614:	e005      	b.n	8008622 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80e7 	beq.w	80087f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	4a19      	ldr	r2, [pc, #100]	; (8008694 <UART_SetConfig+0x930>)
 8008630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008634:	461a      	mov	r2, r3
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	fbb3 f3f2 	udiv	r3, r3, r2
 800863c:	005a      	lsls	r2, r3, #1
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	085b      	lsrs	r3, r3, #1
 8008644:	441a      	add	r2, r3
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	fbb2 f3f3 	udiv	r3, r2, r3
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	2b0f      	cmp	r3, #15
 8008654:	d916      	bls.n	8008684 <UART_SetConfig+0x920>
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d212      	bcs.n	8008684 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	b29b      	uxth	r3, r3
 8008662:	f023 030f 	bic.w	r3, r3, #15
 8008666:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	b29a      	uxth	r2, r3
 8008674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008676:	4313      	orrs	r3, r2
 8008678:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	e0b9      	b.n	80087f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800868a:	e0b5      	b.n	80087f8 <UART_SetConfig+0xa94>
 800868c:	03d09000 	.word	0x03d09000
 8008690:	003d0900 	.word	0x003d0900
 8008694:	0800d260 	.word	0x0800d260
 8008698:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800869c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	dc49      	bgt.n	8008738 <UART_SetConfig+0x9d4>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	db7c      	blt.n	80087a2 <UART_SetConfig+0xa3e>
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d87a      	bhi.n	80087a2 <UART_SetConfig+0xa3e>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x950>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	08008747 	.word	0x08008747
 80086bc:	080087a3 	.word	0x080087a3
 80086c0:	080087a3 	.word	0x080087a3
 80086c4:	0800874f 	.word	0x0800874f
 80086c8:	080087a3 	.word	0x080087a3
 80086cc:	080087a3 	.word	0x080087a3
 80086d0:	080087a3 	.word	0x080087a3
 80086d4:	0800875f 	.word	0x0800875f
 80086d8:	080087a3 	.word	0x080087a3
 80086dc:	080087a3 	.word	0x080087a3
 80086e0:	080087a3 	.word	0x080087a3
 80086e4:	080087a3 	.word	0x080087a3
 80086e8:	080087a3 	.word	0x080087a3
 80086ec:	080087a3 	.word	0x080087a3
 80086f0:	080087a3 	.word	0x080087a3
 80086f4:	0800876f 	.word	0x0800876f
 80086f8:	080087a3 	.word	0x080087a3
 80086fc:	080087a3 	.word	0x080087a3
 8008700:	080087a3 	.word	0x080087a3
 8008704:	080087a3 	.word	0x080087a3
 8008708:	080087a3 	.word	0x080087a3
 800870c:	080087a3 	.word	0x080087a3
 8008710:	080087a3 	.word	0x080087a3
 8008714:	080087a3 	.word	0x080087a3
 8008718:	080087a3 	.word	0x080087a3
 800871c:	080087a3 	.word	0x080087a3
 8008720:	080087a3 	.word	0x080087a3
 8008724:	080087a3 	.word	0x080087a3
 8008728:	080087a3 	.word	0x080087a3
 800872c:	080087a3 	.word	0x080087a3
 8008730:	080087a3 	.word	0x080087a3
 8008734:	08008795 	.word	0x08008795
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	d02e      	beq.n	800879a <UART_SetConfig+0xa36>
 800873c:	e031      	b.n	80087a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800873e:	f7fd f975 	bl	8005a2c <HAL_RCC_GetPCLK1Freq>
 8008742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008744:	e033      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008746:	f7fd f987 	bl	8005a58 <HAL_RCC_GetPCLK2Freq>
 800874a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800874c:	e02f      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe f8f2 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800875c:	e027      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875e:	f107 0318 	add.w	r3, r7, #24
 8008762:	4618      	mov	r0, r3
 8008764:	f7fe fa3e 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800876c:	e01f      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876e:	4b2d      	ldr	r3, [pc, #180]	; (8008824 <UART_SetConfig+0xac0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800877a:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <UART_SetConfig+0xac0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	08db      	lsrs	r3, r3, #3
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	4a28      	ldr	r2, [pc, #160]	; (8008828 <UART_SetConfig+0xac4>)
 8008786:	fa22 f303 	lsr.w	r3, r2, r3
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800878c:	e00f      	b.n	80087ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800878e:	4b26      	ldr	r3, [pc, #152]	; (8008828 <UART_SetConfig+0xac4>)
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008792:	e00c      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008794:	4b25      	ldr	r3, [pc, #148]	; (800882c <UART_SetConfig+0xac8>)
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008798:	e009      	b.n	80087ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a0:	e005      	b.n	80087ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087ac:	bf00      	nop
    }

    if (pclk != 0U)
 80087ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d021      	beq.n	80087f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	4a1d      	ldr	r2, [pc, #116]	; (8008830 <UART_SetConfig+0xacc>)
 80087ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087be:	461a      	mov	r2, r3
 80087c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	441a      	add	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	d909      	bls.n	80087f2 <UART_SetConfig+0xa8e>
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e4:	d205      	bcs.n	80087f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	e002      	b.n	80087f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2201      	movs	r2, #1
 8008804:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2200      	movs	r2, #0
 800880c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008814:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008818:	4618      	mov	r0, r3
 800881a:	3748      	adds	r7, #72	; 0x48
 800881c:	46bd      	mov	sp, r7
 800881e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008822:	bf00      	nop
 8008824:	58024400 	.word	0x58024400
 8008828:	03d09000 	.word	0x03d09000
 800882c:	003d0900 	.word	0x003d0900
 8008830:	0800d260 	.word	0x0800d260

08008834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0310 	and.w	r3, r3, #16
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01a      	beq.n	800894a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008932:	d10a      	bne.n	800894a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af02      	add	r7, sp, #8
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008988:	f7f9 fb1e 	bl	8001fc8 <HAL_GetTick>
 800898c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b08      	cmp	r3, #8
 800899a:	d10e      	bne.n	80089ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800899c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f82f 	bl	8008a0e <UART_WaitOnFlagUntilTimeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e025      	b.n	8008a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d10e      	bne.n	80089e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f819 	bl	8008a0e <UART_WaitOnFlagUntilTimeout>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e00f      	b.n	8008a06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b09c      	sub	sp, #112	; 0x70
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a1e:	e0a9      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	f000 80a5 	beq.w	8008b74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2a:	f7f9 facd 	bl	8001fc8 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d140      	bne.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a54:	667b      	str	r3, [r7, #100]	; 0x64
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	663b      	str	r3, [r7, #96]	; 0x60
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e5      	bne.n	8008a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e069      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d051      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ade:	d149      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e6      	bne.n	8008aea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3308      	adds	r3, #8
 8008b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f023 0301 	bic.w	r3, r3, #1
 8008b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b3c:	623a      	str	r2, [r7, #32]
 8008b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	69f9      	ldr	r1, [r7, #28]
 8008b42:	6a3a      	ldr	r2, [r7, #32]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e010      	b.n	8008b96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69da      	ldr	r2, [r3, #28]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	f43f af46 	beq.w	8008a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3770      	adds	r7, #112	; 0x70
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e027      	b.n	8008c04 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2224      	movs	r2, #36	; 0x24
 8008bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0201 	bic.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008be2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e02d      	b.n	8008c84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2224      	movs	r2, #36	; 0x24
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0201 	bic.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f84f 	bl	8008d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e02d      	b.n	8008d00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2224      	movs	r2, #36	; 0x24
 8008cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f022 0201 	bic.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f811 	bl	8008d08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d108      	bne.n	8008d2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d28:	e031      	b.n	8008d8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d2e:	2310      	movs	r3, #16
 8008d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	0e5b      	lsrs	r3, r3, #25
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 0307 	and.w	r3, r3, #7
 8008d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	0f5b      	lsrs	r3, r3, #29
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	7b3a      	ldrb	r2, [r7, #12]
 8008d56:	4911      	ldr	r1, [pc, #68]	; (8008d9c <UARTEx_SetNbDataToProcess+0x94>)
 8008d58:	5c8a      	ldrb	r2, [r1, r2]
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d5e:	7b3a      	ldrb	r2, [r7, #12]
 8008d60:	490f      	ldr	r1, [pc, #60]	; (8008da0 <UARTEx_SetNbDataToProcess+0x98>)
 8008d62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	7b7a      	ldrb	r2, [r7, #13]
 8008d74:	4909      	ldr	r1, [pc, #36]	; (8008d9c <UARTEx_SetNbDataToProcess+0x94>)
 8008d76:	5c8a      	ldrb	r2, [r1, r2]
 8008d78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d7c:	7b7a      	ldrb	r2, [r7, #13]
 8008d7e:	4908      	ldr	r1, [pc, #32]	; (8008da0 <UARTEx_SetNbDataToProcess+0x98>)
 8008d80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	0800d278 	.word	0x0800d278
 8008da0:	0800d280 	.word	0x0800d280

08008da4 <__errno>:
 8008da4:	4b01      	ldr	r3, [pc, #4]	; (8008dac <__errno+0x8>)
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	24000020 	.word	0x24000020

08008db0 <__libc_init_array>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	4d0d      	ldr	r5, [pc, #52]	; (8008de8 <__libc_init_array+0x38>)
 8008db4:	4c0d      	ldr	r4, [pc, #52]	; (8008dec <__libc_init_array+0x3c>)
 8008db6:	1b64      	subs	r4, r4, r5
 8008db8:	10a4      	asrs	r4, r4, #2
 8008dba:	2600      	movs	r6, #0
 8008dbc:	42a6      	cmp	r6, r4
 8008dbe:	d109      	bne.n	8008dd4 <__libc_init_array+0x24>
 8008dc0:	4d0b      	ldr	r5, [pc, #44]	; (8008df0 <__libc_init_array+0x40>)
 8008dc2:	4c0c      	ldr	r4, [pc, #48]	; (8008df4 <__libc_init_array+0x44>)
 8008dc4:	f004 f9ea 	bl	800d19c <_init>
 8008dc8:	1b64      	subs	r4, r4, r5
 8008dca:	10a4      	asrs	r4, r4, #2
 8008dcc:	2600      	movs	r6, #0
 8008dce:	42a6      	cmp	r6, r4
 8008dd0:	d105      	bne.n	8008dde <__libc_init_array+0x2e>
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd8:	4798      	blx	r3
 8008dda:	3601      	adds	r6, #1
 8008ddc:	e7ee      	b.n	8008dbc <__libc_init_array+0xc>
 8008dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de2:	4798      	blx	r3
 8008de4:	3601      	adds	r6, #1
 8008de6:	e7f2      	b.n	8008dce <__libc_init_array+0x1e>
 8008de8:	0800f990 	.word	0x0800f990
 8008dec:	0800f990 	.word	0x0800f990
 8008df0:	0800f990 	.word	0x0800f990
 8008df4:	0800f994 	.word	0x0800f994

08008df8 <memcpy>:
 8008df8:	440a      	add	r2, r1
 8008dfa:	4291      	cmp	r1, r2
 8008dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e00:	d100      	bne.n	8008e04 <memcpy+0xc>
 8008e02:	4770      	bx	lr
 8008e04:	b510      	push	{r4, lr}
 8008e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	d1f9      	bne.n	8008e06 <memcpy+0xe>
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <memset>:
 8008e14:	4402      	add	r2, r0
 8008e16:	4603      	mov	r3, r0
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d100      	bne.n	8008e1e <memset+0xa>
 8008e1c:	4770      	bx	lr
 8008e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e22:	e7f9      	b.n	8008e18 <memset+0x4>

08008e24 <__cvt>:
 8008e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e26:	ed2d 8b02 	vpush	{d8}
 8008e2a:	eeb0 8b40 	vmov.f64	d8, d0
 8008e2e:	b085      	sub	sp, #20
 8008e30:	4617      	mov	r7, r2
 8008e32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e36:	ee18 2a90 	vmov	r2, s17
 8008e3a:	f025 0520 	bic.w	r5, r5, #32
 8008e3e:	2a00      	cmp	r2, #0
 8008e40:	bfb6      	itet	lt
 8008e42:	222d      	movlt	r2, #45	; 0x2d
 8008e44:	2200      	movge	r2, #0
 8008e46:	eeb1 8b40 	vneglt.f64	d8, d0
 8008e4a:	2d46      	cmp	r5, #70	; 0x46
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	d004      	beq.n	8008e5c <__cvt+0x38>
 8008e52:	2d45      	cmp	r5, #69	; 0x45
 8008e54:	d100      	bne.n	8008e58 <__cvt+0x34>
 8008e56:	3401      	adds	r4, #1
 8008e58:	2102      	movs	r1, #2
 8008e5a:	e000      	b.n	8008e5e <__cvt+0x3a>
 8008e5c:	2103      	movs	r1, #3
 8008e5e:	ab03      	add	r3, sp, #12
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	ab02      	add	r3, sp, #8
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	4622      	mov	r2, r4
 8008e68:	4633      	mov	r3, r6
 8008e6a:	eeb0 0b48 	vmov.f64	d0, d8
 8008e6e:	f000 fccb 	bl	8009808 <_dtoa_r>
 8008e72:	2d47      	cmp	r5, #71	; 0x47
 8008e74:	d101      	bne.n	8008e7a <__cvt+0x56>
 8008e76:	07fb      	lsls	r3, r7, #31
 8008e78:	d51a      	bpl.n	8008eb0 <__cvt+0x8c>
 8008e7a:	2d46      	cmp	r5, #70	; 0x46
 8008e7c:	eb00 0204 	add.w	r2, r0, r4
 8008e80:	d10c      	bne.n	8008e9c <__cvt+0x78>
 8008e82:	7803      	ldrb	r3, [r0, #0]
 8008e84:	2b30      	cmp	r3, #48	; 0x30
 8008e86:	d107      	bne.n	8008e98 <__cvt+0x74>
 8008e88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e90:	bf1c      	itt	ne
 8008e92:	f1c4 0401 	rsbne	r4, r4, #1
 8008e96:	6034      	strne	r4, [r6, #0]
 8008e98:	6833      	ldr	r3, [r6, #0]
 8008e9a:	441a      	add	r2, r3
 8008e9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea4:	bf08      	it	eq
 8008ea6:	9203      	streq	r2, [sp, #12]
 8008ea8:	2130      	movs	r1, #48	; 0x30
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d307      	bcc.n	8008ec0 <__cvt+0x9c>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eb4:	1a1b      	subs	r3, r3, r0
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	b005      	add	sp, #20
 8008eba:	ecbd 8b02 	vpop	{d8}
 8008ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec0:	1c5c      	adds	r4, r3, #1
 8008ec2:	9403      	str	r4, [sp, #12]
 8008ec4:	7019      	strb	r1, [r3, #0]
 8008ec6:	e7f0      	b.n	8008eaa <__cvt+0x86>

08008ec8 <__exponent>:
 8008ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	bfb8      	it	lt
 8008ed0:	4249      	neglt	r1, r1
 8008ed2:	f803 2b02 	strb.w	r2, [r3], #2
 8008ed6:	bfb4      	ite	lt
 8008ed8:	222d      	movlt	r2, #45	; 0x2d
 8008eda:	222b      	movge	r2, #43	; 0x2b
 8008edc:	2909      	cmp	r1, #9
 8008ede:	7042      	strb	r2, [r0, #1]
 8008ee0:	dd2a      	ble.n	8008f38 <__exponent+0x70>
 8008ee2:	f10d 0407 	add.w	r4, sp, #7
 8008ee6:	46a4      	mov	ip, r4
 8008ee8:	270a      	movs	r7, #10
 8008eea:	46a6      	mov	lr, r4
 8008eec:	460a      	mov	r2, r1
 8008eee:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ef2:	fb07 1516 	mls	r5, r7, r6, r1
 8008ef6:	3530      	adds	r5, #48	; 0x30
 8008ef8:	2a63      	cmp	r2, #99	; 0x63
 8008efa:	f104 34ff 	add.w	r4, r4, #4294967295
 8008efe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f02:	4631      	mov	r1, r6
 8008f04:	dcf1      	bgt.n	8008eea <__exponent+0x22>
 8008f06:	3130      	adds	r1, #48	; 0x30
 8008f08:	f1ae 0502 	sub.w	r5, lr, #2
 8008f0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f10:	1c44      	adds	r4, r0, #1
 8008f12:	4629      	mov	r1, r5
 8008f14:	4561      	cmp	r1, ip
 8008f16:	d30a      	bcc.n	8008f2e <__exponent+0x66>
 8008f18:	f10d 0209 	add.w	r2, sp, #9
 8008f1c:	eba2 020e 	sub.w	r2, r2, lr
 8008f20:	4565      	cmp	r5, ip
 8008f22:	bf88      	it	hi
 8008f24:	2200      	movhi	r2, #0
 8008f26:	4413      	add	r3, r2
 8008f28:	1a18      	subs	r0, r3, r0
 8008f2a:	b003      	add	sp, #12
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f36:	e7ed      	b.n	8008f14 <__exponent+0x4c>
 8008f38:	2330      	movs	r3, #48	; 0x30
 8008f3a:	3130      	adds	r1, #48	; 0x30
 8008f3c:	7083      	strb	r3, [r0, #2]
 8008f3e:	70c1      	strb	r1, [r0, #3]
 8008f40:	1d03      	adds	r3, r0, #4
 8008f42:	e7f1      	b.n	8008f28 <__exponent+0x60>
 8008f44:	0000      	movs	r0, r0
	...

08008f48 <_printf_float>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	b08b      	sub	sp, #44	; 0x2c
 8008f4e:	460c      	mov	r4, r1
 8008f50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008f54:	4616      	mov	r6, r2
 8008f56:	461f      	mov	r7, r3
 8008f58:	4605      	mov	r5, r0
 8008f5a:	f001 f9c3 	bl	800a2e4 <_localeconv_r>
 8008f5e:	f8d0 b000 	ldr.w	fp, [r0]
 8008f62:	4658      	mov	r0, fp
 8008f64:	f7f7 f9bc 	bl	80002e0 <strlen>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	3307      	adds	r3, #7
 8008f78:	f023 0307 	bic.w	r3, r3, #7
 8008f7c:	f103 0108 	add.w	r1, r3, #8
 8008f80:	f8c8 1000 	str.w	r1, [r8]
 8008f84:	4682      	mov	sl, r0
 8008f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008f8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80091f0 <_printf_float+0x2a8>
 8008f92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008f96:	eeb0 6bc0 	vabs.f64	d6, d0
 8008f9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	dd24      	ble.n	8008fee <_printf_float+0xa6>
 8008fa4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	d502      	bpl.n	8008fb4 <_printf_float+0x6c>
 8008fae:	232d      	movs	r3, #45	; 0x2d
 8008fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb4:	4b90      	ldr	r3, [pc, #576]	; (80091f8 <_printf_float+0x2b0>)
 8008fb6:	4891      	ldr	r0, [pc, #580]	; (80091fc <_printf_float+0x2b4>)
 8008fb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008fbc:	bf94      	ite	ls
 8008fbe:	4698      	movls	r8, r3
 8008fc0:	4680      	movhi	r8, r0
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	f022 0204 	bic.w	r2, r2, #4
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	9700      	str	r7, [sp, #0]
 8008fd2:	4633      	mov	r3, r6
 8008fd4:	aa09      	add	r2, sp, #36	; 0x24
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f9d3 	bl	8009384 <_printf_common>
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f040 808a 	bne.w	80090f8 <_printf_float+0x1b0>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b00b      	add	sp, #44	; 0x2c
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	eeb4 0b40 	vcmp.f64	d0, d0
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	d709      	bvc.n	800900c <_printf_float+0xc4>
 8008ff8:	ee10 3a90 	vmov	r3, s1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfbc      	itt	lt
 8009000:	232d      	movlt	r3, #45	; 0x2d
 8009002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009006:	487e      	ldr	r0, [pc, #504]	; (8009200 <_printf_float+0x2b8>)
 8009008:	4b7e      	ldr	r3, [pc, #504]	; (8009204 <_printf_float+0x2bc>)
 800900a:	e7d5      	b.n	8008fb8 <_printf_float+0x70>
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009012:	9104      	str	r1, [sp, #16]
 8009014:	1c59      	adds	r1, r3, #1
 8009016:	d13c      	bne.n	8009092 <_printf_float+0x14a>
 8009018:	2306      	movs	r3, #6
 800901a:	6063      	str	r3, [r4, #4]
 800901c:	2300      	movs	r3, #0
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	ab08      	add	r3, sp, #32
 8009022:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800902a:	ab07      	add	r3, sp, #28
 800902c:	6861      	ldr	r1, [r4, #4]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	f10d 031b 	add.w	r3, sp, #27
 8009036:	4628      	mov	r0, r5
 8009038:	f7ff fef4 	bl	8008e24 <__cvt>
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	9907      	ldr	r1, [sp, #28]
 8009040:	2b47      	cmp	r3, #71	; 0x47
 8009042:	4680      	mov	r8, r0
 8009044:	d108      	bne.n	8009058 <_printf_float+0x110>
 8009046:	1cc8      	adds	r0, r1, #3
 8009048:	db02      	blt.n	8009050 <_printf_float+0x108>
 800904a:	6863      	ldr	r3, [r4, #4]
 800904c:	4299      	cmp	r1, r3
 800904e:	dd41      	ble.n	80090d4 <_printf_float+0x18c>
 8009050:	f1a9 0902 	sub.w	r9, r9, #2
 8009054:	fa5f f989 	uxtb.w	r9, r9
 8009058:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800905c:	d820      	bhi.n	80090a0 <_printf_float+0x158>
 800905e:	3901      	subs	r1, #1
 8009060:	464a      	mov	r2, r9
 8009062:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009066:	9107      	str	r1, [sp, #28]
 8009068:	f7ff ff2e 	bl	8008ec8 <__exponent>
 800906c:	9a08      	ldr	r2, [sp, #32]
 800906e:	9004      	str	r0, [sp, #16]
 8009070:	1813      	adds	r3, r2, r0
 8009072:	2a01      	cmp	r2, #1
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	dc02      	bgt.n	800907e <_printf_float+0x136>
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	07d2      	lsls	r2, r2, #31
 800907c:	d501      	bpl.n	8009082 <_printf_float+0x13a>
 800907e:	3301      	adds	r3, #1
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0a2      	beq.n	8008fd0 <_printf_float+0x88>
 800908a:	232d      	movs	r3, #45	; 0x2d
 800908c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009090:	e79e      	b.n	8008fd0 <_printf_float+0x88>
 8009092:	9904      	ldr	r1, [sp, #16]
 8009094:	2947      	cmp	r1, #71	; 0x47
 8009096:	d1c1      	bne.n	800901c <_printf_float+0xd4>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1bf      	bne.n	800901c <_printf_float+0xd4>
 800909c:	2301      	movs	r3, #1
 800909e:	e7bc      	b.n	800901a <_printf_float+0xd2>
 80090a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090a4:	d118      	bne.n	80090d8 <_printf_float+0x190>
 80090a6:	2900      	cmp	r1, #0
 80090a8:	6863      	ldr	r3, [r4, #4]
 80090aa:	dd0b      	ble.n	80090c4 <_printf_float+0x17c>
 80090ac:	6121      	str	r1, [r4, #16]
 80090ae:	b913      	cbnz	r3, 80090b6 <_printf_float+0x16e>
 80090b0:	6822      	ldr	r2, [r4, #0]
 80090b2:	07d0      	lsls	r0, r2, #31
 80090b4:	d502      	bpl.n	80090bc <_printf_float+0x174>
 80090b6:	3301      	adds	r3, #1
 80090b8:	440b      	add	r3, r1
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	2300      	movs	r3, #0
 80090be:	65a1      	str	r1, [r4, #88]	; 0x58
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	e7de      	b.n	8009082 <_printf_float+0x13a>
 80090c4:	b913      	cbnz	r3, 80090cc <_printf_float+0x184>
 80090c6:	6822      	ldr	r2, [r4, #0]
 80090c8:	07d2      	lsls	r2, r2, #31
 80090ca:	d501      	bpl.n	80090d0 <_printf_float+0x188>
 80090cc:	3302      	adds	r3, #2
 80090ce:	e7f4      	b.n	80090ba <_printf_float+0x172>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e7f2      	b.n	80090ba <_printf_float+0x172>
 80090d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80090d8:	9b08      	ldr	r3, [sp, #32]
 80090da:	4299      	cmp	r1, r3
 80090dc:	db05      	blt.n	80090ea <_printf_float+0x1a2>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	6121      	str	r1, [r4, #16]
 80090e2:	07d8      	lsls	r0, r3, #31
 80090e4:	d5ea      	bpl.n	80090bc <_printf_float+0x174>
 80090e6:	1c4b      	adds	r3, r1, #1
 80090e8:	e7e7      	b.n	80090ba <_printf_float+0x172>
 80090ea:	2900      	cmp	r1, #0
 80090ec:	bfd4      	ite	le
 80090ee:	f1c1 0202 	rsble	r2, r1, #2
 80090f2:	2201      	movgt	r2, #1
 80090f4:	4413      	add	r3, r2
 80090f6:	e7e0      	b.n	80090ba <_printf_float+0x172>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	055a      	lsls	r2, r3, #21
 80090fc:	d407      	bmi.n	800910e <_printf_float+0x1c6>
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	4642      	mov	r2, r8
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	d12a      	bne.n	8009162 <_printf_float+0x21a>
 800910c:	e76a      	b.n	8008fe4 <_printf_float+0x9c>
 800910e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009112:	f240 80e2 	bls.w	80092da <_printf_float+0x392>
 8009116:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800911a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d133      	bne.n	800918c <_printf_float+0x244>
 8009124:	4a38      	ldr	r2, [pc, #224]	; (8009208 <_printf_float+0x2c0>)
 8009126:	2301      	movs	r3, #1
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	47b8      	blx	r7
 800912e:	3001      	adds	r0, #1
 8009130:	f43f af58 	beq.w	8008fe4 <_printf_float+0x9c>
 8009134:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009138:	429a      	cmp	r2, r3
 800913a:	db02      	blt.n	8009142 <_printf_float+0x1fa>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	07d8      	lsls	r0, r3, #31
 8009140:	d50f      	bpl.n	8009162 <_printf_float+0x21a>
 8009142:	4653      	mov	r3, sl
 8009144:	465a      	mov	r2, fp
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f af49 	beq.w	8008fe4 <_printf_float+0x9c>
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	f104 091a 	add.w	r9, r4, #26
 800915a:	9b08      	ldr	r3, [sp, #32]
 800915c:	3b01      	subs	r3, #1
 800915e:	4543      	cmp	r3, r8
 8009160:	dc09      	bgt.n	8009176 <_printf_float+0x22e>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	079b      	lsls	r3, r3, #30
 8009166:	f100 8108 	bmi.w	800937a <_printf_float+0x432>
 800916a:	68e0      	ldr	r0, [r4, #12]
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	4298      	cmp	r0, r3
 8009170:	bfb8      	it	lt
 8009172:	4618      	movlt	r0, r3
 8009174:	e738      	b.n	8008fe8 <_printf_float+0xa0>
 8009176:	2301      	movs	r3, #1
 8009178:	464a      	mov	r2, r9
 800917a:	4631      	mov	r1, r6
 800917c:	4628      	mov	r0, r5
 800917e:	47b8      	blx	r7
 8009180:	3001      	adds	r0, #1
 8009182:	f43f af2f 	beq.w	8008fe4 <_printf_float+0x9c>
 8009186:	f108 0801 	add.w	r8, r8, #1
 800918a:	e7e6      	b.n	800915a <_printf_float+0x212>
 800918c:	9b07      	ldr	r3, [sp, #28]
 800918e:	2b00      	cmp	r3, #0
 8009190:	dc3c      	bgt.n	800920c <_printf_float+0x2c4>
 8009192:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <_printf_float+0x2c0>)
 8009194:	2301      	movs	r3, #1
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	f43f af21 	beq.w	8008fe4 <_printf_float+0x9c>
 80091a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	d102      	bne.n	80091b0 <_printf_float+0x268>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	07d9      	lsls	r1, r3, #31
 80091ae:	d5d8      	bpl.n	8009162 <_printf_float+0x21a>
 80091b0:	4653      	mov	r3, sl
 80091b2:	465a      	mov	r2, fp
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	f43f af12 	beq.w	8008fe4 <_printf_float+0x9c>
 80091c0:	f04f 0900 	mov.w	r9, #0
 80091c4:	f104 0a1a 	add.w	sl, r4, #26
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	425b      	negs	r3, r3
 80091cc:	454b      	cmp	r3, r9
 80091ce:	dc01      	bgt.n	80091d4 <_printf_float+0x28c>
 80091d0:	9b08      	ldr	r3, [sp, #32]
 80091d2:	e795      	b.n	8009100 <_printf_float+0x1b8>
 80091d4:	2301      	movs	r3, #1
 80091d6:	4652      	mov	r2, sl
 80091d8:	4631      	mov	r1, r6
 80091da:	4628      	mov	r0, r5
 80091dc:	47b8      	blx	r7
 80091de:	3001      	adds	r0, #1
 80091e0:	f43f af00 	beq.w	8008fe4 <_printf_float+0x9c>
 80091e4:	f109 0901 	add.w	r9, r9, #1
 80091e8:	e7ee      	b.n	80091c8 <_printf_float+0x280>
 80091ea:	bf00      	nop
 80091ec:	f3af 8000 	nop.w
 80091f0:	ffffffff 	.word	0xffffffff
 80091f4:	7fefffff 	.word	0x7fefffff
 80091f8:	0800d28c 	.word	0x0800d28c
 80091fc:	0800d290 	.word	0x0800d290
 8009200:	0800d298 	.word	0x0800d298
 8009204:	0800d294 	.word	0x0800d294
 8009208:	0800d29c 	.word	0x0800d29c
 800920c:	9a08      	ldr	r2, [sp, #32]
 800920e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009210:	429a      	cmp	r2, r3
 8009212:	bfa8      	it	ge
 8009214:	461a      	movge	r2, r3
 8009216:	2a00      	cmp	r2, #0
 8009218:	4691      	mov	r9, r2
 800921a:	dc38      	bgt.n	800928e <_printf_float+0x346>
 800921c:	2300      	movs	r3, #0
 800921e:	9305      	str	r3, [sp, #20]
 8009220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009224:	f104 021a 	add.w	r2, r4, #26
 8009228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800922a:	9905      	ldr	r1, [sp, #20]
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	eba3 0309 	sub.w	r3, r3, r9
 8009232:	428b      	cmp	r3, r1
 8009234:	dc33      	bgt.n	800929e <_printf_float+0x356>
 8009236:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800923a:	429a      	cmp	r2, r3
 800923c:	db3c      	blt.n	80092b8 <_printf_float+0x370>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	07da      	lsls	r2, r3, #31
 8009242:	d439      	bmi.n	80092b8 <_printf_float+0x370>
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	9a04      	ldr	r2, [sp, #16]
 8009248:	9907      	ldr	r1, [sp, #28]
 800924a:	1a9a      	subs	r2, r3, r2
 800924c:	eba3 0901 	sub.w	r9, r3, r1
 8009250:	4591      	cmp	r9, r2
 8009252:	bfa8      	it	ge
 8009254:	4691      	movge	r9, r2
 8009256:	f1b9 0f00 	cmp.w	r9, #0
 800925a:	dc35      	bgt.n	80092c8 <_printf_float+0x380>
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	eba3 0309 	sub.w	r3, r3, r9
 8009272:	4543      	cmp	r3, r8
 8009274:	f77f af75 	ble.w	8009162 <_printf_float+0x21a>
 8009278:	2301      	movs	r3, #1
 800927a:	4652      	mov	r2, sl
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f aeae 	beq.w	8008fe4 <_printf_float+0x9c>
 8009288:	f108 0801 	add.w	r8, r8, #1
 800928c:	e7ec      	b.n	8009268 <_printf_float+0x320>
 800928e:	4613      	mov	r3, r2
 8009290:	4631      	mov	r1, r6
 8009292:	4642      	mov	r2, r8
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	d1bf      	bne.n	800921c <_printf_float+0x2d4>
 800929c:	e6a2      	b.n	8008fe4 <_printf_float+0x9c>
 800929e:	2301      	movs	r3, #1
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	9204      	str	r2, [sp, #16]
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f ae9b 	beq.w	8008fe4 <_printf_float+0x9c>
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	9a04      	ldr	r2, [sp, #16]
 80092b2:	3301      	adds	r3, #1
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	e7b7      	b.n	8009228 <_printf_float+0x2e0>
 80092b8:	4653      	mov	r3, sl
 80092ba:	465a      	mov	r2, fp
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	d1be      	bne.n	8009244 <_printf_float+0x2fc>
 80092c6:	e68d      	b.n	8008fe4 <_printf_float+0x9c>
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	464b      	mov	r3, r9
 80092cc:	4442      	add	r2, r8
 80092ce:	4631      	mov	r1, r6
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b8      	blx	r7
 80092d4:	3001      	adds	r0, #1
 80092d6:	d1c1      	bne.n	800925c <_printf_float+0x314>
 80092d8:	e684      	b.n	8008fe4 <_printf_float+0x9c>
 80092da:	9a08      	ldr	r2, [sp, #32]
 80092dc:	2a01      	cmp	r2, #1
 80092de:	dc01      	bgt.n	80092e4 <_printf_float+0x39c>
 80092e0:	07db      	lsls	r3, r3, #31
 80092e2:	d537      	bpl.n	8009354 <_printf_float+0x40c>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4642      	mov	r2, r8
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f ae78 	beq.w	8008fe4 <_printf_float+0x9c>
 80092f4:	4653      	mov	r3, sl
 80092f6:	465a      	mov	r2, fp
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f ae70 	beq.w	8008fe4 <_printf_float+0x9c>
 8009304:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009308:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009310:	d01b      	beq.n	800934a <_printf_float+0x402>
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	f108 0201 	add.w	r2, r8, #1
 8009318:	3b01      	subs	r3, #1
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	d10e      	bne.n	8009342 <_printf_float+0x3fa>
 8009324:	e65e      	b.n	8008fe4 <_printf_float+0x9c>
 8009326:	2301      	movs	r3, #1
 8009328:	464a      	mov	r2, r9
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	f43f ae57 	beq.w	8008fe4 <_printf_float+0x9c>
 8009336:	f108 0801 	add.w	r8, r8, #1
 800933a:	9b08      	ldr	r3, [sp, #32]
 800933c:	3b01      	subs	r3, #1
 800933e:	4543      	cmp	r3, r8
 8009340:	dcf1      	bgt.n	8009326 <_printf_float+0x3de>
 8009342:	9b04      	ldr	r3, [sp, #16]
 8009344:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009348:	e6db      	b.n	8009102 <_printf_float+0x1ba>
 800934a:	f04f 0800 	mov.w	r8, #0
 800934e:	f104 091a 	add.w	r9, r4, #26
 8009352:	e7f2      	b.n	800933a <_printf_float+0x3f2>
 8009354:	2301      	movs	r3, #1
 8009356:	4642      	mov	r2, r8
 8009358:	e7df      	b.n	800931a <_printf_float+0x3d2>
 800935a:	2301      	movs	r3, #1
 800935c:	464a      	mov	r2, r9
 800935e:	4631      	mov	r1, r6
 8009360:	4628      	mov	r0, r5
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	f43f ae3d 	beq.w	8008fe4 <_printf_float+0x9c>
 800936a:	f108 0801 	add.w	r8, r8, #1
 800936e:	68e3      	ldr	r3, [r4, #12]
 8009370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009372:	1a5b      	subs	r3, r3, r1
 8009374:	4543      	cmp	r3, r8
 8009376:	dcf0      	bgt.n	800935a <_printf_float+0x412>
 8009378:	e6f7      	b.n	800916a <_printf_float+0x222>
 800937a:	f04f 0800 	mov.w	r8, #0
 800937e:	f104 0919 	add.w	r9, r4, #25
 8009382:	e7f4      	b.n	800936e <_printf_float+0x426>

08009384 <_printf_common>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	4616      	mov	r6, r2
 800938a:	4699      	mov	r9, r3
 800938c:	688a      	ldr	r2, [r1, #8]
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009394:	4293      	cmp	r3, r2
 8009396:	bfb8      	it	lt
 8009398:	4613      	movlt	r3, r2
 800939a:	6033      	str	r3, [r6, #0]
 800939c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a0:	4607      	mov	r7, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	b10a      	cbz	r2, 80093aa <_printf_common+0x26>
 80093a6:	3301      	adds	r3, #1
 80093a8:	6033      	str	r3, [r6, #0]
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	0699      	lsls	r1, r3, #26
 80093ae:	bf42      	ittt	mi
 80093b0:	6833      	ldrmi	r3, [r6, #0]
 80093b2:	3302      	addmi	r3, #2
 80093b4:	6033      	strmi	r3, [r6, #0]
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	f015 0506 	ands.w	r5, r5, #6
 80093bc:	d106      	bne.n	80093cc <_printf_common+0x48>
 80093be:	f104 0a19 	add.w	sl, r4, #25
 80093c2:	68e3      	ldr	r3, [r4, #12]
 80093c4:	6832      	ldr	r2, [r6, #0]
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	dc26      	bgt.n	800941a <_printf_common+0x96>
 80093cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d0:	1e13      	subs	r3, r2, #0
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	bf18      	it	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	0692      	lsls	r2, r2, #26
 80093da:	d42b      	bmi.n	8009434 <_printf_common+0xb0>
 80093dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e0:	4649      	mov	r1, r9
 80093e2:	4638      	mov	r0, r7
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d01e      	beq.n	8009428 <_printf_common+0xa4>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	68e5      	ldr	r5, [r4, #12]
 80093ee:	6832      	ldr	r2, [r6, #0]
 80093f0:	f003 0306 	and.w	r3, r3, #6
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	bf08      	it	eq
 80093f8:	1aad      	subeq	r5, r5, r2
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	bf0c      	ite	eq
 8009400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009404:	2500      	movne	r5, #0
 8009406:	4293      	cmp	r3, r2
 8009408:	bfc4      	itt	gt
 800940a:	1a9b      	subgt	r3, r3, r2
 800940c:	18ed      	addgt	r5, r5, r3
 800940e:	2600      	movs	r6, #0
 8009410:	341a      	adds	r4, #26
 8009412:	42b5      	cmp	r5, r6
 8009414:	d11a      	bne.n	800944c <_printf_common+0xc8>
 8009416:	2000      	movs	r0, #0
 8009418:	e008      	b.n	800942c <_printf_common+0xa8>
 800941a:	2301      	movs	r3, #1
 800941c:	4652      	mov	r2, sl
 800941e:	4649      	mov	r1, r9
 8009420:	4638      	mov	r0, r7
 8009422:	47c0      	blx	r8
 8009424:	3001      	adds	r0, #1
 8009426:	d103      	bne.n	8009430 <_printf_common+0xac>
 8009428:	f04f 30ff 	mov.w	r0, #4294967295
 800942c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009430:	3501      	adds	r5, #1
 8009432:	e7c6      	b.n	80093c2 <_printf_common+0x3e>
 8009434:	18e1      	adds	r1, r4, r3
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	2030      	movs	r0, #48	; 0x30
 800943a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800943e:	4422      	add	r2, r4
 8009440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009444:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009448:	3302      	adds	r3, #2
 800944a:	e7c7      	b.n	80093dc <_printf_common+0x58>
 800944c:	2301      	movs	r3, #1
 800944e:	4622      	mov	r2, r4
 8009450:	4649      	mov	r1, r9
 8009452:	4638      	mov	r0, r7
 8009454:	47c0      	blx	r8
 8009456:	3001      	adds	r0, #1
 8009458:	d0e6      	beq.n	8009428 <_printf_common+0xa4>
 800945a:	3601      	adds	r6, #1
 800945c:	e7d9      	b.n	8009412 <_printf_common+0x8e>
	...

08009460 <_printf_i>:
 8009460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	7e0f      	ldrb	r7, [r1, #24]
 8009466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009468:	2f78      	cmp	r7, #120	; 0x78
 800946a:	4691      	mov	r9, r2
 800946c:	4680      	mov	r8, r0
 800946e:	460c      	mov	r4, r1
 8009470:	469a      	mov	sl, r3
 8009472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009476:	d807      	bhi.n	8009488 <_printf_i+0x28>
 8009478:	2f62      	cmp	r7, #98	; 0x62
 800947a:	d80a      	bhi.n	8009492 <_printf_i+0x32>
 800947c:	2f00      	cmp	r7, #0
 800947e:	f000 80d8 	beq.w	8009632 <_printf_i+0x1d2>
 8009482:	2f58      	cmp	r7, #88	; 0x58
 8009484:	f000 80a3 	beq.w	80095ce <_printf_i+0x16e>
 8009488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800948c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009490:	e03a      	b.n	8009508 <_printf_i+0xa8>
 8009492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009496:	2b15      	cmp	r3, #21
 8009498:	d8f6      	bhi.n	8009488 <_printf_i+0x28>
 800949a:	a101      	add	r1, pc, #4	; (adr r1, 80094a0 <_printf_i+0x40>)
 800949c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a0:	080094f9 	.word	0x080094f9
 80094a4:	0800950d 	.word	0x0800950d
 80094a8:	08009489 	.word	0x08009489
 80094ac:	08009489 	.word	0x08009489
 80094b0:	08009489 	.word	0x08009489
 80094b4:	08009489 	.word	0x08009489
 80094b8:	0800950d 	.word	0x0800950d
 80094bc:	08009489 	.word	0x08009489
 80094c0:	08009489 	.word	0x08009489
 80094c4:	08009489 	.word	0x08009489
 80094c8:	08009489 	.word	0x08009489
 80094cc:	08009619 	.word	0x08009619
 80094d0:	0800953d 	.word	0x0800953d
 80094d4:	080095fb 	.word	0x080095fb
 80094d8:	08009489 	.word	0x08009489
 80094dc:	08009489 	.word	0x08009489
 80094e0:	0800963b 	.word	0x0800963b
 80094e4:	08009489 	.word	0x08009489
 80094e8:	0800953d 	.word	0x0800953d
 80094ec:	08009489 	.word	0x08009489
 80094f0:	08009489 	.word	0x08009489
 80094f4:	08009603 	.word	0x08009603
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	1d1a      	adds	r2, r3, #4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009508:	2301      	movs	r3, #1
 800950a:	e0a3      	b.n	8009654 <_printf_i+0x1f4>
 800950c:	6820      	ldr	r0, [r4, #0]
 800950e:	6829      	ldr	r1, [r5, #0]
 8009510:	0606      	lsls	r6, r0, #24
 8009512:	f101 0304 	add.w	r3, r1, #4
 8009516:	d50a      	bpl.n	800952e <_printf_i+0xce>
 8009518:	680e      	ldr	r6, [r1, #0]
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	2e00      	cmp	r6, #0
 800951e:	da03      	bge.n	8009528 <_printf_i+0xc8>
 8009520:	232d      	movs	r3, #45	; 0x2d
 8009522:	4276      	negs	r6, r6
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009528:	485e      	ldr	r0, [pc, #376]	; (80096a4 <_printf_i+0x244>)
 800952a:	230a      	movs	r3, #10
 800952c:	e019      	b.n	8009562 <_printf_i+0x102>
 800952e:	680e      	ldr	r6, [r1, #0]
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009536:	bf18      	it	ne
 8009538:	b236      	sxthne	r6, r6
 800953a:	e7ef      	b.n	800951c <_printf_i+0xbc>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	1d19      	adds	r1, r3, #4
 8009542:	6029      	str	r1, [r5, #0]
 8009544:	0601      	lsls	r1, r0, #24
 8009546:	d501      	bpl.n	800954c <_printf_i+0xec>
 8009548:	681e      	ldr	r6, [r3, #0]
 800954a:	e002      	b.n	8009552 <_printf_i+0xf2>
 800954c:	0646      	lsls	r6, r0, #25
 800954e:	d5fb      	bpl.n	8009548 <_printf_i+0xe8>
 8009550:	881e      	ldrh	r6, [r3, #0]
 8009552:	4854      	ldr	r0, [pc, #336]	; (80096a4 <_printf_i+0x244>)
 8009554:	2f6f      	cmp	r7, #111	; 0x6f
 8009556:	bf0c      	ite	eq
 8009558:	2308      	moveq	r3, #8
 800955a:	230a      	movne	r3, #10
 800955c:	2100      	movs	r1, #0
 800955e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009562:	6865      	ldr	r5, [r4, #4]
 8009564:	60a5      	str	r5, [r4, #8]
 8009566:	2d00      	cmp	r5, #0
 8009568:	bfa2      	ittt	ge
 800956a:	6821      	ldrge	r1, [r4, #0]
 800956c:	f021 0104 	bicge.w	r1, r1, #4
 8009570:	6021      	strge	r1, [r4, #0]
 8009572:	b90e      	cbnz	r6, 8009578 <_printf_i+0x118>
 8009574:	2d00      	cmp	r5, #0
 8009576:	d04d      	beq.n	8009614 <_printf_i+0x1b4>
 8009578:	4615      	mov	r5, r2
 800957a:	fbb6 f1f3 	udiv	r1, r6, r3
 800957e:	fb03 6711 	mls	r7, r3, r1, r6
 8009582:	5dc7      	ldrb	r7, [r0, r7]
 8009584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009588:	4637      	mov	r7, r6
 800958a:	42bb      	cmp	r3, r7
 800958c:	460e      	mov	r6, r1
 800958e:	d9f4      	bls.n	800957a <_printf_i+0x11a>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10b      	bne.n	80095ac <_printf_i+0x14c>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07de      	lsls	r6, r3, #31
 8009598:	d508      	bpl.n	80095ac <_printf_i+0x14c>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	4299      	cmp	r1, r3
 80095a0:	bfde      	ittt	le
 80095a2:	2330      	movle	r3, #48	; 0x30
 80095a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095ac:	1b52      	subs	r2, r2, r5
 80095ae:	6122      	str	r2, [r4, #16]
 80095b0:	f8cd a000 	str.w	sl, [sp]
 80095b4:	464b      	mov	r3, r9
 80095b6:	aa03      	add	r2, sp, #12
 80095b8:	4621      	mov	r1, r4
 80095ba:	4640      	mov	r0, r8
 80095bc:	f7ff fee2 	bl	8009384 <_printf_common>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d14c      	bne.n	800965e <_printf_i+0x1fe>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b004      	add	sp, #16
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	4835      	ldr	r0, [pc, #212]	; (80096a4 <_printf_i+0x244>)
 80095d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095d4:	6829      	ldr	r1, [r5, #0]
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095dc:	6029      	str	r1, [r5, #0]
 80095de:	061d      	lsls	r5, r3, #24
 80095e0:	d514      	bpl.n	800960c <_printf_i+0x1ac>
 80095e2:	07df      	lsls	r7, r3, #31
 80095e4:	bf44      	itt	mi
 80095e6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ea:	6023      	strmi	r3, [r4, #0]
 80095ec:	b91e      	cbnz	r6, 80095f6 <_printf_i+0x196>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f023 0320 	bic.w	r3, r3, #32
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	2310      	movs	r3, #16
 80095f8:	e7b0      	b.n	800955c <_printf_i+0xfc>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f043 0320 	orr.w	r3, r3, #32
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	2378      	movs	r3, #120	; 0x78
 8009604:	4828      	ldr	r0, [pc, #160]	; (80096a8 <_printf_i+0x248>)
 8009606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800960a:	e7e3      	b.n	80095d4 <_printf_i+0x174>
 800960c:	0659      	lsls	r1, r3, #25
 800960e:	bf48      	it	mi
 8009610:	b2b6      	uxthmi	r6, r6
 8009612:	e7e6      	b.n	80095e2 <_printf_i+0x182>
 8009614:	4615      	mov	r5, r2
 8009616:	e7bb      	b.n	8009590 <_printf_i+0x130>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	6826      	ldr	r6, [r4, #0]
 800961c:	6961      	ldr	r1, [r4, #20]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	6028      	str	r0, [r5, #0]
 8009622:	0635      	lsls	r5, r6, #24
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	d501      	bpl.n	800962c <_printf_i+0x1cc>
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	e002      	b.n	8009632 <_printf_i+0x1d2>
 800962c:	0670      	lsls	r0, r6, #25
 800962e:	d5fb      	bpl.n	8009628 <_printf_i+0x1c8>
 8009630:	8019      	strh	r1, [r3, #0]
 8009632:	2300      	movs	r3, #0
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	4615      	mov	r5, r2
 8009638:	e7ba      	b.n	80095b0 <_printf_i+0x150>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	2100      	movs	r1, #0
 8009646:	4628      	mov	r0, r5
 8009648:	f7f6 fe52 	bl	80002f0 <memchr>
 800964c:	b108      	cbz	r0, 8009652 <_printf_i+0x1f2>
 800964e:	1b40      	subs	r0, r0, r5
 8009650:	6060      	str	r0, [r4, #4]
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	2300      	movs	r3, #0
 8009658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965c:	e7a8      	b.n	80095b0 <_printf_i+0x150>
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	462a      	mov	r2, r5
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d0ab      	beq.n	80095c4 <_printf_i+0x164>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	079b      	lsls	r3, r3, #30
 8009670:	d413      	bmi.n	800969a <_printf_i+0x23a>
 8009672:	68e0      	ldr	r0, [r4, #12]
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	4298      	cmp	r0, r3
 8009678:	bfb8      	it	lt
 800967a:	4618      	movlt	r0, r3
 800967c:	e7a4      	b.n	80095c8 <_printf_i+0x168>
 800967e:	2301      	movs	r3, #1
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	47d0      	blx	sl
 8009688:	3001      	adds	r0, #1
 800968a:	d09b      	beq.n	80095c4 <_printf_i+0x164>
 800968c:	3501      	adds	r5, #1
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	9903      	ldr	r1, [sp, #12]
 8009692:	1a5b      	subs	r3, r3, r1
 8009694:	42ab      	cmp	r3, r5
 8009696:	dcf2      	bgt.n	800967e <_printf_i+0x21e>
 8009698:	e7eb      	b.n	8009672 <_printf_i+0x212>
 800969a:	2500      	movs	r5, #0
 800969c:	f104 0619 	add.w	r6, r4, #25
 80096a0:	e7f5      	b.n	800968e <_printf_i+0x22e>
 80096a2:	bf00      	nop
 80096a4:	0800d29e 	.word	0x0800d29e
 80096a8:	0800d2af 	.word	0x0800d2af

080096ac <siprintf>:
 80096ac:	b40e      	push	{r1, r2, r3}
 80096ae:	b500      	push	{lr}
 80096b0:	b09c      	sub	sp, #112	; 0x70
 80096b2:	ab1d      	add	r3, sp, #116	; 0x74
 80096b4:	9002      	str	r0, [sp, #8]
 80096b6:	9006      	str	r0, [sp, #24]
 80096b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096bc:	4809      	ldr	r0, [pc, #36]	; (80096e4 <siprintf+0x38>)
 80096be:	9107      	str	r1, [sp, #28]
 80096c0:	9104      	str	r1, [sp, #16]
 80096c2:	4909      	ldr	r1, [pc, #36]	; (80096e8 <siprintf+0x3c>)
 80096c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c8:	9105      	str	r1, [sp, #20]
 80096ca:	6800      	ldr	r0, [r0, #0]
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	a902      	add	r1, sp, #8
 80096d0:	f001 faea 	bl	800aca8 <_svfiprintf_r>
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	b01c      	add	sp, #112	; 0x70
 80096dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e0:	b003      	add	sp, #12
 80096e2:	4770      	bx	lr
 80096e4:	24000020 	.word	0x24000020
 80096e8:	ffff0208 	.word	0xffff0208

080096ec <quorem>:
 80096ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	6903      	ldr	r3, [r0, #16]
 80096f2:	690c      	ldr	r4, [r1, #16]
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	4607      	mov	r7, r0
 80096f8:	f2c0 8081 	blt.w	80097fe <quorem+0x112>
 80096fc:	3c01      	subs	r4, #1
 80096fe:	f101 0814 	add.w	r8, r1, #20
 8009702:	f100 0514 	add.w	r5, r0, #20
 8009706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009714:	3301      	adds	r3, #1
 8009716:	429a      	cmp	r2, r3
 8009718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800971c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009720:	fbb2 f6f3 	udiv	r6, r2, r3
 8009724:	d331      	bcc.n	800978a <quorem+0x9e>
 8009726:	f04f 0e00 	mov.w	lr, #0
 800972a:	4640      	mov	r0, r8
 800972c:	46ac      	mov	ip, r5
 800972e:	46f2      	mov	sl, lr
 8009730:	f850 2b04 	ldr.w	r2, [r0], #4
 8009734:	b293      	uxth	r3, r2
 8009736:	fb06 e303 	mla	r3, r6, r3, lr
 800973a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800973e:	b29b      	uxth	r3, r3
 8009740:	ebaa 0303 	sub.w	r3, sl, r3
 8009744:	f8dc a000 	ldr.w	sl, [ip]
 8009748:	0c12      	lsrs	r2, r2, #16
 800974a:	fa13 f38a 	uxtah	r3, r3, sl
 800974e:	fb06 e202 	mla	r2, r6, r2, lr
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	9b00      	ldr	r3, [sp, #0]
 8009756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800975a:	b292      	uxth	r2, r2
 800975c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009764:	f8bd 3000 	ldrh.w	r3, [sp]
 8009768:	4581      	cmp	r9, r0
 800976a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800976e:	f84c 3b04 	str.w	r3, [ip], #4
 8009772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009776:	d2db      	bcs.n	8009730 <quorem+0x44>
 8009778:	f855 300b 	ldr.w	r3, [r5, fp]
 800977c:	b92b      	cbnz	r3, 800978a <quorem+0x9e>
 800977e:	9b01      	ldr	r3, [sp, #4]
 8009780:	3b04      	subs	r3, #4
 8009782:	429d      	cmp	r5, r3
 8009784:	461a      	mov	r2, r3
 8009786:	d32e      	bcc.n	80097e6 <quorem+0xfa>
 8009788:	613c      	str	r4, [r7, #16]
 800978a:	4638      	mov	r0, r7
 800978c:	f001 f838 	bl	800a800 <__mcmp>
 8009790:	2800      	cmp	r0, #0
 8009792:	db24      	blt.n	80097de <quorem+0xf2>
 8009794:	3601      	adds	r6, #1
 8009796:	4628      	mov	r0, r5
 8009798:	f04f 0c00 	mov.w	ip, #0
 800979c:	f858 2b04 	ldr.w	r2, [r8], #4
 80097a0:	f8d0 e000 	ldr.w	lr, [r0]
 80097a4:	b293      	uxth	r3, r2
 80097a6:	ebac 0303 	sub.w	r3, ip, r3
 80097aa:	0c12      	lsrs	r2, r2, #16
 80097ac:	fa13 f38e 	uxtah	r3, r3, lr
 80097b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097be:	45c1      	cmp	r9, r8
 80097c0:	f840 3b04 	str.w	r3, [r0], #4
 80097c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097c8:	d2e8      	bcs.n	800979c <quorem+0xb0>
 80097ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097d2:	b922      	cbnz	r2, 80097de <quorem+0xf2>
 80097d4:	3b04      	subs	r3, #4
 80097d6:	429d      	cmp	r5, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	d30a      	bcc.n	80097f2 <quorem+0x106>
 80097dc:	613c      	str	r4, [r7, #16]
 80097de:	4630      	mov	r0, r6
 80097e0:	b003      	add	sp, #12
 80097e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	3b04      	subs	r3, #4
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d1cc      	bne.n	8009788 <quorem+0x9c>
 80097ee:	3c01      	subs	r4, #1
 80097f0:	e7c7      	b.n	8009782 <quorem+0x96>
 80097f2:	6812      	ldr	r2, [r2, #0]
 80097f4:	3b04      	subs	r3, #4
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d1f0      	bne.n	80097dc <quorem+0xf0>
 80097fa:	3c01      	subs	r4, #1
 80097fc:	e7eb      	b.n	80097d6 <quorem+0xea>
 80097fe:	2000      	movs	r0, #0
 8009800:	e7ee      	b.n	80097e0 <quorem+0xf4>
 8009802:	0000      	movs	r0, r0
 8009804:	0000      	movs	r0, r0
	...

08009808 <_dtoa_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	ed2d 8b02 	vpush	{d8}
 8009810:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009812:	b091      	sub	sp, #68	; 0x44
 8009814:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009818:	ec59 8b10 	vmov	r8, r9, d0
 800981c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800981e:	9106      	str	r1, [sp, #24]
 8009820:	4606      	mov	r6, r0
 8009822:	9208      	str	r2, [sp, #32]
 8009824:	930c      	str	r3, [sp, #48]	; 0x30
 8009826:	b975      	cbnz	r5, 8009846 <_dtoa_r+0x3e>
 8009828:	2010      	movs	r0, #16
 800982a:	f000 fd5f 	bl	800a2ec <malloc>
 800982e:	4602      	mov	r2, r0
 8009830:	6270      	str	r0, [r6, #36]	; 0x24
 8009832:	b920      	cbnz	r0, 800983e <_dtoa_r+0x36>
 8009834:	4baa      	ldr	r3, [pc, #680]	; (8009ae0 <_dtoa_r+0x2d8>)
 8009836:	21ea      	movs	r1, #234	; 0xea
 8009838:	48aa      	ldr	r0, [pc, #680]	; (8009ae4 <_dtoa_r+0x2dc>)
 800983a:	f001 fb45 	bl	800aec8 <__assert_func>
 800983e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009842:	6005      	str	r5, [r0, #0]
 8009844:	60c5      	str	r5, [r0, #12]
 8009846:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	b151      	cbz	r1, 8009862 <_dtoa_r+0x5a>
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	604a      	str	r2, [r1, #4]
 8009850:	2301      	movs	r3, #1
 8009852:	4093      	lsls	r3, r2
 8009854:	608b      	str	r3, [r1, #8]
 8009856:	4630      	mov	r0, r6
 8009858:	f000 fd90 	bl	800a37c <_Bfree>
 800985c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f1b9 0300 	subs.w	r3, r9, #0
 8009866:	bfbb      	ittet	lt
 8009868:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800986c:	9303      	strlt	r3, [sp, #12]
 800986e:	2300      	movge	r3, #0
 8009870:	2201      	movlt	r2, #1
 8009872:	bfac      	ite	ge
 8009874:	6023      	strge	r3, [r4, #0]
 8009876:	6022      	strlt	r2, [r4, #0]
 8009878:	4b9b      	ldr	r3, [pc, #620]	; (8009ae8 <_dtoa_r+0x2e0>)
 800987a:	9c03      	ldr	r4, [sp, #12]
 800987c:	43a3      	bics	r3, r4
 800987e:	d11c      	bne.n	80098ba <_dtoa_r+0xb2>
 8009880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009882:	f242 730f 	movw	r3, #9999	; 0x270f
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800988c:	ea53 0308 	orrs.w	r3, r3, r8
 8009890:	f000 84fd 	beq.w	800a28e <_dtoa_r+0xa86>
 8009894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009896:	b963      	cbnz	r3, 80098b2 <_dtoa_r+0xaa>
 8009898:	4b94      	ldr	r3, [pc, #592]	; (8009aec <_dtoa_r+0x2e4>)
 800989a:	e01f      	b.n	80098dc <_dtoa_r+0xd4>
 800989c:	4b94      	ldr	r3, [pc, #592]	; (8009af0 <_dtoa_r+0x2e8>)
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	3308      	adds	r3, #8
 80098a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	9801      	ldr	r0, [sp, #4]
 80098a8:	b011      	add	sp, #68	; 0x44
 80098aa:	ecbd 8b02 	vpop	{d8}
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	4b8e      	ldr	r3, [pc, #568]	; (8009aec <_dtoa_r+0x2e4>)
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	3303      	adds	r3, #3
 80098b8:	e7f3      	b.n	80098a2 <_dtoa_r+0x9a>
 80098ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80098be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80098c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c6:	d10b      	bne.n	80098e0 <_dtoa_r+0xd8>
 80098c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ca:	2301      	movs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 84d9 	beq.w	800a288 <_dtoa_r+0xa80>
 80098d6:	4887      	ldr	r0, [pc, #540]	; (8009af4 <_dtoa_r+0x2ec>)
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	e7e2      	b.n	80098a6 <_dtoa_r+0x9e>
 80098e0:	a90f      	add	r1, sp, #60	; 0x3c
 80098e2:	aa0e      	add	r2, sp, #56	; 0x38
 80098e4:	4630      	mov	r0, r6
 80098e6:	eeb0 0b48 	vmov.f64	d0, d8
 80098ea:	f001 f82f 	bl	800a94c <__d2b>
 80098ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80098f2:	4605      	mov	r5, r0
 80098f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d046      	beq.n	8009988 <_dtoa_r+0x180>
 80098fa:	ee18 4a90 	vmov	r4, s17
 80098fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009902:	ec53 2b18 	vmov	r2, r3, d8
 8009906:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800990a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800990e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009912:	2400      	movs	r4, #0
 8009914:	ec43 2b16 	vmov	d6, r2, r3
 8009918:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800991c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009ac8 <_dtoa_r+0x2c0>
 8009920:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009924:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009ad0 <_dtoa_r+0x2c8>
 8009928:	eea7 6b05 	vfma.f64	d6, d7, d5
 800992c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009ad8 <_dtoa_r+0x2d0>
 8009930:	ee07 1a90 	vmov	s15, r1
 8009934:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009938:	eeb0 7b46 	vmov.f64	d7, d6
 800993c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009940:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009944:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	ee16 ba90 	vmov	fp, s13
 8009950:	940a      	str	r4, [sp, #40]	; 0x28
 8009952:	d508      	bpl.n	8009966 <_dtoa_r+0x15e>
 8009954:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009958:	eeb4 6b47 	vcmp.f64	d6, d7
 800995c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009960:	bf18      	it	ne
 8009962:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009966:	f1bb 0f16 	cmp.w	fp, #22
 800996a:	d82f      	bhi.n	80099cc <_dtoa_r+0x1c4>
 800996c:	4b62      	ldr	r3, [pc, #392]	; (8009af8 <_dtoa_r+0x2f0>)
 800996e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009972:	ed93 7b00 	vldr	d7, [r3]
 8009976:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997e:	d501      	bpl.n	8009984 <_dtoa_r+0x17c>
 8009980:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009984:	2300      	movs	r3, #0
 8009986:	e022      	b.n	80099ce <_dtoa_r+0x1c6>
 8009988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800998a:	4401      	add	r1, r0
 800998c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009990:	2b20      	cmp	r3, #32
 8009992:	bfc1      	itttt	gt
 8009994:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009998:	fa04 f303 	lslgt.w	r3, r4, r3
 800999c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80099a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80099a4:	bfd6      	itet	le
 80099a6:	f1c3 0320 	rsble	r3, r3, #32
 80099aa:	ea43 0808 	orrgt.w	r8, r3, r8
 80099ae:	fa08 f803 	lslle.w	r8, r8, r3
 80099b2:	ee07 8a90 	vmov	s15, r8
 80099b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80099ba:	3901      	subs	r1, #1
 80099bc:	ee17 4a90 	vmov	r4, s15
 80099c0:	ec53 2b17 	vmov	r2, r3, d7
 80099c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80099c8:	2401      	movs	r4, #1
 80099ca:	e7a3      	b.n	8009914 <_dtoa_r+0x10c>
 80099cc:	2301      	movs	r3, #1
 80099ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80099d0:	1a43      	subs	r3, r0, r1
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	bf45      	ittet	mi
 80099d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80099da:	9304      	strmi	r3, [sp, #16]
 80099dc:	2300      	movpl	r3, #0
 80099de:	2300      	movmi	r3, #0
 80099e0:	9205      	str	r2, [sp, #20]
 80099e2:	bf54      	ite	pl
 80099e4:	9304      	strpl	r3, [sp, #16]
 80099e6:	9305      	strmi	r3, [sp, #20]
 80099e8:	f1bb 0f00 	cmp.w	fp, #0
 80099ec:	db18      	blt.n	8009a20 <_dtoa_r+0x218>
 80099ee:	9b05      	ldr	r3, [sp, #20]
 80099f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80099f4:	445b      	add	r3, fp
 80099f6:	9305      	str	r3, [sp, #20]
 80099f8:	2300      	movs	r3, #0
 80099fa:	9a06      	ldr	r2, [sp, #24]
 80099fc:	2a09      	cmp	r2, #9
 80099fe:	d849      	bhi.n	8009a94 <_dtoa_r+0x28c>
 8009a00:	2a05      	cmp	r2, #5
 8009a02:	bfc4      	itt	gt
 8009a04:	3a04      	subgt	r2, #4
 8009a06:	9206      	strgt	r2, [sp, #24]
 8009a08:	9a06      	ldr	r2, [sp, #24]
 8009a0a:	f1a2 0202 	sub.w	r2, r2, #2
 8009a0e:	bfcc      	ite	gt
 8009a10:	2400      	movgt	r4, #0
 8009a12:	2401      	movle	r4, #1
 8009a14:	2a03      	cmp	r2, #3
 8009a16:	d848      	bhi.n	8009aaa <_dtoa_r+0x2a2>
 8009a18:	e8df f002 	tbb	[pc, r2]
 8009a1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009a20:	9b04      	ldr	r3, [sp, #16]
 8009a22:	2200      	movs	r2, #0
 8009a24:	eba3 030b 	sub.w	r3, r3, fp
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a2c:	f1cb 0300 	rsb	r3, fp, #0
 8009a30:	e7e3      	b.n	80099fa <_dtoa_r+0x1f2>
 8009a32:	2200      	movs	r2, #0
 8009a34:	9207      	str	r2, [sp, #28]
 8009a36:	9a08      	ldr	r2, [sp, #32]
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	dc39      	bgt.n	8009ab0 <_dtoa_r+0x2a8>
 8009a3c:	f04f 0a01 	mov.w	sl, #1
 8009a40:	46d1      	mov	r9, sl
 8009a42:	4652      	mov	r2, sl
 8009a44:	f8cd a020 	str.w	sl, [sp, #32]
 8009a48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6079      	str	r1, [r7, #4]
 8009a4e:	2004      	movs	r0, #4
 8009a50:	f100 0c14 	add.w	ip, r0, #20
 8009a54:	4594      	cmp	ip, r2
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	d92f      	bls.n	8009aba <_dtoa_r+0x2b2>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a5e:	f000 fc4d 	bl	800a2fc <_Balloc>
 8009a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a64:	9001      	str	r0, [sp, #4]
 8009a66:	4602      	mov	r2, r0
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d149      	bne.n	8009b00 <_dtoa_r+0x2f8>
 8009a6c:	4b23      	ldr	r3, [pc, #140]	; (8009afc <_dtoa_r+0x2f4>)
 8009a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a72:	e6e1      	b.n	8009838 <_dtoa_r+0x30>
 8009a74:	2201      	movs	r2, #1
 8009a76:	e7dd      	b.n	8009a34 <_dtoa_r+0x22c>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9207      	str	r2, [sp, #28]
 8009a7c:	9a08      	ldr	r2, [sp, #32]
 8009a7e:	eb0b 0a02 	add.w	sl, fp, r2
 8009a82:	f10a 0901 	add.w	r9, sl, #1
 8009a86:	464a      	mov	r2, r9
 8009a88:	2a01      	cmp	r2, #1
 8009a8a:	bfb8      	it	lt
 8009a8c:	2201      	movlt	r2, #1
 8009a8e:	e7db      	b.n	8009a48 <_dtoa_r+0x240>
 8009a90:	2201      	movs	r2, #1
 8009a92:	e7f2      	b.n	8009a7a <_dtoa_r+0x272>
 8009a94:	2401      	movs	r4, #1
 8009a96:	2200      	movs	r2, #0
 8009a98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	46d1      	mov	r9, sl
 8009aa4:	2212      	movs	r2, #18
 8009aa6:	9108      	str	r1, [sp, #32]
 8009aa8:	e7ce      	b.n	8009a48 <_dtoa_r+0x240>
 8009aaa:	2201      	movs	r2, #1
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	e7f5      	b.n	8009a9c <_dtoa_r+0x294>
 8009ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009ab4:	46d1      	mov	r9, sl
 8009ab6:	4652      	mov	r2, sl
 8009ab8:	e7c6      	b.n	8009a48 <_dtoa_r+0x240>
 8009aba:	3101      	adds	r1, #1
 8009abc:	6079      	str	r1, [r7, #4]
 8009abe:	0040      	lsls	r0, r0, #1
 8009ac0:	e7c6      	b.n	8009a50 <_dtoa_r+0x248>
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	636f4361 	.word	0x636f4361
 8009acc:	3fd287a7 	.word	0x3fd287a7
 8009ad0:	8b60c8b3 	.word	0x8b60c8b3
 8009ad4:	3fc68a28 	.word	0x3fc68a28
 8009ad8:	509f79fb 	.word	0x509f79fb
 8009adc:	3fd34413 	.word	0x3fd34413
 8009ae0:	0800d2cd 	.word	0x0800d2cd
 8009ae4:	0800d2e4 	.word	0x0800d2e4
 8009ae8:	7ff00000 	.word	0x7ff00000
 8009aec:	0800d2c9 	.word	0x0800d2c9
 8009af0:	0800d2c0 	.word	0x0800d2c0
 8009af4:	0800d29d 	.word	0x0800d29d
 8009af8:	0800d3d8 	.word	0x0800d3d8
 8009afc:	0800d33f 	.word	0x0800d33f
 8009b00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009b02:	9901      	ldr	r1, [sp, #4]
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	f1b9 0f0e 	cmp.w	r9, #14
 8009b0a:	d86c      	bhi.n	8009be6 <_dtoa_r+0x3de>
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	d06a      	beq.n	8009be6 <_dtoa_r+0x3de>
 8009b10:	f1bb 0f00 	cmp.w	fp, #0
 8009b14:	f340 80a0 	ble.w	8009c58 <_dtoa_r+0x450>
 8009b18:	49c1      	ldr	r1, [pc, #772]	; (8009e20 <_dtoa_r+0x618>)
 8009b1a:	f00b 020f 	and.w	r2, fp, #15
 8009b1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009b22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b26:	ed92 7b00 	vldr	d7, [r2]
 8009b2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009b2e:	f000 8087 	beq.w	8009c40 <_dtoa_r+0x438>
 8009b32:	4abc      	ldr	r2, [pc, #752]	; (8009e24 <_dtoa_r+0x61c>)
 8009b34:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b40:	f001 010f 	and.w	r1, r1, #15
 8009b44:	2203      	movs	r2, #3
 8009b46:	48b7      	ldr	r0, [pc, #732]	; (8009e24 <_dtoa_r+0x61c>)
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d17b      	bne.n	8009c44 <_dtoa_r+0x43c>
 8009b4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	f000 80a2 	beq.w	8009ca4 <_dtoa_r+0x49c>
 8009b60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009b64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b70:	f140 8098 	bpl.w	8009ca4 <_dtoa_r+0x49c>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	f000 8094 	beq.w	8009ca4 <_dtoa_r+0x49c>
 8009b7c:	f1ba 0f00 	cmp.w	sl, #0
 8009b80:	dd2f      	ble.n	8009be2 <_dtoa_r+0x3da>
 8009b82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b8e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b92:	3201      	adds	r2, #1
 8009b94:	4650      	mov	r0, sl
 8009b96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b9e:	ee07 2a90 	vmov	s15, r2
 8009ba2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ba6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009baa:	ee15 4a90 	vmov	r4, s11
 8009bae:	ec52 1b15 	vmov	r1, r2, d5
 8009bb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d177      	bne.n	8009caa <_dtoa_r+0x4a2>
 8009bba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009bbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009bc2:	ec42 1b17 	vmov	d7, r1, r2
 8009bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bce:	f300 8263 	bgt.w	800a098 <_dtoa_r+0x890>
 8009bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8009bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	f100 8258 	bmi.w	800a092 <_dtoa_r+0x88a>
 8009be2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	f2c0 811d 	blt.w	8009e28 <_dtoa_r+0x620>
 8009bee:	f1bb 0f0e 	cmp.w	fp, #14
 8009bf2:	f300 8119 	bgt.w	8009e28 <_dtoa_r+0x620>
 8009bf6:	4b8a      	ldr	r3, [pc, #552]	; (8009e20 <_dtoa_r+0x618>)
 8009bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009bfc:	ed93 6b00 	vldr	d6, [r3]
 8009c00:	9b08      	ldr	r3, [sp, #32]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f280 80b7 	bge.w	8009d76 <_dtoa_r+0x56e>
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	f300 80b3 	bgt.w	8009d76 <_dtoa_r+0x56e>
 8009c10:	f040 823f 	bne.w	800a092 <_dtoa_r+0x88a>
 8009c14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	464c      	mov	r4, r9
 8009c2a:	464f      	mov	r7, r9
 8009c2c:	f280 8215 	bge.w	800a05a <_dtoa_r+0x852>
 8009c30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c34:	2331      	movs	r3, #49	; 0x31
 8009c36:	f808 3b01 	strb.w	r3, [r8], #1
 8009c3a:	f10b 0b01 	add.w	fp, fp, #1
 8009c3e:	e211      	b.n	800a064 <_dtoa_r+0x85c>
 8009c40:	2202      	movs	r2, #2
 8009c42:	e780      	b.n	8009b46 <_dtoa_r+0x33e>
 8009c44:	07cc      	lsls	r4, r1, #31
 8009c46:	d504      	bpl.n	8009c52 <_dtoa_r+0x44a>
 8009c48:	ed90 6b00 	vldr	d6, [r0]
 8009c4c:	3201      	adds	r2, #1
 8009c4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c52:	1049      	asrs	r1, r1, #1
 8009c54:	3008      	adds	r0, #8
 8009c56:	e777      	b.n	8009b48 <_dtoa_r+0x340>
 8009c58:	d022      	beq.n	8009ca0 <_dtoa_r+0x498>
 8009c5a:	f1cb 0100 	rsb	r1, fp, #0
 8009c5e:	4a70      	ldr	r2, [pc, #448]	; (8009e20 <_dtoa_r+0x618>)
 8009c60:	f001 000f 	and.w	r0, r1, #15
 8009c64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c68:	ed92 7b00 	vldr	d7, [r2]
 8009c6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009c70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c74:	486b      	ldr	r0, [pc, #428]	; (8009e24 <_dtoa_r+0x61c>)
 8009c76:	1109      	asrs	r1, r1, #4
 8009c78:	2400      	movs	r4, #0
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	b929      	cbnz	r1, 8009c8a <_dtoa_r+0x482>
 8009c7e:	2c00      	cmp	r4, #0
 8009c80:	f43f af6a 	beq.w	8009b58 <_dtoa_r+0x350>
 8009c84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c88:	e766      	b.n	8009b58 <_dtoa_r+0x350>
 8009c8a:	07cf      	lsls	r7, r1, #31
 8009c8c:	d505      	bpl.n	8009c9a <_dtoa_r+0x492>
 8009c8e:	ed90 6b00 	vldr	d6, [r0]
 8009c92:	3201      	adds	r2, #1
 8009c94:	2401      	movs	r4, #1
 8009c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c9a:	1049      	asrs	r1, r1, #1
 8009c9c:	3008      	adds	r0, #8
 8009c9e:	e7ed      	b.n	8009c7c <_dtoa_r+0x474>
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	e759      	b.n	8009b58 <_dtoa_r+0x350>
 8009ca4:	465f      	mov	r7, fp
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	e775      	b.n	8009b96 <_dtoa_r+0x38e>
 8009caa:	ec42 1b17 	vmov	d7, r1, r2
 8009cae:	4a5c      	ldr	r2, [pc, #368]	; (8009e20 <_dtoa_r+0x618>)
 8009cb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cb4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	1814      	adds	r4, r2, r0
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	b352      	cbz	r2, 8009d16 <_dtoa_r+0x50e>
 8009cc0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009cc4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009cc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ccc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009cd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009cd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009cd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cdc:	ee14 2a90 	vmov	r2, s9
 8009ce0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ce4:	3230      	adds	r2, #48	; 0x30
 8009ce6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009cea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf2:	f808 2b01 	strb.w	r2, [r8], #1
 8009cf6:	d439      	bmi.n	8009d6c <_dtoa_r+0x564>
 8009cf8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009cfc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	d472      	bmi.n	8009dec <_dtoa_r+0x5e4>
 8009d06:	45a0      	cmp	r8, r4
 8009d08:	f43f af6b 	beq.w	8009be2 <_dtoa_r+0x3da>
 8009d0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d14:	e7e0      	b.n	8009cd8 <_dtoa_r+0x4d0>
 8009d16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d1e:	4621      	mov	r1, r4
 8009d20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d28:	ee14 2a90 	vmov	r2, s9
 8009d2c:	3230      	adds	r2, #48	; 0x30
 8009d2e:	f808 2b01 	strb.w	r2, [r8], #1
 8009d32:	45a0      	cmp	r8, r4
 8009d34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d3c:	d118      	bne.n	8009d70 <_dtoa_r+0x568>
 8009d3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009d42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009d46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	dc4d      	bgt.n	8009dec <_dtoa_r+0x5e4>
 8009d50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5c:	f57f af41 	bpl.w	8009be2 <_dtoa_r+0x3da>
 8009d60:	4688      	mov	r8, r1
 8009d62:	3901      	subs	r1, #1
 8009d64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009d68:	2b30      	cmp	r3, #48	; 0x30
 8009d6a:	d0f9      	beq.n	8009d60 <_dtoa_r+0x558>
 8009d6c:	46bb      	mov	fp, r7
 8009d6e:	e02a      	b.n	8009dc6 <_dtoa_r+0x5be>
 8009d70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d74:	e7d6      	b.n	8009d24 <_dtoa_r+0x51c>
 8009d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009d7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d8a:	ee15 3a10 	vmov	r3, s10
 8009d8e:	3330      	adds	r3, #48	; 0x30
 8009d90:	f808 3b01 	strb.w	r3, [r8], #1
 8009d94:	9b01      	ldr	r3, [sp, #4]
 8009d96:	eba8 0303 	sub.w	r3, r8, r3
 8009d9a:	4599      	cmp	r9, r3
 8009d9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009da0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009da4:	d133      	bne.n	8009e0e <_dtoa_r+0x606>
 8009da6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009daa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	dc1a      	bgt.n	8009dea <_dtoa_r+0x5e2>
 8009db4:	eeb4 7b46 	vcmp.f64	d7, d6
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d103      	bne.n	8009dc6 <_dtoa_r+0x5be>
 8009dbe:	ee15 3a10 	vmov	r3, s10
 8009dc2:	07d9      	lsls	r1, r3, #31
 8009dc4:	d411      	bmi.n	8009dea <_dtoa_r+0x5e2>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fad7 	bl	800a37c <_Bfree>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dd2:	f888 3000 	strb.w	r3, [r8]
 8009dd6:	f10b 0301 	add.w	r3, fp, #1
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f43f ad61 	beq.w	80098a6 <_dtoa_r+0x9e>
 8009de4:	f8c3 8000 	str.w	r8, [r3]
 8009de8:	e55d      	b.n	80098a6 <_dtoa_r+0x9e>
 8009dea:	465f      	mov	r7, fp
 8009dec:	4643      	mov	r3, r8
 8009dee:	4698      	mov	r8, r3
 8009df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009df4:	2a39      	cmp	r2, #57	; 0x39
 8009df6:	d106      	bne.n	8009e06 <_dtoa_r+0x5fe>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d1f7      	bne.n	8009dee <_dtoa_r+0x5e6>
 8009dfe:	9901      	ldr	r1, [sp, #4]
 8009e00:	2230      	movs	r2, #48	; 0x30
 8009e02:	3701      	adds	r7, #1
 8009e04:	700a      	strb	r2, [r1, #0]
 8009e06:	781a      	ldrb	r2, [r3, #0]
 8009e08:	3201      	adds	r2, #1
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e7ae      	b.n	8009d6c <_dtoa_r+0x564>
 8009e0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1a:	d1b2      	bne.n	8009d82 <_dtoa_r+0x57a>
 8009e1c:	e7d3      	b.n	8009dc6 <_dtoa_r+0x5be>
 8009e1e:	bf00      	nop
 8009e20:	0800d3d8 	.word	0x0800d3d8
 8009e24:	0800d3b0 	.word	0x0800d3b0
 8009e28:	9907      	ldr	r1, [sp, #28]
 8009e2a:	2900      	cmp	r1, #0
 8009e2c:	f000 80d0 	beq.w	8009fd0 <_dtoa_r+0x7c8>
 8009e30:	9906      	ldr	r1, [sp, #24]
 8009e32:	2901      	cmp	r1, #1
 8009e34:	f300 80b4 	bgt.w	8009fa0 <_dtoa_r+0x798>
 8009e38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	f000 80ac 	beq.w	8009f98 <_dtoa_r+0x790>
 8009e40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e48:	461c      	mov	r4, r3
 8009e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4413      	add	r3, r2
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	2101      	movs	r1, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	4630      	mov	r0, r6
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f000 fb46 	bl	800a4ec <__i2b>
 8009e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e62:	4607      	mov	r7, r0
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	dd0d      	ble.n	8009e86 <_dtoa_r+0x67e>
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	2a00      	cmp	r2, #0
 8009e6e:	dd0a      	ble.n	8009e86 <_dtoa_r+0x67e>
 8009e70:	4542      	cmp	r2, r8
 8009e72:	9904      	ldr	r1, [sp, #16]
 8009e74:	bfa8      	it	ge
 8009e76:	4642      	movge	r2, r8
 8009e78:	1a89      	subs	r1, r1, r2
 8009e7a:	9104      	str	r1, [sp, #16]
 8009e7c:	9905      	ldr	r1, [sp, #20]
 8009e7e:	eba8 0802 	sub.w	r8, r8, r2
 8009e82:	1a8a      	subs	r2, r1, r2
 8009e84:	9205      	str	r2, [sp, #20]
 8009e86:	b303      	cbz	r3, 8009eca <_dtoa_r+0x6c2>
 8009e88:	9a07      	ldr	r2, [sp, #28]
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	f000 80a5 	beq.w	8009fda <_dtoa_r+0x7d2>
 8009e90:	2c00      	cmp	r4, #0
 8009e92:	dd13      	ble.n	8009ebc <_dtoa_r+0x6b4>
 8009e94:	4639      	mov	r1, r7
 8009e96:	4622      	mov	r2, r4
 8009e98:	4630      	mov	r0, r6
 8009e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e9c:	f000 fbe6 	bl	800a66c <__pow5mult>
 8009ea0:	462a      	mov	r2, r5
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f000 fb36 	bl	800a518 <__multiply>
 8009eac:	4629      	mov	r1, r5
 8009eae:	900a      	str	r0, [sp, #40]	; 0x28
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f000 fa63 	bl	800a37c <_Bfree>
 8009eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eba:	4615      	mov	r5, r2
 8009ebc:	1b1a      	subs	r2, r3, r4
 8009ebe:	d004      	beq.n	8009eca <_dtoa_r+0x6c2>
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f000 fbd2 	bl	800a66c <__pow5mult>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f000 fb0d 	bl	800a4ec <__i2b>
 8009ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f340 8081 	ble.w	8009fde <_dtoa_r+0x7d6>
 8009edc:	461a      	mov	r2, r3
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 fbc3 	bl	800a66c <__pow5mult>
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	4604      	mov	r4, r0
 8009eec:	dd7a      	ble.n	8009fe4 <_dtoa_r+0x7dc>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ef8:	6910      	ldr	r0, [r2, #16]
 8009efa:	f000 faa7 	bl	800a44c <__hi0bits>
 8009efe:	f1c0 0020 	rsb	r0, r0, #32
 8009f02:	9b05      	ldr	r3, [sp, #20]
 8009f04:	4418      	add	r0, r3
 8009f06:	f010 001f 	ands.w	r0, r0, #31
 8009f0a:	f000 808c 	beq.w	800a026 <_dtoa_r+0x81e>
 8009f0e:	f1c0 0220 	rsb	r2, r0, #32
 8009f12:	2a04      	cmp	r2, #4
 8009f14:	f340 8085 	ble.w	800a022 <_dtoa_r+0x81a>
 8009f18:	f1c0 001c 	rsb	r0, r0, #28
 8009f1c:	9b04      	ldr	r3, [sp, #16]
 8009f1e:	4403      	add	r3, r0
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9b05      	ldr	r3, [sp, #20]
 8009f24:	4403      	add	r3, r0
 8009f26:	4480      	add	r8, r0
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dd05      	ble.n	8009f3c <_dtoa_r+0x734>
 8009f30:	4629      	mov	r1, r5
 8009f32:	461a      	mov	r2, r3
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 fbf3 	bl	800a720 <__lshift>
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dd05      	ble.n	8009f4e <_dtoa_r+0x746>
 8009f42:	4621      	mov	r1, r4
 8009f44:	461a      	mov	r2, r3
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 fbea 	bl	800a720 <__lshift>
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d06a      	beq.n	800a02a <_dtoa_r+0x822>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fc52 	bl	800a800 <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	da64      	bge.n	800a02a <_dtoa_r+0x822>
 8009f60:	2300      	movs	r3, #0
 8009f62:	4629      	mov	r1, r5
 8009f64:	220a      	movs	r2, #10
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 fa2a 	bl	800a3c0 <__multadd>
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f72:	4605      	mov	r5, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 8191 	beq.w	800a29c <_dtoa_r+0xa94>
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	220a      	movs	r2, #10
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 fa1d 	bl	800a3c0 <__multadd>
 8009f86:	f1ba 0f00 	cmp.w	sl, #0
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	f300 808d 	bgt.w	800a0aa <_dtoa_r+0x8a2>
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	dc50      	bgt.n	800a038 <_dtoa_r+0x830>
 8009f96:	e088      	b.n	800a0aa <_dtoa_r+0x8a2>
 8009f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f9e:	e751      	b.n	8009e44 <_dtoa_r+0x63c>
 8009fa0:	f109 34ff 	add.w	r4, r9, #4294967295
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	bfbf      	itttt	lt
 8009fa8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009faa:	1ae3      	sublt	r3, r4, r3
 8009fac:	18d2      	addlt	r2, r2, r3
 8009fae:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009fb0:	bfb6      	itet	lt
 8009fb2:	4623      	movlt	r3, r4
 8009fb4:	1b1c      	subge	r4, r3, r4
 8009fb6:	2400      	movlt	r4, #0
 8009fb8:	f1b9 0f00 	cmp.w	r9, #0
 8009fbc:	bfb5      	itete	lt
 8009fbe:	9a04      	ldrlt	r2, [sp, #16]
 8009fc0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009fc4:	eba2 0809 	sublt.w	r8, r2, r9
 8009fc8:	464a      	movge	r2, r9
 8009fca:	bfb8      	it	lt
 8009fcc:	2200      	movlt	r2, #0
 8009fce:	e73c      	b.n	8009e4a <_dtoa_r+0x642>
 8009fd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009fd4:	9f07      	ldr	r7, [sp, #28]
 8009fd6:	461c      	mov	r4, r3
 8009fd8:	e744      	b.n	8009e64 <_dtoa_r+0x65c>
 8009fda:	461a      	mov	r2, r3
 8009fdc:	e770      	b.n	8009ec0 <_dtoa_r+0x6b8>
 8009fde:	9b06      	ldr	r3, [sp, #24]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	dc18      	bgt.n	800a016 <_dtoa_r+0x80e>
 8009fe4:	9b02      	ldr	r3, [sp, #8]
 8009fe6:	b9b3      	cbnz	r3, 800a016 <_dtoa_r+0x80e>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009fee:	b9a2      	cbnz	r2, 800a01a <_dtoa_r+0x812>
 8009ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ff4:	0d12      	lsrs	r2, r2, #20
 8009ff6:	0512      	lsls	r2, r2, #20
 8009ff8:	b18a      	cbz	r2, 800a01e <_dtoa_r+0x816>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	9304      	str	r3, [sp, #16]
 800a000:	9b05      	ldr	r3, [sp, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	2301      	movs	r3, #1
 800a008:	930a      	str	r3, [sp, #40]	; 0x28
 800a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f47f af70 	bne.w	8009ef2 <_dtoa_r+0x6ea>
 800a012:	2001      	movs	r0, #1
 800a014:	e775      	b.n	8009f02 <_dtoa_r+0x6fa>
 800a016:	2300      	movs	r3, #0
 800a018:	e7f6      	b.n	800a008 <_dtoa_r+0x800>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	e7f4      	b.n	800a008 <_dtoa_r+0x800>
 800a01e:	920a      	str	r2, [sp, #40]	; 0x28
 800a020:	e7f3      	b.n	800a00a <_dtoa_r+0x802>
 800a022:	d082      	beq.n	8009f2a <_dtoa_r+0x722>
 800a024:	4610      	mov	r0, r2
 800a026:	301c      	adds	r0, #28
 800a028:	e778      	b.n	8009f1c <_dtoa_r+0x714>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	dc37      	bgt.n	800a0a0 <_dtoa_r+0x898>
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	2b02      	cmp	r3, #2
 800a034:	dd34      	ble.n	800a0a0 <_dtoa_r+0x898>
 800a036:	46ca      	mov	sl, r9
 800a038:	f1ba 0f00 	cmp.w	sl, #0
 800a03c:	d10d      	bne.n	800a05a <_dtoa_r+0x852>
 800a03e:	4621      	mov	r1, r4
 800a040:	4653      	mov	r3, sl
 800a042:	2205      	movs	r2, #5
 800a044:	4630      	mov	r0, r6
 800a046:	f000 f9bb 	bl	800a3c0 <__multadd>
 800a04a:	4601      	mov	r1, r0
 800a04c:	4604      	mov	r4, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fbd6 	bl	800a800 <__mcmp>
 800a054:	2800      	cmp	r0, #0
 800a056:	f73f adeb 	bgt.w	8009c30 <_dtoa_r+0x428>
 800a05a:	9b08      	ldr	r3, [sp, #32]
 800a05c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a060:	ea6f 0b03 	mvn.w	fp, r3
 800a064:	f04f 0900 	mov.w	r9, #0
 800a068:	4621      	mov	r1, r4
 800a06a:	4630      	mov	r0, r6
 800a06c:	f000 f986 	bl	800a37c <_Bfree>
 800a070:	2f00      	cmp	r7, #0
 800a072:	f43f aea8 	beq.w	8009dc6 <_dtoa_r+0x5be>
 800a076:	f1b9 0f00 	cmp.w	r9, #0
 800a07a:	d005      	beq.n	800a088 <_dtoa_r+0x880>
 800a07c:	45b9      	cmp	r9, r7
 800a07e:	d003      	beq.n	800a088 <_dtoa_r+0x880>
 800a080:	4649      	mov	r1, r9
 800a082:	4630      	mov	r0, r6
 800a084:	f000 f97a 	bl	800a37c <_Bfree>
 800a088:	4639      	mov	r1, r7
 800a08a:	4630      	mov	r0, r6
 800a08c:	f000 f976 	bl	800a37c <_Bfree>
 800a090:	e699      	b.n	8009dc6 <_dtoa_r+0x5be>
 800a092:	2400      	movs	r4, #0
 800a094:	4627      	mov	r7, r4
 800a096:	e7e0      	b.n	800a05a <_dtoa_r+0x852>
 800a098:	46bb      	mov	fp, r7
 800a09a:	4604      	mov	r4, r0
 800a09c:	4607      	mov	r7, r0
 800a09e:	e5c7      	b.n	8009c30 <_dtoa_r+0x428>
 800a0a0:	9b07      	ldr	r3, [sp, #28]
 800a0a2:	46ca      	mov	sl, r9
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 8100 	beq.w	800a2aa <_dtoa_r+0xaa2>
 800a0aa:	f1b8 0f00 	cmp.w	r8, #0
 800a0ae:	dd05      	ble.n	800a0bc <_dtoa_r+0x8b4>
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f000 fb33 	bl	800a720 <__lshift>
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d05d      	beq.n	800a17e <_dtoa_r+0x976>
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f000 f919 	bl	800a2fc <_Balloc>
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <_dtoa_r+0x8d2>
 800a0ce:	4b82      	ldr	r3, [pc, #520]	; (800a2d8 <_dtoa_r+0xad0>)
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a0d6:	f7ff bbaf 	b.w	8009838 <_dtoa_r+0x30>
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	3202      	adds	r2, #2
 800a0de:	0092      	lsls	r2, r2, #2
 800a0e0:	f107 010c 	add.w	r1, r7, #12
 800a0e4:	300c      	adds	r0, #12
 800a0e6:	f7fe fe87 	bl	8008df8 <memcpy>
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	4641      	mov	r1, r8
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f000 fb16 	bl	800a720 <__lshift>
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	4453      	add	r3, sl
 800a0fe:	9308      	str	r3, [sp, #32]
 800a100:	9b02      	ldr	r3, [sp, #8]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	46b9      	mov	r9, r7
 800a108:	9307      	str	r3, [sp, #28]
 800a10a:	4607      	mov	r7, r0
 800a10c:	9b04      	ldr	r3, [sp, #16]
 800a10e:	4621      	mov	r1, r4
 800a110:	3b01      	subs	r3, #1
 800a112:	4628      	mov	r0, r5
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	f7ff fae9 	bl	80096ec <quorem>
 800a11a:	4603      	mov	r3, r0
 800a11c:	3330      	adds	r3, #48	; 0x30
 800a11e:	9005      	str	r0, [sp, #20]
 800a120:	4649      	mov	r1, r9
 800a122:	4628      	mov	r0, r5
 800a124:	9309      	str	r3, [sp, #36]	; 0x24
 800a126:	f000 fb6b 	bl	800a800 <__mcmp>
 800a12a:	463a      	mov	r2, r7
 800a12c:	4682      	mov	sl, r0
 800a12e:	4621      	mov	r1, r4
 800a130:	4630      	mov	r0, r6
 800a132:	f000 fb81 	bl	800a838 <__mdiff>
 800a136:	68c2      	ldr	r2, [r0, #12]
 800a138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a13a:	4680      	mov	r8, r0
 800a13c:	bb0a      	cbnz	r2, 800a182 <_dtoa_r+0x97a>
 800a13e:	4601      	mov	r1, r0
 800a140:	4628      	mov	r0, r5
 800a142:	f000 fb5d 	bl	800a800 <__mcmp>
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	4602      	mov	r2, r0
 800a14a:	4641      	mov	r1, r8
 800a14c:	4630      	mov	r0, r6
 800a14e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a152:	f000 f913 	bl	800a37c <_Bfree>
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a15e:	ea43 0102 	orr.w	r1, r3, r2
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	430b      	orrs	r3, r1
 800a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a168:	d10d      	bne.n	800a186 <_dtoa_r+0x97e>
 800a16a:	2b39      	cmp	r3, #57	; 0x39
 800a16c:	d029      	beq.n	800a1c2 <_dtoa_r+0x9ba>
 800a16e:	f1ba 0f00 	cmp.w	sl, #0
 800a172:	dd01      	ble.n	800a178 <_dtoa_r+0x970>
 800a174:	9b05      	ldr	r3, [sp, #20]
 800a176:	3331      	adds	r3, #49	; 0x31
 800a178:	9a02      	ldr	r2, [sp, #8]
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	e774      	b.n	800a068 <_dtoa_r+0x860>
 800a17e:	4638      	mov	r0, r7
 800a180:	e7b8      	b.n	800a0f4 <_dtoa_r+0x8ec>
 800a182:	2201      	movs	r2, #1
 800a184:	e7e1      	b.n	800a14a <_dtoa_r+0x942>
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	db06      	blt.n	800a19a <_dtoa_r+0x992>
 800a18c:	9906      	ldr	r1, [sp, #24]
 800a18e:	ea41 0a0a 	orr.w	sl, r1, sl
 800a192:	9907      	ldr	r1, [sp, #28]
 800a194:	ea5a 0101 	orrs.w	r1, sl, r1
 800a198:	d120      	bne.n	800a1dc <_dtoa_r+0x9d4>
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	ddec      	ble.n	800a178 <_dtoa_r+0x970>
 800a19e:	4629      	mov	r1, r5
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	9304      	str	r3, [sp, #16]
 800a1a6:	f000 fabb 	bl	800a720 <__lshift>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	f000 fb27 	bl	800a800 <__mcmp>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	dc02      	bgt.n	800a1be <_dtoa_r+0x9b6>
 800a1b8:	d1de      	bne.n	800a178 <_dtoa_r+0x970>
 800a1ba:	07da      	lsls	r2, r3, #31
 800a1bc:	d5dc      	bpl.n	800a178 <_dtoa_r+0x970>
 800a1be:	2b39      	cmp	r3, #57	; 0x39
 800a1c0:	d1d8      	bne.n	800a174 <_dtoa_r+0x96c>
 800a1c2:	9a02      	ldr	r2, [sp, #8]
 800a1c4:	2339      	movs	r3, #57	; 0x39
 800a1c6:	7013      	strb	r3, [r2, #0]
 800a1c8:	4643      	mov	r3, r8
 800a1ca:	4698      	mov	r8, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a1d2:	2a39      	cmp	r2, #57	; 0x39
 800a1d4:	d051      	beq.n	800a27a <_dtoa_r+0xa72>
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	e745      	b.n	800a068 <_dtoa_r+0x860>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	dd03      	ble.n	800a1e8 <_dtoa_r+0x9e0>
 800a1e0:	2b39      	cmp	r3, #57	; 0x39
 800a1e2:	d0ee      	beq.n	800a1c2 <_dtoa_r+0x9ba>
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	e7c7      	b.n	800a178 <_dtoa_r+0x970>
 800a1e8:	9a04      	ldr	r2, [sp, #16]
 800a1ea:	9908      	ldr	r1, [sp, #32]
 800a1ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1f0:	428a      	cmp	r2, r1
 800a1f2:	d02b      	beq.n	800a24c <_dtoa_r+0xa44>
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	220a      	movs	r2, #10
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f000 f8e0 	bl	800a3c0 <__multadd>
 800a200:	45b9      	cmp	r9, r7
 800a202:	4605      	mov	r5, r0
 800a204:	f04f 0300 	mov.w	r3, #0
 800a208:	f04f 020a 	mov.w	r2, #10
 800a20c:	4649      	mov	r1, r9
 800a20e:	4630      	mov	r0, r6
 800a210:	d107      	bne.n	800a222 <_dtoa_r+0xa1a>
 800a212:	f000 f8d5 	bl	800a3c0 <__multadd>
 800a216:	4681      	mov	r9, r0
 800a218:	4607      	mov	r7, r0
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	3301      	adds	r3, #1
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	e774      	b.n	800a10c <_dtoa_r+0x904>
 800a222:	f000 f8cd 	bl	800a3c0 <__multadd>
 800a226:	4639      	mov	r1, r7
 800a228:	4681      	mov	r9, r0
 800a22a:	2300      	movs	r3, #0
 800a22c:	220a      	movs	r2, #10
 800a22e:	4630      	mov	r0, r6
 800a230:	f000 f8c6 	bl	800a3c0 <__multadd>
 800a234:	4607      	mov	r7, r0
 800a236:	e7f0      	b.n	800a21a <_dtoa_r+0xa12>
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	9a01      	ldr	r2, [sp, #4]
 800a23e:	bfcc      	ite	gt
 800a240:	46d0      	movgt	r8, sl
 800a242:	f04f 0801 	movle.w	r8, #1
 800a246:	4490      	add	r8, r2
 800a248:	f04f 0900 	mov.w	r9, #0
 800a24c:	4629      	mov	r1, r5
 800a24e:	2201      	movs	r2, #1
 800a250:	4630      	mov	r0, r6
 800a252:	9302      	str	r3, [sp, #8]
 800a254:	f000 fa64 	bl	800a720 <__lshift>
 800a258:	4621      	mov	r1, r4
 800a25a:	4605      	mov	r5, r0
 800a25c:	f000 fad0 	bl	800a800 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	dcb1      	bgt.n	800a1c8 <_dtoa_r+0x9c0>
 800a264:	d102      	bne.n	800a26c <_dtoa_r+0xa64>
 800a266:	9b02      	ldr	r3, [sp, #8]
 800a268:	07db      	lsls	r3, r3, #31
 800a26a:	d4ad      	bmi.n	800a1c8 <_dtoa_r+0x9c0>
 800a26c:	4643      	mov	r3, r8
 800a26e:	4698      	mov	r8, r3
 800a270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a274:	2a30      	cmp	r2, #48	; 0x30
 800a276:	d0fa      	beq.n	800a26e <_dtoa_r+0xa66>
 800a278:	e6f6      	b.n	800a068 <_dtoa_r+0x860>
 800a27a:	9a01      	ldr	r2, [sp, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d1a4      	bne.n	800a1ca <_dtoa_r+0x9c2>
 800a280:	f10b 0b01 	add.w	fp, fp, #1
 800a284:	2331      	movs	r3, #49	; 0x31
 800a286:	e778      	b.n	800a17a <_dtoa_r+0x972>
 800a288:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <_dtoa_r+0xad4>)
 800a28a:	f7ff bb27 	b.w	80098dc <_dtoa_r+0xd4>
 800a28e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a290:	2b00      	cmp	r3, #0
 800a292:	f47f ab03 	bne.w	800989c <_dtoa_r+0x94>
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <_dtoa_r+0xad8>)
 800a298:	f7ff bb20 	b.w	80098dc <_dtoa_r+0xd4>
 800a29c:	f1ba 0f00 	cmp.w	sl, #0
 800a2a0:	dc03      	bgt.n	800a2aa <_dtoa_r+0xaa2>
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	f73f aec7 	bgt.w	800a038 <_dtoa_r+0x830>
 800a2aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f7ff fa1b 	bl	80096ec <quorem>
 800a2b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a2ba:	f808 3b01 	strb.w	r3, [r8], #1
 800a2be:	9a01      	ldr	r2, [sp, #4]
 800a2c0:	eba8 0202 	sub.w	r2, r8, r2
 800a2c4:	4592      	cmp	sl, r2
 800a2c6:	ddb7      	ble.n	800a238 <_dtoa_r+0xa30>
 800a2c8:	4629      	mov	r1, r5
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	220a      	movs	r2, #10
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f000 f876 	bl	800a3c0 <__multadd>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	e7ea      	b.n	800a2ae <_dtoa_r+0xaa6>
 800a2d8:	0800d33f 	.word	0x0800d33f
 800a2dc:	0800d29c 	.word	0x0800d29c
 800a2e0:	0800d2c0 	.word	0x0800d2c0

0800a2e4 <_localeconv_r>:
 800a2e4:	4800      	ldr	r0, [pc, #0]	; (800a2e8 <_localeconv_r+0x4>)
 800a2e6:	4770      	bx	lr
 800a2e8:	24000174 	.word	0x24000174

0800a2ec <malloc>:
 800a2ec:	4b02      	ldr	r3, [pc, #8]	; (800a2f8 <malloc+0xc>)
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f000 bc09 	b.w	800ab08 <_malloc_r>
 800a2f6:	bf00      	nop
 800a2f8:	24000020 	.word	0x24000020

0800a2fc <_Balloc>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	b976      	cbnz	r6, 800a324 <_Balloc+0x28>
 800a306:	2010      	movs	r0, #16
 800a308:	f7ff fff0 	bl	800a2ec <malloc>
 800a30c:	4602      	mov	r2, r0
 800a30e:	6260      	str	r0, [r4, #36]	; 0x24
 800a310:	b920      	cbnz	r0, 800a31c <_Balloc+0x20>
 800a312:	4b18      	ldr	r3, [pc, #96]	; (800a374 <_Balloc+0x78>)
 800a314:	4818      	ldr	r0, [pc, #96]	; (800a378 <_Balloc+0x7c>)
 800a316:	2166      	movs	r1, #102	; 0x66
 800a318:	f000 fdd6 	bl	800aec8 <__assert_func>
 800a31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a320:	6006      	str	r6, [r0, #0]
 800a322:	60c6      	str	r6, [r0, #12]
 800a324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a326:	68f3      	ldr	r3, [r6, #12]
 800a328:	b183      	cbz	r3, 800a34c <_Balloc+0x50>
 800a32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a332:	b9b8      	cbnz	r0, 800a364 <_Balloc+0x68>
 800a334:	2101      	movs	r1, #1
 800a336:	fa01 f605 	lsl.w	r6, r1, r5
 800a33a:	1d72      	adds	r2, r6, #5
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fb60 	bl	800aa04 <_calloc_r>
 800a344:	b160      	cbz	r0, 800a360 <_Balloc+0x64>
 800a346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a34a:	e00e      	b.n	800a36a <_Balloc+0x6e>
 800a34c:	2221      	movs	r2, #33	; 0x21
 800a34e:	2104      	movs	r1, #4
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fb57 	bl	800aa04 <_calloc_r>
 800a356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a358:	60f0      	str	r0, [r6, #12]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e4      	bne.n	800a32a <_Balloc+0x2e>
 800a360:	2000      	movs	r0, #0
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	6802      	ldr	r2, [r0, #0]
 800a366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a36a:	2300      	movs	r3, #0
 800a36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a370:	e7f7      	b.n	800a362 <_Balloc+0x66>
 800a372:	bf00      	nop
 800a374:	0800d2cd 	.word	0x0800d2cd
 800a378:	0800d350 	.word	0x0800d350

0800a37c <_Bfree>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a380:	4605      	mov	r5, r0
 800a382:	460c      	mov	r4, r1
 800a384:	b976      	cbnz	r6, 800a3a4 <_Bfree+0x28>
 800a386:	2010      	movs	r0, #16
 800a388:	f7ff ffb0 	bl	800a2ec <malloc>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6268      	str	r0, [r5, #36]	; 0x24
 800a390:	b920      	cbnz	r0, 800a39c <_Bfree+0x20>
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <_Bfree+0x3c>)
 800a394:	4809      	ldr	r0, [pc, #36]	; (800a3bc <_Bfree+0x40>)
 800a396:	218a      	movs	r1, #138	; 0x8a
 800a398:	f000 fd96 	bl	800aec8 <__assert_func>
 800a39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3a0:	6006      	str	r6, [r0, #0]
 800a3a2:	60c6      	str	r6, [r0, #12]
 800a3a4:	b13c      	cbz	r4, 800a3b6 <_Bfree+0x3a>
 800a3a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3a8:	6862      	ldr	r2, [r4, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3b0:	6021      	str	r1, [r4, #0]
 800a3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	0800d2cd 	.word	0x0800d2cd
 800a3bc:	0800d350 	.word	0x0800d350

0800a3c0 <__multadd>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	690d      	ldr	r5, [r1, #16]
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	f101 0c14 	add.w	ip, r1, #20
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3d6:	b299      	uxth	r1, r3
 800a3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3dc:	0c1e      	lsrs	r6, r3, #16
 800a3de:	0c0b      	lsrs	r3, r1, #16
 800a3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3e4:	b289      	uxth	r1, r1
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3ec:	4285      	cmp	r5, r0
 800a3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3f6:	dcec      	bgt.n	800a3d2 <__multadd+0x12>
 800a3f8:	b30e      	cbz	r6, 800a43e <__multadd+0x7e>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dc19      	bgt.n	800a434 <__multadd+0x74>
 800a400:	6861      	ldr	r1, [r4, #4]
 800a402:	4638      	mov	r0, r7
 800a404:	3101      	adds	r1, #1
 800a406:	f7ff ff79 	bl	800a2fc <_Balloc>
 800a40a:	4680      	mov	r8, r0
 800a40c:	b928      	cbnz	r0, 800a41a <__multadd+0x5a>
 800a40e:	4602      	mov	r2, r0
 800a410:	4b0c      	ldr	r3, [pc, #48]	; (800a444 <__multadd+0x84>)
 800a412:	480d      	ldr	r0, [pc, #52]	; (800a448 <__multadd+0x88>)
 800a414:	21b5      	movs	r1, #181	; 0xb5
 800a416:	f000 fd57 	bl	800aec8 <__assert_func>
 800a41a:	6922      	ldr	r2, [r4, #16]
 800a41c:	3202      	adds	r2, #2
 800a41e:	f104 010c 	add.w	r1, r4, #12
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	300c      	adds	r0, #12
 800a426:	f7fe fce7 	bl	8008df8 <memcpy>
 800a42a:	4621      	mov	r1, r4
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ffa5 	bl	800a37c <_Bfree>
 800a432:	4644      	mov	r4, r8
 800a434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a438:	3501      	adds	r5, #1
 800a43a:	615e      	str	r6, [r3, #20]
 800a43c:	6125      	str	r5, [r4, #16]
 800a43e:	4620      	mov	r0, r4
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	0800d33f 	.word	0x0800d33f
 800a448:	0800d350 	.word	0x0800d350

0800a44c <__hi0bits>:
 800a44c:	0c03      	lsrs	r3, r0, #16
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	b9d3      	cbnz	r3, 800a488 <__hi0bits+0x3c>
 800a452:	0400      	lsls	r0, r0, #16
 800a454:	2310      	movs	r3, #16
 800a456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a45a:	bf04      	itt	eq
 800a45c:	0200      	lsleq	r0, r0, #8
 800a45e:	3308      	addeq	r3, #8
 800a460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a464:	bf04      	itt	eq
 800a466:	0100      	lsleq	r0, r0, #4
 800a468:	3304      	addeq	r3, #4
 800a46a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a46e:	bf04      	itt	eq
 800a470:	0080      	lsleq	r0, r0, #2
 800a472:	3302      	addeq	r3, #2
 800a474:	2800      	cmp	r0, #0
 800a476:	db05      	blt.n	800a484 <__hi0bits+0x38>
 800a478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a47c:	f103 0301 	add.w	r3, r3, #1
 800a480:	bf08      	it	eq
 800a482:	2320      	moveq	r3, #32
 800a484:	4618      	mov	r0, r3
 800a486:	4770      	bx	lr
 800a488:	2300      	movs	r3, #0
 800a48a:	e7e4      	b.n	800a456 <__hi0bits+0xa>

0800a48c <__lo0bits>:
 800a48c:	6803      	ldr	r3, [r0, #0]
 800a48e:	f013 0207 	ands.w	r2, r3, #7
 800a492:	4601      	mov	r1, r0
 800a494:	d00b      	beq.n	800a4ae <__lo0bits+0x22>
 800a496:	07da      	lsls	r2, r3, #31
 800a498:	d423      	bmi.n	800a4e2 <__lo0bits+0x56>
 800a49a:	0798      	lsls	r0, r3, #30
 800a49c:	bf49      	itett	mi
 800a49e:	085b      	lsrmi	r3, r3, #1
 800a4a0:	089b      	lsrpl	r3, r3, #2
 800a4a2:	2001      	movmi	r0, #1
 800a4a4:	600b      	strmi	r3, [r1, #0]
 800a4a6:	bf5c      	itt	pl
 800a4a8:	600b      	strpl	r3, [r1, #0]
 800a4aa:	2002      	movpl	r0, #2
 800a4ac:	4770      	bx	lr
 800a4ae:	b298      	uxth	r0, r3
 800a4b0:	b9a8      	cbnz	r0, 800a4de <__lo0bits+0x52>
 800a4b2:	0c1b      	lsrs	r3, r3, #16
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	b90a      	cbnz	r2, 800a4be <__lo0bits+0x32>
 800a4ba:	3008      	adds	r0, #8
 800a4bc:	0a1b      	lsrs	r3, r3, #8
 800a4be:	071a      	lsls	r2, r3, #28
 800a4c0:	bf04      	itt	eq
 800a4c2:	091b      	lsreq	r3, r3, #4
 800a4c4:	3004      	addeq	r0, #4
 800a4c6:	079a      	lsls	r2, r3, #30
 800a4c8:	bf04      	itt	eq
 800a4ca:	089b      	lsreq	r3, r3, #2
 800a4cc:	3002      	addeq	r0, #2
 800a4ce:	07da      	lsls	r2, r3, #31
 800a4d0:	d403      	bmi.n	800a4da <__lo0bits+0x4e>
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	f100 0001 	add.w	r0, r0, #1
 800a4d8:	d005      	beq.n	800a4e6 <__lo0bits+0x5a>
 800a4da:	600b      	str	r3, [r1, #0]
 800a4dc:	4770      	bx	lr
 800a4de:	4610      	mov	r0, r2
 800a4e0:	e7e9      	b.n	800a4b6 <__lo0bits+0x2a>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	4770      	bx	lr
 800a4e6:	2020      	movs	r0, #32
 800a4e8:	4770      	bx	lr
	...

0800a4ec <__i2b>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	f7ff ff03 	bl	800a2fc <_Balloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	b928      	cbnz	r0, 800a506 <__i2b+0x1a>
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <__i2b+0x24>)
 800a4fc:	4805      	ldr	r0, [pc, #20]	; (800a514 <__i2b+0x28>)
 800a4fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a502:	f000 fce1 	bl	800aec8 <__assert_func>
 800a506:	2301      	movs	r3, #1
 800a508:	6144      	str	r4, [r0, #20]
 800a50a:	6103      	str	r3, [r0, #16]
 800a50c:	bd10      	pop	{r4, pc}
 800a50e:	bf00      	nop
 800a510:	0800d33f 	.word	0x0800d33f
 800a514:	0800d350 	.word	0x0800d350

0800a518 <__multiply>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	4691      	mov	r9, r2
 800a51e:	690a      	ldr	r2, [r1, #16]
 800a520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a524:	429a      	cmp	r2, r3
 800a526:	bfb8      	it	lt
 800a528:	460b      	movlt	r3, r1
 800a52a:	460c      	mov	r4, r1
 800a52c:	bfbc      	itt	lt
 800a52e:	464c      	movlt	r4, r9
 800a530:	4699      	movlt	r9, r3
 800a532:	6927      	ldr	r7, [r4, #16]
 800a534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	6861      	ldr	r1, [r4, #4]
 800a53c:	eb07 060a 	add.w	r6, r7, sl
 800a540:	42b3      	cmp	r3, r6
 800a542:	b085      	sub	sp, #20
 800a544:	bfb8      	it	lt
 800a546:	3101      	addlt	r1, #1
 800a548:	f7ff fed8 	bl	800a2fc <_Balloc>
 800a54c:	b930      	cbnz	r0, 800a55c <__multiply+0x44>
 800a54e:	4602      	mov	r2, r0
 800a550:	4b44      	ldr	r3, [pc, #272]	; (800a664 <__multiply+0x14c>)
 800a552:	4845      	ldr	r0, [pc, #276]	; (800a668 <__multiply+0x150>)
 800a554:	f240 115d 	movw	r1, #349	; 0x15d
 800a558:	f000 fcb6 	bl	800aec8 <__assert_func>
 800a55c:	f100 0514 	add.w	r5, r0, #20
 800a560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a564:	462b      	mov	r3, r5
 800a566:	2200      	movs	r2, #0
 800a568:	4543      	cmp	r3, r8
 800a56a:	d321      	bcc.n	800a5b0 <__multiply+0x98>
 800a56c:	f104 0314 	add.w	r3, r4, #20
 800a570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a574:	f109 0314 	add.w	r3, r9, #20
 800a578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a57c:	9202      	str	r2, [sp, #8]
 800a57e:	1b3a      	subs	r2, r7, r4
 800a580:	3a15      	subs	r2, #21
 800a582:	f022 0203 	bic.w	r2, r2, #3
 800a586:	3204      	adds	r2, #4
 800a588:	f104 0115 	add.w	r1, r4, #21
 800a58c:	428f      	cmp	r7, r1
 800a58e:	bf38      	it	cc
 800a590:	2204      	movcc	r2, #4
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	9a02      	ldr	r2, [sp, #8]
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d80c      	bhi.n	800a5b6 <__multiply+0x9e>
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	dd03      	ble.n	800a5a8 <__multiply+0x90>
 800a5a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d05a      	beq.n	800a65e <__multiply+0x146>
 800a5a8:	6106      	str	r6, [r0, #16]
 800a5aa:	b005      	add	sp, #20
 800a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b0:	f843 2b04 	str.w	r2, [r3], #4
 800a5b4:	e7d8      	b.n	800a568 <__multiply+0x50>
 800a5b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5ba:	f1ba 0f00 	cmp.w	sl, #0
 800a5be:	d024      	beq.n	800a60a <__multiply+0xf2>
 800a5c0:	f104 0e14 	add.w	lr, r4, #20
 800a5c4:	46a9      	mov	r9, r5
 800a5c6:	f04f 0c00 	mov.w	ip, #0
 800a5ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5ce:	f8d9 1000 	ldr.w	r1, [r9]
 800a5d2:	fa1f fb82 	uxth.w	fp, r2
 800a5d6:	b289      	uxth	r1, r1
 800a5d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a5e4:	4461      	add	r1, ip
 800a5e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5f2:	b289      	uxth	r1, r1
 800a5f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5f8:	4577      	cmp	r7, lr
 800a5fa:	f849 1b04 	str.w	r1, [r9], #4
 800a5fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a602:	d8e2      	bhi.n	800a5ca <__multiply+0xb2>
 800a604:	9a01      	ldr	r2, [sp, #4]
 800a606:	f845 c002 	str.w	ip, [r5, r2]
 800a60a:	9a03      	ldr	r2, [sp, #12]
 800a60c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a610:	3304      	adds	r3, #4
 800a612:	f1b9 0f00 	cmp.w	r9, #0
 800a616:	d020      	beq.n	800a65a <__multiply+0x142>
 800a618:	6829      	ldr	r1, [r5, #0]
 800a61a:	f104 0c14 	add.w	ip, r4, #20
 800a61e:	46ae      	mov	lr, r5
 800a620:	f04f 0a00 	mov.w	sl, #0
 800a624:	f8bc b000 	ldrh.w	fp, [ip]
 800a628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a62c:	fb09 220b 	mla	r2, r9, fp, r2
 800a630:	4492      	add	sl, r2
 800a632:	b289      	uxth	r1, r1
 800a634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a638:	f84e 1b04 	str.w	r1, [lr], #4
 800a63c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a640:	f8be 1000 	ldrh.w	r1, [lr]
 800a644:	0c12      	lsrs	r2, r2, #16
 800a646:	fb09 1102 	mla	r1, r9, r2, r1
 800a64a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a64e:	4567      	cmp	r7, ip
 800a650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a654:	d8e6      	bhi.n	800a624 <__multiply+0x10c>
 800a656:	9a01      	ldr	r2, [sp, #4]
 800a658:	50a9      	str	r1, [r5, r2]
 800a65a:	3504      	adds	r5, #4
 800a65c:	e79a      	b.n	800a594 <__multiply+0x7c>
 800a65e:	3e01      	subs	r6, #1
 800a660:	e79c      	b.n	800a59c <__multiply+0x84>
 800a662:	bf00      	nop
 800a664:	0800d33f 	.word	0x0800d33f
 800a668:	0800d350 	.word	0x0800d350

0800a66c <__pow5mult>:
 800a66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a670:	4615      	mov	r5, r2
 800a672:	f012 0203 	ands.w	r2, r2, #3
 800a676:	4606      	mov	r6, r0
 800a678:	460f      	mov	r7, r1
 800a67a:	d007      	beq.n	800a68c <__pow5mult+0x20>
 800a67c:	4c25      	ldr	r4, [pc, #148]	; (800a714 <__pow5mult+0xa8>)
 800a67e:	3a01      	subs	r2, #1
 800a680:	2300      	movs	r3, #0
 800a682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a686:	f7ff fe9b 	bl	800a3c0 <__multadd>
 800a68a:	4607      	mov	r7, r0
 800a68c:	10ad      	asrs	r5, r5, #2
 800a68e:	d03d      	beq.n	800a70c <__pow5mult+0xa0>
 800a690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a692:	b97c      	cbnz	r4, 800a6b4 <__pow5mult+0x48>
 800a694:	2010      	movs	r0, #16
 800a696:	f7ff fe29 	bl	800a2ec <malloc>
 800a69a:	4602      	mov	r2, r0
 800a69c:	6270      	str	r0, [r6, #36]	; 0x24
 800a69e:	b928      	cbnz	r0, 800a6ac <__pow5mult+0x40>
 800a6a0:	4b1d      	ldr	r3, [pc, #116]	; (800a718 <__pow5mult+0xac>)
 800a6a2:	481e      	ldr	r0, [pc, #120]	; (800a71c <__pow5mult+0xb0>)
 800a6a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6a8:	f000 fc0e 	bl	800aec8 <__assert_func>
 800a6ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b0:	6004      	str	r4, [r0, #0]
 800a6b2:	60c4      	str	r4, [r0, #12]
 800a6b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6bc:	b94c      	cbnz	r4, 800a6d2 <__pow5mult+0x66>
 800a6be:	f240 2171 	movw	r1, #625	; 0x271
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ff12 	bl	800a4ec <__i2b>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	f04f 0900 	mov.w	r9, #0
 800a6d6:	07eb      	lsls	r3, r5, #31
 800a6d8:	d50a      	bpl.n	800a6f0 <__pow5mult+0x84>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff1a 	bl	800a518 <__multiply>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff fe47 	bl	800a37c <_Bfree>
 800a6ee:	4647      	mov	r7, r8
 800a6f0:	106d      	asrs	r5, r5, #1
 800a6f2:	d00b      	beq.n	800a70c <__pow5mult+0xa0>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	b938      	cbnz	r0, 800a708 <__pow5mult+0x9c>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff ff0b 	bl	800a518 <__multiply>
 800a702:	6020      	str	r0, [r4, #0]
 800a704:	f8c0 9000 	str.w	r9, [r0]
 800a708:	4604      	mov	r4, r0
 800a70a:	e7e4      	b.n	800a6d6 <__pow5mult+0x6a>
 800a70c:	4638      	mov	r0, r7
 800a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a712:	bf00      	nop
 800a714:	0800d4a0 	.word	0x0800d4a0
 800a718:	0800d2cd 	.word	0x0800d2cd
 800a71c:	0800d350 	.word	0x0800d350

0800a720 <__lshift>:
 800a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	460c      	mov	r4, r1
 800a726:	6849      	ldr	r1, [r1, #4]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	4607      	mov	r7, r0
 800a732:	4691      	mov	r9, r2
 800a734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a738:	f108 0601 	add.w	r6, r8, #1
 800a73c:	42b3      	cmp	r3, r6
 800a73e:	db0b      	blt.n	800a758 <__lshift+0x38>
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff fddb 	bl	800a2fc <_Balloc>
 800a746:	4605      	mov	r5, r0
 800a748:	b948      	cbnz	r0, 800a75e <__lshift+0x3e>
 800a74a:	4602      	mov	r2, r0
 800a74c:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <__lshift+0xd8>)
 800a74e:	482b      	ldr	r0, [pc, #172]	; (800a7fc <__lshift+0xdc>)
 800a750:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a754:	f000 fbb8 	bl	800aec8 <__assert_func>
 800a758:	3101      	adds	r1, #1
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	e7ee      	b.n	800a73c <__lshift+0x1c>
 800a75e:	2300      	movs	r3, #0
 800a760:	f100 0114 	add.w	r1, r0, #20
 800a764:	f100 0210 	add.w	r2, r0, #16
 800a768:	4618      	mov	r0, r3
 800a76a:	4553      	cmp	r3, sl
 800a76c:	db37      	blt.n	800a7de <__lshift+0xbe>
 800a76e:	6920      	ldr	r0, [r4, #16]
 800a770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a774:	f104 0314 	add.w	r3, r4, #20
 800a778:	f019 091f 	ands.w	r9, r9, #31
 800a77c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a784:	d02f      	beq.n	800a7e6 <__lshift+0xc6>
 800a786:	f1c9 0e20 	rsb	lr, r9, #32
 800a78a:	468a      	mov	sl, r1
 800a78c:	f04f 0c00 	mov.w	ip, #0
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	fa02 f209 	lsl.w	r2, r2, r9
 800a796:	ea42 020c 	orr.w	r2, r2, ip
 800a79a:	f84a 2b04 	str.w	r2, [sl], #4
 800a79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a2:	4298      	cmp	r0, r3
 800a7a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7a8:	d8f2      	bhi.n	800a790 <__lshift+0x70>
 800a7aa:	1b03      	subs	r3, r0, r4
 800a7ac:	3b15      	subs	r3, #21
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	f104 0215 	add.w	r2, r4, #21
 800a7b8:	4290      	cmp	r0, r2
 800a7ba:	bf38      	it	cc
 800a7bc:	2304      	movcc	r3, #4
 800a7be:	f841 c003 	str.w	ip, [r1, r3]
 800a7c2:	f1bc 0f00 	cmp.w	ip, #0
 800a7c6:	d001      	beq.n	800a7cc <__lshift+0xac>
 800a7c8:	f108 0602 	add.w	r6, r8, #2
 800a7cc:	3e01      	subs	r6, #1
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	612e      	str	r6, [r5, #16]
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f7ff fdd2 	bl	800a37c <_Bfree>
 800a7d8:	4628      	mov	r0, r5
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	e7c1      	b.n	800a76a <__lshift+0x4a>
 800a7e6:	3904      	subs	r1, #4
 800a7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7f0:	4298      	cmp	r0, r3
 800a7f2:	d8f9      	bhi.n	800a7e8 <__lshift+0xc8>
 800a7f4:	e7ea      	b.n	800a7cc <__lshift+0xac>
 800a7f6:	bf00      	nop
 800a7f8:	0800d33f 	.word	0x0800d33f
 800a7fc:	0800d350 	.word	0x0800d350

0800a800 <__mcmp>:
 800a800:	b530      	push	{r4, r5, lr}
 800a802:	6902      	ldr	r2, [r0, #16]
 800a804:	690c      	ldr	r4, [r1, #16]
 800a806:	1b12      	subs	r2, r2, r4
 800a808:	d10e      	bne.n	800a828 <__mcmp+0x28>
 800a80a:	f100 0314 	add.w	r3, r0, #20
 800a80e:	3114      	adds	r1, #20
 800a810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a81c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a820:	42a5      	cmp	r5, r4
 800a822:	d003      	beq.n	800a82c <__mcmp+0x2c>
 800a824:	d305      	bcc.n	800a832 <__mcmp+0x32>
 800a826:	2201      	movs	r2, #1
 800a828:	4610      	mov	r0, r2
 800a82a:	bd30      	pop	{r4, r5, pc}
 800a82c:	4283      	cmp	r3, r0
 800a82e:	d3f3      	bcc.n	800a818 <__mcmp+0x18>
 800a830:	e7fa      	b.n	800a828 <__mcmp+0x28>
 800a832:	f04f 32ff 	mov.w	r2, #4294967295
 800a836:	e7f7      	b.n	800a828 <__mcmp+0x28>

0800a838 <__mdiff>:
 800a838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	460c      	mov	r4, r1
 800a83e:	4606      	mov	r6, r0
 800a840:	4611      	mov	r1, r2
 800a842:	4620      	mov	r0, r4
 800a844:	4690      	mov	r8, r2
 800a846:	f7ff ffdb 	bl	800a800 <__mcmp>
 800a84a:	1e05      	subs	r5, r0, #0
 800a84c:	d110      	bne.n	800a870 <__mdiff+0x38>
 800a84e:	4629      	mov	r1, r5
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff fd53 	bl	800a2fc <_Balloc>
 800a856:	b930      	cbnz	r0, 800a866 <__mdiff+0x2e>
 800a858:	4b3a      	ldr	r3, [pc, #232]	; (800a944 <__mdiff+0x10c>)
 800a85a:	4602      	mov	r2, r0
 800a85c:	f240 2132 	movw	r1, #562	; 0x232
 800a860:	4839      	ldr	r0, [pc, #228]	; (800a948 <__mdiff+0x110>)
 800a862:	f000 fb31 	bl	800aec8 <__assert_func>
 800a866:	2301      	movs	r3, #1
 800a868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	bfa4      	itt	ge
 800a872:	4643      	movge	r3, r8
 800a874:	46a0      	movge	r8, r4
 800a876:	4630      	mov	r0, r6
 800a878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a87c:	bfa6      	itte	ge
 800a87e:	461c      	movge	r4, r3
 800a880:	2500      	movge	r5, #0
 800a882:	2501      	movlt	r5, #1
 800a884:	f7ff fd3a 	bl	800a2fc <_Balloc>
 800a888:	b920      	cbnz	r0, 800a894 <__mdiff+0x5c>
 800a88a:	4b2e      	ldr	r3, [pc, #184]	; (800a944 <__mdiff+0x10c>)
 800a88c:	4602      	mov	r2, r0
 800a88e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a892:	e7e5      	b.n	800a860 <__mdiff+0x28>
 800a894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a898:	6926      	ldr	r6, [r4, #16]
 800a89a:	60c5      	str	r5, [r0, #12]
 800a89c:	f104 0914 	add.w	r9, r4, #20
 800a8a0:	f108 0514 	add.w	r5, r8, #20
 800a8a4:	f100 0e14 	add.w	lr, r0, #20
 800a8a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8b0:	f108 0210 	add.w	r2, r8, #16
 800a8b4:	46f2      	mov	sl, lr
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8c0:	fa1f f883 	uxth.w	r8, r3
 800a8c4:	fa11 f18b 	uxtah	r1, r1, fp
 800a8c8:	0c1b      	lsrs	r3, r3, #16
 800a8ca:	eba1 0808 	sub.w	r8, r1, r8
 800a8ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8d6:	fa1f f888 	uxth.w	r8, r8
 800a8da:	1419      	asrs	r1, r3, #16
 800a8dc:	454e      	cmp	r6, r9
 800a8de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8e2:	f84a 3b04 	str.w	r3, [sl], #4
 800a8e6:	d8e7      	bhi.n	800a8b8 <__mdiff+0x80>
 800a8e8:	1b33      	subs	r3, r6, r4
 800a8ea:	3b15      	subs	r3, #21
 800a8ec:	f023 0303 	bic.w	r3, r3, #3
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	3415      	adds	r4, #21
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	bf38      	it	cc
 800a8f8:	2304      	movcc	r3, #4
 800a8fa:	441d      	add	r5, r3
 800a8fc:	4473      	add	r3, lr
 800a8fe:	469e      	mov	lr, r3
 800a900:	462e      	mov	r6, r5
 800a902:	4566      	cmp	r6, ip
 800a904:	d30e      	bcc.n	800a924 <__mdiff+0xec>
 800a906:	f10c 0203 	add.w	r2, ip, #3
 800a90a:	1b52      	subs	r2, r2, r5
 800a90c:	f022 0203 	bic.w	r2, r2, #3
 800a910:	3d03      	subs	r5, #3
 800a912:	45ac      	cmp	ip, r5
 800a914:	bf38      	it	cc
 800a916:	2200      	movcc	r2, #0
 800a918:	441a      	add	r2, r3
 800a91a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a91e:	b17b      	cbz	r3, 800a940 <__mdiff+0x108>
 800a920:	6107      	str	r7, [r0, #16]
 800a922:	e7a3      	b.n	800a86c <__mdiff+0x34>
 800a924:	f856 8b04 	ldr.w	r8, [r6], #4
 800a928:	fa11 f288 	uxtah	r2, r1, r8
 800a92c:	1414      	asrs	r4, r2, #16
 800a92e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a932:	b292      	uxth	r2, r2
 800a934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a938:	f84e 2b04 	str.w	r2, [lr], #4
 800a93c:	1421      	asrs	r1, r4, #16
 800a93e:	e7e0      	b.n	800a902 <__mdiff+0xca>
 800a940:	3f01      	subs	r7, #1
 800a942:	e7ea      	b.n	800a91a <__mdiff+0xe2>
 800a944:	0800d33f 	.word	0x0800d33f
 800a948:	0800d350 	.word	0x0800d350

0800a94c <__d2b>:
 800a94c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a950:	4689      	mov	r9, r1
 800a952:	2101      	movs	r1, #1
 800a954:	ec57 6b10 	vmov	r6, r7, d0
 800a958:	4690      	mov	r8, r2
 800a95a:	f7ff fccf 	bl	800a2fc <_Balloc>
 800a95e:	4604      	mov	r4, r0
 800a960:	b930      	cbnz	r0, 800a970 <__d2b+0x24>
 800a962:	4602      	mov	r2, r0
 800a964:	4b25      	ldr	r3, [pc, #148]	; (800a9fc <__d2b+0xb0>)
 800a966:	4826      	ldr	r0, [pc, #152]	; (800aa00 <__d2b+0xb4>)
 800a968:	f240 310a 	movw	r1, #778	; 0x30a
 800a96c:	f000 faac 	bl	800aec8 <__assert_func>
 800a970:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a974:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a978:	bb35      	cbnz	r5, 800a9c8 <__d2b+0x7c>
 800a97a:	2e00      	cmp	r6, #0
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	d028      	beq.n	800a9d2 <__d2b+0x86>
 800a980:	4668      	mov	r0, sp
 800a982:	9600      	str	r6, [sp, #0]
 800a984:	f7ff fd82 	bl	800a48c <__lo0bits>
 800a988:	9900      	ldr	r1, [sp, #0]
 800a98a:	b300      	cbz	r0, 800a9ce <__d2b+0x82>
 800a98c:	9a01      	ldr	r2, [sp, #4]
 800a98e:	f1c0 0320 	rsb	r3, r0, #32
 800a992:	fa02 f303 	lsl.w	r3, r2, r3
 800a996:	430b      	orrs	r3, r1
 800a998:	40c2      	lsrs	r2, r0
 800a99a:	6163      	str	r3, [r4, #20]
 800a99c:	9201      	str	r2, [sp, #4]
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	61a3      	str	r3, [r4, #24]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bf14      	ite	ne
 800a9a6:	2202      	movne	r2, #2
 800a9a8:	2201      	moveq	r2, #1
 800a9aa:	6122      	str	r2, [r4, #16]
 800a9ac:	b1d5      	cbz	r5, 800a9e4 <__d2b+0x98>
 800a9ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9b2:	4405      	add	r5, r0
 800a9b4:	f8c9 5000 	str.w	r5, [r9]
 800a9b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9bc:	f8c8 0000 	str.w	r0, [r8]
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	b003      	add	sp, #12
 800a9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9cc:	e7d5      	b.n	800a97a <__d2b+0x2e>
 800a9ce:	6161      	str	r1, [r4, #20]
 800a9d0:	e7e5      	b.n	800a99e <__d2b+0x52>
 800a9d2:	a801      	add	r0, sp, #4
 800a9d4:	f7ff fd5a 	bl	800a48c <__lo0bits>
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	6163      	str	r3, [r4, #20]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	6122      	str	r2, [r4, #16]
 800a9e0:	3020      	adds	r0, #32
 800a9e2:	e7e3      	b.n	800a9ac <__d2b+0x60>
 800a9e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ec:	f8c9 0000 	str.w	r0, [r9]
 800a9f0:	6918      	ldr	r0, [r3, #16]
 800a9f2:	f7ff fd2b 	bl	800a44c <__hi0bits>
 800a9f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9fa:	e7df      	b.n	800a9bc <__d2b+0x70>
 800a9fc:	0800d33f 	.word	0x0800d33f
 800aa00:	0800d350 	.word	0x0800d350

0800aa04 <_calloc_r>:
 800aa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa06:	fba1 2402 	umull	r2, r4, r1, r2
 800aa0a:	b94c      	cbnz	r4, 800aa20 <_calloc_r+0x1c>
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	f000 f87a 	bl	800ab08 <_malloc_r>
 800aa14:	9a01      	ldr	r2, [sp, #4]
 800aa16:	4605      	mov	r5, r0
 800aa18:	b930      	cbnz	r0, 800aa28 <_calloc_r+0x24>
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bd30      	pop	{r4, r5, pc}
 800aa20:	220c      	movs	r2, #12
 800aa22:	6002      	str	r2, [r0, #0]
 800aa24:	2500      	movs	r5, #0
 800aa26:	e7f8      	b.n	800aa1a <_calloc_r+0x16>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	f7fe f9f3 	bl	8008e14 <memset>
 800aa2e:	e7f4      	b.n	800aa1a <_calloc_r+0x16>

0800aa30 <_free_r>:
 800aa30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa32:	2900      	cmp	r1, #0
 800aa34:	d044      	beq.n	800aac0 <_free_r+0x90>
 800aa36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3a:	9001      	str	r0, [sp, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa42:	bfb8      	it	lt
 800aa44:	18e4      	addlt	r4, r4, r3
 800aa46:	f000 fa9b 	bl	800af80 <__malloc_lock>
 800aa4a:	4a1e      	ldr	r2, [pc, #120]	; (800aac4 <_free_r+0x94>)
 800aa4c:	9801      	ldr	r0, [sp, #4]
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	b933      	cbnz	r3, 800aa60 <_free_r+0x30>
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6014      	str	r4, [r2, #0]
 800aa56:	b003      	add	sp, #12
 800aa58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa5c:	f000 ba96 	b.w	800af8c <__malloc_unlock>
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d908      	bls.n	800aa76 <_free_r+0x46>
 800aa64:	6825      	ldr	r5, [r4, #0]
 800aa66:	1961      	adds	r1, r4, r5
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf01      	itttt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	1949      	addeq	r1, r1, r5
 800aa72:	6021      	streq	r1, [r4, #0]
 800aa74:	e7ed      	b.n	800aa52 <_free_r+0x22>
 800aa76:	461a      	mov	r2, r3
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	b10b      	cbz	r3, 800aa80 <_free_r+0x50>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d9fa      	bls.n	800aa76 <_free_r+0x46>
 800aa80:	6811      	ldr	r1, [r2, #0]
 800aa82:	1855      	adds	r5, r2, r1
 800aa84:	42a5      	cmp	r5, r4
 800aa86:	d10b      	bne.n	800aaa0 <_free_r+0x70>
 800aa88:	6824      	ldr	r4, [r4, #0]
 800aa8a:	4421      	add	r1, r4
 800aa8c:	1854      	adds	r4, r2, r1
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	6011      	str	r1, [r2, #0]
 800aa92:	d1e0      	bne.n	800aa56 <_free_r+0x26>
 800aa94:	681c      	ldr	r4, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	6053      	str	r3, [r2, #4]
 800aa9a:	4421      	add	r1, r4
 800aa9c:	6011      	str	r1, [r2, #0]
 800aa9e:	e7da      	b.n	800aa56 <_free_r+0x26>
 800aaa0:	d902      	bls.n	800aaa8 <_free_r+0x78>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	e7d6      	b.n	800aa56 <_free_r+0x26>
 800aaa8:	6825      	ldr	r5, [r4, #0]
 800aaaa:	1961      	adds	r1, r4, r5
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf04      	itt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	bf04      	itt	eq
 800aab8:	1949      	addeq	r1, r1, r5
 800aaba:	6021      	streq	r1, [r4, #0]
 800aabc:	6054      	str	r4, [r2, #4]
 800aabe:	e7ca      	b.n	800aa56 <_free_r+0x26>
 800aac0:	b003      	add	sp, #12
 800aac2:	bd30      	pop	{r4, r5, pc}
 800aac4:	24000edc 	.word	0x24000edc

0800aac8 <sbrk_aligned>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4e0e      	ldr	r6, [pc, #56]	; (800ab04 <sbrk_aligned+0x3c>)
 800aacc:	460c      	mov	r4, r1
 800aace:	6831      	ldr	r1, [r6, #0]
 800aad0:	4605      	mov	r5, r0
 800aad2:	b911      	cbnz	r1, 800aada <sbrk_aligned+0x12>
 800aad4:	f000 f9e8 	bl	800aea8 <_sbrk_r>
 800aad8:	6030      	str	r0, [r6, #0]
 800aada:	4621      	mov	r1, r4
 800aadc:	4628      	mov	r0, r5
 800aade:	f000 f9e3 	bl	800aea8 <_sbrk_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d00a      	beq.n	800aafc <sbrk_aligned+0x34>
 800aae6:	1cc4      	adds	r4, r0, #3
 800aae8:	f024 0403 	bic.w	r4, r4, #3
 800aaec:	42a0      	cmp	r0, r4
 800aaee:	d007      	beq.n	800ab00 <sbrk_aligned+0x38>
 800aaf0:	1a21      	subs	r1, r4, r0
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f9d8 	bl	800aea8 <_sbrk_r>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d101      	bne.n	800ab00 <sbrk_aligned+0x38>
 800aafc:	f04f 34ff 	mov.w	r4, #4294967295
 800ab00:	4620      	mov	r0, r4
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	24000ee0 	.word	0x24000ee0

0800ab08 <_malloc_r>:
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	1ccd      	adds	r5, r1, #3
 800ab0e:	f025 0503 	bic.w	r5, r5, #3
 800ab12:	3508      	adds	r5, #8
 800ab14:	2d0c      	cmp	r5, #12
 800ab16:	bf38      	it	cc
 800ab18:	250c      	movcc	r5, #12
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	db01      	blt.n	800ab24 <_malloc_r+0x1c>
 800ab20:	42a9      	cmp	r1, r5
 800ab22:	d905      	bls.n	800ab30 <_malloc_r+0x28>
 800ab24:	230c      	movs	r3, #12
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	2600      	movs	r6, #0
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab30:	4e2e      	ldr	r6, [pc, #184]	; (800abec <_malloc_r+0xe4>)
 800ab32:	f000 fa25 	bl	800af80 <__malloc_lock>
 800ab36:	6833      	ldr	r3, [r6, #0]
 800ab38:	461c      	mov	r4, r3
 800ab3a:	bb34      	cbnz	r4, 800ab8a <_malloc_r+0x82>
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f7ff ffc2 	bl	800aac8 <sbrk_aligned>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	4604      	mov	r4, r0
 800ab48:	d14d      	bne.n	800abe6 <_malloc_r+0xde>
 800ab4a:	6834      	ldr	r4, [r6, #0]
 800ab4c:	4626      	mov	r6, r4
 800ab4e:	2e00      	cmp	r6, #0
 800ab50:	d140      	bne.n	800abd4 <_malloc_r+0xcc>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	4631      	mov	r1, r6
 800ab56:	4638      	mov	r0, r7
 800ab58:	eb04 0803 	add.w	r8, r4, r3
 800ab5c:	f000 f9a4 	bl	800aea8 <_sbrk_r>
 800ab60:	4580      	cmp	r8, r0
 800ab62:	d13a      	bne.n	800abda <_malloc_r+0xd2>
 800ab64:	6821      	ldr	r1, [r4, #0]
 800ab66:	3503      	adds	r5, #3
 800ab68:	1a6d      	subs	r5, r5, r1
 800ab6a:	f025 0503 	bic.w	r5, r5, #3
 800ab6e:	3508      	adds	r5, #8
 800ab70:	2d0c      	cmp	r5, #12
 800ab72:	bf38      	it	cc
 800ab74:	250c      	movcc	r5, #12
 800ab76:	4629      	mov	r1, r5
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f7ff ffa5 	bl	800aac8 <sbrk_aligned>
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d02b      	beq.n	800abda <_malloc_r+0xd2>
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	442b      	add	r3, r5
 800ab86:	6023      	str	r3, [r4, #0]
 800ab88:	e00e      	b.n	800aba8 <_malloc_r+0xa0>
 800ab8a:	6822      	ldr	r2, [r4, #0]
 800ab8c:	1b52      	subs	r2, r2, r5
 800ab8e:	d41e      	bmi.n	800abce <_malloc_r+0xc6>
 800ab90:	2a0b      	cmp	r2, #11
 800ab92:	d916      	bls.n	800abc2 <_malloc_r+0xba>
 800ab94:	1961      	adds	r1, r4, r5
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	6025      	str	r5, [r4, #0]
 800ab9a:	bf18      	it	ne
 800ab9c:	6059      	strne	r1, [r3, #4]
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	bf08      	it	eq
 800aba2:	6031      	streq	r1, [r6, #0]
 800aba4:	5162      	str	r2, [r4, r5]
 800aba6:	604b      	str	r3, [r1, #4]
 800aba8:	4638      	mov	r0, r7
 800abaa:	f104 060b 	add.w	r6, r4, #11
 800abae:	f000 f9ed 	bl	800af8c <__malloc_unlock>
 800abb2:	f026 0607 	bic.w	r6, r6, #7
 800abb6:	1d23      	adds	r3, r4, #4
 800abb8:	1af2      	subs	r2, r6, r3
 800abba:	d0b6      	beq.n	800ab2a <_malloc_r+0x22>
 800abbc:	1b9b      	subs	r3, r3, r6
 800abbe:	50a3      	str	r3, [r4, r2]
 800abc0:	e7b3      	b.n	800ab2a <_malloc_r+0x22>
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	bf0c      	ite	eq
 800abc8:	6032      	streq	r2, [r6, #0]
 800abca:	605a      	strne	r2, [r3, #4]
 800abcc:	e7ec      	b.n	800aba8 <_malloc_r+0xa0>
 800abce:	4623      	mov	r3, r4
 800abd0:	6864      	ldr	r4, [r4, #4]
 800abd2:	e7b2      	b.n	800ab3a <_malloc_r+0x32>
 800abd4:	4634      	mov	r4, r6
 800abd6:	6876      	ldr	r6, [r6, #4]
 800abd8:	e7b9      	b.n	800ab4e <_malloc_r+0x46>
 800abda:	230c      	movs	r3, #12
 800abdc:	603b      	str	r3, [r7, #0]
 800abde:	4638      	mov	r0, r7
 800abe0:	f000 f9d4 	bl	800af8c <__malloc_unlock>
 800abe4:	e7a1      	b.n	800ab2a <_malloc_r+0x22>
 800abe6:	6025      	str	r5, [r4, #0]
 800abe8:	e7de      	b.n	800aba8 <_malloc_r+0xa0>
 800abea:	bf00      	nop
 800abec:	24000edc 	.word	0x24000edc

0800abf0 <__ssputs_r>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	688e      	ldr	r6, [r1, #8]
 800abf6:	429e      	cmp	r6, r3
 800abf8:	4682      	mov	sl, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	4690      	mov	r8, r2
 800abfe:	461f      	mov	r7, r3
 800ac00:	d838      	bhi.n	800ac74 <__ssputs_r+0x84>
 800ac02:	898a      	ldrh	r2, [r1, #12]
 800ac04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac08:	d032      	beq.n	800ac70 <__ssputs_r+0x80>
 800ac0a:	6825      	ldr	r5, [r4, #0]
 800ac0c:	6909      	ldr	r1, [r1, #16]
 800ac0e:	eba5 0901 	sub.w	r9, r5, r1
 800ac12:	6965      	ldr	r5, [r4, #20]
 800ac14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	444b      	add	r3, r9
 800ac20:	106d      	asrs	r5, r5, #1
 800ac22:	429d      	cmp	r5, r3
 800ac24:	bf38      	it	cc
 800ac26:	461d      	movcc	r5, r3
 800ac28:	0553      	lsls	r3, r2, #21
 800ac2a:	d531      	bpl.n	800ac90 <__ssputs_r+0xa0>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	f7ff ff6b 	bl	800ab08 <_malloc_r>
 800ac32:	4606      	mov	r6, r0
 800ac34:	b950      	cbnz	r0, 800ac4c <__ssputs_r+0x5c>
 800ac36:	230c      	movs	r3, #12
 800ac38:	f8ca 3000 	str.w	r3, [sl]
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4c:	6921      	ldr	r1, [r4, #16]
 800ac4e:	464a      	mov	r2, r9
 800ac50:	f7fe f8d2 	bl	8008df8 <memcpy>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	6126      	str	r6, [r4, #16]
 800ac62:	6165      	str	r5, [r4, #20]
 800ac64:	444e      	add	r6, r9
 800ac66:	eba5 0509 	sub.w	r5, r5, r9
 800ac6a:	6026      	str	r6, [r4, #0]
 800ac6c:	60a5      	str	r5, [r4, #8]
 800ac6e:	463e      	mov	r6, r7
 800ac70:	42be      	cmp	r6, r7
 800ac72:	d900      	bls.n	800ac76 <__ssputs_r+0x86>
 800ac74:	463e      	mov	r6, r7
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4641      	mov	r1, r8
 800ac7c:	f000 f966 	bl	800af4c <memmove>
 800ac80:	68a3      	ldr	r3, [r4, #8]
 800ac82:	1b9b      	subs	r3, r3, r6
 800ac84:	60a3      	str	r3, [r4, #8]
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	4433      	add	r3, r6
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	e7db      	b.n	800ac48 <__ssputs_r+0x58>
 800ac90:	462a      	mov	r2, r5
 800ac92:	f000 f981 	bl	800af98 <_realloc_r>
 800ac96:	4606      	mov	r6, r0
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d1e1      	bne.n	800ac60 <__ssputs_r+0x70>
 800ac9c:	6921      	ldr	r1, [r4, #16]
 800ac9e:	4650      	mov	r0, sl
 800aca0:	f7ff fec6 	bl	800aa30 <_free_r>
 800aca4:	e7c7      	b.n	800ac36 <__ssputs_r+0x46>
	...

0800aca8 <_svfiprintf_r>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	4698      	mov	r8, r3
 800acae:	898b      	ldrh	r3, [r1, #12]
 800acb0:	061b      	lsls	r3, r3, #24
 800acb2:	b09d      	sub	sp, #116	; 0x74
 800acb4:	4607      	mov	r7, r0
 800acb6:	460d      	mov	r5, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	d50e      	bpl.n	800acda <_svfiprintf_r+0x32>
 800acbc:	690b      	ldr	r3, [r1, #16]
 800acbe:	b963      	cbnz	r3, 800acda <_svfiprintf_r+0x32>
 800acc0:	2140      	movs	r1, #64	; 0x40
 800acc2:	f7ff ff21 	bl	800ab08 <_malloc_r>
 800acc6:	6028      	str	r0, [r5, #0]
 800acc8:	6128      	str	r0, [r5, #16]
 800acca:	b920      	cbnz	r0, 800acd6 <_svfiprintf_r+0x2e>
 800accc:	230c      	movs	r3, #12
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	e0d1      	b.n	800ae7a <_svfiprintf_r+0x1d2>
 800acd6:	2340      	movs	r3, #64	; 0x40
 800acd8:	616b      	str	r3, [r5, #20]
 800acda:	2300      	movs	r3, #0
 800acdc:	9309      	str	r3, [sp, #36]	; 0x24
 800acde:	2320      	movs	r3, #32
 800ace0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ace4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ace8:	2330      	movs	r3, #48	; 0x30
 800acea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae94 <_svfiprintf_r+0x1ec>
 800acee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acf2:	f04f 0901 	mov.w	r9, #1
 800acf6:	4623      	mov	r3, r4
 800acf8:	469a      	mov	sl, r3
 800acfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfe:	b10a      	cbz	r2, 800ad04 <_svfiprintf_r+0x5c>
 800ad00:	2a25      	cmp	r2, #37	; 0x25
 800ad02:	d1f9      	bne.n	800acf8 <_svfiprintf_r+0x50>
 800ad04:	ebba 0b04 	subs.w	fp, sl, r4
 800ad08:	d00b      	beq.n	800ad22 <_svfiprintf_r+0x7a>
 800ad0a:	465b      	mov	r3, fp
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7ff ff6d 	bl	800abf0 <__ssputs_r>
 800ad16:	3001      	adds	r0, #1
 800ad18:	f000 80aa 	beq.w	800ae70 <_svfiprintf_r+0x1c8>
 800ad1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad1e:	445a      	add	r2, fp
 800ad20:	9209      	str	r2, [sp, #36]	; 0x24
 800ad22:	f89a 3000 	ldrb.w	r3, [sl]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 80a2 	beq.w	800ae70 <_svfiprintf_r+0x1c8>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad36:	f10a 0a01 	add.w	sl, sl, #1
 800ad3a:	9304      	str	r3, [sp, #16]
 800ad3c:	9307      	str	r3, [sp, #28]
 800ad3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad42:	931a      	str	r3, [sp, #104]	; 0x68
 800ad44:	4654      	mov	r4, sl
 800ad46:	2205      	movs	r2, #5
 800ad48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4c:	4851      	ldr	r0, [pc, #324]	; (800ae94 <_svfiprintf_r+0x1ec>)
 800ad4e:	f7f5 facf 	bl	80002f0 <memchr>
 800ad52:	9a04      	ldr	r2, [sp, #16]
 800ad54:	b9d8      	cbnz	r0, 800ad8e <_svfiprintf_r+0xe6>
 800ad56:	06d0      	lsls	r0, r2, #27
 800ad58:	bf44      	itt	mi
 800ad5a:	2320      	movmi	r3, #32
 800ad5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad60:	0711      	lsls	r1, r2, #28
 800ad62:	bf44      	itt	mi
 800ad64:	232b      	movmi	r3, #43	; 0x2b
 800ad66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad70:	d015      	beq.n	800ad9e <_svfiprintf_r+0xf6>
 800ad72:	9a07      	ldr	r2, [sp, #28]
 800ad74:	4654      	mov	r4, sl
 800ad76:	2000      	movs	r0, #0
 800ad78:	f04f 0c0a 	mov.w	ip, #10
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad82:	3b30      	subs	r3, #48	; 0x30
 800ad84:	2b09      	cmp	r3, #9
 800ad86:	d94e      	bls.n	800ae26 <_svfiprintf_r+0x17e>
 800ad88:	b1b0      	cbz	r0, 800adb8 <_svfiprintf_r+0x110>
 800ad8a:	9207      	str	r2, [sp, #28]
 800ad8c:	e014      	b.n	800adb8 <_svfiprintf_r+0x110>
 800ad8e:	eba0 0308 	sub.w	r3, r0, r8
 800ad92:	fa09 f303 	lsl.w	r3, r9, r3
 800ad96:	4313      	orrs	r3, r2
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	46a2      	mov	sl, r4
 800ad9c:	e7d2      	b.n	800ad44 <_svfiprintf_r+0x9c>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	1d19      	adds	r1, r3, #4
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	9103      	str	r1, [sp, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bfbb      	ittet	lt
 800adaa:	425b      	neglt	r3, r3
 800adac:	f042 0202 	orrlt.w	r2, r2, #2
 800adb0:	9307      	strge	r3, [sp, #28]
 800adb2:	9307      	strlt	r3, [sp, #28]
 800adb4:	bfb8      	it	lt
 800adb6:	9204      	strlt	r2, [sp, #16]
 800adb8:	7823      	ldrb	r3, [r4, #0]
 800adba:	2b2e      	cmp	r3, #46	; 0x2e
 800adbc:	d10c      	bne.n	800add8 <_svfiprintf_r+0x130>
 800adbe:	7863      	ldrb	r3, [r4, #1]
 800adc0:	2b2a      	cmp	r3, #42	; 0x2a
 800adc2:	d135      	bne.n	800ae30 <_svfiprintf_r+0x188>
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	9203      	str	r2, [sp, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	bfb8      	it	lt
 800add0:	f04f 33ff 	movlt.w	r3, #4294967295
 800add4:	3402      	adds	r4, #2
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aea4 <_svfiprintf_r+0x1fc>
 800addc:	7821      	ldrb	r1, [r4, #0]
 800adde:	2203      	movs	r2, #3
 800ade0:	4650      	mov	r0, sl
 800ade2:	f7f5 fa85 	bl	80002f0 <memchr>
 800ade6:	b140      	cbz	r0, 800adfa <_svfiprintf_r+0x152>
 800ade8:	2340      	movs	r3, #64	; 0x40
 800adea:	eba0 000a 	sub.w	r0, r0, sl
 800adee:	fa03 f000 	lsl.w	r0, r3, r0
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	4303      	orrs	r3, r0
 800adf6:	3401      	adds	r4, #1
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfe:	4826      	ldr	r0, [pc, #152]	; (800ae98 <_svfiprintf_r+0x1f0>)
 800ae00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae04:	2206      	movs	r2, #6
 800ae06:	f7f5 fa73 	bl	80002f0 <memchr>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d038      	beq.n	800ae80 <_svfiprintf_r+0x1d8>
 800ae0e:	4b23      	ldr	r3, [pc, #140]	; (800ae9c <_svfiprintf_r+0x1f4>)
 800ae10:	bb1b      	cbnz	r3, 800ae5a <_svfiprintf_r+0x1b2>
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	3307      	adds	r3, #7
 800ae16:	f023 0307 	bic.w	r3, r3, #7
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae20:	4433      	add	r3, r6
 800ae22:	9309      	str	r3, [sp, #36]	; 0x24
 800ae24:	e767      	b.n	800acf6 <_svfiprintf_r+0x4e>
 800ae26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	2001      	movs	r0, #1
 800ae2e:	e7a5      	b.n	800ad7c <_svfiprintf_r+0xd4>
 800ae30:	2300      	movs	r3, #0
 800ae32:	3401      	adds	r4, #1
 800ae34:	9305      	str	r3, [sp, #20]
 800ae36:	4619      	mov	r1, r3
 800ae38:	f04f 0c0a 	mov.w	ip, #10
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae42:	3a30      	subs	r2, #48	; 0x30
 800ae44:	2a09      	cmp	r2, #9
 800ae46:	d903      	bls.n	800ae50 <_svfiprintf_r+0x1a8>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0c5      	beq.n	800add8 <_svfiprintf_r+0x130>
 800ae4c:	9105      	str	r1, [sp, #20]
 800ae4e:	e7c3      	b.n	800add8 <_svfiprintf_r+0x130>
 800ae50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae54:	4604      	mov	r4, r0
 800ae56:	2301      	movs	r3, #1
 800ae58:	e7f0      	b.n	800ae3c <_svfiprintf_r+0x194>
 800ae5a:	ab03      	add	r3, sp, #12
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	462a      	mov	r2, r5
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <_svfiprintf_r+0x1f8>)
 800ae62:	a904      	add	r1, sp, #16
 800ae64:	4638      	mov	r0, r7
 800ae66:	f7fe f86f 	bl	8008f48 <_printf_float>
 800ae6a:	1c42      	adds	r2, r0, #1
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	d1d6      	bne.n	800ae1e <_svfiprintf_r+0x176>
 800ae70:	89ab      	ldrh	r3, [r5, #12]
 800ae72:	065b      	lsls	r3, r3, #25
 800ae74:	f53f af2c 	bmi.w	800acd0 <_svfiprintf_r+0x28>
 800ae78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae7a:	b01d      	add	sp, #116	; 0x74
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	ab03      	add	r3, sp, #12
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	462a      	mov	r2, r5
 800ae86:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <_svfiprintf_r+0x1f8>)
 800ae88:	a904      	add	r1, sp, #16
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f7fe fae8 	bl	8009460 <_printf_i>
 800ae90:	e7eb      	b.n	800ae6a <_svfiprintf_r+0x1c2>
 800ae92:	bf00      	nop
 800ae94:	0800d4ac 	.word	0x0800d4ac
 800ae98:	0800d4b6 	.word	0x0800d4b6
 800ae9c:	08008f49 	.word	0x08008f49
 800aea0:	0800abf1 	.word	0x0800abf1
 800aea4:	0800d4b2 	.word	0x0800d4b2

0800aea8 <_sbrk_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4d06      	ldr	r5, [pc, #24]	; (800aec4 <_sbrk_r+0x1c>)
 800aeac:	2300      	movs	r3, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	602b      	str	r3, [r5, #0]
 800aeb4:	f7f6 ff72 	bl	8001d9c <_sbrk>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d102      	bne.n	800aec2 <_sbrk_r+0x1a>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	b103      	cbz	r3, 800aec2 <_sbrk_r+0x1a>
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	24000ee4 	.word	0x24000ee4

0800aec8 <__assert_func>:
 800aec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeca:	4614      	mov	r4, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <__assert_func+0x2c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4605      	mov	r5, r0
 800aed4:	68d8      	ldr	r0, [r3, #12]
 800aed6:	b14c      	cbz	r4, 800aeec <__assert_func+0x24>
 800aed8:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <__assert_func+0x30>)
 800aeda:	9100      	str	r1, [sp, #0]
 800aedc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aee0:	4906      	ldr	r1, [pc, #24]	; (800aefc <__assert_func+0x34>)
 800aee2:	462b      	mov	r3, r5
 800aee4:	f000 f80e 	bl	800af04 <fiprintf>
 800aee8:	f000 faac 	bl	800b444 <abort>
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <__assert_func+0x38>)
 800aeee:	461c      	mov	r4, r3
 800aef0:	e7f3      	b.n	800aeda <__assert_func+0x12>
 800aef2:	bf00      	nop
 800aef4:	24000020 	.word	0x24000020
 800aef8:	0800d4bd 	.word	0x0800d4bd
 800aefc:	0800d4ca 	.word	0x0800d4ca
 800af00:	0800d4f8 	.word	0x0800d4f8

0800af04 <fiprintf>:
 800af04:	b40e      	push	{r1, r2, r3}
 800af06:	b503      	push	{r0, r1, lr}
 800af08:	4601      	mov	r1, r0
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	4805      	ldr	r0, [pc, #20]	; (800af24 <fiprintf+0x20>)
 800af0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af12:	6800      	ldr	r0, [r0, #0]
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	f000 f897 	bl	800b048 <_vfiprintf_r>
 800af1a:	b002      	add	sp, #8
 800af1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af20:	b003      	add	sp, #12
 800af22:	4770      	bx	lr
 800af24:	24000020 	.word	0x24000020

0800af28 <__ascii_mbtowc>:
 800af28:	b082      	sub	sp, #8
 800af2a:	b901      	cbnz	r1, 800af2e <__ascii_mbtowc+0x6>
 800af2c:	a901      	add	r1, sp, #4
 800af2e:	b142      	cbz	r2, 800af42 <__ascii_mbtowc+0x1a>
 800af30:	b14b      	cbz	r3, 800af46 <__ascii_mbtowc+0x1e>
 800af32:	7813      	ldrb	r3, [r2, #0]
 800af34:	600b      	str	r3, [r1, #0]
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	1e10      	subs	r0, r2, #0
 800af3a:	bf18      	it	ne
 800af3c:	2001      	movne	r0, #1
 800af3e:	b002      	add	sp, #8
 800af40:	4770      	bx	lr
 800af42:	4610      	mov	r0, r2
 800af44:	e7fb      	b.n	800af3e <__ascii_mbtowc+0x16>
 800af46:	f06f 0001 	mvn.w	r0, #1
 800af4a:	e7f8      	b.n	800af3e <__ascii_mbtowc+0x16>

0800af4c <memmove>:
 800af4c:	4288      	cmp	r0, r1
 800af4e:	b510      	push	{r4, lr}
 800af50:	eb01 0402 	add.w	r4, r1, r2
 800af54:	d902      	bls.n	800af5c <memmove+0x10>
 800af56:	4284      	cmp	r4, r0
 800af58:	4623      	mov	r3, r4
 800af5a:	d807      	bhi.n	800af6c <memmove+0x20>
 800af5c:	1e43      	subs	r3, r0, #1
 800af5e:	42a1      	cmp	r1, r4
 800af60:	d008      	beq.n	800af74 <memmove+0x28>
 800af62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6a:	e7f8      	b.n	800af5e <memmove+0x12>
 800af6c:	4402      	add	r2, r0
 800af6e:	4601      	mov	r1, r0
 800af70:	428a      	cmp	r2, r1
 800af72:	d100      	bne.n	800af76 <memmove+0x2a>
 800af74:	bd10      	pop	{r4, pc}
 800af76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af7e:	e7f7      	b.n	800af70 <memmove+0x24>

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f000 bc1f 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	24000ee8 	.word	0x24000ee8

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f000 bc1a 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	24000ee8 	.word	0x24000ee8

0800af98 <_realloc_r>:
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9c:	4680      	mov	r8, r0
 800af9e:	4614      	mov	r4, r2
 800afa0:	460e      	mov	r6, r1
 800afa2:	b921      	cbnz	r1, 800afae <_realloc_r+0x16>
 800afa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	4611      	mov	r1, r2
 800afaa:	f7ff bdad 	b.w	800ab08 <_malloc_r>
 800afae:	b92a      	cbnz	r2, 800afbc <_realloc_r+0x24>
 800afb0:	f7ff fd3e 	bl	800aa30 <_free_r>
 800afb4:	4625      	mov	r5, r4
 800afb6:	4628      	mov	r0, r5
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	f000 fc6a 	bl	800b894 <_malloc_usable_size_r>
 800afc0:	4284      	cmp	r4, r0
 800afc2:	4607      	mov	r7, r0
 800afc4:	d802      	bhi.n	800afcc <_realloc_r+0x34>
 800afc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afca:	d812      	bhi.n	800aff2 <_realloc_r+0x5a>
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7ff fd9a 	bl	800ab08 <_malloc_r>
 800afd4:	4605      	mov	r5, r0
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d0ed      	beq.n	800afb6 <_realloc_r+0x1e>
 800afda:	42bc      	cmp	r4, r7
 800afdc:	4622      	mov	r2, r4
 800afde:	4631      	mov	r1, r6
 800afe0:	bf28      	it	cs
 800afe2:	463a      	movcs	r2, r7
 800afe4:	f7fd ff08 	bl	8008df8 <memcpy>
 800afe8:	4631      	mov	r1, r6
 800afea:	4640      	mov	r0, r8
 800afec:	f7ff fd20 	bl	800aa30 <_free_r>
 800aff0:	e7e1      	b.n	800afb6 <_realloc_r+0x1e>
 800aff2:	4635      	mov	r5, r6
 800aff4:	e7df      	b.n	800afb6 <_realloc_r+0x1e>

0800aff6 <__sfputc_r>:
 800aff6:	6893      	ldr	r3, [r2, #8]
 800aff8:	3b01      	subs	r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	b410      	push	{r4}
 800affe:	6093      	str	r3, [r2, #8]
 800b000:	da08      	bge.n	800b014 <__sfputc_r+0x1e>
 800b002:	6994      	ldr	r4, [r2, #24]
 800b004:	42a3      	cmp	r3, r4
 800b006:	db01      	blt.n	800b00c <__sfputc_r+0x16>
 800b008:	290a      	cmp	r1, #10
 800b00a:	d103      	bne.n	800b014 <__sfputc_r+0x1e>
 800b00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b010:	f000 b94a 	b.w	800b2a8 <__swbuf_r>
 800b014:	6813      	ldr	r3, [r2, #0]
 800b016:	1c58      	adds	r0, r3, #1
 800b018:	6010      	str	r0, [r2, #0]
 800b01a:	7019      	strb	r1, [r3, #0]
 800b01c:	4608      	mov	r0, r1
 800b01e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <__sfputs_r>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	4614      	mov	r4, r2
 800b02c:	18d5      	adds	r5, r2, r3
 800b02e:	42ac      	cmp	r4, r5
 800b030:	d101      	bne.n	800b036 <__sfputs_r+0x12>
 800b032:	2000      	movs	r0, #0
 800b034:	e007      	b.n	800b046 <__sfputs_r+0x22>
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	463a      	mov	r2, r7
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff ffda 	bl	800aff6 <__sfputc_r>
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	d1f3      	bne.n	800b02e <__sfputs_r+0xa>
 800b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b048 <_vfiprintf_r>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	460d      	mov	r5, r1
 800b04e:	b09d      	sub	sp, #116	; 0x74
 800b050:	4614      	mov	r4, r2
 800b052:	4698      	mov	r8, r3
 800b054:	4606      	mov	r6, r0
 800b056:	b118      	cbz	r0, 800b060 <_vfiprintf_r+0x18>
 800b058:	6983      	ldr	r3, [r0, #24]
 800b05a:	b90b      	cbnz	r3, 800b060 <_vfiprintf_r+0x18>
 800b05c:	f000 fb14 	bl	800b688 <__sinit>
 800b060:	4b89      	ldr	r3, [pc, #548]	; (800b288 <_vfiprintf_r+0x240>)
 800b062:	429d      	cmp	r5, r3
 800b064:	d11b      	bne.n	800b09e <_vfiprintf_r+0x56>
 800b066:	6875      	ldr	r5, [r6, #4]
 800b068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b06a:	07d9      	lsls	r1, r3, #31
 800b06c:	d405      	bmi.n	800b07a <_vfiprintf_r+0x32>
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	059a      	lsls	r2, r3, #22
 800b072:	d402      	bmi.n	800b07a <_vfiprintf_r+0x32>
 800b074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b076:	f000 fba5 	bl	800b7c4 <__retarget_lock_acquire_recursive>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	071b      	lsls	r3, r3, #28
 800b07e:	d501      	bpl.n	800b084 <_vfiprintf_r+0x3c>
 800b080:	692b      	ldr	r3, [r5, #16]
 800b082:	b9eb      	cbnz	r3, 800b0c0 <_vfiprintf_r+0x78>
 800b084:	4629      	mov	r1, r5
 800b086:	4630      	mov	r0, r6
 800b088:	f000 f96e 	bl	800b368 <__swsetup_r>
 800b08c:	b1c0      	cbz	r0, 800b0c0 <_vfiprintf_r+0x78>
 800b08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b090:	07dc      	lsls	r4, r3, #31
 800b092:	d50e      	bpl.n	800b0b2 <_vfiprintf_r+0x6a>
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	b01d      	add	sp, #116	; 0x74
 800b09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09e:	4b7b      	ldr	r3, [pc, #492]	; (800b28c <_vfiprintf_r+0x244>)
 800b0a0:	429d      	cmp	r5, r3
 800b0a2:	d101      	bne.n	800b0a8 <_vfiprintf_r+0x60>
 800b0a4:	68b5      	ldr	r5, [r6, #8]
 800b0a6:	e7df      	b.n	800b068 <_vfiprintf_r+0x20>
 800b0a8:	4b79      	ldr	r3, [pc, #484]	; (800b290 <_vfiprintf_r+0x248>)
 800b0aa:	429d      	cmp	r5, r3
 800b0ac:	bf08      	it	eq
 800b0ae:	68f5      	ldreq	r5, [r6, #12]
 800b0b0:	e7da      	b.n	800b068 <_vfiprintf_r+0x20>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	0598      	lsls	r0, r3, #22
 800b0b6:	d4ed      	bmi.n	800b094 <_vfiprintf_r+0x4c>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ba:	f000 fb84 	bl	800b7c6 <__retarget_lock_release_recursive>
 800b0be:	e7e9      	b.n	800b094 <_vfiprintf_r+0x4c>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c4:	2320      	movs	r3, #32
 800b0c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ce:	2330      	movs	r3, #48	; 0x30
 800b0d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b294 <_vfiprintf_r+0x24c>
 800b0d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0d8:	f04f 0901 	mov.w	r9, #1
 800b0dc:	4623      	mov	r3, r4
 800b0de:	469a      	mov	sl, r3
 800b0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e4:	b10a      	cbz	r2, 800b0ea <_vfiprintf_r+0xa2>
 800b0e6:	2a25      	cmp	r2, #37	; 0x25
 800b0e8:	d1f9      	bne.n	800b0de <_vfiprintf_r+0x96>
 800b0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ee:	d00b      	beq.n	800b108 <_vfiprintf_r+0xc0>
 800b0f0:	465b      	mov	r3, fp
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff ff94 	bl	800b024 <__sfputs_r>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f000 80aa 	beq.w	800b256 <_vfiprintf_r+0x20e>
 800b102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b104:	445a      	add	r2, fp
 800b106:	9209      	str	r2, [sp, #36]	; 0x24
 800b108:	f89a 3000 	ldrb.w	r3, [sl]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 80a2 	beq.w	800b256 <_vfiprintf_r+0x20e>
 800b112:	2300      	movs	r3, #0
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b11c:	f10a 0a01 	add.w	sl, sl, #1
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b128:	931a      	str	r3, [sp, #104]	; 0x68
 800b12a:	4654      	mov	r4, sl
 800b12c:	2205      	movs	r2, #5
 800b12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b132:	4858      	ldr	r0, [pc, #352]	; (800b294 <_vfiprintf_r+0x24c>)
 800b134:	f7f5 f8dc 	bl	80002f0 <memchr>
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	b9d8      	cbnz	r0, 800b174 <_vfiprintf_r+0x12c>
 800b13c:	06d1      	lsls	r1, r2, #27
 800b13e:	bf44      	itt	mi
 800b140:	2320      	movmi	r3, #32
 800b142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b146:	0713      	lsls	r3, r2, #28
 800b148:	bf44      	itt	mi
 800b14a:	232b      	movmi	r3, #43	; 0x2b
 800b14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b150:	f89a 3000 	ldrb.w	r3, [sl]
 800b154:	2b2a      	cmp	r3, #42	; 0x2a
 800b156:	d015      	beq.n	800b184 <_vfiprintf_r+0x13c>
 800b158:	9a07      	ldr	r2, [sp, #28]
 800b15a:	4654      	mov	r4, sl
 800b15c:	2000      	movs	r0, #0
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4621      	mov	r1, r4
 800b164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b168:	3b30      	subs	r3, #48	; 0x30
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d94e      	bls.n	800b20c <_vfiprintf_r+0x1c4>
 800b16e:	b1b0      	cbz	r0, 800b19e <_vfiprintf_r+0x156>
 800b170:	9207      	str	r2, [sp, #28]
 800b172:	e014      	b.n	800b19e <_vfiprintf_r+0x156>
 800b174:	eba0 0308 	sub.w	r3, r0, r8
 800b178:	fa09 f303 	lsl.w	r3, r9, r3
 800b17c:	4313      	orrs	r3, r2
 800b17e:	9304      	str	r3, [sp, #16]
 800b180:	46a2      	mov	sl, r4
 800b182:	e7d2      	b.n	800b12a <_vfiprintf_r+0xe2>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	1d19      	adds	r1, r3, #4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	9103      	str	r1, [sp, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bfbb      	ittet	lt
 800b190:	425b      	neglt	r3, r3
 800b192:	f042 0202 	orrlt.w	r2, r2, #2
 800b196:	9307      	strge	r3, [sp, #28]
 800b198:	9307      	strlt	r3, [sp, #28]
 800b19a:	bfb8      	it	lt
 800b19c:	9204      	strlt	r2, [sp, #16]
 800b19e:	7823      	ldrb	r3, [r4, #0]
 800b1a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1a2:	d10c      	bne.n	800b1be <_vfiprintf_r+0x176>
 800b1a4:	7863      	ldrb	r3, [r4, #1]
 800b1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a8:	d135      	bne.n	800b216 <_vfiprintf_r+0x1ce>
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	9203      	str	r2, [sp, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bfb8      	it	lt
 800b1b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ba:	3402      	adds	r4, #2
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2a4 <_vfiprintf_r+0x25c>
 800b1c2:	7821      	ldrb	r1, [r4, #0]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 f892 	bl	80002f0 <memchr>
 800b1cc:	b140      	cbz	r0, 800b1e0 <_vfiprintf_r+0x198>
 800b1ce:	2340      	movs	r3, #64	; 0x40
 800b1d0:	eba0 000a 	sub.w	r0, r0, sl
 800b1d4:	fa03 f000 	lsl.w	r0, r3, r0
 800b1d8:	9b04      	ldr	r3, [sp, #16]
 800b1da:	4303      	orrs	r3, r0
 800b1dc:	3401      	adds	r4, #1
 800b1de:	9304      	str	r3, [sp, #16]
 800b1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e4:	482c      	ldr	r0, [pc, #176]	; (800b298 <_vfiprintf_r+0x250>)
 800b1e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ea:	2206      	movs	r2, #6
 800b1ec:	f7f5 f880 	bl	80002f0 <memchr>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d03f      	beq.n	800b274 <_vfiprintf_r+0x22c>
 800b1f4:	4b29      	ldr	r3, [pc, #164]	; (800b29c <_vfiprintf_r+0x254>)
 800b1f6:	bb1b      	cbnz	r3, 800b240 <_vfiprintf_r+0x1f8>
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	3307      	adds	r3, #7
 800b1fc:	f023 0307 	bic.w	r3, r3, #7
 800b200:	3308      	adds	r3, #8
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b206:	443b      	add	r3, r7
 800b208:	9309      	str	r3, [sp, #36]	; 0x24
 800b20a:	e767      	b.n	800b0dc <_vfiprintf_r+0x94>
 800b20c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b210:	460c      	mov	r4, r1
 800b212:	2001      	movs	r0, #1
 800b214:	e7a5      	b.n	800b162 <_vfiprintf_r+0x11a>
 800b216:	2300      	movs	r3, #0
 800b218:	3401      	adds	r4, #1
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	4619      	mov	r1, r3
 800b21e:	f04f 0c0a 	mov.w	ip, #10
 800b222:	4620      	mov	r0, r4
 800b224:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b228:	3a30      	subs	r2, #48	; 0x30
 800b22a:	2a09      	cmp	r2, #9
 800b22c:	d903      	bls.n	800b236 <_vfiprintf_r+0x1ee>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0c5      	beq.n	800b1be <_vfiprintf_r+0x176>
 800b232:	9105      	str	r1, [sp, #20]
 800b234:	e7c3      	b.n	800b1be <_vfiprintf_r+0x176>
 800b236:	fb0c 2101 	mla	r1, ip, r1, r2
 800b23a:	4604      	mov	r4, r0
 800b23c:	2301      	movs	r3, #1
 800b23e:	e7f0      	b.n	800b222 <_vfiprintf_r+0x1da>
 800b240:	ab03      	add	r3, sp, #12
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	462a      	mov	r2, r5
 800b246:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <_vfiprintf_r+0x258>)
 800b248:	a904      	add	r1, sp, #16
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7fd fe7c 	bl	8008f48 <_printf_float>
 800b250:	4607      	mov	r7, r0
 800b252:	1c78      	adds	r0, r7, #1
 800b254:	d1d6      	bne.n	800b204 <_vfiprintf_r+0x1bc>
 800b256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b258:	07d9      	lsls	r1, r3, #31
 800b25a:	d405      	bmi.n	800b268 <_vfiprintf_r+0x220>
 800b25c:	89ab      	ldrh	r3, [r5, #12]
 800b25e:	059a      	lsls	r2, r3, #22
 800b260:	d402      	bmi.n	800b268 <_vfiprintf_r+0x220>
 800b262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b264:	f000 faaf 	bl	800b7c6 <__retarget_lock_release_recursive>
 800b268:	89ab      	ldrh	r3, [r5, #12]
 800b26a:	065b      	lsls	r3, r3, #25
 800b26c:	f53f af12 	bmi.w	800b094 <_vfiprintf_r+0x4c>
 800b270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b272:	e711      	b.n	800b098 <_vfiprintf_r+0x50>
 800b274:	ab03      	add	r3, sp, #12
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	462a      	mov	r2, r5
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <_vfiprintf_r+0x258>)
 800b27c:	a904      	add	r1, sp, #16
 800b27e:	4630      	mov	r0, r6
 800b280:	f7fe f8ee 	bl	8009460 <_printf_i>
 800b284:	e7e4      	b.n	800b250 <_vfiprintf_r+0x208>
 800b286:	bf00      	nop
 800b288:	0800d624 	.word	0x0800d624
 800b28c:	0800d644 	.word	0x0800d644
 800b290:	0800d604 	.word	0x0800d604
 800b294:	0800d4ac 	.word	0x0800d4ac
 800b298:	0800d4b6 	.word	0x0800d4b6
 800b29c:	08008f49 	.word	0x08008f49
 800b2a0:	0800b025 	.word	0x0800b025
 800b2a4:	0800d4b2 	.word	0x0800d4b2

0800b2a8 <__swbuf_r>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	460e      	mov	r6, r1
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b118      	cbz	r0, 800b2ba <__swbuf_r+0x12>
 800b2b2:	6983      	ldr	r3, [r0, #24]
 800b2b4:	b90b      	cbnz	r3, 800b2ba <__swbuf_r+0x12>
 800b2b6:	f000 f9e7 	bl	800b688 <__sinit>
 800b2ba:	4b21      	ldr	r3, [pc, #132]	; (800b340 <__swbuf_r+0x98>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	d12b      	bne.n	800b318 <__swbuf_r+0x70>
 800b2c0:	686c      	ldr	r4, [r5, #4]
 800b2c2:	69a3      	ldr	r3, [r4, #24]
 800b2c4:	60a3      	str	r3, [r4, #8]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	071a      	lsls	r2, r3, #28
 800b2ca:	d52f      	bpl.n	800b32c <__swbuf_r+0x84>
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	b36b      	cbz	r3, 800b32c <__swbuf_r+0x84>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	6820      	ldr	r0, [r4, #0]
 800b2d4:	1ac0      	subs	r0, r0, r3
 800b2d6:	6963      	ldr	r3, [r4, #20]
 800b2d8:	b2f6      	uxtb	r6, r6
 800b2da:	4283      	cmp	r3, r0
 800b2dc:	4637      	mov	r7, r6
 800b2de:	dc04      	bgt.n	800b2ea <__swbuf_r+0x42>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f000 f93c 	bl	800b560 <_fflush_r>
 800b2e8:	bb30      	cbnz	r0, 800b338 <__swbuf_r+0x90>
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	60a3      	str	r3, [r4, #8]
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	6022      	str	r2, [r4, #0]
 800b2f6:	701e      	strb	r6, [r3, #0]
 800b2f8:	6963      	ldr	r3, [r4, #20]
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	4283      	cmp	r3, r0
 800b2fe:	d004      	beq.n	800b30a <__swbuf_r+0x62>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	07db      	lsls	r3, r3, #31
 800b304:	d506      	bpl.n	800b314 <__swbuf_r+0x6c>
 800b306:	2e0a      	cmp	r6, #10
 800b308:	d104      	bne.n	800b314 <__swbuf_r+0x6c>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4628      	mov	r0, r5
 800b30e:	f000 f927 	bl	800b560 <_fflush_r>
 800b312:	b988      	cbnz	r0, 800b338 <__swbuf_r+0x90>
 800b314:	4638      	mov	r0, r7
 800b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b318:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <__swbuf_r+0x9c>)
 800b31a:	429c      	cmp	r4, r3
 800b31c:	d101      	bne.n	800b322 <__swbuf_r+0x7a>
 800b31e:	68ac      	ldr	r4, [r5, #8]
 800b320:	e7cf      	b.n	800b2c2 <__swbuf_r+0x1a>
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <__swbuf_r+0xa0>)
 800b324:	429c      	cmp	r4, r3
 800b326:	bf08      	it	eq
 800b328:	68ec      	ldreq	r4, [r5, #12]
 800b32a:	e7ca      	b.n	800b2c2 <__swbuf_r+0x1a>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 f81a 	bl	800b368 <__swsetup_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	d0cb      	beq.n	800b2d0 <__swbuf_r+0x28>
 800b338:	f04f 37ff 	mov.w	r7, #4294967295
 800b33c:	e7ea      	b.n	800b314 <__swbuf_r+0x6c>
 800b33e:	bf00      	nop
 800b340:	0800d624 	.word	0x0800d624
 800b344:	0800d644 	.word	0x0800d644
 800b348:	0800d604 	.word	0x0800d604

0800b34c <__ascii_wctomb>:
 800b34c:	b149      	cbz	r1, 800b362 <__ascii_wctomb+0x16>
 800b34e:	2aff      	cmp	r2, #255	; 0xff
 800b350:	bf85      	ittet	hi
 800b352:	238a      	movhi	r3, #138	; 0x8a
 800b354:	6003      	strhi	r3, [r0, #0]
 800b356:	700a      	strbls	r2, [r1, #0]
 800b358:	f04f 30ff 	movhi.w	r0, #4294967295
 800b35c:	bf98      	it	ls
 800b35e:	2001      	movls	r0, #1
 800b360:	4770      	bx	lr
 800b362:	4608      	mov	r0, r1
 800b364:	4770      	bx	lr
	...

0800b368 <__swsetup_r>:
 800b368:	4b32      	ldr	r3, [pc, #200]	; (800b434 <__swsetup_r+0xcc>)
 800b36a:	b570      	push	{r4, r5, r6, lr}
 800b36c:	681d      	ldr	r5, [r3, #0]
 800b36e:	4606      	mov	r6, r0
 800b370:	460c      	mov	r4, r1
 800b372:	b125      	cbz	r5, 800b37e <__swsetup_r+0x16>
 800b374:	69ab      	ldr	r3, [r5, #24]
 800b376:	b913      	cbnz	r3, 800b37e <__swsetup_r+0x16>
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 f985 	bl	800b688 <__sinit>
 800b37e:	4b2e      	ldr	r3, [pc, #184]	; (800b438 <__swsetup_r+0xd0>)
 800b380:	429c      	cmp	r4, r3
 800b382:	d10f      	bne.n	800b3a4 <__swsetup_r+0x3c>
 800b384:	686c      	ldr	r4, [r5, #4]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b38c:	0719      	lsls	r1, r3, #28
 800b38e:	d42c      	bmi.n	800b3ea <__swsetup_r+0x82>
 800b390:	06dd      	lsls	r5, r3, #27
 800b392:	d411      	bmi.n	800b3b8 <__swsetup_r+0x50>
 800b394:	2309      	movs	r3, #9
 800b396:	6033      	str	r3, [r6, #0]
 800b398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	e03e      	b.n	800b422 <__swsetup_r+0xba>
 800b3a4:	4b25      	ldr	r3, [pc, #148]	; (800b43c <__swsetup_r+0xd4>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d101      	bne.n	800b3ae <__swsetup_r+0x46>
 800b3aa:	68ac      	ldr	r4, [r5, #8]
 800b3ac:	e7eb      	b.n	800b386 <__swsetup_r+0x1e>
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <__swsetup_r+0xd8>)
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	bf08      	it	eq
 800b3b4:	68ec      	ldreq	r4, [r5, #12]
 800b3b6:	e7e6      	b.n	800b386 <__swsetup_r+0x1e>
 800b3b8:	0758      	lsls	r0, r3, #29
 800b3ba:	d512      	bpl.n	800b3e2 <__swsetup_r+0x7a>
 800b3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3be:	b141      	cbz	r1, 800b3d2 <__swsetup_r+0x6a>
 800b3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c4:	4299      	cmp	r1, r3
 800b3c6:	d002      	beq.n	800b3ce <__swsetup_r+0x66>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff fb31 	bl	800aa30 <_free_r>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3d8:	81a3      	strh	r3, [r4, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	b94b      	cbnz	r3, 800b402 <__swsetup_r+0x9a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f8:	d003      	beq.n	800b402 <__swsetup_r+0x9a>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 fa09 	bl	800b814 <__smakebuf_r>
 800b402:	89a0      	ldrh	r0, [r4, #12]
 800b404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b408:	f010 0301 	ands.w	r3, r0, #1
 800b40c:	d00a      	beq.n	800b424 <__swsetup_r+0xbc>
 800b40e:	2300      	movs	r3, #0
 800b410:	60a3      	str	r3, [r4, #8]
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	425b      	negs	r3, r3
 800b416:	61a3      	str	r3, [r4, #24]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	b943      	cbnz	r3, 800b42e <__swsetup_r+0xc6>
 800b41c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b420:	d1ba      	bne.n	800b398 <__swsetup_r+0x30>
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	0781      	lsls	r1, r0, #30
 800b426:	bf58      	it	pl
 800b428:	6963      	ldrpl	r3, [r4, #20]
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	e7f4      	b.n	800b418 <__swsetup_r+0xb0>
 800b42e:	2000      	movs	r0, #0
 800b430:	e7f7      	b.n	800b422 <__swsetup_r+0xba>
 800b432:	bf00      	nop
 800b434:	24000020 	.word	0x24000020
 800b438:	0800d624 	.word	0x0800d624
 800b43c:	0800d644 	.word	0x0800d644
 800b440:	0800d604 	.word	0x0800d604

0800b444 <abort>:
 800b444:	b508      	push	{r3, lr}
 800b446:	2006      	movs	r0, #6
 800b448:	f000 fa54 	bl	800b8f4 <raise>
 800b44c:	2001      	movs	r0, #1
 800b44e:	f7f6 fc2d 	bl	8001cac <_exit>
	...

0800b454 <__sflush_r>:
 800b454:	898a      	ldrh	r2, [r1, #12]
 800b456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45a:	4605      	mov	r5, r0
 800b45c:	0710      	lsls	r0, r2, #28
 800b45e:	460c      	mov	r4, r1
 800b460:	d458      	bmi.n	800b514 <__sflush_r+0xc0>
 800b462:	684b      	ldr	r3, [r1, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	dc05      	bgt.n	800b474 <__sflush_r+0x20>
 800b468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dc02      	bgt.n	800b474 <__sflush_r+0x20>
 800b46e:	2000      	movs	r0, #0
 800b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b476:	2e00      	cmp	r6, #0
 800b478:	d0f9      	beq.n	800b46e <__sflush_r+0x1a>
 800b47a:	2300      	movs	r3, #0
 800b47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b480:	682f      	ldr	r7, [r5, #0]
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	d032      	beq.n	800b4ec <__sflush_r+0x98>
 800b486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	075a      	lsls	r2, r3, #29
 800b48c:	d505      	bpl.n	800b49a <__sflush_r+0x46>
 800b48e:	6863      	ldr	r3, [r4, #4]
 800b490:	1ac0      	subs	r0, r0, r3
 800b492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b494:	b10b      	cbz	r3, 800b49a <__sflush_r+0x46>
 800b496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b498:	1ac0      	subs	r0, r0, r3
 800b49a:	2300      	movs	r3, #0
 800b49c:	4602      	mov	r2, r0
 800b49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4a0:	6a21      	ldr	r1, [r4, #32]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b0      	blx	r6
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	d106      	bne.n	800b4ba <__sflush_r+0x66>
 800b4ac:	6829      	ldr	r1, [r5, #0]
 800b4ae:	291d      	cmp	r1, #29
 800b4b0:	d82c      	bhi.n	800b50c <__sflush_r+0xb8>
 800b4b2:	4a2a      	ldr	r2, [pc, #168]	; (800b55c <__sflush_r+0x108>)
 800b4b4:	40ca      	lsrs	r2, r1
 800b4b6:	07d6      	lsls	r6, r2, #31
 800b4b8:	d528      	bpl.n	800b50c <__sflush_r+0xb8>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	6062      	str	r2, [r4, #4]
 800b4be:	04d9      	lsls	r1, r3, #19
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	d504      	bpl.n	800b4d0 <__sflush_r+0x7c>
 800b4c6:	1c42      	adds	r2, r0, #1
 800b4c8:	d101      	bne.n	800b4ce <__sflush_r+0x7a>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	b903      	cbnz	r3, 800b4d0 <__sflush_r+0x7c>
 800b4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4d2:	602f      	str	r7, [r5, #0]
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	d0ca      	beq.n	800b46e <__sflush_r+0x1a>
 800b4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4dc:	4299      	cmp	r1, r3
 800b4de:	d002      	beq.n	800b4e6 <__sflush_r+0x92>
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7ff faa5 	bl	800aa30 <_free_r>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ea:	e7c1      	b.n	800b470 <__sflush_r+0x1c>
 800b4ec:	6a21      	ldr	r1, [r4, #32]
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b0      	blx	r6
 800b4f4:	1c41      	adds	r1, r0, #1
 800b4f6:	d1c7      	bne.n	800b488 <__sflush_r+0x34>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0c4      	beq.n	800b488 <__sflush_r+0x34>
 800b4fe:	2b1d      	cmp	r3, #29
 800b500:	d001      	beq.n	800b506 <__sflush_r+0xb2>
 800b502:	2b16      	cmp	r3, #22
 800b504:	d101      	bne.n	800b50a <__sflush_r+0xb6>
 800b506:	602f      	str	r7, [r5, #0]
 800b508:	e7b1      	b.n	800b46e <__sflush_r+0x1a>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b510:	81a3      	strh	r3, [r4, #12]
 800b512:	e7ad      	b.n	800b470 <__sflush_r+0x1c>
 800b514:	690f      	ldr	r7, [r1, #16]
 800b516:	2f00      	cmp	r7, #0
 800b518:	d0a9      	beq.n	800b46e <__sflush_r+0x1a>
 800b51a:	0793      	lsls	r3, r2, #30
 800b51c:	680e      	ldr	r6, [r1, #0]
 800b51e:	bf08      	it	eq
 800b520:	694b      	ldreq	r3, [r1, #20]
 800b522:	600f      	str	r7, [r1, #0]
 800b524:	bf18      	it	ne
 800b526:	2300      	movne	r3, #0
 800b528:	eba6 0807 	sub.w	r8, r6, r7
 800b52c:	608b      	str	r3, [r1, #8]
 800b52e:	f1b8 0f00 	cmp.w	r8, #0
 800b532:	dd9c      	ble.n	800b46e <__sflush_r+0x1a>
 800b534:	6a21      	ldr	r1, [r4, #32]
 800b536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b538:	4643      	mov	r3, r8
 800b53a:	463a      	mov	r2, r7
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b0      	blx	r6
 800b540:	2800      	cmp	r0, #0
 800b542:	dc06      	bgt.n	800b552 <__sflush_r+0xfe>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295
 800b550:	e78e      	b.n	800b470 <__sflush_r+0x1c>
 800b552:	4407      	add	r7, r0
 800b554:	eba8 0800 	sub.w	r8, r8, r0
 800b558:	e7e9      	b.n	800b52e <__sflush_r+0xda>
 800b55a:	bf00      	nop
 800b55c:	20400001 	.word	0x20400001

0800b560 <_fflush_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	690b      	ldr	r3, [r1, #16]
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b913      	cbnz	r3, 800b570 <_fflush_r+0x10>
 800b56a:	2500      	movs	r5, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	b118      	cbz	r0, 800b57a <_fflush_r+0x1a>
 800b572:	6983      	ldr	r3, [r0, #24]
 800b574:	b90b      	cbnz	r3, 800b57a <_fflush_r+0x1a>
 800b576:	f000 f887 	bl	800b688 <__sinit>
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <_fflush_r+0x6c>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	d11b      	bne.n	800b5b8 <_fflush_r+0x58>
 800b580:	686c      	ldr	r4, [r5, #4]
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0ef      	beq.n	800b56a <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x3a>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x3a>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f000 f915 	bl	800b7c4 <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff59 	bl	800b454 <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5a4:	07da      	lsls	r2, r3, #31
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	d4e0      	bmi.n	800b56c <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4dd      	bmi.n	800b56c <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b2:	f000 f908 	bl	800b7c6 <__retarget_lock_release_recursive>
 800b5b6:	e7d9      	b.n	800b56c <_fflush_r+0xc>
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <_fflush_r+0x70>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d101      	bne.n	800b5c2 <_fflush_r+0x62>
 800b5be:	68ac      	ldr	r4, [r5, #8]
 800b5c0:	e7df      	b.n	800b582 <_fflush_r+0x22>
 800b5c2:	4b04      	ldr	r3, [pc, #16]	; (800b5d4 <_fflush_r+0x74>)
 800b5c4:	429c      	cmp	r4, r3
 800b5c6:	bf08      	it	eq
 800b5c8:	68ec      	ldreq	r4, [r5, #12]
 800b5ca:	e7da      	b.n	800b582 <_fflush_r+0x22>
 800b5cc:	0800d624 	.word	0x0800d624
 800b5d0:	0800d644 	.word	0x0800d644
 800b5d4:	0800d604 	.word	0x0800d604

0800b5d8 <std>:
 800b5d8:	2300      	movs	r3, #0
 800b5da:	b510      	push	{r4, lr}
 800b5dc:	4604      	mov	r4, r0
 800b5de:	e9c0 3300 	strd	r3, r3, [r0]
 800b5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5e6:	6083      	str	r3, [r0, #8]
 800b5e8:	8181      	strh	r1, [r0, #12]
 800b5ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b5ec:	81c2      	strh	r2, [r0, #14]
 800b5ee:	6183      	str	r3, [r0, #24]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	2208      	movs	r2, #8
 800b5f4:	305c      	adds	r0, #92	; 0x5c
 800b5f6:	f7fd fc0d 	bl	8008e14 <memset>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <std+0x38>)
 800b5fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <std+0x3c>)
 800b600:	62a3      	str	r3, [r4, #40]	; 0x28
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <std+0x40>)
 800b604:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <std+0x44>)
 800b608:	6224      	str	r4, [r4, #32]
 800b60a:	6323      	str	r3, [r4, #48]	; 0x30
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800b92d 	.word	0x0800b92d
 800b614:	0800b94f 	.word	0x0800b94f
 800b618:	0800b987 	.word	0x0800b987
 800b61c:	0800b9ab 	.word	0x0800b9ab

0800b620 <_cleanup_r>:
 800b620:	4901      	ldr	r1, [pc, #4]	; (800b628 <_cleanup_r+0x8>)
 800b622:	f000 b8af 	b.w	800b784 <_fwalk_reent>
 800b626:	bf00      	nop
 800b628:	0800b561 	.word	0x0800b561

0800b62c <__sfmoreglue>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	2268      	movs	r2, #104	; 0x68
 800b630:	1e4d      	subs	r5, r1, #1
 800b632:	4355      	muls	r5, r2
 800b634:	460e      	mov	r6, r1
 800b636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b63a:	f7ff fa65 	bl	800ab08 <_malloc_r>
 800b63e:	4604      	mov	r4, r0
 800b640:	b140      	cbz	r0, 800b654 <__sfmoreglue+0x28>
 800b642:	2100      	movs	r1, #0
 800b644:	e9c0 1600 	strd	r1, r6, [r0]
 800b648:	300c      	adds	r0, #12
 800b64a:	60a0      	str	r0, [r4, #8]
 800b64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b650:	f7fd fbe0 	bl	8008e14 <memset>
 800b654:	4620      	mov	r0, r4
 800b656:	bd70      	pop	{r4, r5, r6, pc}

0800b658 <__sfp_lock_acquire>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sfp_lock_acquire+0x8>)
 800b65a:	f000 b8b3 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	24000ee9 	.word	0x24000ee9

0800b664 <__sfp_lock_release>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sfp_lock_release+0x8>)
 800b666:	f000 b8ae 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	24000ee9 	.word	0x24000ee9

0800b670 <__sinit_lock_acquire>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__sinit_lock_acquire+0x8>)
 800b672:	f000 b8a7 	b.w	800b7c4 <__retarget_lock_acquire_recursive>
 800b676:	bf00      	nop
 800b678:	24000eea 	.word	0x24000eea

0800b67c <__sinit_lock_release>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__sinit_lock_release+0x8>)
 800b67e:	f000 b8a2 	b.w	800b7c6 <__retarget_lock_release_recursive>
 800b682:	bf00      	nop
 800b684:	24000eea 	.word	0x24000eea

0800b688 <__sinit>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	f7ff fff0 	bl	800b670 <__sinit_lock_acquire>
 800b690:	69a3      	ldr	r3, [r4, #24]
 800b692:	b11b      	cbz	r3, 800b69c <__sinit+0x14>
 800b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b698:	f7ff bff0 	b.w	800b67c <__sinit_lock_release>
 800b69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <__sinit+0x68>)
 800b6a4:	4a13      	ldr	r2, [pc, #76]	; (800b6f4 <__sinit+0x6c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	bf04      	itt	eq
 800b6ae:	2301      	moveq	r3, #1
 800b6b0:	61a3      	streq	r3, [r4, #24]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 f820 	bl	800b6f8 <__sfp>
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f81c 	bl	800b6f8 <__sfp>
 800b6c0:	60a0      	str	r0, [r4, #8]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f818 	bl	800b6f8 <__sfp>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	60e0      	str	r0, [r4, #12]
 800b6cc:	2104      	movs	r1, #4
 800b6ce:	6860      	ldr	r0, [r4, #4]
 800b6d0:	f7ff ff82 	bl	800b5d8 <std>
 800b6d4:	68a0      	ldr	r0, [r4, #8]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2109      	movs	r1, #9
 800b6da:	f7ff ff7d 	bl	800b5d8 <std>
 800b6de:	68e0      	ldr	r0, [r4, #12]
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	2112      	movs	r1, #18
 800b6e4:	f7ff ff78 	bl	800b5d8 <std>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	61a3      	str	r3, [r4, #24]
 800b6ec:	e7d2      	b.n	800b694 <__sinit+0xc>
 800b6ee:	bf00      	nop
 800b6f0:	0800d288 	.word	0x0800d288
 800b6f4:	0800b621 	.word	0x0800b621

0800b6f8 <__sfp>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	f7ff ffac 	bl	800b658 <__sfp_lock_acquire>
 800b700:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <__sfp+0x84>)
 800b702:	681e      	ldr	r6, [r3, #0]
 800b704:	69b3      	ldr	r3, [r6, #24]
 800b706:	b913      	cbnz	r3, 800b70e <__sfp+0x16>
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff ffbd 	bl	800b688 <__sinit>
 800b70e:	3648      	adds	r6, #72	; 0x48
 800b710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b714:	3b01      	subs	r3, #1
 800b716:	d503      	bpl.n	800b720 <__sfp+0x28>
 800b718:	6833      	ldr	r3, [r6, #0]
 800b71a:	b30b      	cbz	r3, 800b760 <__sfp+0x68>
 800b71c:	6836      	ldr	r6, [r6, #0]
 800b71e:	e7f7      	b.n	800b710 <__sfp+0x18>
 800b720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b724:	b9d5      	cbnz	r5, 800b75c <__sfp+0x64>
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <__sfp+0x88>)
 800b728:	60e3      	str	r3, [r4, #12]
 800b72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b72e:	6665      	str	r5, [r4, #100]	; 0x64
 800b730:	f000 f847 	bl	800b7c2 <__retarget_lock_init_recursive>
 800b734:	f7ff ff96 	bl	800b664 <__sfp_lock_release>
 800b738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b740:	6025      	str	r5, [r4, #0]
 800b742:	61a5      	str	r5, [r4, #24]
 800b744:	2208      	movs	r2, #8
 800b746:	4629      	mov	r1, r5
 800b748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b74c:	f7fd fb62 	bl	8008e14 <memset>
 800b750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b758:	4620      	mov	r0, r4
 800b75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75c:	3468      	adds	r4, #104	; 0x68
 800b75e:	e7d9      	b.n	800b714 <__sfp+0x1c>
 800b760:	2104      	movs	r1, #4
 800b762:	4638      	mov	r0, r7
 800b764:	f7ff ff62 	bl	800b62c <__sfmoreglue>
 800b768:	4604      	mov	r4, r0
 800b76a:	6030      	str	r0, [r6, #0]
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d1d5      	bne.n	800b71c <__sfp+0x24>
 800b770:	f7ff ff78 	bl	800b664 <__sfp_lock_release>
 800b774:	230c      	movs	r3, #12
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	e7ee      	b.n	800b758 <__sfp+0x60>
 800b77a:	bf00      	nop
 800b77c:	0800d288 	.word	0x0800d288
 800b780:	ffff0001 	.word	0xffff0001

0800b784 <_fwalk_reent>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	4606      	mov	r6, r0
 800b78a:	4688      	mov	r8, r1
 800b78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b790:	2700      	movs	r7, #0
 800b792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b796:	f1b9 0901 	subs.w	r9, r9, #1
 800b79a:	d505      	bpl.n	800b7a8 <_fwalk_reent+0x24>
 800b79c:	6824      	ldr	r4, [r4, #0]
 800b79e:	2c00      	cmp	r4, #0
 800b7a0:	d1f7      	bne.n	800b792 <_fwalk_reent+0xe>
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a8:	89ab      	ldrh	r3, [r5, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d907      	bls.n	800b7be <_fwalk_reent+0x3a>
 800b7ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	d003      	beq.n	800b7be <_fwalk_reent+0x3a>
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	47c0      	blx	r8
 800b7bc:	4307      	orrs	r7, r0
 800b7be:	3568      	adds	r5, #104	; 0x68
 800b7c0:	e7e9      	b.n	800b796 <_fwalk_reent+0x12>

0800b7c2 <__retarget_lock_init_recursive>:
 800b7c2:	4770      	bx	lr

0800b7c4 <__retarget_lock_acquire_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__retarget_lock_release_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <__swhatbuf_r>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	460e      	mov	r6, r1
 800b7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	b096      	sub	sp, #88	; 0x58
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	da08      	bge.n	800b7ec <__swhatbuf_r+0x24>
 800b7da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	061a      	lsls	r2, r3, #24
 800b7e4:	d410      	bmi.n	800b808 <__swhatbuf_r+0x40>
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	e00e      	b.n	800b80a <__swhatbuf_r+0x42>
 800b7ec:	466a      	mov	r2, sp
 800b7ee:	f000 f903 	bl	800b9f8 <_fstat_r>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	dbf1      	blt.n	800b7da <__swhatbuf_r+0x12>
 800b7f6:	9a01      	ldr	r2, [sp, #4]
 800b7f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b800:	425a      	negs	r2, r3
 800b802:	415a      	adcs	r2, r3
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	e7ee      	b.n	800b7e6 <__swhatbuf_r+0x1e>
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	2000      	movs	r0, #0
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	b016      	add	sp, #88	; 0x58
 800b810:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b814 <__smakebuf_r>:
 800b814:	898b      	ldrh	r3, [r1, #12]
 800b816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b818:	079d      	lsls	r5, r3, #30
 800b81a:	4606      	mov	r6, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	d507      	bpl.n	800b830 <__smakebuf_r+0x1c>
 800b820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	2301      	movs	r3, #1
 800b82a:	6163      	str	r3, [r4, #20]
 800b82c:	b002      	add	sp, #8
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	ab01      	add	r3, sp, #4
 800b832:	466a      	mov	r2, sp
 800b834:	f7ff ffc8 	bl	800b7c8 <__swhatbuf_r>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	4605      	mov	r5, r0
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff f963 	bl	800ab08 <_malloc_r>
 800b842:	b948      	cbnz	r0, 800b858 <__smakebuf_r+0x44>
 800b844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b848:	059a      	lsls	r2, r3, #22
 800b84a:	d4ef      	bmi.n	800b82c <__smakebuf_r+0x18>
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	f043 0302 	orr.w	r3, r3, #2
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	e7e3      	b.n	800b820 <__smakebuf_r+0xc>
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <__smakebuf_r+0x7c>)
 800b85a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	6020      	str	r0, [r4, #0]
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	9b00      	ldr	r3, [sp, #0]
 800b868:	6163      	str	r3, [r4, #20]
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	6120      	str	r0, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x74>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 f8d1 	bl	800ba1c <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x74>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a0      	ldrh	r0, [r4, #12]
 800b88a:	4305      	orrs	r5, r0
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cd      	b.n	800b82c <__smakebuf_r+0x18>
 800b890:	0800b621 	.word	0x0800b621

0800b894 <_malloc_usable_size_r>:
 800b894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b898:	1f18      	subs	r0, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	bfbc      	itt	lt
 800b89e:	580b      	ldrlt	r3, [r1, r0]
 800b8a0:	18c0      	addlt	r0, r0, r3
 800b8a2:	4770      	bx	lr

0800b8a4 <_raise_r>:
 800b8a4:	291f      	cmp	r1, #31
 800b8a6:	b538      	push	{r3, r4, r5, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	d904      	bls.n	800b8b8 <_raise_r+0x14>
 800b8ae:	2316      	movs	r3, #22
 800b8b0:	6003      	str	r3, [r0, #0]
 800b8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8ba:	b112      	cbz	r2, 800b8c2 <_raise_r+0x1e>
 800b8bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8c0:	b94b      	cbnz	r3, 800b8d6 <_raise_r+0x32>
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 f830 	bl	800b928 <_getpid_r>
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8d2:	f000 b817 	b.w	800b904 <_kill_r>
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d00a      	beq.n	800b8f0 <_raise_r+0x4c>
 800b8da:	1c59      	adds	r1, r3, #1
 800b8dc:	d103      	bne.n	800b8e6 <_raise_r+0x42>
 800b8de:	2316      	movs	r3, #22
 800b8e0:	6003      	str	r3, [r0, #0]
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	e7e7      	b.n	800b8b6 <_raise_r+0x12>
 800b8e6:	2400      	movs	r4, #0
 800b8e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	4798      	blx	r3
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e7e0      	b.n	800b8b6 <_raise_r+0x12>

0800b8f4 <raise>:
 800b8f4:	4b02      	ldr	r3, [pc, #8]	; (800b900 <raise+0xc>)
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	f7ff bfd3 	b.w	800b8a4 <_raise_r>
 800b8fe:	bf00      	nop
 800b900:	24000020 	.word	0x24000020

0800b904 <_kill_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	; (800b924 <_kill_r+0x20>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	4611      	mov	r1, r2
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	f7f6 f9bb 	bl	8001c8c <_kill>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d102      	bne.n	800b920 <_kill_r+0x1c>
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	b103      	cbz	r3, 800b920 <_kill_r+0x1c>
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	bd38      	pop	{r3, r4, r5, pc}
 800b922:	bf00      	nop
 800b924:	24000ee4 	.word	0x24000ee4

0800b928 <_getpid_r>:
 800b928:	f7f6 b9a8 	b.w	8001c7c <_getpid>

0800b92c <__sread>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	460c      	mov	r4, r1
 800b930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b934:	f000 f894 	bl	800ba60 <_read_r>
 800b938:	2800      	cmp	r0, #0
 800b93a:	bfab      	itete	ge
 800b93c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b93e:	89a3      	ldrhlt	r3, [r4, #12]
 800b940:	181b      	addge	r3, r3, r0
 800b942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b946:	bfac      	ite	ge
 800b948:	6563      	strge	r3, [r4, #84]	; 0x54
 800b94a:	81a3      	strhlt	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__swrite>:
 800b94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b952:	461f      	mov	r7, r3
 800b954:	898b      	ldrh	r3, [r1, #12]
 800b956:	05db      	lsls	r3, r3, #23
 800b958:	4605      	mov	r5, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	4616      	mov	r6, r2
 800b95e:	d505      	bpl.n	800b96c <__swrite+0x1e>
 800b960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b964:	2302      	movs	r3, #2
 800b966:	2200      	movs	r2, #0
 800b968:	f000 f868 	bl	800ba3c <_lseek_r>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	4632      	mov	r2, r6
 800b97a:	463b      	mov	r3, r7
 800b97c:	4628      	mov	r0, r5
 800b97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	f000 b817 	b.w	800b9b4 <_write_r>

0800b986 <__sseek>:
 800b986:	b510      	push	{r4, lr}
 800b988:	460c      	mov	r4, r1
 800b98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b98e:	f000 f855 	bl	800ba3c <_lseek_r>
 800b992:	1c43      	adds	r3, r0, #1
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	bf15      	itete	ne
 800b998:	6560      	strne	r0, [r4, #84]	; 0x54
 800b99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9a2:	81a3      	strheq	r3, [r4, #12]
 800b9a4:	bf18      	it	ne
 800b9a6:	81a3      	strhne	r3, [r4, #12]
 800b9a8:	bd10      	pop	{r4, pc}

0800b9aa <__sclose>:
 800b9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ae:	f000 b813 	b.w	800b9d8 <_close_r>
	...

0800b9b4 <_write_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d07      	ldr	r5, [pc, #28]	; (800b9d4 <_write_r+0x20>)
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	4611      	mov	r1, r2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	602a      	str	r2, [r5, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f7f6 f999 	bl	8001cfa <_write>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_write_r+0x1e>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_write_r+0x1e>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	24000ee4 	.word	0x24000ee4

0800b9d8 <_close_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	; (800b9f4 <_close_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7f6 f9a5 	bl	8001d32 <_close>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_close_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_close_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	24000ee4 	.word	0x24000ee4

0800b9f8 <_fstat_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	; (800ba18 <_fstat_r+0x20>)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	4611      	mov	r1, r2
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	f7f6 f9a0 	bl	8001d4a <_fstat>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d102      	bne.n	800ba14 <_fstat_r+0x1c>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	b103      	cbz	r3, 800ba14 <_fstat_r+0x1c>
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	24000ee4 	.word	0x24000ee4

0800ba1c <_isatty_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d06      	ldr	r5, [pc, #24]	; (800ba38 <_isatty_r+0x1c>)
 800ba20:	2300      	movs	r3, #0
 800ba22:	4604      	mov	r4, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	602b      	str	r3, [r5, #0]
 800ba28:	f7f6 f99f 	bl	8001d6a <_isatty>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_isatty_r+0x1a>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_isatty_r+0x1a>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	24000ee4 	.word	0x24000ee4

0800ba3c <_lseek_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4d07      	ldr	r5, [pc, #28]	; (800ba5c <_lseek_r+0x20>)
 800ba40:	4604      	mov	r4, r0
 800ba42:	4608      	mov	r0, r1
 800ba44:	4611      	mov	r1, r2
 800ba46:	2200      	movs	r2, #0
 800ba48:	602a      	str	r2, [r5, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f7f6 f998 	bl	8001d80 <_lseek>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_lseek_r+0x1e>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_lseek_r+0x1e>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	24000ee4 	.word	0x24000ee4

0800ba60 <_read_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4d07      	ldr	r5, [pc, #28]	; (800ba80 <_read_r+0x20>)
 800ba64:	4604      	mov	r4, r0
 800ba66:	4608      	mov	r0, r1
 800ba68:	4611      	mov	r1, r2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	602a      	str	r2, [r5, #0]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f7f6 f926 	bl	8001cc0 <_read>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_read_r+0x1e>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_read_r+0x1e>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	24000ee4 	.word	0x24000ee4
 800ba84:	00000000 	.word	0x00000000

0800ba88 <cexp>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	ed2d 8b06 	vpush	{d8-d10}
 800ba8e:	eeb0 ab40 	vmov.f64	d10, d0
 800ba92:	eeb0 9b41 	vmov.f64	d9, d1
 800ba96:	f000 f832 	bl	800bafe <creal>
 800ba9a:	eeb0 1b49 	vmov.f64	d1, d9
 800ba9e:	eeb0 8b40 	vmov.f64	d8, d0
 800baa2:	eeb0 0b4a 	vmov.f64	d0, d10
 800baa6:	f000 f827 	bl	800baf8 <cimag>
 800baaa:	eeb0 ab40 	vmov.f64	d10, d0
 800baae:	eeb0 0b48 	vmov.f64	d0, d8
 800bab2:	f000 f825 	bl	800bb00 <exp>
 800bab6:	eeb0 9b40 	vmov.f64	d9, d0
 800baba:	eeb0 0b4a 	vmov.f64	d0, d10
 800babe:	f000 fd77 	bl	800c5b0 <sin>
 800bac2:	ee20 8b09 	vmul.f64	d8, d0, d9
 800bac6:	eeb0 0b4a 	vmov.f64	d0, d10
 800baca:	f000 fcdd 	bl	800c488 <cos>
 800bace:	eeb0 1b48 	vmov.f64	d1, d8
 800bad2:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800baf0 <cexp+0x68>
 800bad6:	eeb0 6b40 	vmov.f64	d6, d0
 800bada:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bade:	eea6 7b09 	vfma.f64	d7, d6, d9
 800bae2:	ecbd 8b06 	vpop	{d8-d10}
 800bae6:	eeb0 0b47 	vmov.f64	d0, d7
 800baea:	bd10      	pop	{r4, pc}
 800baec:	f3af 8000 	nop.w
	...

0800baf8 <cimag>:
 800baf8:	eeb0 0b41 	vmov.f64	d0, d1
 800bafc:	4770      	bx	lr

0800bafe <creal>:
 800bafe:	4770      	bx	lr

0800bb00 <exp>:
 800bb00:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800bb02:	ee10 3a90 	vmov	r3, s1
 800bb06:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800bb0a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bb0e:	18a2      	adds	r2, r4, r2
 800bb10:	2a3e      	cmp	r2, #62	; 0x3e
 800bb12:	ee10 1a10 	vmov	r1, s0
 800bb16:	d922      	bls.n	800bb5e <exp+0x5e>
 800bb18:	2a00      	cmp	r2, #0
 800bb1a:	da06      	bge.n	800bb2a <exp+0x2a>
 800bb1c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bb20:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bb24:	b004      	add	sp, #16
 800bb26:	bcf0      	pop	{r4, r5, r6, r7}
 800bb28:	4770      	bx	lr
 800bb2a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800bb2e:	f04f 0000 	mov.w	r0, #0
 800bb32:	d913      	bls.n	800bb5c <exp+0x5c>
 800bb34:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800bb38:	bf08      	it	eq
 800bb3a:	4281      	cmpeq	r1, r0
 800bb3c:	f000 80a0 	beq.w	800bc80 <exp+0x180>
 800bb40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bb44:	4294      	cmp	r4, r2
 800bb46:	d0e9      	beq.n	800bb1c <exp+0x1c>
 800bb48:	4283      	cmp	r3, r0
 800bb4a:	da03      	bge.n	800bb54 <exp+0x54>
 800bb4c:	b004      	add	sp, #16
 800bb4e:	bcf0      	pop	{r4, r5, r6, r7}
 800bb50:	f000 b9be 	b.w	800bed0 <__math_uflow>
 800bb54:	b004      	add	sp, #16
 800bb56:	bcf0      	pop	{r4, r5, r6, r7}
 800bb58:	f000 b9c2 	b.w	800bee0 <__math_oflow>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	4950      	ldr	r1, [pc, #320]	; (800bca0 <exp+0x1a0>)
 800bb60:	ed91 6b02 	vldr	d6, [r1, #8]
 800bb64:	ed91 5b00 	vldr	d5, [r1]
 800bb68:	eeb0 7b46 	vmov.f64	d7, d6
 800bb6c:	eea5 7b00 	vfma.f64	d7, d5, d0
 800bb70:	ee17 5a10 	vmov	r5, s14
 800bb74:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb78:	ed91 6b04 	vldr	d6, [r1, #16]
 800bb7c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800bb80:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bb84:	ed91 6b06 	vldr	d6, [r1, #24]
 800bb88:	18d8      	adds	r0, r3, r3
 800bb8a:	f100 030f 	add.w	r3, r0, #15
 800bb8e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800bb92:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bb96:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800bb9a:	ee20 7b00 	vmul.f64	d7, d0, d0
 800bb9e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800bba2:	ed91 5b08 	vldr	d5, [r1, #32]
 800bba6:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bbaa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800bbae:	eea4 5b00 	vfma.f64	d5, d4, d0
 800bbb2:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800bbb6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bbba:	ee27 7b07 	vmul.f64	d7, d7, d7
 800bbbe:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800bbc2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800bbc6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800bbca:	eea4 5b00 	vfma.f64	d5, d4, d0
 800bbce:	2600      	movs	r6, #0
 800bbd0:	19f2      	adds	r2, r6, r7
 800bbd2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800bbd6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bbda:	2c00      	cmp	r4, #0
 800bbdc:	d14b      	bne.n	800bc76 <exp+0x176>
 800bbde:	42b5      	cmp	r5, r6
 800bbe0:	db10      	blt.n	800bc04 <exp+0x104>
 800bbe2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800bbe6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800bc88 <exp+0x188>
 800bbea:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800bbee:	4610      	mov	r0, r2
 800bbf0:	ec41 0b10 	vmov	d0, r0, r1
 800bbf4:	eea6 0b00 	vfma.f64	d0, d6, d0
 800bbf8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bbfc:	b004      	add	sp, #16
 800bbfe:	bcf0      	pop	{r4, r5, r6, r7}
 800bc00:	f000 b9a6 	b.w	800bf50 <__math_check_oflow>
 800bc04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bc08:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	ec41 0b17 	vmov	d7, r0, r1
 800bc12:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800bc16:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc1a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800bc1e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc26:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bc90 <exp+0x190>
 800bc2a:	d51e      	bpl.n	800bc6a <exp+0x16a>
 800bc2c:	ee35 3b04 	vadd.f64	d3, d5, d4
 800bc30:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bc34:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc38:	ee34 6b43 	vsub.f64	d6, d4, d3
 800bc3c:	ee36 5b05 	vadd.f64	d5, d6, d5
 800bc40:	ee35 5b07 	vadd.f64	d5, d5, d7
 800bc44:	ee35 5b03 	vadd.f64	d5, d5, d3
 800bc48:	ee35 5b44 	vsub.f64	d5, d5, d4
 800bc4c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc54:	d101      	bne.n	800bc5a <exp+0x15a>
 800bc56:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800bc98 <exp+0x198>
 800bc5a:	ed8d 0b00 	vstr	d0, [sp]
 800bc5e:	ed9d 7b00 	vldr	d7, [sp]
 800bc62:	ee27 7b00 	vmul.f64	d7, d7, d0
 800bc66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc6a:	ee25 0b00 	vmul.f64	d0, d5, d0
 800bc6e:	b004      	add	sp, #16
 800bc70:	bcf0      	pop	{r4, r5, r6, r7}
 800bc72:	f000 b964 	b.w	800bf3e <__math_check_uflow>
 800bc76:	ec43 2b10 	vmov	d0, r2, r3
 800bc7a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800bc7e:	e751      	b.n	800bb24 <exp+0x24>
 800bc80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800bc98 <exp+0x198>
 800bc84:	e74e      	b.n	800bb24 <exp+0x24>
 800bc86:	bf00      	nop
 800bc88:	00000000 	.word	0x00000000
 800bc8c:	7f000000 	.word	0x7f000000
 800bc90:	00000000 	.word	0x00000000
 800bc94:	00100000 	.word	0x00100000
	...
 800bca0:	0800d668 	.word	0x0800d668
 800bca4:	00000000 	.word	0x00000000

0800bca8 <log>:
 800bca8:	b470      	push	{r4, r5, r6}
 800bcaa:	ee10 1a90 	vmov	r1, s1
 800bcae:	ee10 2a10 	vmov	r2, s0
 800bcb2:	f04f 34ff 	mov.w	r4, #4294967295
 800bcb6:	4294      	cmp	r4, r2
 800bcb8:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800bcbc:	4c72      	ldr	r4, [pc, #456]	; (800be88 <log+0x1e0>)
 800bcbe:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800bcc2:	eb74 0000 	sbcs.w	r0, r4, r0
 800bcc6:	ed2d 8b02 	vpush	{d8}
 800bcca:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800bcce:	d35c      	bcc.n	800bd8a <log+0xe2>
 800bcd0:	4b6e      	ldr	r3, [pc, #440]	; (800be8c <log+0x1e4>)
 800bcd2:	4299      	cmp	r1, r3
 800bcd4:	bf08      	it	eq
 800bcd6:	2a00      	cmpeq	r2, #0
 800bcd8:	f000 80c6 	beq.w	800be68 <log+0x1c0>
 800bcdc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bce0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bce4:	4b6a      	ldr	r3, [pc, #424]	; (800be90 <log+0x1e8>)
 800bce6:	ee20 2b00 	vmul.f64	d2, d0, d0
 800bcea:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800bcee:	ee20 4b02 	vmul.f64	d4, d0, d2
 800bcf2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800bcf6:	eea6 7b00 	vfma.f64	d7, d6, d0
 800bcfa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800bcfe:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800bd02:	eea6 7b02 	vfma.f64	d7, d6, d2
 800bd06:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800bd0a:	eea5 6b00 	vfma.f64	d6, d5, d0
 800bd0e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800bd12:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800bd16:	eea5 6b02 	vfma.f64	d6, d5, d2
 800bd1a:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800bd1e:	eea3 5b00 	vfma.f64	d5, d3, d0
 800bd22:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800bd26:	eea3 5b02 	vfma.f64	d5, d3, d2
 800bd2a:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800bd2e:	eeb0 2b40 	vmov.f64	d2, d0
 800bd32:	eea3 5b04 	vfma.f64	d5, d3, d4
 800bd36:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800bd3a:	eea5 6b04 	vfma.f64	d6, d5, d4
 800bd3e:	eea6 7b04 	vfma.f64	d7, d6, d4
 800bd42:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800be70 <log+0x1c8>
 800bd46:	eeb0 1b47 	vmov.f64	d1, d7
 800bd4a:	eeb0 5b40 	vmov.f64	d5, d0
 800bd4e:	eea0 5b06 	vfma.f64	d5, d0, d6
 800bd52:	eea0 5b46 	vfms.f64	d5, d0, d6
 800bd56:	ee30 8b45 	vsub.f64	d8, d0, d5
 800bd5a:	ee25 7b05 	vmul.f64	d7, d5, d5
 800bd5e:	ee30 5b05 	vadd.f64	d5, d0, d5
 800bd62:	eea7 2b03 	vfma.f64	d2, d7, d3
 800bd66:	ee30 6b42 	vsub.f64	d6, d0, d2
 800bd6a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800bd6e:	ee23 3b08 	vmul.f64	d3, d3, d8
 800bd72:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bd76:	eeb0 0b46 	vmov.f64	d0, d6
 800bd7a:	eea1 0b04 	vfma.f64	d0, d1, d4
 800bd7e:	ee32 0b00 	vadd.f64	d0, d2, d0
 800bd82:	ecbd 8b02 	vpop	{d8}
 800bd86:	bc70      	pop	{r4, r5, r6}
 800bd88:	4770      	bx	lr
 800bd8a:	f1a3 0410 	sub.w	r4, r3, #16
 800bd8e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800bd92:	4284      	cmp	r4, r0
 800bd94:	d923      	bls.n	800bdde <log+0x136>
 800bd96:	1894      	adds	r4, r2, r2
 800bd98:	eb41 0001 	adc.w	r0, r1, r1
 800bd9c:	4320      	orrs	r0, r4
 800bd9e:	d105      	bne.n	800bdac <log+0x104>
 800bda0:	ecbd 8b02 	vpop	{d8}
 800bda4:	2001      	movs	r0, #1
 800bda6:	bc70      	pop	{r4, r5, r6}
 800bda8:	f000 b8a2 	b.w	800bef0 <__math_divzero>
 800bdac:	4839      	ldr	r0, [pc, #228]	; (800be94 <log+0x1ec>)
 800bdae:	4281      	cmp	r1, r0
 800bdb0:	bf08      	it	eq
 800bdb2:	2a00      	cmpeq	r2, #0
 800bdb4:	d0e5      	beq.n	800bd82 <log+0xda>
 800bdb6:	041a      	lsls	r2, r3, #16
 800bdb8:	d404      	bmi.n	800bdc4 <log+0x11c>
 800bdba:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 800bdbe:	ea32 0303 	bics.w	r3, r2, r3
 800bdc2:	d104      	bne.n	800bdce <log+0x126>
 800bdc4:	ecbd 8b02 	vpop	{d8}
 800bdc8:	bc70      	pop	{r4, r5, r6}
 800bdca:	f000 b8a9 	b.w	800bf20 <__math_invalid>
 800bdce:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800be78 <log+0x1d0>
 800bdd2:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bdd6:	ec53 2b17 	vmov	r2, r3, d7
 800bdda:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800bdde:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800bde2:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 800bde6:	0d1e      	lsrs	r6, r3, #20
 800bde8:	1e14      	subs	r4, r2, #0
 800bdea:	4a29      	ldr	r2, [pc, #164]	; (800be90 <log+0x1e8>)
 800bdec:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800bdf0:	f3c3 3046 	ubfx	r0, r3, #13, #7
 800bdf4:	0536      	lsls	r6, r6, #20
 800bdf6:	1b8d      	subs	r5, r1, r6
 800bdf8:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 800bdfc:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800be00:	ec45 4b16 	vmov	d6, r4, r5
 800be04:	151b      	asrs	r3, r3, #20
 800be06:	eea6 5b07 	vfma.f64	d5, d6, d7
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	ee25 2b05 	vmul.f64	d2, d5, d5
 800be12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800be16:	ed92 4b00 	vldr	d4, [r2]
 800be1a:	ee25 1b02 	vmul.f64	d1, d5, d2
 800be1e:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800be22:	eea4 7b06 	vfma.f64	d7, d4, d6
 800be26:	ee35 4b07 	vadd.f64	d4, d5, d7
 800be2a:	ee37 0b44 	vsub.f64	d0, d7, d4
 800be2e:	ed92 7b02 	vldr	d7, [r2, #8]
 800be32:	ee30 0b05 	vadd.f64	d0, d0, d5
 800be36:	eea7 0b06 	vfma.f64	d0, d7, d6
 800be3a:	ed92 7b04 	vldr	d7, [r2, #16]
 800be3e:	ed92 6b08 	vldr	d6, [r2, #32]
 800be42:	eea7 0b02 	vfma.f64	d0, d7, d2
 800be46:	ed92 7b06 	vldr	d7, [r2, #24]
 800be4a:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 800be4e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800be52:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 800be56:	eea3 6b05 	vfma.f64	d6, d3, d5
 800be5a:	eea6 7b02 	vfma.f64	d7, d6, d2
 800be5e:	eea1 0b07 	vfma.f64	d0, d1, d7
 800be62:	ee30 0b04 	vadd.f64	d0, d0, d4
 800be66:	e78c      	b.n	800bd82 <log+0xda>
 800be68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800be80 <log+0x1d8>
 800be6c:	e789      	b.n	800bd82 <log+0xda>
 800be6e:	bf00      	nop
 800be70:	00000000 	.word	0x00000000
 800be74:	41a00000 	.word	0x41a00000
 800be78:	00000000 	.word	0x00000000
 800be7c:	43300000 	.word	0x43300000
	...
 800be88:	000308ff 	.word	0x000308ff
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	0800ded8 	.word	0x0800ded8
 800be94:	7ff00000 	.word	0x7ff00000

0800be98 <with_errno>:
 800be98:	b513      	push	{r0, r1, r4, lr}
 800be9a:	4604      	mov	r4, r0
 800be9c:	ed8d 0b00 	vstr	d0, [sp]
 800bea0:	f7fc ff80 	bl	8008da4 <__errno>
 800bea4:	ed9d 0b00 	vldr	d0, [sp]
 800bea8:	6004      	str	r4, [r0, #0]
 800beaa:	b002      	add	sp, #8
 800beac:	bd10      	pop	{r4, pc}

0800beae <xflow>:
 800beae:	b082      	sub	sp, #8
 800beb0:	b158      	cbz	r0, 800beca <xflow+0x1c>
 800beb2:	eeb1 7b40 	vneg.f64	d7, d0
 800beb6:	ed8d 7b00 	vstr	d7, [sp]
 800beba:	ed9d 7b00 	vldr	d7, [sp]
 800bebe:	2022      	movs	r0, #34	; 0x22
 800bec0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bec4:	b002      	add	sp, #8
 800bec6:	f7ff bfe7 	b.w	800be98 <with_errno>
 800beca:	eeb0 7b40 	vmov.f64	d7, d0
 800bece:	e7f2      	b.n	800beb6 <xflow+0x8>

0800bed0 <__math_uflow>:
 800bed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bed8 <__math_uflow+0x8>
 800bed4:	f7ff bfeb 	b.w	800beae <xflow>
 800bed8:	00000000 	.word	0x00000000
 800bedc:	10000000 	.word	0x10000000

0800bee0 <__math_oflow>:
 800bee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bee8 <__math_oflow+0x8>
 800bee4:	f7ff bfe3 	b.w	800beae <xflow>
 800bee8:	00000000 	.word	0x00000000
 800beec:	70000000 	.word	0x70000000

0800bef0 <__math_divzero>:
 800bef0:	b082      	sub	sp, #8
 800bef2:	2800      	cmp	r0, #0
 800bef4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bef8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800befc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800bf00:	ed8d 7b00 	vstr	d7, [sp]
 800bf04:	ed9d 0b00 	vldr	d0, [sp]
 800bf08:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800bf18 <__math_divzero+0x28>
 800bf0c:	2022      	movs	r0, #34	; 0x22
 800bf0e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800bf12:	b002      	add	sp, #8
 800bf14:	f7ff bfc0 	b.w	800be98 <with_errno>
	...

0800bf20 <__math_invalid>:
 800bf20:	eeb0 7b40 	vmov.f64	d7, d0
 800bf24:	eeb4 7b47 	vcmp.f64	d7, d7
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800bf30:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800bf34:	d602      	bvs.n	800bf3c <__math_invalid+0x1c>
 800bf36:	2021      	movs	r0, #33	; 0x21
 800bf38:	f7ff bfae 	b.w	800be98 <with_errno>
 800bf3c:	4770      	bx	lr

0800bf3e <__math_check_uflow>:
 800bf3e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf46:	d102      	bne.n	800bf4e <__math_check_uflow+0x10>
 800bf48:	2022      	movs	r0, #34	; 0x22
 800bf4a:	f7ff bfa5 	b.w	800be98 <with_errno>
 800bf4e:	4770      	bx	lr

0800bf50 <__math_check_oflow>:
 800bf50:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800bf70 <__math_check_oflow+0x20>
 800bf54:	eeb0 7bc0 	vabs.f64	d7, d0
 800bf58:	eeb4 7b46 	vcmp.f64	d7, d6
 800bf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf60:	dd02      	ble.n	800bf68 <__math_check_oflow+0x18>
 800bf62:	2022      	movs	r0, #34	; 0x22
 800bf64:	f7ff bf98 	b.w	800be98 <with_errno>
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	f3af 8000 	nop.w
 800bf70:	ffffffff 	.word	0xffffffff
 800bf74:	7fefffff 	.word	0x7fefffff

0800bf78 <checkint>:
 800bf78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf7c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800bf80:	429a      	cmp	r2, r3
 800bf82:	b570      	push	{r4, r5, r6, lr}
 800bf84:	dd2a      	ble.n	800bfdc <checkint+0x64>
 800bf86:	f240 4333 	movw	r3, #1075	; 0x433
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	dc24      	bgt.n	800bfd8 <checkint+0x60>
 800bf8e:	1a9b      	subs	r3, r3, r2
 800bf90:	f1a3 0620 	sub.w	r6, r3, #32
 800bf94:	f04f 32ff 	mov.w	r2, #4294967295
 800bf98:	fa02 f403 	lsl.w	r4, r2, r3
 800bf9c:	fa02 f606 	lsl.w	r6, r2, r6
 800bfa0:	f1c3 0520 	rsb	r5, r3, #32
 800bfa4:	fa22 f505 	lsr.w	r5, r2, r5
 800bfa8:	4334      	orrs	r4, r6
 800bfaa:	432c      	orrs	r4, r5
 800bfac:	409a      	lsls	r2, r3
 800bfae:	ea20 0202 	bic.w	r2, r0, r2
 800bfb2:	ea21 0404 	bic.w	r4, r1, r4
 800bfb6:	4322      	orrs	r2, r4
 800bfb8:	f1a3 0420 	sub.w	r4, r3, #32
 800bfbc:	f1c3 0220 	rsb	r2, r3, #32
 800bfc0:	d10c      	bne.n	800bfdc <checkint+0x64>
 800bfc2:	40d8      	lsrs	r0, r3
 800bfc4:	fa01 f302 	lsl.w	r3, r1, r2
 800bfc8:	4318      	orrs	r0, r3
 800bfca:	40e1      	lsrs	r1, r4
 800bfcc:	4308      	orrs	r0, r1
 800bfce:	f000 0001 	and.w	r0, r0, #1
 800bfd2:	f1d0 0002 	rsbs	r0, r0, #2
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}
 800bfd8:	2002      	movs	r0, #2
 800bfda:	e7fc      	b.n	800bfd6 <checkint+0x5e>
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e7fa      	b.n	800bfd6 <checkint+0x5e>

0800bfe0 <pow>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	ee10 4a90 	vmov	r4, s1
 800bfe8:	ed2d 8b0a 	vpush	{d8-d12}
 800bfec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800bff0:	ee11 7a90 	vmov	r7, s3
 800bff4:	f10a 32ff 	add.w	r2, sl, #4294967295
 800bff8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800bffc:	429a      	cmp	r2, r3
 800bffe:	ee10 6a10 	vmov	r6, s0
 800c002:	ee11 0a10 	vmov	r0, s2
 800c006:	b086      	sub	sp, #24
 800c008:	46d4      	mov	ip, sl
 800c00a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800c00e:	d806      	bhi.n	800c01e <pow+0x3e>
 800c010:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800c014:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800c018:	2b7f      	cmp	r3, #127	; 0x7f
 800c01a:	f240 8156 	bls.w	800c2ca <pow+0x2ea>
 800c01e:	1802      	adds	r2, r0, r0
 800c020:	eb47 0107 	adc.w	r1, r7, r7
 800c024:	f06f 0e01 	mvn.w	lr, #1
 800c028:	f112 39ff 	adds.w	r9, r2, #4294967295
 800c02c:	f141 38ff 	adc.w	r8, r1, #4294967295
 800c030:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800c034:	45ce      	cmp	lr, r9
 800c036:	eb73 0808 	sbcs.w	r8, r3, r8
 800c03a:	d23f      	bcs.n	800c0bc <pow+0xdc>
 800c03c:	ea52 0301 	orrs.w	r3, r2, r1
 800c040:	f04f 0300 	mov.w	r3, #0
 800c044:	d10c      	bne.n	800c060 <pow+0x80>
 800c046:	19b6      	adds	r6, r6, r6
 800c048:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800c04c:	4164      	adcs	r4, r4
 800c04e:	42b3      	cmp	r3, r6
 800c050:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c054:	41a3      	sbcs	r3, r4
 800c056:	f0c0 808c 	bcc.w	800c172 <pow+0x192>
 800c05a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c05e:	e028      	b.n	800c0b2 <pow+0xd2>
 800c060:	4da3      	ldr	r5, [pc, #652]	; (800c2f0 <pow+0x310>)
 800c062:	42ac      	cmp	r4, r5
 800c064:	bf08      	it	eq
 800c066:	429e      	cmpeq	r6, r3
 800c068:	d107      	bne.n	800c07a <pow+0x9a>
 800c06a:	1800      	adds	r0, r0, r0
 800c06c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800c070:	417f      	adcs	r7, r7
 800c072:	4283      	cmp	r3, r0
 800c074:	4b9f      	ldr	r3, [pc, #636]	; (800c2f4 <pow+0x314>)
 800c076:	41bb      	sbcs	r3, r7
 800c078:	e7ed      	b.n	800c056 <pow+0x76>
 800c07a:	19b6      	adds	r6, r6, r6
 800c07c:	489e      	ldr	r0, [pc, #632]	; (800c2f8 <pow+0x318>)
 800c07e:	4164      	adcs	r4, r4
 800c080:	42b3      	cmp	r3, r6
 800c082:	eb70 0504 	sbcs.w	r5, r0, r4
 800c086:	d374      	bcc.n	800c172 <pow+0x192>
 800c088:	4281      	cmp	r1, r0
 800c08a:	bf08      	it	eq
 800c08c:	429a      	cmpeq	r2, r3
 800c08e:	d170      	bne.n	800c172 <pow+0x192>
 800c090:	4a9a      	ldr	r2, [pc, #616]	; (800c2fc <pow+0x31c>)
 800c092:	4294      	cmp	r4, r2
 800c094:	bf08      	it	eq
 800c096:	429e      	cmpeq	r6, r3
 800c098:	d0df      	beq.n	800c05a <pow+0x7a>
 800c09a:	4294      	cmp	r4, r2
 800c09c:	ea6f 0707 	mvn.w	r7, r7
 800c0a0:	bf34      	ite	cc
 800c0a2:	2400      	movcc	r4, #0
 800c0a4:	2401      	movcs	r4, #1
 800c0a6:	0fff      	lsrs	r7, r7, #31
 800c0a8:	42bc      	cmp	r4, r7
 800c0aa:	f040 81d9 	bne.w	800c460 <pow+0x480>
 800c0ae:	ee21 0b01 	vmul.f64	d0, d1, d1
 800c0b2:	b006      	add	sp, #24
 800c0b4:	ecbd 8b0a 	vpop	{d8-d12}
 800c0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0bc:	eb16 0806 	adds.w	r8, r6, r6
 800c0c0:	eb44 0904 	adc.w	r9, r4, r4
 800c0c4:	f118 31ff 	adds.w	r1, r8, #4294967295
 800c0c8:	f169 0200 	sbc.w	r2, r9, #0
 800c0cc:	458e      	cmp	lr, r1
 800c0ce:	4193      	sbcs	r3, r2
 800c0d0:	d223      	bcs.n	800c11a <pow+0x13a>
 800c0d2:	ee20 0b00 	vmul.f64	d0, d0, d0
 800c0d6:	2c00      	cmp	r4, #0
 800c0d8:	da12      	bge.n	800c100 <pow+0x120>
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7ff ff4c 	bl	800bf78 <checkint>
 800c0e0:	2801      	cmp	r0, #1
 800c0e2:	d10d      	bne.n	800c100 <pow+0x120>
 800c0e4:	eeb1 0b40 	vneg.f64	d0, d0
 800c0e8:	ea58 0309 	orrs.w	r3, r8, r9
 800c0ec:	d10a      	bne.n	800c104 <pow+0x124>
 800c0ee:	2f00      	cmp	r7, #0
 800c0f0:	dadf      	bge.n	800c0b2 <pow+0xd2>
 800c0f2:	b006      	add	sp, #24
 800c0f4:	ecbd 8b0a 	vpop	{d8-d12}
 800c0f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	f7ff bef8 	b.w	800bef0 <__math_divzero>
 800c100:	2000      	movs	r0, #0
 800c102:	e7f1      	b.n	800c0e8 <pow+0x108>
 800c104:	2f00      	cmp	r7, #0
 800c106:	dad4      	bge.n	800c0b2 <pow+0xd2>
 800c108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c10c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c110:	ed8d 7b00 	vstr	d7, [sp]
 800c114:	ed9d 0b00 	vldr	d0, [sp]
 800c118:	e7cb      	b.n	800c0b2 <pow+0xd2>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	da2c      	bge.n	800c178 <pow+0x198>
 800c11e:	4639      	mov	r1, r7
 800c120:	f7ff ff2a 	bl	800bf78 <checkint>
 800c124:	b930      	cbnz	r0, 800c134 <pow+0x154>
 800c126:	b006      	add	sp, #24
 800c128:	ecbd 8b0a 	vpop	{d8-d12}
 800c12c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	f7ff bef6 	b.w	800bf20 <__math_invalid>
 800c134:	2801      	cmp	r0, #1
 800c136:	bf14      	ite	ne
 800c138:	2000      	movne	r0, #0
 800c13a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800c13e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c142:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800c146:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800c14a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800c14e:	2b7f      	cmp	r3, #127	; 0x7f
 800c150:	d92d      	bls.n	800c1ae <pow+0x1ce>
 800c152:	4b67      	ldr	r3, [pc, #412]	; (800c2f0 <pow+0x310>)
 800c154:	2000      	movs	r0, #0
 800c156:	429c      	cmp	r4, r3
 800c158:	bf08      	it	eq
 800c15a:	4286      	cmpeq	r6, r0
 800c15c:	f43f af7d 	beq.w	800c05a <pow+0x7a>
 800c160:	f240 31bd 	movw	r1, #957	; 0x3bd
 800c164:	428a      	cmp	r2, r1
 800c166:	d80c      	bhi.n	800c182 <pow+0x1a2>
 800c168:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c16c:	42b0      	cmp	r0, r6
 800c16e:	41a3      	sbcs	r3, r4
 800c170:	d204      	bcs.n	800c17c <pow+0x19c>
 800c172:	ee31 0b00 	vadd.f64	d0, d1, d0
 800c176:	e79c      	b.n	800c0b2 <pow+0xd2>
 800c178:	2000      	movs	r0, #0
 800c17a:	e7e4      	b.n	800c146 <pow+0x166>
 800c17c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c180:	e797      	b.n	800c0b2 <pow+0xd2>
 800c182:	2e01      	cmp	r6, #1
 800c184:	eb74 0303 	sbcs.w	r3, r4, r3
 800c188:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c18c:	bf34      	ite	cc
 800c18e:	2301      	movcc	r3, #1
 800c190:	2300      	movcs	r3, #0
 800c192:	4295      	cmp	r5, r2
 800c194:	bf8c      	ite	hi
 800c196:	2500      	movhi	r5, #0
 800c198:	2501      	movls	r5, #1
 800c19a:	42ab      	cmp	r3, r5
 800c19c:	f000 809d 	beq.w	800c2da <pow+0x2fa>
 800c1a0:	b006      	add	sp, #24
 800c1a2:	ecbd 8b0a 	vpop	{d8-d12}
 800c1a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1aa:	f7ff be99 	b.w	800bee0 <__math_oflow>
 800c1ae:	f1bc 0f00 	cmp.w	ip, #0
 800c1b2:	d10b      	bne.n	800c1cc <pow+0x1ec>
 800c1b4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800c2e8 <pow+0x308>
 800c1b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c1bc:	ec53 2b17 	vmov	r2, r3, d7
 800c1c0:	ee17 6a10 	vmov	r6, s14
 800c1c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c1c8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800c1cc:	4b4c      	ldr	r3, [pc, #304]	; (800c300 <pow+0x320>)
 800c1ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c1d2:	4423      	add	r3, r4
 800c1d4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800c1d8:	1519      	asrs	r1, r3, #20
 800c1da:	0d1b      	lsrs	r3, r3, #20
 800c1dc:	051b      	lsls	r3, r3, #20
 800c1de:	eba4 0903 	sub.w	r9, r4, r3
 800c1e2:	4b48      	ldr	r3, [pc, #288]	; (800c304 <pow+0x324>)
 800c1e4:	ee04 1a10 	vmov	s8, r1
 800c1e8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800c1ec:	f1b6 0800 	subs.w	r8, r6, #0
 800c1f0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800c1f4:	ec49 8b15 	vmov	d5, r8, r9
 800c1f8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800c1fc:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c200:	ed93 7b00 	vldr	d7, [r3]
 800c204:	ed93 5b02 	vldr	d5, [r3, #8]
 800c208:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800c20c:	eea4 2b07 	vfma.f64	d2, d4, d7
 800c210:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800c214:	ee36 ab02 	vadd.f64	d10, d6, d2
 800c218:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800c21c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c220:	ed93 5b04 	vldr	d5, [r3, #16]
 800c224:	ee32 2b06 	vadd.f64	d2, d2, d6
 800c228:	ee37 7b02 	vadd.f64	d7, d7, d2
 800c22c:	ee26 5b05 	vmul.f64	d5, d6, d5
 800c230:	ed93 4b08 	vldr	d4, [r3, #32]
 800c234:	ee26 0b05 	vmul.f64	d0, d6, d5
 800c238:	eeb0 9b40 	vmov.f64	d9, d0
 800c23c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800c240:	ed93 5b06 	vldr	d5, [r3, #24]
 800c244:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800c248:	ee26 bb00 	vmul.f64	d11, d6, d0
 800c24c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800c250:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c254:	ee3a ab48 	vsub.f64	d10, d10, d8
 800c258:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800c25c:	ee37 9b09 	vadd.f64	d9, d7, d9
 800c260:	ee3a ab00 	vadd.f64	d10, d10, d0
 800c264:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c268:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800c26c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800c270:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800c274:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800c278:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c27c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c280:	eeab ab05 	vfma.f64	d10, d11, d5
 800c284:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800c288:	ee21 7b06 	vmul.f64	d7, d1, d6
 800c28c:	ee17 3a90 	vmov	r3, s15
 800c290:	eeb0 5b47 	vmov.f64	d5, d7
 800c294:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800c298:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800c29c:	18b2      	adds	r2, r6, r2
 800c29e:	2a3e      	cmp	r2, #62	; 0x3e
 800c2a0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800c2a4:	ee38 8b46 	vsub.f64	d8, d8, d6
 800c2a8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800c2ac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800c2b0:	d92b      	bls.n	800c30a <pow+0x32a>
 800c2b2:	2a00      	cmp	r2, #0
 800c2b4:	da0b      	bge.n	800c2ce <pow+0x2ee>
 800c2b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c2ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f43f aef7 	beq.w	800c0b2 <pow+0xd2>
 800c2c4:	eeb1 0b40 	vneg.f64	d0, d0
 800c2c8:	e6f3      	b.n	800c0b2 <pow+0xd2>
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	e77e      	b.n	800c1cc <pow+0x1ec>
 800c2ce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800c2d2:	d919      	bls.n	800c308 <pow+0x328>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f6bf af63 	bge.w	800c1a0 <pow+0x1c0>
 800c2da:	b006      	add	sp, #24
 800c2dc:	ecbd 8b0a 	vpop	{d8-d12}
 800c2e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e4:	f7ff bdf4 	b.w	800bed0 <__math_uflow>
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	43300000 	.word	0x43300000
 800c2f0:	3ff00000 	.word	0x3ff00000
 800c2f4:	fff00000 	.word	0xfff00000
 800c2f8:	ffe00000 	.word	0xffe00000
 800c2fc:	7fe00000 	.word	0x7fe00000
 800c300:	c0196aab 	.word	0xc0196aab
 800c304:	0800e768 	.word	0x0800e768
 800c308:	2600      	movs	r6, #0
 800c30a:	495d      	ldr	r1, [pc, #372]	; (800c480 <pow+0x4a0>)
 800c30c:	ed91 4b02 	vldr	d4, [r1, #8]
 800c310:	ed91 3b00 	vldr	d3, [r1]
 800c314:	eeb0 6b44 	vmov.f64	d6, d4
 800c318:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c31c:	ee16 5a10 	vmov	r5, s12
 800c320:	ee36 6b44 	vsub.f64	d6, d6, d4
 800c324:	ed91 4b04 	vldr	d4, [r1, #16]
 800c328:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800c32c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c330:	eeb0 0b47 	vmov.f64	d0, d7
 800c334:	ed91 7b06 	vldr	d7, [r1, #24]
 800c338:	18dc      	adds	r4, r3, r3
 800c33a:	f104 030f 	add.w	r3, r4, #15
 800c33e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800c342:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c346:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800c34a:	ee35 0b00 	vadd.f64	d0, d5, d0
 800c34e:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c352:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800c356:	ed91 5b08 	vldr	d5, [r1, #32]
 800c35a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800c35e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800c362:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c366:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800c36a:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c36e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c372:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800c376:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800c37a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800c37e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800c382:	1940      	adds	r0, r0, r5
 800c384:	2700      	movs	r7, #0
 800c386:	eb17 020c 	adds.w	r2, r7, ip
 800c38a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800c38e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c392:	2e00      	cmp	r6, #0
 800c394:	d15f      	bne.n	800c456 <pow+0x476>
 800c396:	42bd      	cmp	r5, r7
 800c398:	db13      	blt.n	800c3c2 <pow+0x3e2>
 800c39a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800c39e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	ec41 0b10 	vmov	d0, r0, r1
 800c3a8:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c3ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c468 <pow+0x488>
 800c3b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c3b4:	b006      	add	sp, #24
 800c3b6:	ecbd 8b0a 	vpop	{d8-d12}
 800c3ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3be:	f7ff bdc7 	b.w	800bf50 <__math_check_oflow>
 800c3c2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c3c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800c3ca:	4610      	mov	r0, r2
 800c3cc:	ec41 0b15 	vmov	d5, r0, r1
 800c3d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c3d4:	ee27 6b05 	vmul.f64	d6, d7, d5
 800c3d8:	ee35 7b06 	vadd.f64	d7, d5, d6
 800c3dc:	eeb0 3bc7 	vabs.f64	d3, d7
 800c3e0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800c3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c470 <pow+0x490>
 800c3ec:	d52a      	bpl.n	800c444 <pow+0x464>
 800c3ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c3f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3fa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800c3fe:	ee35 6b06 	vadd.f64	d6, d5, d6
 800c402:	bf48      	it	mi
 800c404:	eeb0 4b43 	vmovmi.f64	d4, d3
 800c408:	ee37 3b04 	vadd.f64	d3, d7, d4
 800c40c:	ee34 5b43 	vsub.f64	d5, d4, d3
 800c410:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c414:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c418:	ee37 7b03 	vadd.f64	d7, d7, d3
 800c41c:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c420:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c428:	d104      	bne.n	800c434 <pow+0x454>
 800c42a:	4632      	mov	r2, r6
 800c42c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c430:	ec43 2b17 	vmov	d7, r2, r3
 800c434:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c438:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c43c:	ee26 6b00 	vmul.f64	d6, d6, d0
 800c440:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c444:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c448:	b006      	add	sp, #24
 800c44a:	ecbd 8b0a 	vpop	{d8-d12}
 800c44e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c452:	f7ff bd74 	b.w	800bf3e <__math_check_uflow>
 800c456:	ec43 2b10 	vmov	d0, r2, r3
 800c45a:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c45e:	e628      	b.n	800c0b2 <pow+0xd2>
 800c460:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800c478 <pow+0x498>
 800c464:	e625      	b.n	800c0b2 <pow+0xd2>
 800c466:	bf00      	nop
 800c468:	00000000 	.word	0x00000000
 800c46c:	7f000000 	.word	0x7f000000
 800c470:	00000000 	.word	0x00000000
 800c474:	00100000 	.word	0x00100000
	...
 800c480:	0800d668 	.word	0x0800d668
 800c484:	00000000 	.word	0x00000000

0800c488 <cos>:
 800c488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c48a:	eeb0 7b40 	vmov.f64	d7, d0
 800c48e:	ee17 3a90 	vmov	r3, s15
 800c492:	4a21      	ldr	r2, [pc, #132]	; (800c518 <cos+0x90>)
 800c494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c498:	4293      	cmp	r3, r2
 800c49a:	dc06      	bgt.n	800c4aa <cos+0x22>
 800c49c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800c510 <cos+0x88>
 800c4a0:	b005      	add	sp, #20
 800c4a2:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4a6:	f000 ba13 	b.w	800c8d0 <__kernel_cos>
 800c4aa:	4a1c      	ldr	r2, [pc, #112]	; (800c51c <cos+0x94>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	dd04      	ble.n	800c4ba <cos+0x32>
 800c4b0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c4b4:	b005      	add	sp, #20
 800c4b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4ba:	4668      	mov	r0, sp
 800c4bc:	f000 f8c4 	bl	800c648 <__ieee754_rem_pio2>
 800c4c0:	f000 0003 	and.w	r0, r0, #3
 800c4c4:	2801      	cmp	r0, #1
 800c4c6:	d009      	beq.n	800c4dc <cos+0x54>
 800c4c8:	2802      	cmp	r0, #2
 800c4ca:	d010      	beq.n	800c4ee <cos+0x66>
 800c4cc:	b9b0      	cbnz	r0, 800c4fc <cos+0x74>
 800c4ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4d2:	ed9d 0b00 	vldr	d0, [sp]
 800c4d6:	f000 f9fb 	bl	800c8d0 <__kernel_cos>
 800c4da:	e7eb      	b.n	800c4b4 <cos+0x2c>
 800c4dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4e0:	ed9d 0b00 	vldr	d0, [sp]
 800c4e4:	f000 fcf8 	bl	800ced8 <__kernel_sin>
 800c4e8:	eeb1 0b40 	vneg.f64	d0, d0
 800c4ec:	e7e2      	b.n	800c4b4 <cos+0x2c>
 800c4ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4f2:	ed9d 0b00 	vldr	d0, [sp]
 800c4f6:	f000 f9eb 	bl	800c8d0 <__kernel_cos>
 800c4fa:	e7f5      	b.n	800c4e8 <cos+0x60>
 800c4fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c500:	ed9d 0b00 	vldr	d0, [sp]
 800c504:	2001      	movs	r0, #1
 800c506:	f000 fce7 	bl	800ced8 <__kernel_sin>
 800c50a:	e7d3      	b.n	800c4b4 <cos+0x2c>
 800c50c:	f3af 8000 	nop.w
	...
 800c518:	3fe921fb 	.word	0x3fe921fb
 800c51c:	7fefffff 	.word	0x7fefffff

0800c520 <round>:
 800c520:	ee10 1a90 	vmov	r1, s1
 800c524:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800c528:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800c52c:	2a13      	cmp	r2, #19
 800c52e:	b510      	push	{r4, lr}
 800c530:	ee10 3a10 	vmov	r3, s0
 800c534:	dc19      	bgt.n	800c56a <round+0x4a>
 800c536:	2a00      	cmp	r2, #0
 800c538:	da09      	bge.n	800c54e <round+0x2e>
 800c53a:	3201      	adds	r2, #1
 800c53c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c540:	d103      	bne.n	800c54a <round+0x2a>
 800c542:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c546:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c54a:	2000      	movs	r0, #0
 800c54c:	e026      	b.n	800c59c <round+0x7c>
 800c54e:	4816      	ldr	r0, [pc, #88]	; (800c5a8 <round+0x88>)
 800c550:	4110      	asrs	r0, r2
 800c552:	ea01 0400 	and.w	r4, r1, r0
 800c556:	4323      	orrs	r3, r4
 800c558:	d00e      	beq.n	800c578 <round+0x58>
 800c55a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c55e:	fa43 f202 	asr.w	r2, r3, r2
 800c562:	4411      	add	r1, r2
 800c564:	ea21 0100 	bic.w	r1, r1, r0
 800c568:	e7ef      	b.n	800c54a <round+0x2a>
 800c56a:	2a33      	cmp	r2, #51	; 0x33
 800c56c:	dd05      	ble.n	800c57a <round+0x5a>
 800c56e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c572:	d101      	bne.n	800c578 <round+0x58>
 800c574:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c578:	bd10      	pop	{r4, pc}
 800c57a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	40e0      	lsrs	r0, r4
 800c584:	4203      	tst	r3, r0
 800c586:	d0f7      	beq.n	800c578 <round+0x58>
 800c588:	2401      	movs	r4, #1
 800c58a:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800c58e:	fa04 f202 	lsl.w	r2, r4, r2
 800c592:	189b      	adds	r3, r3, r2
 800c594:	bf28      	it	cs
 800c596:	1909      	addcs	r1, r1, r4
 800c598:	ea23 0000 	bic.w	r0, r3, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4602      	mov	r2, r0
 800c5a0:	ec43 2b10 	vmov	d0, r2, r3
 800c5a4:	e7e8      	b.n	800c578 <round+0x58>
 800c5a6:	bf00      	nop
 800c5a8:	000fffff 	.word	0x000fffff
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <sin>:
 800c5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5b2:	eeb0 7b40 	vmov.f64	d7, d0
 800c5b6:	ee17 3a90 	vmov	r3, s15
 800c5ba:	4a21      	ldr	r2, [pc, #132]	; (800c640 <sin+0x90>)
 800c5bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	dc07      	bgt.n	800c5d4 <sin+0x24>
 800c5c4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800c638 <sin+0x88>
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	b005      	add	sp, #20
 800c5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5d0:	f000 bc82 	b.w	800ced8 <__kernel_sin>
 800c5d4:	4a1b      	ldr	r2, [pc, #108]	; (800c644 <sin+0x94>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	dd04      	ble.n	800c5e4 <sin+0x34>
 800c5da:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c5de:	b005      	add	sp, #20
 800c5e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5e4:	4668      	mov	r0, sp
 800c5e6:	f000 f82f 	bl	800c648 <__ieee754_rem_pio2>
 800c5ea:	f000 0003 	and.w	r0, r0, #3
 800c5ee:	2801      	cmp	r0, #1
 800c5f0:	d00a      	beq.n	800c608 <sin+0x58>
 800c5f2:	2802      	cmp	r0, #2
 800c5f4:	d00f      	beq.n	800c616 <sin+0x66>
 800c5f6:	b9c0      	cbnz	r0, 800c62a <sin+0x7a>
 800c5f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5fc:	ed9d 0b00 	vldr	d0, [sp]
 800c600:	2001      	movs	r0, #1
 800c602:	f000 fc69 	bl	800ced8 <__kernel_sin>
 800c606:	e7ea      	b.n	800c5de <sin+0x2e>
 800c608:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c60c:	ed9d 0b00 	vldr	d0, [sp]
 800c610:	f000 f95e 	bl	800c8d0 <__kernel_cos>
 800c614:	e7e3      	b.n	800c5de <sin+0x2e>
 800c616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c61a:	ed9d 0b00 	vldr	d0, [sp]
 800c61e:	2001      	movs	r0, #1
 800c620:	f000 fc5a 	bl	800ced8 <__kernel_sin>
 800c624:	eeb1 0b40 	vneg.f64	d0, d0
 800c628:	e7d9      	b.n	800c5de <sin+0x2e>
 800c62a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c62e:	ed9d 0b00 	vldr	d0, [sp]
 800c632:	f000 f94d 	bl	800c8d0 <__kernel_cos>
 800c636:	e7f5      	b.n	800c624 <sin+0x74>
	...
 800c640:	3fe921fb 	.word	0x3fe921fb
 800c644:	7fefffff 	.word	0x7fefffff

0800c648 <__ieee754_rem_pio2>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	eeb0 7b40 	vmov.f64	d7, d0
 800c64e:	ee17 5a90 	vmov	r5, s15
 800c652:	4b99      	ldr	r3, [pc, #612]	; (800c8b8 <__ieee754_rem_pio2+0x270>)
 800c654:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c658:	429e      	cmp	r6, r3
 800c65a:	b088      	sub	sp, #32
 800c65c:	4604      	mov	r4, r0
 800c65e:	dc07      	bgt.n	800c670 <__ieee754_rem_pio2+0x28>
 800c660:	2200      	movs	r2, #0
 800c662:	2300      	movs	r3, #0
 800c664:	ed84 0b00 	vstr	d0, [r4]
 800c668:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c66c:	2000      	movs	r0, #0
 800c66e:	e01b      	b.n	800c6a8 <__ieee754_rem_pio2+0x60>
 800c670:	4b92      	ldr	r3, [pc, #584]	; (800c8bc <__ieee754_rem_pio2+0x274>)
 800c672:	429e      	cmp	r6, r3
 800c674:	dc3b      	bgt.n	800c6ee <__ieee754_rem_pio2+0xa6>
 800c676:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c67a:	2d00      	cmp	r5, #0
 800c67c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800c878 <__ieee754_rem_pio2+0x230>
 800c680:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c684:	dd19      	ble.n	800c6ba <__ieee754_rem_pio2+0x72>
 800c686:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c68a:	429e      	cmp	r6, r3
 800c68c:	d00e      	beq.n	800c6ac <__ieee754_rem_pio2+0x64>
 800c68e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c880 <__ieee754_rem_pio2+0x238>
 800c692:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c696:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c69a:	ed84 5b00 	vstr	d5, [r4]
 800c69e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	b008      	add	sp, #32
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c888 <__ieee754_rem_pio2+0x240>
 800c6b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6b4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800c890 <__ieee754_rem_pio2+0x248>
 800c6b8:	e7eb      	b.n	800c692 <__ieee754_rem_pio2+0x4a>
 800c6ba:	429e      	cmp	r6, r3
 800c6bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c6c0:	d00e      	beq.n	800c6e0 <__ieee754_rem_pio2+0x98>
 800c6c2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800c880 <__ieee754_rem_pio2+0x238>
 800c6c6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c6ca:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c6ce:	ed84 5b00 	vstr	d5, [r4]
 800c6d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6da:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6de:	e7e3      	b.n	800c6a8 <__ieee754_rem_pio2+0x60>
 800c6e0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c888 <__ieee754_rem_pio2+0x240>
 800c6e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c6e8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800c890 <__ieee754_rem_pio2+0x248>
 800c6ec:	e7eb      	b.n	800c6c6 <__ieee754_rem_pio2+0x7e>
 800c6ee:	4b74      	ldr	r3, [pc, #464]	; (800c8c0 <__ieee754_rem_pio2+0x278>)
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	dc70      	bgt.n	800c7d6 <__ieee754_rem_pio2+0x18e>
 800c6f4:	f000 fc48 	bl	800cf88 <fabs>
 800c6f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c6fc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800c898 <__ieee754_rem_pio2+0x250>
 800c700:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c704:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c708:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c70c:	ee17 0a90 	vmov	r0, s15
 800c710:	eeb1 4b45 	vneg.f64	d4, d5
 800c714:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c878 <__ieee754_rem_pio2+0x230>
 800c718:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c71c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800c880 <__ieee754_rem_pio2+0x238>
 800c720:	281f      	cmp	r0, #31
 800c722:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c726:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c72a:	dc08      	bgt.n	800c73e <__ieee754_rem_pio2+0xf6>
 800c72c:	4b65      	ldr	r3, [pc, #404]	; (800c8c4 <__ieee754_rem_pio2+0x27c>)
 800c72e:	1e42      	subs	r2, r0, #1
 800c730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c734:	42b3      	cmp	r3, r6
 800c736:	d002      	beq.n	800c73e <__ieee754_rem_pio2+0xf6>
 800c738:	ed84 6b00 	vstr	d6, [r4]
 800c73c:	e026      	b.n	800c78c <__ieee754_rem_pio2+0x144>
 800c73e:	ee16 3a90 	vmov	r3, s13
 800c742:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c746:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c74a:	2b10      	cmp	r3, #16
 800c74c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c750:	ddf2      	ble.n	800c738 <__ieee754_rem_pio2+0xf0>
 800c752:	eeb0 6b40 	vmov.f64	d6, d0
 800c756:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800c888 <__ieee754_rem_pio2+0x240>
 800c75a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c890 <__ieee754_rem_pio2+0x248>
 800c75e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c762:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c766:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c76a:	eeb0 7b40 	vmov.f64	d7, d0
 800c76e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c772:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c776:	ee13 3a90 	vmov	r3, s7
 800c77a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2b31      	cmp	r3, #49	; 0x31
 800c782:	dc17      	bgt.n	800c7b4 <__ieee754_rem_pio2+0x16c>
 800c784:	eeb0 0b46 	vmov.f64	d0, d6
 800c788:	ed84 3b00 	vstr	d3, [r4]
 800c78c:	ed94 6b00 	vldr	d6, [r4]
 800c790:	2d00      	cmp	r5, #0
 800c792:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c796:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c79a:	ed84 0b02 	vstr	d0, [r4, #8]
 800c79e:	da83      	bge.n	800c6a8 <__ieee754_rem_pio2+0x60>
 800c7a0:	eeb1 6b46 	vneg.f64	d6, d6
 800c7a4:	eeb1 0b40 	vneg.f64	d0, d0
 800c7a8:	ed84 6b00 	vstr	d6, [r4]
 800c7ac:	ed84 0b02 	vstr	d0, [r4, #8]
 800c7b0:	4240      	negs	r0, r0
 800c7b2:	e779      	b.n	800c6a8 <__ieee754_rem_pio2+0x60>
 800c7b4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800c8a0 <__ieee754_rem_pio2+0x258>
 800c7b8:	eeb0 0b46 	vmov.f64	d0, d6
 800c7bc:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c7c0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c7c4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800c8a8 <__ieee754_rem_pio2+0x260>
 800c7c8:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c7cc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c7d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c7d4:	e7b0      	b.n	800c738 <__ieee754_rem_pio2+0xf0>
 800c7d6:	4b3c      	ldr	r3, [pc, #240]	; (800c8c8 <__ieee754_rem_pio2+0x280>)
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	dd06      	ble.n	800c7ea <__ieee754_rem_pio2+0x1a2>
 800c7dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c7e0:	ed80 7b02 	vstr	d7, [r0, #8]
 800c7e4:	ed80 7b00 	vstr	d7, [r0]
 800c7e8:	e740      	b.n	800c66c <__ieee754_rem_pio2+0x24>
 800c7ea:	1532      	asrs	r2, r6, #20
 800c7ec:	ee10 0a10 	vmov	r0, s0
 800c7f0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c7f4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c7f8:	ec41 0b17 	vmov	d7, r0, r1
 800c7fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c800:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800c8b0 <__ieee754_rem_pio2+0x268>
 800c804:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c80c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c810:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c814:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c818:	a902      	add	r1, sp, #8
 800c81a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c81e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c822:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c82a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c82e:	2603      	movs	r6, #3
 800c830:	4608      	mov	r0, r1
 800c832:	ed91 7b04 	vldr	d7, [r1, #16]
 800c836:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83e:	4633      	mov	r3, r6
 800c840:	f1a1 0108 	sub.w	r1, r1, #8
 800c844:	f106 36ff 	add.w	r6, r6, #4294967295
 800c848:	d0f3      	beq.n	800c832 <__ieee754_rem_pio2+0x1ea>
 800c84a:	4920      	ldr	r1, [pc, #128]	; (800c8cc <__ieee754_rem_pio2+0x284>)
 800c84c:	9101      	str	r1, [sp, #4]
 800c84e:	2102      	movs	r1, #2
 800c850:	9100      	str	r1, [sp, #0]
 800c852:	4621      	mov	r1, r4
 800c854:	f000 f8a8 	bl	800c9a8 <__kernel_rem_pio2>
 800c858:	2d00      	cmp	r5, #0
 800c85a:	f6bf af25 	bge.w	800c6a8 <__ieee754_rem_pio2+0x60>
 800c85e:	ed94 7b00 	vldr	d7, [r4]
 800c862:	eeb1 7b47 	vneg.f64	d7, d7
 800c866:	ed84 7b00 	vstr	d7, [r4]
 800c86a:	ed94 7b02 	vldr	d7, [r4, #8]
 800c86e:	eeb1 7b47 	vneg.f64	d7, d7
 800c872:	ed84 7b02 	vstr	d7, [r4, #8]
 800c876:	e79b      	b.n	800c7b0 <__ieee754_rem_pio2+0x168>
 800c878:	54400000 	.word	0x54400000
 800c87c:	3ff921fb 	.word	0x3ff921fb
 800c880:	1a626331 	.word	0x1a626331
 800c884:	3dd0b461 	.word	0x3dd0b461
 800c888:	1a600000 	.word	0x1a600000
 800c88c:	3dd0b461 	.word	0x3dd0b461
 800c890:	2e037073 	.word	0x2e037073
 800c894:	3ba3198a 	.word	0x3ba3198a
 800c898:	6dc9c883 	.word	0x6dc9c883
 800c89c:	3fe45f30 	.word	0x3fe45f30
 800c8a0:	2e000000 	.word	0x2e000000
 800c8a4:	3ba3198a 	.word	0x3ba3198a
 800c8a8:	252049c1 	.word	0x252049c1
 800c8ac:	397b839a 	.word	0x397b839a
 800c8b0:	00000000 	.word	0x00000000
 800c8b4:	41700000 	.word	0x41700000
 800c8b8:	3fe921fb 	.word	0x3fe921fb
 800c8bc:	4002d97b 	.word	0x4002d97b
 800c8c0:	413921fb 	.word	0x413921fb
 800c8c4:	0800f7b0 	.word	0x0800f7b0
 800c8c8:	7fefffff 	.word	0x7fefffff
 800c8cc:	0800f830 	.word	0x0800f830

0800c8d0 <__kernel_cos>:
 800c8d0:	ee10 1a90 	vmov	r1, s1
 800c8d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c8d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c8dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c8e0:	da05      	bge.n	800c8ee <__kernel_cos+0x1e>
 800c8e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c8e6:	ee17 3a90 	vmov	r3, s15
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d03d      	beq.n	800c96a <__kernel_cos+0x9a>
 800c8ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c8f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c970 <__kernel_cos+0xa0>
 800c8f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c978 <__kernel_cos+0xa8>
 800c8fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c8fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c980 <__kernel_cos+0xb0>
 800c902:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c906:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c988 <__kernel_cos+0xb8>
 800c90a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c90e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c990 <__kernel_cos+0xc0>
 800c912:	4b23      	ldr	r3, [pc, #140]	; (800c9a0 <__kernel_cos+0xd0>)
 800c914:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c918:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c998 <__kernel_cos+0xc8>
 800c91c:	4299      	cmp	r1, r3
 800c91e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c922:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c926:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c92a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c92e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c932:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c936:	dc04      	bgt.n	800c942 <__kernel_cos+0x72>
 800c938:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c93c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c940:	4770      	bx	lr
 800c942:	4b18      	ldr	r3, [pc, #96]	; (800c9a4 <__kernel_cos+0xd4>)
 800c944:	4299      	cmp	r1, r3
 800c946:	dc0d      	bgt.n	800c964 <__kernel_cos+0x94>
 800c948:	2200      	movs	r2, #0
 800c94a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c94e:	ec43 2b15 	vmov	d5, r2, r3
 800c952:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c956:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c95a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c95e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c962:	4770      	bx	lr
 800c964:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c968:	e7f3      	b.n	800c952 <__kernel_cos+0x82>
 800c96a:	eeb0 0b44 	vmov.f64	d0, d4
 800c96e:	4770      	bx	lr
 800c970:	be8838d4 	.word	0xbe8838d4
 800c974:	bda8fae9 	.word	0xbda8fae9
 800c978:	bdb4b1c4 	.word	0xbdb4b1c4
 800c97c:	3e21ee9e 	.word	0x3e21ee9e
 800c980:	809c52ad 	.word	0x809c52ad
 800c984:	be927e4f 	.word	0xbe927e4f
 800c988:	19cb1590 	.word	0x19cb1590
 800c98c:	3efa01a0 	.word	0x3efa01a0
 800c990:	16c15177 	.word	0x16c15177
 800c994:	bf56c16c 	.word	0xbf56c16c
 800c998:	5555554c 	.word	0x5555554c
 800c99c:	3fa55555 	.word	0x3fa55555
 800c9a0:	3fd33332 	.word	0x3fd33332
 800c9a4:	3fe90000 	.word	0x3fe90000

0800c9a8 <__kernel_rem_pio2>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	ed2d 8b06 	vpush	{d8-d10}
 800c9b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	9002      	str	r0, [sp, #8]
 800c9b8:	49c5      	ldr	r1, [pc, #788]	; (800ccd0 <__kernel_rem_pio2+0x328>)
 800c9ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800c9bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800c9c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f112 0f14 	cmn.w	r2, #20
 800c9ca:	bfa8      	it	ge
 800c9cc:	2018      	movge	r0, #24
 800c9ce:	f103 31ff 	add.w	r1, r3, #4294967295
 800c9d2:	bfb8      	it	lt
 800c9d4:	2000      	movlt	r0, #0
 800c9d6:	f06f 0417 	mvn.w	r4, #23
 800c9da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800ccb8 <__kernel_rem_pio2+0x310>
 800c9de:	bfa4      	itt	ge
 800c9e0:	f1a2 0a03 	subge.w	sl, r2, #3
 800c9e4:	fb9a f0f0 	sdivge	r0, sl, r0
 800c9e8:	fb00 4404 	mla	r4, r0, r4, r4
 800c9ec:	1a46      	subs	r6, r0, r1
 800c9ee:	4414      	add	r4, r2
 800c9f0:	eb09 0c01 	add.w	ip, r9, r1
 800c9f4:	ad1a      	add	r5, sp, #104	; 0x68
 800c9f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	4562      	cmp	r2, ip
 800c9fe:	dd10      	ble.n	800ca22 <__kernel_rem_pio2+0x7a>
 800ca00:	9a01      	ldr	r2, [sp, #4]
 800ca02:	ab1a      	add	r3, sp, #104	; 0x68
 800ca04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ca08:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800ca0c:	f04f 0c00 	mov.w	ip, #0
 800ca10:	45cc      	cmp	ip, r9
 800ca12:	dc26      	bgt.n	800ca62 <__kernel_rem_pio2+0xba>
 800ca14:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800ccb8 <__kernel_rem_pio2+0x310>
 800ca18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca1c:	4616      	mov	r6, r2
 800ca1e:	2500      	movs	r5, #0
 800ca20:	e015      	b.n	800ca4e <__kernel_rem_pio2+0xa6>
 800ca22:	42d6      	cmn	r6, r2
 800ca24:	d409      	bmi.n	800ca3a <__kernel_rem_pio2+0x92>
 800ca26:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca32:	eca5 7b02 	vstmia	r5!, {d7}
 800ca36:	3201      	adds	r2, #1
 800ca38:	e7e0      	b.n	800c9fc <__kernel_rem_pio2+0x54>
 800ca3a:	eeb0 7b46 	vmov.f64	d7, d6
 800ca3e:	e7f8      	b.n	800ca32 <__kernel_rem_pio2+0x8a>
 800ca40:	ecb8 5b02 	vldmia	r8!, {d5}
 800ca44:	ed96 6b00 	vldr	d6, [r6]
 800ca48:	3501      	adds	r5, #1
 800ca4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca4e:	428d      	cmp	r5, r1
 800ca50:	f1a6 0608 	sub.w	r6, r6, #8
 800ca54:	ddf4      	ble.n	800ca40 <__kernel_rem_pio2+0x98>
 800ca56:	ecaa 7b02 	vstmia	sl!, {d7}
 800ca5a:	f10c 0c01 	add.w	ip, ip, #1
 800ca5e:	3208      	adds	r2, #8
 800ca60:	e7d6      	b.n	800ca10 <__kernel_rem_pio2+0x68>
 800ca62:	ab06      	add	r3, sp, #24
 800ca64:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ccc0 <__kernel_rem_pio2+0x318>
 800ca68:	ed9f ab97 	vldr	d10, [pc, #604]	; 800ccc8 <__kernel_rem_pio2+0x320>
 800ca6c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ca70:	9303      	str	r3, [sp, #12]
 800ca72:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800ca76:	464d      	mov	r5, r9
 800ca78:	00eb      	lsls	r3, r5, #3
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	ab92      	add	r3, sp, #584	; 0x248
 800ca7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ca82:	f10d 0b18 	add.w	fp, sp, #24
 800ca86:	ab6a      	add	r3, sp, #424	; 0x1a8
 800ca88:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800ca8c:	465e      	mov	r6, fp
 800ca8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800ca92:	4628      	mov	r0, r5
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f1a2 0208 	sub.w	r2, r2, #8
 800ca9a:	dc4c      	bgt.n	800cb36 <__kernel_rem_pio2+0x18e>
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	9105      	str	r1, [sp, #20]
 800caa0:	f000 faf2 	bl	800d088 <scalbn>
 800caa4:	eeb0 8b40 	vmov.f64	d8, d0
 800caa8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800caac:	ee28 0b00 	vmul.f64	d0, d8, d0
 800cab0:	f000 fa76 	bl	800cfa0 <floor>
 800cab4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800cab8:	eea0 8b47 	vfms.f64	d8, d0, d7
 800cabc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800cac0:	2c00      	cmp	r4, #0
 800cac2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800cac6:	ee17 8a90 	vmov	r8, s15
 800caca:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cace:	9905      	ldr	r1, [sp, #20]
 800cad0:	dd43      	ble.n	800cb5a <__kernel_rem_pio2+0x1b2>
 800cad2:	1e68      	subs	r0, r5, #1
 800cad4:	ab06      	add	r3, sp, #24
 800cad6:	f1c4 0c18 	rsb	ip, r4, #24
 800cada:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800cade:	fa46 f20c 	asr.w	r2, r6, ip
 800cae2:	4490      	add	r8, r2
 800cae4:	fa02 f20c 	lsl.w	r2, r2, ip
 800cae8:	1ab6      	subs	r6, r6, r2
 800caea:	f1c4 0217 	rsb	r2, r4, #23
 800caee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800caf2:	4116      	asrs	r6, r2
 800caf4:	2e00      	cmp	r6, #0
 800caf6:	dd3f      	ble.n	800cb78 <__kernel_rem_pio2+0x1d0>
 800caf8:	f04f 0c00 	mov.w	ip, #0
 800cafc:	f108 0801 	add.w	r8, r8, #1
 800cb00:	4660      	mov	r0, ip
 800cb02:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800cb06:	4565      	cmp	r5, ip
 800cb08:	dc6e      	bgt.n	800cbe8 <__kernel_rem_pio2+0x240>
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	dd04      	ble.n	800cb18 <__kernel_rem_pio2+0x170>
 800cb0e:	2c01      	cmp	r4, #1
 800cb10:	d07f      	beq.n	800cc12 <__kernel_rem_pio2+0x26a>
 800cb12:	2c02      	cmp	r4, #2
 800cb14:	f000 8087 	beq.w	800cc26 <__kernel_rem_pio2+0x27e>
 800cb18:	2e02      	cmp	r6, #2
 800cb1a:	d12d      	bne.n	800cb78 <__kernel_rem_pio2+0x1d0>
 800cb1c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cb20:	ee30 8b48 	vsub.f64	d8, d0, d8
 800cb24:	b340      	cbz	r0, 800cb78 <__kernel_rem_pio2+0x1d0>
 800cb26:	4620      	mov	r0, r4
 800cb28:	9105      	str	r1, [sp, #20]
 800cb2a:	f000 faad 	bl	800d088 <scalbn>
 800cb2e:	9905      	ldr	r1, [sp, #20]
 800cb30:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cb34:	e020      	b.n	800cb78 <__kernel_rem_pio2+0x1d0>
 800cb36:	ee20 7b09 	vmul.f64	d7, d0, d9
 800cb3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cb3e:	3801      	subs	r0, #1
 800cb40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800cb44:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800cb48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cb4c:	eca6 0a01 	vstmia	r6!, {s0}
 800cb50:	ed92 0b00 	vldr	d0, [r2]
 800cb54:	ee37 0b00 	vadd.f64	d0, d7, d0
 800cb58:	e79c      	b.n	800ca94 <__kernel_rem_pio2+0xec>
 800cb5a:	d105      	bne.n	800cb68 <__kernel_rem_pio2+0x1c0>
 800cb5c:	1e6a      	subs	r2, r5, #1
 800cb5e:	ab06      	add	r3, sp, #24
 800cb60:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800cb64:	15f6      	asrs	r6, r6, #23
 800cb66:	e7c5      	b.n	800caf4 <__kernel_rem_pio2+0x14c>
 800cb68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800cb6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb74:	da36      	bge.n	800cbe4 <__kernel_rem_pio2+0x23c>
 800cb76:	2600      	movs	r6, #0
 800cb78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	f040 80aa 	bne.w	800ccd8 <__kernel_rem_pio2+0x330>
 800cb84:	f105 3bff 	add.w	fp, r5, #4294967295
 800cb88:	4658      	mov	r0, fp
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4548      	cmp	r0, r9
 800cb8e:	da52      	bge.n	800cc36 <__kernel_rem_pio2+0x28e>
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	f000 8081 	beq.w	800cc98 <__kernel_rem_pio2+0x2f0>
 800cb96:	ab06      	add	r3, sp, #24
 800cb98:	3c18      	subs	r4, #24
 800cb9a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 8087 	beq.w	800ccb2 <__kernel_rem_pio2+0x30a>
 800cba4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fa6d 	bl	800d088 <scalbn>
 800cbae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cbb2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800ccc0 <__kernel_rem_pio2+0x318>
 800cbb6:	a96a      	add	r1, sp, #424	; 0x1a8
 800cbb8:	f103 0208 	add.w	r2, r3, #8
 800cbbc:	1888      	adds	r0, r1, r2
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	f280 80b7 	bge.w	800cd34 <__kernel_rem_pio2+0x38c>
 800cbc6:	4659      	mov	r1, fp
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	f2c0 80d5 	blt.w	800cd78 <__kernel_rem_pio2+0x3d0>
 800cbce:	a86a      	add	r0, sp, #424	; 0x1a8
 800cbd0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800cbd4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800ccb8 <__kernel_rem_pio2+0x310>
 800cbd8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ccd4 <__kernel_rem_pio2+0x32c>
 800cbdc:	2400      	movs	r4, #0
 800cbde:	ebab 0001 	sub.w	r0, fp, r1
 800cbe2:	e0be      	b.n	800cd62 <__kernel_rem_pio2+0x3ba>
 800cbe4:	2602      	movs	r6, #2
 800cbe6:	e787      	b.n	800caf8 <__kernel_rem_pio2+0x150>
 800cbe8:	f8db 2000 	ldr.w	r2, [fp]
 800cbec:	b958      	cbnz	r0, 800cc06 <__kernel_rem_pio2+0x25e>
 800cbee:	b122      	cbz	r2, 800cbfa <__kernel_rem_pio2+0x252>
 800cbf0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800cbf4:	f8cb 2000 	str.w	r2, [fp]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f10c 0c01 	add.w	ip, ip, #1
 800cbfe:	f10b 0b04 	add.w	fp, fp, #4
 800cc02:	4610      	mov	r0, r2
 800cc04:	e77f      	b.n	800cb06 <__kernel_rem_pio2+0x15e>
 800cc06:	ebae 0202 	sub.w	r2, lr, r2
 800cc0a:	f8cb 2000 	str.w	r2, [fp]
 800cc0e:	4602      	mov	r2, r0
 800cc10:	e7f3      	b.n	800cbfa <__kernel_rem_pio2+0x252>
 800cc12:	f105 3cff 	add.w	ip, r5, #4294967295
 800cc16:	ab06      	add	r3, sp, #24
 800cc18:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800cc1c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800cc20:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800cc24:	e778      	b.n	800cb18 <__kernel_rem_pio2+0x170>
 800cc26:	f105 3cff 	add.w	ip, r5, #4294967295
 800cc2a:	ab06      	add	r3, sp, #24
 800cc2c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800cc30:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800cc34:	e7f4      	b.n	800cc20 <__kernel_rem_pio2+0x278>
 800cc36:	ab06      	add	r3, sp, #24
 800cc38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cc3c:	3801      	subs	r0, #1
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	e7a4      	b.n	800cb8c <__kernel_rem_pio2+0x1e4>
 800cc42:	f10c 0c01 	add.w	ip, ip, #1
 800cc46:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d0f9      	beq.n	800cc42 <__kernel_rem_pio2+0x29a>
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800cc54:	eb0d 0203 	add.w	r2, sp, r3
 800cc58:	9b01      	ldr	r3, [sp, #4]
 800cc5a:	18e8      	adds	r0, r5, r3
 800cc5c:	ab1a      	add	r3, sp, #104	; 0x68
 800cc5e:	1c6e      	adds	r6, r5, #1
 800cc60:	3a98      	subs	r2, #152	; 0x98
 800cc62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800cc66:	4465      	add	r5, ip
 800cc68:	42b5      	cmp	r5, r6
 800cc6a:	f6ff af05 	blt.w	800ca78 <__kernel_rem_pio2+0xd0>
 800cc6e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800cc72:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc7e:	f04f 0c00 	mov.w	ip, #0
 800cc82:	eca0 7b02 	vstmia	r0!, {d7}
 800cc86:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ccb8 <__kernel_rem_pio2+0x310>
 800cc8a:	4680      	mov	r8, r0
 800cc8c:	458c      	cmp	ip, r1
 800cc8e:	dd07      	ble.n	800cca0 <__kernel_rem_pio2+0x2f8>
 800cc90:	eca2 7b02 	vstmia	r2!, {d7}
 800cc94:	3601      	adds	r6, #1
 800cc96:	e7e7      	b.n	800cc68 <__kernel_rem_pio2+0x2c0>
 800cc98:	9a03      	ldr	r2, [sp, #12]
 800cc9a:	f04f 0c01 	mov.w	ip, #1
 800cc9e:	e7d2      	b.n	800cc46 <__kernel_rem_pio2+0x29e>
 800cca0:	ecbe 5b02 	vldmia	lr!, {d5}
 800cca4:	ed38 6b02 	vldmdb	r8!, {d6}
 800cca8:	f10c 0c01 	add.w	ip, ip, #1
 800ccac:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ccb0:	e7ec      	b.n	800cc8c <__kernel_rem_pio2+0x2e4>
 800ccb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccb6:	e76e      	b.n	800cb96 <__kernel_rem_pio2+0x1ee>
	...
 800ccc4:	3e700000 	.word	0x3e700000
 800ccc8:	00000000 	.word	0x00000000
 800cccc:	41700000 	.word	0x41700000
 800ccd0:	0800f978 	.word	0x0800f978
 800ccd4:	0800f938 	.word	0x0800f938
 800ccd8:	4260      	negs	r0, r4
 800ccda:	eeb0 0b48 	vmov.f64	d0, d8
 800ccde:	f000 f9d3 	bl	800d088 <scalbn>
 800cce2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800cec0 <__kernel_rem_pio2+0x518>
 800cce6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ccea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccee:	db18      	blt.n	800cd22 <__kernel_rem_pio2+0x37a>
 800ccf0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800cec8 <__kernel_rem_pio2+0x520>
 800ccf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ccf8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ccfc:	aa06      	add	r2, sp, #24
 800ccfe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cd02:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cd06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cd0a:	f105 0b01 	add.w	fp, r5, #1
 800cd0e:	ee10 3a10 	vmov	r3, s0
 800cd12:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800cd16:	ee17 3a10 	vmov	r3, s14
 800cd1a:	3418      	adds	r4, #24
 800cd1c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800cd20:	e740      	b.n	800cba4 <__kernel_rem_pio2+0x1fc>
 800cd22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cd26:	aa06      	add	r2, sp, #24
 800cd28:	ee10 3a10 	vmov	r3, s0
 800cd2c:	46ab      	mov	fp, r5
 800cd2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800cd32:	e737      	b.n	800cba4 <__kernel_rem_pio2+0x1fc>
 800cd34:	ac06      	add	r4, sp, #24
 800cd36:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800cd3a:	9401      	str	r4, [sp, #4]
 800cd3c:	ee07 4a90 	vmov	s15, r4
 800cd40:	3901      	subs	r1, #1
 800cd42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd46:	ee27 7b00 	vmul.f64	d7, d7, d0
 800cd4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cd4e:	ed20 7b02 	vstmdb	r0!, {d7}
 800cd52:	e735      	b.n	800cbc0 <__kernel_rem_pio2+0x218>
 800cd54:	ecbc 5b02 	vldmia	ip!, {d5}
 800cd58:	ecb5 6b02 	vldmia	r5!, {d6}
 800cd5c:	3401      	adds	r4, #1
 800cd5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd62:	454c      	cmp	r4, r9
 800cd64:	dc01      	bgt.n	800cd6a <__kernel_rem_pio2+0x3c2>
 800cd66:	4284      	cmp	r4, r0
 800cd68:	ddf4      	ble.n	800cd54 <__kernel_rem_pio2+0x3ac>
 800cd6a:	ac42      	add	r4, sp, #264	; 0x108
 800cd6c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800cd70:	ed80 7b00 	vstr	d7, [r0]
 800cd74:	3901      	subs	r1, #1
 800cd76:	e727      	b.n	800cbc8 <__kernel_rem_pio2+0x220>
 800cd78:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800cd7a:	2902      	cmp	r1, #2
 800cd7c:	dc0a      	bgt.n	800cd94 <__kernel_rem_pio2+0x3ec>
 800cd7e:	2900      	cmp	r1, #0
 800cd80:	dc2c      	bgt.n	800cddc <__kernel_rem_pio2+0x434>
 800cd82:	d045      	beq.n	800ce10 <__kernel_rem_pio2+0x468>
 800cd84:	f008 0007 	and.w	r0, r8, #7
 800cd88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800cd8c:	ecbd 8b06 	vpop	{d8-d10}
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800cd96:	2a03      	cmp	r2, #3
 800cd98:	d1f4      	bne.n	800cd84 <__kernel_rem_pio2+0x3dc>
 800cd9a:	aa42      	add	r2, sp, #264	; 0x108
 800cd9c:	4413      	add	r3, r2
 800cd9e:	461a      	mov	r2, r3
 800cda0:	4619      	mov	r1, r3
 800cda2:	4658      	mov	r0, fp
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f1a1 0108 	sub.w	r1, r1, #8
 800cdaa:	dc54      	bgt.n	800ce56 <__kernel_rem_pio2+0x4ae>
 800cdac:	4659      	mov	r1, fp
 800cdae:	2901      	cmp	r1, #1
 800cdb0:	f1a2 0208 	sub.w	r2, r2, #8
 800cdb4:	dc5f      	bgt.n	800ce76 <__kernel_rem_pio2+0x4ce>
 800cdb6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800ced0 <__kernel_rem_pio2+0x528>
 800cdba:	3308      	adds	r3, #8
 800cdbc:	f1bb 0f01 	cmp.w	fp, #1
 800cdc0:	dc69      	bgt.n	800ce96 <__kernel_rem_pio2+0x4ee>
 800cdc2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800cdc6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	d16a      	bne.n	800cea4 <__kernel_rem_pio2+0x4fc>
 800cdce:	ed87 5b00 	vstr	d5, [r7]
 800cdd2:	ed87 6b02 	vstr	d6, [r7, #8]
 800cdd6:	ed87 7b04 	vstr	d7, [r7, #16]
 800cdda:	e7d3      	b.n	800cd84 <__kernel_rem_pio2+0x3dc>
 800cddc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ced0 <__kernel_rem_pio2+0x528>
 800cde0:	ab42      	add	r3, sp, #264	; 0x108
 800cde2:	441a      	add	r2, r3
 800cde4:	465b      	mov	r3, fp
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	da26      	bge.n	800ce38 <__kernel_rem_pio2+0x490>
 800cdea:	b35e      	cbz	r6, 800ce44 <__kernel_rem_pio2+0x49c>
 800cdec:	eeb1 7b46 	vneg.f64	d7, d6
 800cdf0:	ed87 7b00 	vstr	d7, [r7]
 800cdf4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800cdf8:	aa44      	add	r2, sp, #272	; 0x110
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce00:	459b      	cmp	fp, r3
 800ce02:	da22      	bge.n	800ce4a <__kernel_rem_pio2+0x4a2>
 800ce04:	b10e      	cbz	r6, 800ce0a <__kernel_rem_pio2+0x462>
 800ce06:	eeb1 7b47 	vneg.f64	d7, d7
 800ce0a:	ed87 7b02 	vstr	d7, [r7, #8]
 800ce0e:	e7b9      	b.n	800cd84 <__kernel_rem_pio2+0x3dc>
 800ce10:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ced0 <__kernel_rem_pio2+0x528>
 800ce14:	ab42      	add	r3, sp, #264	; 0x108
 800ce16:	441a      	add	r2, r3
 800ce18:	f1bb 0f00 	cmp.w	fp, #0
 800ce1c:	da05      	bge.n	800ce2a <__kernel_rem_pio2+0x482>
 800ce1e:	b10e      	cbz	r6, 800ce24 <__kernel_rem_pio2+0x47c>
 800ce20:	eeb1 7b47 	vneg.f64	d7, d7
 800ce24:	ed87 7b00 	vstr	d7, [r7]
 800ce28:	e7ac      	b.n	800cd84 <__kernel_rem_pio2+0x3dc>
 800ce2a:	ed32 6b02 	vldmdb	r2!, {d6}
 800ce2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce32:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ce36:	e7ef      	b.n	800ce18 <__kernel_rem_pio2+0x470>
 800ce38:	ed32 7b02 	vldmdb	r2!, {d7}
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ce42:	e7d0      	b.n	800cde6 <__kernel_rem_pio2+0x43e>
 800ce44:	eeb0 7b46 	vmov.f64	d7, d6
 800ce48:	e7d2      	b.n	800cdf0 <__kernel_rem_pio2+0x448>
 800ce4a:	ecb2 6b02 	vldmia	r2!, {d6}
 800ce4e:	3301      	adds	r3, #1
 800ce50:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ce54:	e7d4      	b.n	800ce00 <__kernel_rem_pio2+0x458>
 800ce56:	ed91 7b00 	vldr	d7, [r1]
 800ce5a:	ed91 5b02 	vldr	d5, [r1, #8]
 800ce5e:	3801      	subs	r0, #1
 800ce60:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ce64:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce68:	ed81 6b00 	vstr	d6, [r1]
 800ce6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ce70:	ed81 7b02 	vstr	d7, [r1, #8]
 800ce74:	e796      	b.n	800cda4 <__kernel_rem_pio2+0x3fc>
 800ce76:	ed92 7b00 	vldr	d7, [r2]
 800ce7a:	ed92 5b02 	vldr	d5, [r2, #8]
 800ce7e:	3901      	subs	r1, #1
 800ce80:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ce84:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce88:	ed82 6b00 	vstr	d6, [r2]
 800ce8c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ce90:	ed82 7b02 	vstr	d7, [r2, #8]
 800ce94:	e78b      	b.n	800cdae <__kernel_rem_pio2+0x406>
 800ce96:	ed33 6b02 	vldmdb	r3!, {d6}
 800ce9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cea2:	e78b      	b.n	800cdbc <__kernel_rem_pio2+0x414>
 800cea4:	eeb1 5b45 	vneg.f64	d5, d5
 800cea8:	eeb1 6b46 	vneg.f64	d6, d6
 800ceac:	ed87 5b00 	vstr	d5, [r7]
 800ceb0:	eeb1 7b47 	vneg.f64	d7, d7
 800ceb4:	ed87 6b02 	vstr	d6, [r7, #8]
 800ceb8:	e78d      	b.n	800cdd6 <__kernel_rem_pio2+0x42e>
 800ceba:	bf00      	nop
 800cebc:	f3af 8000 	nop.w
 800cec0:	00000000 	.word	0x00000000
 800cec4:	41700000 	.word	0x41700000
 800cec8:	00000000 	.word	0x00000000
 800cecc:	3e700000 	.word	0x3e700000
	...

0800ced8 <__kernel_sin>:
 800ced8:	ee10 3a90 	vmov	r3, s1
 800cedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cee0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cee4:	da04      	bge.n	800cef0 <__kernel_sin+0x18>
 800cee6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ceea:	ee17 3a90 	vmov	r3, s15
 800ceee:	b35b      	cbz	r3, 800cf48 <__kernel_sin+0x70>
 800cef0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800cef4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800cef8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cf50 <__kernel_sin+0x78>
 800cefc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cf58 <__kernel_sin+0x80>
 800cf00:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cf04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cf60 <__kernel_sin+0x88>
 800cf08:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cf0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cf68 <__kernel_sin+0x90>
 800cf10:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cf14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cf70 <__kernel_sin+0x98>
 800cf18:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cf1c:	b930      	cbnz	r0, 800cf2c <__kernel_sin+0x54>
 800cf1e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cf78 <__kernel_sin+0xa0>
 800cf22:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cf26:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cf2a:	4770      	bx	lr
 800cf2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cf30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cf34:	eea1 7b04 	vfma.f64	d7, d1, d4
 800cf38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800cf3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cf80 <__kernel_sin+0xa8>
 800cf40:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cf44:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	5acfd57c 	.word	0x5acfd57c
 800cf54:	3de5d93a 	.word	0x3de5d93a
 800cf58:	8a2b9ceb 	.word	0x8a2b9ceb
 800cf5c:	be5ae5e6 	.word	0xbe5ae5e6
 800cf60:	57b1fe7d 	.word	0x57b1fe7d
 800cf64:	3ec71de3 	.word	0x3ec71de3
 800cf68:	19c161d5 	.word	0x19c161d5
 800cf6c:	bf2a01a0 	.word	0xbf2a01a0
 800cf70:	1110f8a6 	.word	0x1110f8a6
 800cf74:	3f811111 	.word	0x3f811111
 800cf78:	55555549 	.word	0x55555549
 800cf7c:	bfc55555 	.word	0xbfc55555
 800cf80:	55555549 	.word	0x55555549
 800cf84:	3fc55555 	.word	0x3fc55555

0800cf88 <fabs>:
 800cf88:	ec51 0b10 	vmov	r0, r1, d0
 800cf8c:	ee10 2a10 	vmov	r2, s0
 800cf90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf94:	ec43 2b10 	vmov	d0, r2, r3
 800cf98:	4770      	bx	lr
 800cf9a:	0000      	movs	r0, r0
 800cf9c:	0000      	movs	r0, r0
	...

0800cfa0 <floor>:
 800cfa0:	ee10 1a90 	vmov	r1, s1
 800cfa4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfa8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800cfac:	2b13      	cmp	r3, #19
 800cfae:	b530      	push	{r4, r5, lr}
 800cfb0:	ee10 0a10 	vmov	r0, s0
 800cfb4:	ee10 5a10 	vmov	r5, s0
 800cfb8:	dc31      	bgt.n	800d01e <floor+0x7e>
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da15      	bge.n	800cfea <floor+0x4a>
 800cfbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d078 <floor+0xd8>
 800cfc2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cfc6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfce:	dd07      	ble.n	800cfe0 <floor+0x40>
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	da4e      	bge.n	800d072 <floor+0xd2>
 800cfd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfd8:	4318      	orrs	r0, r3
 800cfda:	d001      	beq.n	800cfe0 <floor+0x40>
 800cfdc:	4928      	ldr	r1, [pc, #160]	; (800d080 <floor+0xe0>)
 800cfde:	2000      	movs	r0, #0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	ec43 2b10 	vmov	d0, r2, r3
 800cfe8:	e020      	b.n	800d02c <floor+0x8c>
 800cfea:	4a26      	ldr	r2, [pc, #152]	; (800d084 <floor+0xe4>)
 800cfec:	411a      	asrs	r2, r3
 800cfee:	ea01 0402 	and.w	r4, r1, r2
 800cff2:	4304      	orrs	r4, r0
 800cff4:	d01a      	beq.n	800d02c <floor+0x8c>
 800cff6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d078 <floor+0xd8>
 800cffa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cffe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	ddeb      	ble.n	800cfe0 <floor+0x40>
 800d008:	2900      	cmp	r1, #0
 800d00a:	bfbe      	ittt	lt
 800d00c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800d010:	fa40 f303 	asrlt.w	r3, r0, r3
 800d014:	18c9      	addlt	r1, r1, r3
 800d016:	ea21 0102 	bic.w	r1, r1, r2
 800d01a:	2000      	movs	r0, #0
 800d01c:	e7e0      	b.n	800cfe0 <floor+0x40>
 800d01e:	2b33      	cmp	r3, #51	; 0x33
 800d020:	dd05      	ble.n	800d02e <floor+0x8e>
 800d022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d026:	d101      	bne.n	800d02c <floor+0x8c>
 800d028:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d02c:	bd30      	pop	{r4, r5, pc}
 800d02e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d032:	f04f 32ff 	mov.w	r2, #4294967295
 800d036:	40e2      	lsrs	r2, r4
 800d038:	4202      	tst	r2, r0
 800d03a:	d0f7      	beq.n	800d02c <floor+0x8c>
 800d03c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800d078 <floor+0xd8>
 800d040:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d044:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04c:	ddc8      	ble.n	800cfe0 <floor+0x40>
 800d04e:	2900      	cmp	r1, #0
 800d050:	da02      	bge.n	800d058 <floor+0xb8>
 800d052:	2b14      	cmp	r3, #20
 800d054:	d103      	bne.n	800d05e <floor+0xbe>
 800d056:	3101      	adds	r1, #1
 800d058:	ea20 0002 	bic.w	r0, r0, r2
 800d05c:	e7c0      	b.n	800cfe0 <floor+0x40>
 800d05e:	2401      	movs	r4, #1
 800d060:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d064:	fa04 f303 	lsl.w	r3, r4, r3
 800d068:	4418      	add	r0, r3
 800d06a:	42a8      	cmp	r0, r5
 800d06c:	bf38      	it	cc
 800d06e:	1909      	addcc	r1, r1, r4
 800d070:	e7f2      	b.n	800d058 <floor+0xb8>
 800d072:	2000      	movs	r0, #0
 800d074:	4601      	mov	r1, r0
 800d076:	e7b3      	b.n	800cfe0 <floor+0x40>
 800d078:	8800759c 	.word	0x8800759c
 800d07c:	7e37e43c 	.word	0x7e37e43c
 800d080:	bff00000 	.word	0xbff00000
 800d084:	000fffff 	.word	0x000fffff

0800d088 <scalbn>:
 800d088:	ee10 1a90 	vmov	r1, s1
 800d08c:	b510      	push	{r4, lr}
 800d08e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d092:	b98c      	cbnz	r4, 800d0b8 <scalbn+0x30>
 800d094:	ee10 3a10 	vmov	r3, s0
 800d098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d09c:	430b      	orrs	r3, r1
 800d09e:	d011      	beq.n	800d0c4 <scalbn+0x3c>
 800d0a0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800d168 <scalbn+0xe0>
 800d0a4:	4b3c      	ldr	r3, [pc, #240]	; (800d198 <scalbn+0x110>)
 800d0a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0aa:	4298      	cmp	r0, r3
 800d0ac:	da0b      	bge.n	800d0c6 <scalbn+0x3e>
 800d0ae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d170 <scalbn+0xe8>
 800d0b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0b6:	e005      	b.n	800d0c4 <scalbn+0x3c>
 800d0b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d0bc:	429c      	cmp	r4, r3
 800d0be:	d107      	bne.n	800d0d0 <scalbn+0x48>
 800d0c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	ee10 1a90 	vmov	r1, s1
 800d0ca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d0ce:	3c36      	subs	r4, #54	; 0x36
 800d0d0:	4404      	add	r4, r0
 800d0d2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800d0d6:	429c      	cmp	r4, r3
 800d0d8:	dd0d      	ble.n	800d0f6 <scalbn+0x6e>
 800d0da:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d178 <scalbn+0xf0>
 800d0de:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800d180 <scalbn+0xf8>
 800d0e2:	eeb0 6b47 	vmov.f64	d6, d7
 800d0e6:	ee10 3a90 	vmov	r3, s1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d0f0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800d0f4:	e7e6      	b.n	800d0c4 <scalbn+0x3c>
 800d0f6:	2c00      	cmp	r4, #0
 800d0f8:	dd0a      	ble.n	800d110 <scalbn+0x88>
 800d0fa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800d0fe:	ec53 2b10 	vmov	r2, r3, d0
 800d102:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800d106:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800d10a:	ec43 2b10 	vmov	d0, r2, r3
 800d10e:	e7d9      	b.n	800d0c4 <scalbn+0x3c>
 800d110:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800d114:	da19      	bge.n	800d14a <scalbn+0xc2>
 800d116:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d11a:	4298      	cmp	r0, r3
 800d11c:	ee10 3a90 	vmov	r3, s1
 800d120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d124:	dd09      	ble.n	800d13a <scalbn+0xb2>
 800d126:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800d178 <scalbn+0xf0>
 800d12a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800d180 <scalbn+0xf8>
 800d12e:	eeb0 7b40 	vmov.f64	d7, d0
 800d132:	2b00      	cmp	r3, #0
 800d134:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800d138:	e7bb      	b.n	800d0b2 <scalbn+0x2a>
 800d13a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800d170 <scalbn+0xe8>
 800d13e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800d188 <scalbn+0x100>
 800d142:	eeb0 7b40 	vmov.f64	d7, d0
 800d146:	2b00      	cmp	r3, #0
 800d148:	e7f4      	b.n	800d134 <scalbn+0xac>
 800d14a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800d14e:	ec53 2b10 	vmov	r2, r3, d0
 800d152:	3436      	adds	r4, #54	; 0x36
 800d154:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800d158:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800d15c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800d190 <scalbn+0x108>
 800d160:	ec43 2b10 	vmov	d0, r2, r3
 800d164:	e7a5      	b.n	800d0b2 <scalbn+0x2a>
 800d166:	bf00      	nop
 800d168:	00000000 	.word	0x00000000
 800d16c:	43500000 	.word	0x43500000
 800d170:	c2f8f359 	.word	0xc2f8f359
 800d174:	01a56e1f 	.word	0x01a56e1f
 800d178:	8800759c 	.word	0x8800759c
 800d17c:	7e37e43c 	.word	0x7e37e43c
 800d180:	8800759c 	.word	0x8800759c
 800d184:	fe37e43c 	.word	0xfe37e43c
 800d188:	c2f8f359 	.word	0xc2f8f359
 800d18c:	81a56e1f 	.word	0x81a56e1f
 800d190:	00000000 	.word	0x00000000
 800d194:	3c900000 	.word	0x3c900000
 800d198:	ffff3cb0 	.word	0xffff3cb0

0800d19c <_init>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_fini>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	bf00      	nop
 800d1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ae:	bc08      	pop	{r3}
 800d1b0:	469e      	mov	lr, r3
 800d1b2:	4770      	bx	lr
