
Final_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2e4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0810d588  0810d588  0001d588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810da9c  0810da9c  0001da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810daa0  0810daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  10000000  0810daa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b9c  10000200  0810dca4  00020200  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004d9c  0810dca4  00024d9c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  9 .debug_info   000211cf  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003e99  00000000  00000000  000413ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000019d8  00000000  00000000  00045298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001830  00000000  00000000  00046c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c627  00000000  00000000  000484a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001de08  00000000  00000000  00084ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018f4da  00000000  00000000  000a28cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00231da9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008268  00000000  00000000  00231dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000200 	.word	0x10000200
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810d56c 	.word	0x0810d56c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000204 	.word	0x10000204
 81002dc:	0810d56c 	.word	0x0810d56c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	; (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	; (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b09      	ldr	r3, [pc, #36]	; (8100e30 <SystemInit+0x2c>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e0e:	4a08      	ldr	r2, [pc, #32]	; (8100e30 <SystemInit+0x2c>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b05      	ldr	r3, [pc, #20]	; (8100e30 <SystemInit+0x2c>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a04      	ldr	r2, [pc, #16]	; (8100e30 <SystemInit+0x2c>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100e24:	bf00      	nop
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr
 8100e2e:	bf00      	nop
 8100e30:	e000ed00 	.word	0xe000ed00

08100e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b082      	sub	sp, #8
 8100e38:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e3a:	4b39      	ldr	r3, [pc, #228]	; (8100f20 <main+0xec>)
 8100e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e40:	4a37      	ldr	r2, [pc, #220]	; (8100f20 <main+0xec>)
 8100e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e4a:	4b35      	ldr	r3, [pc, #212]	; (8100f20 <main+0xec>)
 8100e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100e54:	607b      	str	r3, [r7, #4]
 8100e56:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e58:	2001      	movs	r0, #1
 8100e5a:	f001 fa5f 	bl	810231c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e5e:	f002 f995 	bl	810318c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e62:	2201      	movs	r2, #1
 8100e64:	2102      	movs	r1, #2
 8100e66:	2000      	movs	r0, #0
 8100e68:	f002 f916 	bl	8103098 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e6c:	4b2d      	ldr	r3, [pc, #180]	; (8100f24 <main+0xf0>)
 8100e6e:	681b      	ldr	r3, [r3, #0]
 8100e70:	091b      	lsrs	r3, r3, #4
 8100e72:	f003 030f 	and.w	r3, r3, #15
 8100e76:	2b07      	cmp	r3, #7
 8100e78:	d108      	bne.n	8100e8c <main+0x58>
 8100e7a:	4b2b      	ldr	r3, [pc, #172]	; (8100f28 <main+0xf4>)
 8100e7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100e80:	4a29      	ldr	r2, [pc, #164]	; (8100f28 <main+0xf4>)
 8100e82:	f043 0301 	orr.w	r3, r3, #1
 8100e86:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100e8a:	e007      	b.n	8100e9c <main+0x68>
 8100e8c:	4b26      	ldr	r3, [pc, #152]	; (8100f28 <main+0xf4>)
 8100e8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100e92:	4a25      	ldr	r2, [pc, #148]	; (8100f28 <main+0xf4>)
 8100e94:	f043 0301 	orr.w	r3, r3, #1
 8100e98:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100e9c:	f000 fee8 	bl	8101c70 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ea0:	f000 f9be 	bl	8101220 <MX_GPIO_Init>
  MX_TIM4_Init();
 8100ea4:	f000 f944 	bl	8101130 <MX_TIM4_Init>
  MX_I2C4_Init();
 8100ea8:	f000 f856 	bl	8100f58 <MX_I2C4_Init>
  MX_TIM1_Init();
 8100eac:	f000 f894 	bl	8100fd8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Interrupciones para el semáforo
  HAL_NVIC_SetPriority(HSEM2_IRQn, 10, 0);
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	210a      	movs	r1, #10
 8100eb4:	207e      	movs	r0, #126	; 0x7e
 8100eb6:	f001 f811 	bl	8101edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100eba:	207e      	movs	r0, #126	; 0x7e
 8100ebc:	f001 f828 	bl	8101f10 <HAL_NVIC_EnableIRQ>

  MPRLS_status(&hi2c4);									// Revisión de conexión del MPRLS
 8100ec0:	481a      	ldr	r0, [pc, #104]	; (8100f2c <main+0xf8>)
 8100ec2:	f000 fb51 	bl	8101568 <MPRLS_status>
  MPRLS_init(&hi2c4);									// Inicialización del MPRLS
 8100ec6:	4819      	ldr	r0, [pc, #100]	; (8100f2c <main+0xf8>)
 8100ec8:	f000 fb6a 	bl	81015a0 <MPRLS_init>

  HAL_TIM_PWM_Init(&htim1);								// Inicialización del timer 4 (PWM - Servo)
 8100ecc:	4818      	ldr	r0, [pc, #96]	; (8100f30 <main+0xfc>)
 8100ece:	f003 fce9 	bl	81048a4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);				// Encendido del PWM
 8100ed2:	2100      	movs	r1, #0
 8100ed4:	4816      	ldr	r0, [pc, #88]	; (8100f30 <main+0xfc>)
 8100ed6:	f003 fd47 	bl	8104968 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8100eda:	4b16      	ldr	r3, [pc, #88]	; (8100f34 <main+0x100>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Init(&htim4);								// Inicialización del timer 4 (PWM - Servo)
 8100ee0:	4815      	ldr	r0, [pc, #84]	; (8100f38 <main+0x104>)
 8100ee2:	f003 fcdf 	bl	81048a4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);				// Encendido del PWM
 8100ee6:	2100      	movs	r1, #0
 8100ee8:	4813      	ldr	r0, [pc, #76]	; (8100f38 <main+0x104>)
 8100eea:	f003 fd3d 	bl	8104968 <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 0;										// Duty Cycle del 100%
 8100eee:	4b13      	ldr	r3, [pc, #76]	; (8100f3c <main+0x108>)
 8100ef0:	2200      	movs	r2, #0
 8100ef2:	635a      	str	r2, [r3, #52]	; 0x34


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100ef4:	f004 ff3a 	bl	8105d6c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of mprls */
  mprlsHandle = osTimerNew(mprlsCallback, osTimerPeriodic, NULL, &mprls_attributes);
 8100ef8:	4b11      	ldr	r3, [pc, #68]	; (8100f40 <main+0x10c>)
 8100efa:	2200      	movs	r2, #0
 8100efc:	2101      	movs	r1, #1
 8100efe:	4811      	ldr	r0, [pc, #68]	; (8100f44 <main+0x110>)
 8100f00:	f005 f840 	bl	8105f84 <osTimerNew>
 8100f04:	4603      	mov	r3, r0
 8100f06:	4a10      	ldr	r2, [pc, #64]	; (8100f48 <main+0x114>)
 8100f08:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100f0a:	4a10      	ldr	r2, [pc, #64]	; (8100f4c <main+0x118>)
 8100f0c:	2100      	movs	r1, #0
 8100f0e:	4810      	ldr	r0, [pc, #64]	; (8100f50 <main+0x11c>)
 8100f10:	f004 ff76 	bl	8105e00 <osThreadNew>
 8100f14:	4603      	mov	r3, r0
 8100f16:	4a0f      	ldr	r2, [pc, #60]	; (8100f54 <main+0x120>)
 8100f18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100f1a:	f004 ff4b 	bl	8105db4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100f1e:	e7fe      	b.n	8100f1e <main+0xea>
 8100f20:	58024400 	.word	0x58024400
 8100f24:	e000ed00 	.word	0xe000ed00
 8100f28:	58026400 	.word	0x58026400
 8100f2c:	1000021c 	.word	0x1000021c
 8100f30:	10000268 	.word	0x10000268
 8100f34:	40010000 	.word	0x40010000
 8100f38:	100002b4 	.word	0x100002b4
 8100f3c:	40000800 	.word	0x40000800
 8100f40:	0810d5e8 	.word	0x0810d5e8
 8100f44:	08101369 	.word	0x08101369
 8100f48:	10000304 	.word	0x10000304
 8100f4c:	0810d5c4 	.word	0x0810d5c4
 8100f50:	08101349 	.word	0x08101349
 8100f54:	10000300 	.word	0x10000300

08100f58 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8100f58:	b580      	push	{r7, lr}
 8100f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8100f5c:	4b1b      	ldr	r3, [pc, #108]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f5e:	4a1c      	ldr	r2, [pc, #112]	; (8100fd0 <MX_I2C4_Init+0x78>)
 8100f60:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 8100f62:	4b1a      	ldr	r3, [pc, #104]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f64:	4a1b      	ldr	r2, [pc, #108]	; (8100fd4 <MX_I2C4_Init+0x7c>)
 8100f66:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8100f68:	4b18      	ldr	r3, [pc, #96]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f6a:	2200      	movs	r2, #0
 8100f6c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f6e:	4b17      	ldr	r3, [pc, #92]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f70:	2201      	movs	r2, #1
 8100f72:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f74:	4b15      	ldr	r3, [pc, #84]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f76:	2200      	movs	r2, #0
 8100f78:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8100f7a:	4b14      	ldr	r3, [pc, #80]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f80:	4b12      	ldr	r3, [pc, #72]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f82:	2200      	movs	r2, #0
 8100f84:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f86:	4b11      	ldr	r3, [pc, #68]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f88:	2200      	movs	r2, #0
 8100f8a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f8c:	4b0f      	ldr	r3, [pc, #60]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f8e:	2200      	movs	r2, #0
 8100f90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8100f92:	480e      	ldr	r0, [pc, #56]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100f94:	f001 f9ee 	bl	8102374 <HAL_I2C_Init>
 8100f98:	4603      	mov	r3, r0
 8100f9a:	2b00      	cmp	r3, #0
 8100f9c:	d001      	beq.n	8100fa2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8100f9e:	f000 fadd 	bl	810155c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100fa2:	2100      	movs	r1, #0
 8100fa4:	4809      	ldr	r0, [pc, #36]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100fa6:	f001 ffdf 	bl	8102f68 <HAL_I2CEx_ConfigAnalogFilter>
 8100faa:	4603      	mov	r3, r0
 8100fac:	2b00      	cmp	r3, #0
 8100fae:	d001      	beq.n	8100fb4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8100fb0:	f000 fad4 	bl	810155c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8100fb4:	2100      	movs	r1, #0
 8100fb6:	4805      	ldr	r0, [pc, #20]	; (8100fcc <MX_I2C4_Init+0x74>)
 8100fb8:	f002 f821 	bl	8102ffe <HAL_I2CEx_ConfigDigitalFilter>
 8100fbc:	4603      	mov	r3, r0
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	d001      	beq.n	8100fc6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8100fc2:	f000 facb 	bl	810155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8100fc6:	bf00      	nop
 8100fc8:	bd80      	pop	{r7, pc}
 8100fca:	bf00      	nop
 8100fcc:	1000021c 	.word	0x1000021c
 8100fd0:	58001c00 	.word	0x58001c00
 8100fd4:	00909fce 	.word	0x00909fce

08100fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8100fd8:	b580      	push	{r7, lr}
 8100fda:	b09a      	sub	sp, #104	; 0x68
 8100fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100fde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	601a      	str	r2, [r3, #0]
 8100fe6:	605a      	str	r2, [r3, #4]
 8100fe8:	609a      	str	r2, [r3, #8]
 8100fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100fec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100ff0:	2200      	movs	r2, #0
 8100ff2:	601a      	str	r2, [r3, #0]
 8100ff4:	605a      	str	r2, [r3, #4]
 8100ff6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	601a      	str	r2, [r3, #0]
 8101000:	605a      	str	r2, [r3, #4]
 8101002:	609a      	str	r2, [r3, #8]
 8101004:	60da      	str	r2, [r3, #12]
 8101006:	611a      	str	r2, [r3, #16]
 8101008:	615a      	str	r2, [r3, #20]
 810100a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810100c:	1d3b      	adds	r3, r7, #4
 810100e:	222c      	movs	r2, #44	; 0x2c
 8101010:	2100      	movs	r1, #0
 8101012:	4618      	mov	r0, r3
 8101014:	f007 fecd 	bl	8108db2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101018:	4b43      	ldr	r3, [pc, #268]	; (8101128 <MX_TIM1_Init+0x150>)
 810101a:	4a44      	ldr	r2, [pc, #272]	; (810112c <MX_TIM1_Init+0x154>)
 810101c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240 - 1 ;
 810101e:	4b42      	ldr	r3, [pc, #264]	; (8101128 <MX_TIM1_Init+0x150>)
 8101020:	22ef      	movs	r2, #239	; 0xef
 8101022:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101024:	4b40      	ldr	r3, [pc, #256]	; (8101128 <MX_TIM1_Init+0x150>)
 8101026:	2200      	movs	r2, #0
 8101028:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 810102a:	4b3f      	ldr	r3, [pc, #252]	; (8101128 <MX_TIM1_Init+0x150>)
 810102c:	2263      	movs	r2, #99	; 0x63
 810102e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101030:	4b3d      	ldr	r3, [pc, #244]	; (8101128 <MX_TIM1_Init+0x150>)
 8101032:	2200      	movs	r2, #0
 8101034:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101036:	4b3c      	ldr	r3, [pc, #240]	; (8101128 <MX_TIM1_Init+0x150>)
 8101038:	2200      	movs	r2, #0
 810103a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810103c:	4b3a      	ldr	r3, [pc, #232]	; (8101128 <MX_TIM1_Init+0x150>)
 810103e:	2200      	movs	r2, #0
 8101040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101042:	4839      	ldr	r0, [pc, #228]	; (8101128 <MX_TIM1_Init+0x150>)
 8101044:	f003 fb5e 	bl	8104704 <HAL_TIM_Base_Init>
 8101048:	4603      	mov	r3, r0
 810104a:	2b00      	cmp	r3, #0
 810104c:	d001      	beq.n	8101052 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 810104e:	f000 fa85 	bl	810155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101056:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101058:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810105c:	4619      	mov	r1, r3
 810105e:	4832      	ldr	r0, [pc, #200]	; (8101128 <MX_TIM1_Init+0x150>)
 8101060:	f003 ffc4 	bl	8104fec <HAL_TIM_ConfigClockSource>
 8101064:	4603      	mov	r3, r0
 8101066:	2b00      	cmp	r3, #0
 8101068:	d001      	beq.n	810106e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 810106a:	f000 fa77 	bl	810155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810106e:	482e      	ldr	r0, [pc, #184]	; (8101128 <MX_TIM1_Init+0x150>)
 8101070:	f003 fc18 	bl	81048a4 <HAL_TIM_PWM_Init>
 8101074:	4603      	mov	r3, r0
 8101076:	2b00      	cmp	r3, #0
 8101078:	d001      	beq.n	810107e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 810107a:	f000 fa6f 	bl	810155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810107e:	2300      	movs	r3, #0
 8101080:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101082:	2300      	movs	r3, #0
 8101084:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101086:	2300      	movs	r3, #0
 8101088:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810108a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810108e:	4619      	mov	r1, r3
 8101090:	4825      	ldr	r0, [pc, #148]	; (8101128 <MX_TIM1_Init+0x150>)
 8101092:	f004 fcfd 	bl	8105a90 <HAL_TIMEx_MasterConfigSynchronization>
 8101096:	4603      	mov	r3, r0
 8101098:	2b00      	cmp	r3, #0
 810109a:	d001      	beq.n	81010a0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 810109c:	f000 fa5e 	bl	810155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81010a0:	2360      	movs	r3, #96	; 0x60
 81010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 81010a4:	2300      	movs	r3, #0
 81010a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81010a8:	2300      	movs	r3, #0
 81010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81010ac:	2300      	movs	r3, #0
 81010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81010b0:	2300      	movs	r3, #0
 81010b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81010b4:	2300      	movs	r3, #0
 81010b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81010b8:	2300      	movs	r3, #0
 81010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81010bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81010c0:	2200      	movs	r2, #0
 81010c2:	4619      	mov	r1, r3
 81010c4:	4818      	ldr	r0, [pc, #96]	; (8101128 <MX_TIM1_Init+0x150>)
 81010c6:	f003 fe7d 	bl	8104dc4 <HAL_TIM_PWM_ConfigChannel>
 81010ca:	4603      	mov	r3, r0
 81010cc:	2b00      	cmp	r3, #0
 81010ce:	d001      	beq.n	81010d4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 81010d0:	f000 fa44 	bl	810155c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81010d4:	2300      	movs	r3, #0
 81010d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81010d8:	2300      	movs	r3, #0
 81010da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81010dc:	2300      	movs	r3, #0
 81010de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81010e0:	2300      	movs	r3, #0
 81010e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81010e4:	2300      	movs	r3, #0
 81010e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81010e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81010ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81010ee:	2300      	movs	r3, #0
 81010f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81010f2:	2300      	movs	r3, #0
 81010f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81010f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81010fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81010fc:	2300      	movs	r3, #0
 81010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101100:	2300      	movs	r3, #0
 8101102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101104:	1d3b      	adds	r3, r7, #4
 8101106:	4619      	mov	r1, r3
 8101108:	4807      	ldr	r0, [pc, #28]	; (8101128 <MX_TIM1_Init+0x150>)
 810110a:	f004 fd4f 	bl	8105bac <HAL_TIMEx_ConfigBreakDeadTime>
 810110e:	4603      	mov	r3, r0
 8101110:	2b00      	cmp	r3, #0
 8101112:	d001      	beq.n	8101118 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8101114:	f000 fa22 	bl	810155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101118:	4803      	ldr	r0, [pc, #12]	; (8101128 <MX_TIM1_Init+0x150>)
 810111a:	f000 fbcd 	bl	81018b8 <HAL_TIM_MspPostInit>

}
 810111e:	bf00      	nop
 8101120:	3768      	adds	r7, #104	; 0x68
 8101122:	46bd      	mov	sp, r7
 8101124:	bd80      	pop	{r7, pc}
 8101126:	bf00      	nop
 8101128:	10000268 	.word	0x10000268
 810112c:	40010000 	.word	0x40010000

08101130 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b08e      	sub	sp, #56	; 0x38
 8101134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810113a:	2200      	movs	r2, #0
 810113c:	601a      	str	r2, [r3, #0]
 810113e:	605a      	str	r2, [r3, #4]
 8101140:	609a      	str	r2, [r3, #8]
 8101142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101144:	f107 031c 	add.w	r3, r7, #28
 8101148:	2200      	movs	r2, #0
 810114a:	601a      	str	r2, [r3, #0]
 810114c:	605a      	str	r2, [r3, #4]
 810114e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101150:	463b      	mov	r3, r7
 8101152:	2200      	movs	r2, #0
 8101154:	601a      	str	r2, [r3, #0]
 8101156:	605a      	str	r2, [r3, #4]
 8101158:	609a      	str	r2, [r3, #8]
 810115a:	60da      	str	r2, [r3, #12]
 810115c:	611a      	str	r2, [r3, #16]
 810115e:	615a      	str	r2, [r3, #20]
 8101160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101162:	4b2d      	ldr	r3, [pc, #180]	; (8101218 <MX_TIM4_Init+0xe8>)
 8101164:	4a2d      	ldr	r2, [pc, #180]	; (810121c <MX_TIM4_Init+0xec>)
 8101166:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1500;
 8101168:	4b2b      	ldr	r3, [pc, #172]	; (8101218 <MX_TIM4_Init+0xe8>)
 810116a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 810116e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101170:	4b29      	ldr	r3, [pc, #164]	; (8101218 <MX_TIM4_Init+0xe8>)
 8101172:	2200      	movs	r2, #0
 8101174:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8101176:	4b28      	ldr	r3, [pc, #160]	; (8101218 <MX_TIM4_Init+0xe8>)
 8101178:	f240 32e7 	movw	r2, #999	; 0x3e7
 810117c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810117e:	4b26      	ldr	r3, [pc, #152]	; (8101218 <MX_TIM4_Init+0xe8>)
 8101180:	2200      	movs	r2, #0
 8101182:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101184:	4b24      	ldr	r3, [pc, #144]	; (8101218 <MX_TIM4_Init+0xe8>)
 8101186:	2200      	movs	r2, #0
 8101188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 810118a:	4823      	ldr	r0, [pc, #140]	; (8101218 <MX_TIM4_Init+0xe8>)
 810118c:	f003 faba 	bl	8104704 <HAL_TIM_Base_Init>
 8101190:	4603      	mov	r3, r0
 8101192:	2b00      	cmp	r3, #0
 8101194:	d001      	beq.n	810119a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8101196:	f000 f9e1 	bl	810155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810119e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 81011a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81011a4:	4619      	mov	r1, r3
 81011a6:	481c      	ldr	r0, [pc, #112]	; (8101218 <MX_TIM4_Init+0xe8>)
 81011a8:	f003 ff20 	bl	8104fec <HAL_TIM_ConfigClockSource>
 81011ac:	4603      	mov	r3, r0
 81011ae:	2b00      	cmp	r3, #0
 81011b0:	d001      	beq.n	81011b6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 81011b2:	f000 f9d3 	bl	810155c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 81011b6:	4818      	ldr	r0, [pc, #96]	; (8101218 <MX_TIM4_Init+0xe8>)
 81011b8:	f003 fb74 	bl	81048a4 <HAL_TIM_PWM_Init>
 81011bc:	4603      	mov	r3, r0
 81011be:	2b00      	cmp	r3, #0
 81011c0:	d001      	beq.n	81011c6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 81011c2:	f000 f9cb 	bl	810155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81011c6:	2300      	movs	r3, #0
 81011c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81011ca:	2300      	movs	r3, #0
 81011cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81011ce:	f107 031c 	add.w	r3, r7, #28
 81011d2:	4619      	mov	r1, r3
 81011d4:	4810      	ldr	r0, [pc, #64]	; (8101218 <MX_TIM4_Init+0xe8>)
 81011d6:	f004 fc5b 	bl	8105a90 <HAL_TIMEx_MasterConfigSynchronization>
 81011da:	4603      	mov	r3, r0
 81011dc:	2b00      	cmp	r3, #0
 81011de:	d001      	beq.n	81011e4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 81011e0:	f000 f9bc 	bl	810155c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81011e4:	2360      	movs	r3, #96	; 0x60
 81011e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81011e8:	2300      	movs	r3, #0
 81011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81011ec:	2300      	movs	r3, #0
 81011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81011f0:	2300      	movs	r3, #0
 81011f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81011f4:	463b      	mov	r3, r7
 81011f6:	2200      	movs	r2, #0
 81011f8:	4619      	mov	r1, r3
 81011fa:	4807      	ldr	r0, [pc, #28]	; (8101218 <MX_TIM4_Init+0xe8>)
 81011fc:	f003 fde2 	bl	8104dc4 <HAL_TIM_PWM_ConfigChannel>
 8101200:	4603      	mov	r3, r0
 8101202:	2b00      	cmp	r3, #0
 8101204:	d001      	beq.n	810120a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8101206:	f000 f9a9 	bl	810155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 810120a:	4803      	ldr	r0, [pc, #12]	; (8101218 <MX_TIM4_Init+0xe8>)
 810120c:	f000 fb54 	bl	81018b8 <HAL_TIM_MspPostInit>

}
 8101210:	bf00      	nop
 8101212:	3738      	adds	r7, #56	; 0x38
 8101214:	46bd      	mov	sp, r7
 8101216:	bd80      	pop	{r7, pc}
 8101218:	100002b4 	.word	0x100002b4
 810121c:	40000800 	.word	0x40000800

08101220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101220:	b580      	push	{r7, lr}
 8101222:	b08a      	sub	sp, #40	; 0x28
 8101224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101226:	f107 0314 	add.w	r3, r7, #20
 810122a:	2200      	movs	r2, #0
 810122c:	601a      	str	r2, [r3, #0]
 810122e:	605a      	str	r2, [r3, #4]
 8101230:	609a      	str	r2, [r3, #8]
 8101232:	60da      	str	r2, [r3, #12]
 8101234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101236:	4b34      	ldr	r3, [pc, #208]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810123c:	4a32      	ldr	r2, [pc, #200]	; (8101308 <MX_GPIO_Init+0xe8>)
 810123e:	f043 0302 	orr.w	r3, r3, #2
 8101242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101246:	4b30      	ldr	r3, [pc, #192]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810124c:	f003 0302 	and.w	r3, r3, #2
 8101250:	613b      	str	r3, [r7, #16]
 8101252:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101254:	4b2c      	ldr	r3, [pc, #176]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810125a:	4a2b      	ldr	r2, [pc, #172]	; (8101308 <MX_GPIO_Init+0xe8>)
 810125c:	f043 0320 	orr.w	r3, r3, #32
 8101260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101264:	4b28      	ldr	r3, [pc, #160]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126a:	f003 0320 	and.w	r3, r3, #32
 810126e:	60fb      	str	r3, [r7, #12]
 8101270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101272:	4b25      	ldr	r3, [pc, #148]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101278:	4a23      	ldr	r2, [pc, #140]	; (8101308 <MX_GPIO_Init+0xe8>)
 810127a:	f043 0310 	orr.w	r3, r3, #16
 810127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101282:	4b21      	ldr	r3, [pc, #132]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	f003 0310 	and.w	r3, r3, #16
 810128c:	60bb      	str	r3, [r7, #8]
 810128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101290:	4b1d      	ldr	r3, [pc, #116]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101296:	4a1c      	ldr	r2, [pc, #112]	; (8101308 <MX_GPIO_Init+0xe8>)
 8101298:	f043 0308 	orr.w	r3, r3, #8
 810129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012a0:	4b19      	ldr	r3, [pc, #100]	; (8101308 <MX_GPIO_Init+0xe8>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	f003 0308 	and.w	r3, r3, #8
 81012aa:	607b      	str	r3, [r7, #4]
 81012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 81012ae:	2200      	movs	r2, #0
 81012b0:	f244 0101 	movw	r1, #16385	; 0x4001
 81012b4:	4815      	ldr	r0, [pc, #84]	; (810130c <MX_GPIO_Init+0xec>)
 81012b6:	f000 fffd 	bl	81022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81012ba:	2200      	movs	r2, #0
 81012bc:	2102      	movs	r1, #2
 81012be:	4814      	ldr	r0, [pc, #80]	; (8101310 <MX_GPIO_Init+0xf0>)
 81012c0:	f000 fff8 	bl	81022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 81012c4:	f244 0301 	movw	r3, #16385	; 0x4001
 81012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012ca:	2301      	movs	r3, #1
 81012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81012ce:	2301      	movs	r3, #1
 81012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81012d2:	2302      	movs	r3, #2
 81012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012d6:	f107 0314 	add.w	r3, r7, #20
 81012da:	4619      	mov	r1, r3
 81012dc:	480b      	ldr	r0, [pc, #44]	; (810130c <MX_GPIO_Init+0xec>)
 81012de:	f000 fe39 	bl	8101f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81012e2:	2302      	movs	r3, #2
 81012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012e6:	2301      	movs	r3, #1
 81012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81012ea:	2301      	movs	r3, #1
 81012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81012ee:	2302      	movs	r3, #2
 81012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81012f2:	f107 0314 	add.w	r3, r7, #20
 81012f6:	4619      	mov	r1, r3
 81012f8:	4805      	ldr	r0, [pc, #20]	; (8101310 <MX_GPIO_Init+0xf0>)
 81012fa:	f000 fe2b 	bl	8101f54 <HAL_GPIO_Init>

}
 81012fe:	bf00      	nop
 8101300:	3728      	adds	r7, #40	; 0x28
 8101302:	46bd      	mov	sp, r7
 8101304:	bd80      	pop	{r7, pc}
 8101306:	bf00      	nop
 8101308:	58024400 	.word	0x58024400
 810130c:	58020400 	.word	0x58020400
 8101310:	58021000 	.word	0x58021000

08101314 <HAL_HSEM_FreeCallback>:

/* USER CODE BEGIN 4 */
void HAL_HSEM_FreeCallback(uint32_t SemMask){
 8101314:	b580      	push	{r7, lr}
 8101316:	b082      	sub	sp, #8
 8101318:	af00      	add	r7, sp, #0
 810131a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 810131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101320:	4806      	ldr	r0, [pc, #24]	; (810133c <HAL_HSEM_FreeCallback+0x28>)
 8101322:	f000 ffe0 	bl	81022e6 <HAL_GPIO_TogglePin>
	ref4 = xfr_ptr->reference;
 8101326:	4b06      	ldr	r3, [pc, #24]	; (8101340 <HAL_HSEM_FreeCallback+0x2c>)
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	4a06      	ldr	r2, [pc, #24]	; (8101344 <HAL_HSEM_FreeCallback+0x30>)
 810132c:	6013      	str	r3, [r2, #0]

	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810132e:	2001      	movs	r0, #1
 8101330:	f000 fff4 	bl	810231c <HAL_HSEM_ActivateNotification>
}
 8101334:	bf00      	nop
 8101336:	3708      	adds	r7, #8
 8101338:	46bd      	mov	sp, r7
 810133a:	bd80      	pop	{r7, pc}
 810133c:	58020400 	.word	0x58020400
 8101340:	38001000 	.word	0x38001000
 8101344:	1000000c 	.word	0x1000000c

08101348 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8101348:	b580      	push	{r7, lr}
 810134a:	b082      	sub	sp, #8
 810134c:	af00      	add	r7, sp, #0
 810134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  osTimerStart(mprlsHandle, 100);
 8101350:	4b04      	ldr	r3, [pc, #16]	; (8101364 <StartDefaultTask+0x1c>)
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	2164      	movs	r1, #100	; 0x64
 8101356:	4618      	mov	r0, r3
 8101358:	f004 fe90 	bl	810607c <osTimerStart>
	  osDelay(10);
	  xfr_ptr->pressure = press4;
	  osDelay(10);
	  HAL_HSEM_Release(HSEM_ID_0,0);
	   */
	  osDelay(100);
 810135c:	2064      	movs	r0, #100	; 0x64
 810135e:	f004 fde1 	bl	8105f24 <osDelay>
 8101362:	e7fb      	b.n	810135c <StartDefaultTask+0x14>
 8101364:	10000304 	.word	0x10000304

08101368 <mprlsCallback>:
  /* USER CODE END 5 */
}

/* mprlsCallback function */
void mprlsCallback(void *argument)
{
 8101368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810136c:	b082      	sub	sp, #8
 810136e:	af00      	add	r7, sp, #0
 8101370:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mprlsCallback */
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8101372:	2102      	movs	r1, #2
 8101374:	4862      	ldr	r0, [pc, #392]	; (8101500 <mprlsCallback+0x198>)
 8101376:	f000 ffb6 	bl	81022e6 <HAL_GPIO_TogglePin>

	pkPrev = TIM1->CCR1;
 810137a:	4b62      	ldr	r3, [pc, #392]	; (8101504 <mprlsCallback+0x19c>)
 810137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810137e:	4a62      	ldr	r2, [pc, #392]	; (8101508 <mprlsCallback+0x1a0>)
 8101380:	6013      	str	r3, [r2, #0]
	error = ref4 - press4;
 8101382:	4b62      	ldr	r3, [pc, #392]	; (810150c <mprlsCallback+0x1a4>)
 8101384:	ed93 7a00 	vldr	s14, [r3]
 8101388:	4b61      	ldr	r3, [pc, #388]	; (8101510 <mprlsCallback+0x1a8>)
 810138a:	edd3 7a00 	vldr	s15, [r3]
 810138e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101392:	4b60      	ldr	r3, [pc, #384]	; (8101514 <mprlsCallback+0x1ac>)
 8101394:	edc3 7a00 	vstr	s15, [r3]
	control = KP*error + KI*ts*(error + errorPrev);// + (kd/ts)*(error - errorPrev);
 8101398:	4b5e      	ldr	r3, [pc, #376]	; (8101514 <mprlsCallback+0x1ac>)
 810139a:	681b      	ldr	r3, [r3, #0]
 810139c:	4618      	mov	r0, r3
 810139e:	f7ff f95b 	bl	8100658 <__aeabi_f2d>
 81013a2:	a34f      	add	r3, pc, #316	; (adr r3, 81014e0 <mprlsCallback+0x178>)
 81013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013a8:	f7ff f9ae 	bl	8100708 <__aeabi_dmul>
 81013ac:	4602      	mov	r2, r0
 81013ae:	460b      	mov	r3, r1
 81013b0:	4614      	mov	r4, r2
 81013b2:	461d      	mov	r5, r3
 81013b4:	4b58      	ldr	r3, [pc, #352]	; (8101518 <mprlsCallback+0x1b0>)
 81013b6:	681b      	ldr	r3, [r3, #0]
 81013b8:	4618      	mov	r0, r3
 81013ba:	f7ff f94d 	bl	8100658 <__aeabi_f2d>
 81013be:	a34a      	add	r3, pc, #296	; (adr r3, 81014e8 <mprlsCallback+0x180>)
 81013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013c4:	f7ff f9a0 	bl	8100708 <__aeabi_dmul>
 81013c8:	4602      	mov	r2, r0
 81013ca:	460b      	mov	r3, r1
 81013cc:	4690      	mov	r8, r2
 81013ce:	4699      	mov	r9, r3
 81013d0:	4b50      	ldr	r3, [pc, #320]	; (8101514 <mprlsCallback+0x1ac>)
 81013d2:	ed93 7a00 	vldr	s14, [r3]
 81013d6:	4b51      	ldr	r3, [pc, #324]	; (810151c <mprlsCallback+0x1b4>)
 81013d8:	edd3 7a00 	vldr	s15, [r3]
 81013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e0:	ee17 0a90 	vmov	r0, s15
 81013e4:	f7ff f938 	bl	8100658 <__aeabi_f2d>
 81013e8:	4602      	mov	r2, r0
 81013ea:	460b      	mov	r3, r1
 81013ec:	4640      	mov	r0, r8
 81013ee:	4649      	mov	r1, r9
 81013f0:	f7ff f98a 	bl	8100708 <__aeabi_dmul>
 81013f4:	4602      	mov	r2, r0
 81013f6:	460b      	mov	r3, r1
 81013f8:	4620      	mov	r0, r4
 81013fa:	4629      	mov	r1, r5
 81013fc:	f7fe ffce 	bl	810039c <__adddf3>
 8101400:	4602      	mov	r2, r0
 8101402:	460b      	mov	r3, r1
 8101404:	4610      	mov	r0, r2
 8101406:	4619      	mov	r1, r3
 8101408:	f7ff fc76 	bl	8100cf8 <__aeabi_d2f>
 810140c:	4603      	mov	r3, r0
 810140e:	4a44      	ldr	r2, [pc, #272]	; (8101520 <mprlsCallback+0x1b8>)
 8101410:	6013      	str	r3, [r2, #0]
	pk = pkPrev + control*40;
 8101412:	4b3d      	ldr	r3, [pc, #244]	; (8101508 <mprlsCallback+0x1a0>)
 8101414:	681b      	ldr	r3, [r3, #0]
 8101416:	ee07 3a90 	vmov	s15, r3
 810141a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810141e:	4b40      	ldr	r3, [pc, #256]	; (8101520 <mprlsCallback+0x1b8>)
 8101420:	edd3 7a00 	vldr	s15, [r3]
 8101424:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8101524 <mprlsCallback+0x1bc>
 8101428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101434:	ee17 2a90 	vmov	r2, s15
 8101438:	4b3b      	ldr	r3, [pc, #236]	; (8101528 <mprlsCallback+0x1c0>)
 810143a:	601a      	str	r2, [r3, #0]
	errorPrev = error;
 810143c:	4b35      	ldr	r3, [pc, #212]	; (8101514 <mprlsCallback+0x1ac>)
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	4a36      	ldr	r2, [pc, #216]	; (810151c <mprlsCallback+0x1b4>)
 8101442:	6013      	str	r3, [r2, #0]

	if(error > 0.1){ // Infla
 8101444:	4b33      	ldr	r3, [pc, #204]	; (8101514 <mprlsCallback+0x1ac>)
 8101446:	681b      	ldr	r3, [r3, #0]
 8101448:	4618      	mov	r0, r3
 810144a:	f7ff f905 	bl	8100658 <__aeabi_f2d>
 810144e:	a328      	add	r3, pc, #160	; (adr r3, 81014f0 <mprlsCallback+0x188>)
 8101450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101454:	f7ff fbe8 	bl	8100c28 <__aeabi_dcmpgt>
 8101458:	4603      	mov	r3, r0
 810145a:	2b00      	cmp	r3, #0
 810145c:	d012      	beq.n	8101484 <mprlsCallback+0x11c>
		if (pk >= 100){
 810145e:	4b32      	ldr	r3, [pc, #200]	; (8101528 <mprlsCallback+0x1c0>)
 8101460:	681b      	ldr	r3, [r3, #0]
 8101462:	2b63      	cmp	r3, #99	; 0x63
 8101464:	d906      	bls.n	8101474 <mprlsCallback+0x10c>
			TIM4->CCR1 = 25;
 8101466:	4b31      	ldr	r3, [pc, #196]	; (810152c <mprlsCallback+0x1c4>)
 8101468:	2219      	movs	r2, #25
 810146a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR1 = 100;
 810146c:	4b25      	ldr	r3, [pc, #148]	; (8101504 <mprlsCallback+0x19c>)
 810146e:	2264      	movs	r2, #100	; 0x64
 8101470:	635a      	str	r2, [r3, #52]	; 0x34
 8101472:	e021      	b.n	81014b8 <mprlsCallback+0x150>
		}else{
			TIM4->CCR1 = 25;
 8101474:	4b2d      	ldr	r3, [pc, #180]	; (810152c <mprlsCallback+0x1c4>)
 8101476:	2219      	movs	r2, #25
 8101478:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR1 = pk;
 810147a:	4a22      	ldr	r2, [pc, #136]	; (8101504 <mprlsCallback+0x19c>)
 810147c:	4b2a      	ldr	r3, [pc, #168]	; (8101528 <mprlsCallback+0x1c0>)
 810147e:	681b      	ldr	r3, [r3, #0]
 8101480:	6353      	str	r3, [r2, #52]	; 0x34
 8101482:	e019      	b.n	81014b8 <mprlsCallback+0x150>
		}
	} else if(error < -0.1){ // Desinfla
 8101484:	4b23      	ldr	r3, [pc, #140]	; (8101514 <mprlsCallback+0x1ac>)
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	4618      	mov	r0, r3
 810148a:	f7ff f8e5 	bl	8100658 <__aeabi_f2d>
 810148e:	a31a      	add	r3, pc, #104	; (adr r3, 81014f8 <mprlsCallback+0x190>)
 8101490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101494:	f7ff fbaa 	bl	8100bec <__aeabi_dcmplt>
 8101498:	4603      	mov	r3, r0
 810149a:	2b00      	cmp	r3, #0
 810149c:	d006      	beq.n	81014ac <mprlsCallback+0x144>
		TIM4->CCR1 = 99;
 810149e:	4b23      	ldr	r3, [pc, #140]	; (810152c <mprlsCallback+0x1c4>)
 81014a0:	2263      	movs	r2, #99	; 0x63
 81014a2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR1 = 100;
 81014a4:	4b17      	ldr	r3, [pc, #92]	; (8101504 <mprlsCallback+0x19c>)
 81014a6:	2264      	movs	r2, #100	; 0x64
 81014a8:	635a      	str	r2, [r3, #52]	; 0x34
 81014aa:	e005      	b.n	81014b8 <mprlsCallback+0x150>
	} else{
		TIM4->CCR1 = 25;
 81014ac:	4b1f      	ldr	r3, [pc, #124]	; (810152c <mprlsCallback+0x1c4>)
 81014ae:	2219      	movs	r2, #25
 81014b0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR1 = 0;
 81014b2:	4b14      	ldr	r3, [pc, #80]	; (8101504 <mprlsCallback+0x19c>)
 81014b4:	2200      	movs	r2, #0
 81014b6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	press4 = MPRLS_read(&hi2c4);
 81014b8:	481d      	ldr	r0, [pc, #116]	; (8101530 <mprlsCallback+0x1c8>)
 81014ba:	f000 f8d5 	bl	8101668 <MPRLS_read>
 81014be:	eef0 7a40 	vmov.f32	s15, s0
 81014c2:	4b13      	ldr	r3, [pc, #76]	; (8101510 <mprlsCallback+0x1a8>)
 81014c4:	edc3 7a00 	vstr	s15, [r3]
	xfr_ptr->pressure = press4;
 81014c8:	4a1a      	ldr	r2, [pc, #104]	; (8101534 <mprlsCallback+0x1cc>)
 81014ca:	4b11      	ldr	r3, [pc, #68]	; (8101510 <mprlsCallback+0x1a8>)
 81014cc:	681b      	ldr	r3, [r3, #0]
 81014ce:	6053      	str	r3, [r2, #4]

  /* USER CODE END mprlsCallback */
}
 81014d0:	bf00      	nop
 81014d2:	3708      	adds	r7, #8
 81014d4:	46bd      	mov	sp, r7
 81014d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81014da:	bf00      	nop
 81014dc:	f3af 8000 	nop.w
 81014e0:	9374bc6a 	.word	0x9374bc6a
 81014e4:	3fd60418 	.word	0x3fd60418
 81014e8:	8db8bac7 	.word	0x8db8bac7
 81014ec:	3f86f006 	.word	0x3f86f006
 81014f0:	9999999a 	.word	0x9999999a
 81014f4:	3fb99999 	.word	0x3fb99999
 81014f8:	9999999a 	.word	0x9999999a
 81014fc:	bfb99999 	.word	0xbfb99999
 8101500:	58021000 	.word	0x58021000
 8101504:	40010000 	.word	0x40010000
 8101508:	10000318 	.word	0x10000318
 810150c:	1000000c 	.word	0x1000000c
 8101510:	1000031c 	.word	0x1000031c
 8101514:	1000030c 	.word	0x1000030c
 8101518:	10000008 	.word	0x10000008
 810151c:	10000310 	.word	0x10000310
 8101520:	10000308 	.word	0x10000308
 8101524:	42200000 	.word	0x42200000
 8101528:	10000314 	.word	0x10000314
 810152c:	40000800 	.word	0x40000800
 8101530:	1000021c 	.word	0x1000021c
 8101534:	38001000 	.word	0x38001000

08101538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101538:	b580      	push	{r7, lr}
 810153a:	b082      	sub	sp, #8
 810153c:	af00      	add	r7, sp, #0
 810153e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	681b      	ldr	r3, [r3, #0]
 8101544:	4a04      	ldr	r2, [pc, #16]	; (8101558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101546:	4293      	cmp	r3, r2
 8101548:	d101      	bne.n	810154e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810154a:	f000 fbef 	bl	8101d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810154e:	bf00      	nop
 8101550:	3708      	adds	r7, #8
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}
 8101556:	bf00      	nop
 8101558:	40014800 	.word	0x40014800

0810155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810155c:	b480      	push	{r7}
 810155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101560:	b672      	cpsid	i
}
 8101562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101564:	e7fe      	b.n	8101564 <Error_Handler+0x8>
	...

08101568 <MPRLS_status>:
float pmin = 0.0; // minimum value of pressure range [bar, psi, kPa, etc.
uint8_t cmd[3] = {0xAA, 0x00, 0x00}; // Comando a enviar
uint8_t press_read[4];
float press = 0;

void MPRLS_status(I2C_HandleTypeDef *hi2c){
 8101568:	b580      	push	{r7, lr}
 810156a:	b084      	sub	sp, #16
 810156c:	af00      	add	r7, sp, #0
 810156e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(hi2c, 0x30, 3, 3000);
 8101570:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8101574:	2203      	movs	r2, #3
 8101576:	2130      	movs	r1, #48	; 0x30
 8101578:	6878      	ldr	r0, [r7, #4]
 810157a:	f001 f975 	bl	8102868 <HAL_I2C_IsDeviceReady>
 810157e:	4603      	mov	r3, r0
 8101580:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 8101582:	7bfb      	ldrb	r3, [r7, #15]
 8101584:	2b00      	cmp	r3, #0
 8101586:	d104      	bne.n	8101592 <MPRLS_status+0x2a>
 8101588:	2201      	movs	r2, #1
 810158a:	2102      	movs	r1, #2
 810158c:	4803      	ldr	r0, [pc, #12]	; (810159c <MPRLS_status+0x34>)
 810158e:	f000 fe91 	bl	81022b4 <HAL_GPIO_WritePin>
}
 8101592:	bf00      	nop
 8101594:	3710      	adds	r7, #16
 8101596:	46bd      	mov	sp, r7
 8101598:	bd80      	pop	{r7, pc}
 810159a:	bf00      	nop
 810159c:	58021000 	.word	0x58021000

081015a0 <MPRLS_init>:

void MPRLS_init(I2C_HandleTypeDef *hi2c){
 81015a0:	b580      	push	{r7, lr}
 81015a2:	b082      	sub	sp, #8
 81015a4:	af00      	add	r7, sp, #0
 81015a6:	6078      	str	r0, [r7, #4]
	outputmin = (uint32_t)((float)16777216L * (outputmin / 100.0) + 0.5);
 81015a8:	4b2a      	ldr	r3, [pc, #168]	; (8101654 <MPRLS_init+0xb4>)
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	4618      	mov	r0, r3
 81015ae:	f7ff f853 	bl	8100658 <__aeabi_f2d>
 81015b2:	f04f 0200 	mov.w	r2, #0
 81015b6:	4b28      	ldr	r3, [pc, #160]	; (8101658 <MPRLS_init+0xb8>)
 81015b8:	f7ff f9d0 	bl	810095c <__aeabi_ddiv>
 81015bc:	4602      	mov	r2, r0
 81015be:	460b      	mov	r3, r1
 81015c0:	4610      	mov	r0, r2
 81015c2:	4619      	mov	r1, r3
 81015c4:	f04f 0200 	mov.w	r2, #0
 81015c8:	4b24      	ldr	r3, [pc, #144]	; (810165c <MPRLS_init+0xbc>)
 81015ca:	f7ff f89d 	bl	8100708 <__aeabi_dmul>
 81015ce:	4602      	mov	r2, r0
 81015d0:	460b      	mov	r3, r1
 81015d2:	4610      	mov	r0, r2
 81015d4:	4619      	mov	r1, r3
 81015d6:	f04f 0200 	mov.w	r2, #0
 81015da:	4b21      	ldr	r3, [pc, #132]	; (8101660 <MPRLS_init+0xc0>)
 81015dc:	f7fe fede 	bl	810039c <__adddf3>
 81015e0:	4602      	mov	r2, r0
 81015e2:	460b      	mov	r3, r1
 81015e4:	4610      	mov	r0, r2
 81015e6:	4619      	mov	r1, r3
 81015e8:	f7ff fb66 	bl	8100cb8 <__aeabi_d2uiz>
 81015ec:	ee07 0a90 	vmov	s15, r0
 81015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015f4:	4b17      	ldr	r3, [pc, #92]	; (8101654 <MPRLS_init+0xb4>)
 81015f6:	edc3 7a00 	vstr	s15, [r3]
	outputmax = (uint32_t)((float)16777216L * (outputmax / 100.0) + 0.5);
 81015fa:	4b1a      	ldr	r3, [pc, #104]	; (8101664 <MPRLS_init+0xc4>)
 81015fc:	681b      	ldr	r3, [r3, #0]
 81015fe:	4618      	mov	r0, r3
 8101600:	f7ff f82a 	bl	8100658 <__aeabi_f2d>
 8101604:	f04f 0200 	mov.w	r2, #0
 8101608:	4b13      	ldr	r3, [pc, #76]	; (8101658 <MPRLS_init+0xb8>)
 810160a:	f7ff f9a7 	bl	810095c <__aeabi_ddiv>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	4610      	mov	r0, r2
 8101614:	4619      	mov	r1, r3
 8101616:	f04f 0200 	mov.w	r2, #0
 810161a:	4b10      	ldr	r3, [pc, #64]	; (810165c <MPRLS_init+0xbc>)
 810161c:	f7ff f874 	bl	8100708 <__aeabi_dmul>
 8101620:	4602      	mov	r2, r0
 8101622:	460b      	mov	r3, r1
 8101624:	4610      	mov	r0, r2
 8101626:	4619      	mov	r1, r3
 8101628:	f04f 0200 	mov.w	r2, #0
 810162c:	4b0c      	ldr	r3, [pc, #48]	; (8101660 <MPRLS_init+0xc0>)
 810162e:	f7fe feb5 	bl	810039c <__adddf3>
 8101632:	4602      	mov	r2, r0
 8101634:	460b      	mov	r3, r1
 8101636:	4610      	mov	r0, r2
 8101638:	4619      	mov	r1, r3
 810163a:	f7ff fb3d 	bl	8100cb8 <__aeabi_d2uiz>
 810163e:	ee07 0a90 	vmov	s15, r0
 8101642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101646:	4b07      	ldr	r3, [pc, #28]	; (8101664 <MPRLS_init+0xc4>)
 8101648:	edc3 7a00 	vstr	s15, [r3]
}
 810164c:	bf00      	nop
 810164e:	3708      	adds	r7, #8
 8101650:	46bd      	mov	sp, r7
 8101652:	bd80      	pop	{r7, pc}
 8101654:	10000014 	.word	0x10000014
 8101658:	40590000 	.word	0x40590000
 810165c:	41700000 	.word	0x41700000
 8101660:	3fe00000 	.word	0x3fe00000
 8101664:	10000010 	.word	0x10000010

08101668 <MPRLS_read>:

float MPRLS_read(I2C_HandleTypeDef *hi2c){
 8101668:	b580      	push	{r7, lr}
 810166a:	b086      	sub	sp, #24
 810166c:	af02      	add	r7, sp, #8
 810166e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, 0x30, cmd, 3, 3000);
 8101670:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8101674:	9300      	str	r3, [sp, #0]
 8101676:	2303      	movs	r3, #3
 8101678:	4a26      	ldr	r2, [pc, #152]	; (8101714 <MPRLS_read+0xac>)
 810167a:	2130      	movs	r1, #48	; 0x30
 810167c:	6878      	ldr	r0, [r7, #4]
 810167e:	f000 ff09 	bl	8102494 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, 0x31, press_read, 4, 3000);
 8101682:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8101686:	9300      	str	r3, [sp, #0]
 8101688:	2304      	movs	r3, #4
 810168a:	4a23      	ldr	r2, [pc, #140]	; (8101718 <MPRLS_read+0xb0>)
 810168c:	2131      	movs	r1, #49	; 0x31
 810168e:	6878      	ldr	r0, [r7, #4]
 8101690:	f000 fff4 	bl	810267c <HAL_I2C_Master_Receive>
	uint32_t psi1 = ((uint32_t)(press_read[1]) << 16) | ((uint32_t)(press_read[2]) << 8) | ((uint32_t)(press_read[3]));
 8101694:	4b20      	ldr	r3, [pc, #128]	; (8101718 <MPRLS_read+0xb0>)
 8101696:	785b      	ldrb	r3, [r3, #1]
 8101698:	041a      	lsls	r2, r3, #16
 810169a:	4b1f      	ldr	r3, [pc, #124]	; (8101718 <MPRLS_read+0xb0>)
 810169c:	789b      	ldrb	r3, [r3, #2]
 810169e:	021b      	lsls	r3, r3, #8
 81016a0:	4313      	orrs	r3, r2
 81016a2:	4a1d      	ldr	r2, [pc, #116]	; (8101718 <MPRLS_read+0xb0>)
 81016a4:	78d2      	ldrb	r2, [r2, #3]
 81016a6:	4313      	orrs	r3, r2
 81016a8:	60fb      	str	r3, [r7, #12]
	float psi = (psi1 - outputmin) * (pmax - pmin);
 81016aa:	68fb      	ldr	r3, [r7, #12]
 81016ac:	ee07 3a90 	vmov	s15, r3
 81016b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81016b4:	4b19      	ldr	r3, [pc, #100]	; (810171c <MPRLS_read+0xb4>)
 81016b6:	edd3 7a00 	vldr	s15, [r3]
 81016ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 81016be:	4b18      	ldr	r3, [pc, #96]	; (8101720 <MPRLS_read+0xb8>)
 81016c0:	edd3 6a00 	vldr	s13, [r3]
 81016c4:	4b17      	ldr	r3, [pc, #92]	; (8101724 <MPRLS_read+0xbc>)
 81016c6:	edd3 7a00 	vldr	s15, [r3]
 81016ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81016ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016d2:	edc7 7a02 	vstr	s15, [r7, #8]
	psi /= (float)(outputmax - outputmin);
 81016d6:	4b14      	ldr	r3, [pc, #80]	; (8101728 <MPRLS_read+0xc0>)
 81016d8:	ed93 7a00 	vldr	s14, [r3]
 81016dc:	4b0f      	ldr	r3, [pc, #60]	; (810171c <MPRLS_read+0xb4>)
 81016de:	edd3 7a00 	vldr	s15, [r3]
 81016e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 81016e6:	edd7 6a02 	vldr	s13, [r7, #8]
 81016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81016ee:	edc7 7a02 	vstr	s15, [r7, #8]
	psi += pmin;
 81016f2:	4b0c      	ldr	r3, [pc, #48]	; (8101724 <MPRLS_read+0xbc>)
 81016f4:	edd3 7a00 	vldr	s15, [r3]
 81016f8:	ed97 7a02 	vldr	s14, [r7, #8]
 81016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101700:	edc7 7a02 	vstr	s15, [r7, #8]
	return psi;
 8101704:	68bb      	ldr	r3, [r7, #8]
 8101706:	ee07 3a90 	vmov	s15, r3
}
 810170a:	eeb0 0a67 	vmov.f32	s0, s15
 810170e:	3710      	adds	r7, #16
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}
 8101714:	1000001c 	.word	0x1000001c
 8101718:	10000324 	.word	0x10000324
 810171c:	10000014 	.word	0x10000014
 8101720:	10000018 	.word	0x10000018
 8101724:	10000320 	.word	0x10000320
 8101728:	10000010 	.word	0x10000010

0810172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810172c:	b580      	push	{r7, lr}
 810172e:	b082      	sub	sp, #8
 8101730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101732:	4b10      	ldr	r3, [pc, #64]	; (8101774 <HAL_MspInit+0x48>)
 8101734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101738:	4a0e      	ldr	r2, [pc, #56]	; (8101774 <HAL_MspInit+0x48>)
 810173a:	f043 0302 	orr.w	r3, r3, #2
 810173e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101742:	4b0c      	ldr	r3, [pc, #48]	; (8101774 <HAL_MspInit+0x48>)
 8101744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101748:	f003 0302 	and.w	r3, r3, #2
 810174c:	607b      	str	r3, [r7, #4]
 810174e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101750:	2200      	movs	r2, #0
 8101752:	210f      	movs	r1, #15
 8101754:	f06f 0001 	mvn.w	r0, #1
 8101758:	f000 fbc0 	bl	8101edc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 810175c:	2200      	movs	r2, #0
 810175e:	2105      	movs	r1, #5
 8101760:	207e      	movs	r0, #126	; 0x7e
 8101762:	f000 fbbb 	bl	8101edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101766:	207e      	movs	r0, #126	; 0x7e
 8101768:	f000 fbd2 	bl	8101f10 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810176c:	bf00      	nop
 810176e:	3708      	adds	r7, #8
 8101770:	46bd      	mov	sp, r7
 8101772:	bd80      	pop	{r7, pc}
 8101774:	58024400 	.word	0x58024400

08101778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101778:	b580      	push	{r7, lr}
 810177a:	b0b8      	sub	sp, #224	; 0xe0
 810177c:	af00      	add	r7, sp, #0
 810177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101784:	2200      	movs	r2, #0
 8101786:	601a      	str	r2, [r3, #0]
 8101788:	605a      	str	r2, [r3, #4]
 810178a:	609a      	str	r2, [r3, #8]
 810178c:	60da      	str	r2, [r3, #12]
 810178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101790:	f107 0310 	add.w	r3, r7, #16
 8101794:	22bc      	movs	r2, #188	; 0xbc
 8101796:	2100      	movs	r1, #0
 8101798:	4618      	mov	r0, r3
 810179a:	f007 fb0a 	bl	8108db2 <memset>
  if(hi2c->Instance==I2C4)
 810179e:	687b      	ldr	r3, [r7, #4]
 81017a0:	681b      	ldr	r3, [r3, #0]
 81017a2:	4a25      	ldr	r2, [pc, #148]	; (8101838 <HAL_I2C_MspInit+0xc0>)
 81017a4:	4293      	cmp	r3, r2
 81017a6:	d142      	bne.n	810182e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 81017a8:	2310      	movs	r3, #16
 81017aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 81017ac:	2300      	movs	r3, #0
 81017ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017b2:	f107 0310 	add.w	r3, r7, #16
 81017b6:	4618      	mov	r0, r3
 81017b8:	f001 fefa 	bl	81035b0 <HAL_RCCEx_PeriphCLKConfig>
 81017bc:	4603      	mov	r3, r0
 81017be:	2b00      	cmp	r3, #0
 81017c0:	d001      	beq.n	81017c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81017c2:	f7ff fecb 	bl	810155c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81017c6:	4b1d      	ldr	r3, [pc, #116]	; (810183c <HAL_I2C_MspInit+0xc4>)
 81017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017cc:	4a1b      	ldr	r2, [pc, #108]	; (810183c <HAL_I2C_MspInit+0xc4>)
 81017ce:	f043 0320 	orr.w	r3, r3, #32
 81017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017d6:	4b19      	ldr	r3, [pc, #100]	; (810183c <HAL_I2C_MspInit+0xc4>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	f003 0320 	and.w	r3, r3, #32
 81017e0:	60fb      	str	r3, [r7, #12]
 81017e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 81017e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 81017e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81017ec:	2312      	movs	r3, #18
 81017ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017f2:	2300      	movs	r3, #0
 81017f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017f8:	2300      	movs	r3, #0
 81017fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 81017fe:	2304      	movs	r3, #4
 8101800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101808:	4619      	mov	r1, r3
 810180a:	480d      	ldr	r0, [pc, #52]	; (8101840 <HAL_I2C_MspInit+0xc8>)
 810180c:	f000 fba2 	bl	8101f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8101810:	4b0a      	ldr	r3, [pc, #40]	; (810183c <HAL_I2C_MspInit+0xc4>)
 8101812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101816:	4a09      	ldr	r2, [pc, #36]	; (810183c <HAL_I2C_MspInit+0xc4>)
 8101818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810181c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101820:	4b06      	ldr	r3, [pc, #24]	; (810183c <HAL_I2C_MspInit+0xc4>)
 8101822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810182a:	60bb      	str	r3, [r7, #8]
 810182c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 810182e:	bf00      	nop
 8101830:	37e0      	adds	r7, #224	; 0xe0
 8101832:	46bd      	mov	sp, r7
 8101834:	bd80      	pop	{r7, pc}
 8101836:	bf00      	nop
 8101838:	58001c00 	.word	0x58001c00
 810183c:	58024400 	.word	0x58024400
 8101840:	58021400 	.word	0x58021400

08101844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101844:	b480      	push	{r7}
 8101846:	b085      	sub	sp, #20
 8101848:	af00      	add	r7, sp, #0
 810184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	4a16      	ldr	r2, [pc, #88]	; (81018ac <HAL_TIM_Base_MspInit+0x68>)
 8101852:	4293      	cmp	r3, r2
 8101854:	d10f      	bne.n	8101876 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101856:	4b16      	ldr	r3, [pc, #88]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8101858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810185c:	4a14      	ldr	r2, [pc, #80]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 810185e:	f043 0301 	orr.w	r3, r3, #1
 8101862:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101866:	4b12      	ldr	r3, [pc, #72]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8101868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810186c:	f003 0301 	and.w	r3, r3, #1
 8101870:	60fb      	str	r3, [r7, #12]
 8101872:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101874:	e013      	b.n	810189e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM4)
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	4a0e      	ldr	r2, [pc, #56]	; (81018b4 <HAL_TIM_Base_MspInit+0x70>)
 810187c:	4293      	cmp	r3, r2
 810187e:	d10e      	bne.n	810189e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101880:	4b0b      	ldr	r3, [pc, #44]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8101882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101886:	4a0a      	ldr	r2, [pc, #40]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8101888:	f043 0304 	orr.w	r3, r3, #4
 810188c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101890:	4b07      	ldr	r3, [pc, #28]	; (81018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8101892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101896:	f003 0304 	and.w	r3, r3, #4
 810189a:	60bb      	str	r3, [r7, #8]
 810189c:	68bb      	ldr	r3, [r7, #8]
}
 810189e:	bf00      	nop
 81018a0:	3714      	adds	r7, #20
 81018a2:	46bd      	mov	sp, r7
 81018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a8:	4770      	bx	lr
 81018aa:	bf00      	nop
 81018ac:	40010000 	.word	0x40010000
 81018b0:	58024400 	.word	0x58024400
 81018b4:	40000800 	.word	0x40000800

081018b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b08a      	sub	sp, #40	; 0x28
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018c0:	f107 0314 	add.w	r3, r7, #20
 81018c4:	2200      	movs	r2, #0
 81018c6:	601a      	str	r2, [r3, #0]
 81018c8:	605a      	str	r2, [r3, #4]
 81018ca:	609a      	str	r2, [r3, #8]
 81018cc:	60da      	str	r2, [r3, #12]
 81018ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	4a26      	ldr	r2, [pc, #152]	; (8101970 <HAL_TIM_MspPostInit+0xb8>)
 81018d6:	4293      	cmp	r3, r2
 81018d8:	d120      	bne.n	810191c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81018da:	4b26      	ldr	r3, [pc, #152]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 81018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018e0:	4a24      	ldr	r2, [pc, #144]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 81018e2:	f043 0310 	orr.w	r3, r3, #16
 81018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018ea:	4b22      	ldr	r3, [pc, #136]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 81018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018f0:	f003 0310 	and.w	r3, r3, #16
 81018f4:	613b      	str	r3, [r7, #16]
 81018f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 81018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018fe:	2302      	movs	r3, #2
 8101900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101902:	2300      	movs	r3, #0
 8101904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101906:	2300      	movs	r3, #0
 8101908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810190a:	2301      	movs	r3, #1
 810190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810190e:	f107 0314 	add.w	r3, r7, #20
 8101912:	4619      	mov	r1, r3
 8101914:	4818      	ldr	r0, [pc, #96]	; (8101978 <HAL_TIM_MspPostInit+0xc0>)
 8101916:	f000 fb1d 	bl	8101f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 810191a:	e024      	b.n	8101966 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	4a16      	ldr	r2, [pc, #88]	; (810197c <HAL_TIM_MspPostInit+0xc4>)
 8101922:	4293      	cmp	r3, r2
 8101924:	d11f      	bne.n	8101966 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101926:	4b13      	ldr	r3, [pc, #76]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 8101928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810192c:	4a11      	ldr	r2, [pc, #68]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 810192e:	f043 0308 	orr.w	r3, r3, #8
 8101932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101936:	4b0f      	ldr	r3, [pc, #60]	; (8101974 <HAL_TIM_MspPostInit+0xbc>)
 8101938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810193c:	f003 0308 	and.w	r3, r3, #8
 8101940:	60fb      	str	r3, [r7, #12]
 8101942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8101944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810194a:	2302      	movs	r3, #2
 810194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194e:	2300      	movs	r3, #0
 8101950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101952:	2300      	movs	r3, #0
 8101954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101956:	2302      	movs	r3, #2
 8101958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810195a:	f107 0314 	add.w	r3, r7, #20
 810195e:	4619      	mov	r1, r3
 8101960:	4807      	ldr	r0, [pc, #28]	; (8101980 <HAL_TIM_MspPostInit+0xc8>)
 8101962:	f000 faf7 	bl	8101f54 <HAL_GPIO_Init>
}
 8101966:	bf00      	nop
 8101968:	3728      	adds	r7, #40	; 0x28
 810196a:	46bd      	mov	sp, r7
 810196c:	bd80      	pop	{r7, pc}
 810196e:	bf00      	nop
 8101970:	40010000 	.word	0x40010000
 8101974:	58024400 	.word	0x58024400
 8101978:	58021000 	.word	0x58021000
 810197c:	40000800 	.word	0x40000800
 8101980:	58020c00 	.word	0x58020c00

08101984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101984:	b580      	push	{r7, lr}
 8101986:	b08e      	sub	sp, #56	; 0x38
 8101988:	af00      	add	r7, sp, #0
 810198a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	2b0f      	cmp	r3, #15
 8101990:	d842      	bhi.n	8101a18 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8101992:	2200      	movs	r2, #0
 8101994:	6879      	ldr	r1, [r7, #4]
 8101996:	2076      	movs	r0, #118	; 0x76
 8101998:	f000 faa0 	bl	8101edc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 810199c:	2076      	movs	r0, #118	; 0x76
 810199e:	f000 fab7 	bl	8101f10 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81019a2:	4a23      	ldr	r2, [pc, #140]	; (8101a30 <HAL_InitTick+0xac>)
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 81019a8:	4b22      	ldr	r3, [pc, #136]	; (8101a34 <HAL_InitTick+0xb0>)
 81019aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019ae:	4a21      	ldr	r2, [pc, #132]	; (8101a34 <HAL_InitTick+0xb0>)
 81019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81019b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019b8:	4b1e      	ldr	r3, [pc, #120]	; (8101a34 <HAL_InitTick+0xb0>)
 81019ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81019c2:	60bb      	str	r3, [r7, #8]
 81019c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81019c6:	f107 020c 	add.w	r2, r7, #12
 81019ca:	f107 0310 	add.w	r3, r7, #16
 81019ce:	4611      	mov	r1, r2
 81019d0:	4618      	mov	r0, r3
 81019d2:	f001 fdab 	bl	810352c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 81019d6:	f001 fd93 	bl	8103500 <HAL_RCC_GetPCLK2Freq>
 81019da:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81019de:	4a16      	ldr	r2, [pc, #88]	; (8101a38 <HAL_InitTick+0xb4>)
 81019e0:	fba2 2303 	umull	r2, r3, r2, r3
 81019e4:	0c9b      	lsrs	r3, r3, #18
 81019e6:	3b01      	subs	r3, #1
 81019e8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 81019ea:	4b14      	ldr	r3, [pc, #80]	; (8101a3c <HAL_InitTick+0xb8>)
 81019ec:	4a14      	ldr	r2, [pc, #80]	; (8101a40 <HAL_InitTick+0xbc>)
 81019ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 81019f0:	4b12      	ldr	r3, [pc, #72]	; (8101a3c <HAL_InitTick+0xb8>)
 81019f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 81019f6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 81019f8:	4a10      	ldr	r2, [pc, #64]	; (8101a3c <HAL_InitTick+0xb8>)
 81019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81019fc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 81019fe:	4b0f      	ldr	r3, [pc, #60]	; (8101a3c <HAL_InitTick+0xb8>)
 8101a00:	2200      	movs	r2, #0
 8101a02:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101a04:	4b0d      	ldr	r3, [pc, #52]	; (8101a3c <HAL_InitTick+0xb8>)
 8101a06:	2200      	movs	r2, #0
 8101a08:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8101a0a:	480c      	ldr	r0, [pc, #48]	; (8101a3c <HAL_InitTick+0xb8>)
 8101a0c:	f002 fe7a 	bl	8104704 <HAL_TIM_Base_Init>
 8101a10:	4603      	mov	r3, r0
 8101a12:	2b00      	cmp	r3, #0
 8101a14:	d107      	bne.n	8101a26 <HAL_InitTick+0xa2>
 8101a16:	e001      	b.n	8101a1c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8101a18:	2301      	movs	r3, #1
 8101a1a:	e005      	b.n	8101a28 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8101a1c:	4807      	ldr	r0, [pc, #28]	; (8101a3c <HAL_InitTick+0xb8>)
 8101a1e:	f002 fec9 	bl	81047b4 <HAL_TIM_Base_Start_IT>
 8101a22:	4603      	mov	r3, r0
 8101a24:	e000      	b.n	8101a28 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8101a26:	2301      	movs	r3, #1
}
 8101a28:	4618      	mov	r0, r3
 8101a2a:	3738      	adds	r7, #56	; 0x38
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	bd80      	pop	{r7, pc}
 8101a30:	10000020 	.word	0x10000020
 8101a34:	58024400 	.word	0x58024400
 8101a38:	431bde83 	.word	0x431bde83
 8101a3c:	10000328 	.word	0x10000328
 8101a40:	40014800 	.word	0x40014800

08101a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a44:	b480      	push	{r7}
 8101a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101a48:	e7fe      	b.n	8101a48 <NMI_Handler+0x4>

08101a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a4a:	b480      	push	{r7}
 8101a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a4e:	e7fe      	b.n	8101a4e <HardFault_Handler+0x4>

08101a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a50:	b480      	push	{r7}
 8101a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a54:	e7fe      	b.n	8101a54 <MemManage_Handler+0x4>

08101a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a56:	b480      	push	{r7}
 8101a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101a5a:	e7fe      	b.n	8101a5a <BusFault_Handler+0x4>

08101a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101a5c:	b480      	push	{r7}
 8101a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101a60:	e7fe      	b.n	8101a60 <UsageFault_Handler+0x4>

08101a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a62:	b480      	push	{r7}
 8101a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a66:	bf00      	nop
 8101a68:	46bd      	mov	sp, r7
 8101a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6e:	4770      	bx	lr

08101a70 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101a70:	b580      	push	{r7, lr}
 8101a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8101a74:	4802      	ldr	r0, [pc, #8]	; (8101a80 <TIM17_IRQHandler+0x10>)
 8101a76:	f003 f885 	bl	8104b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8101a7a:	bf00      	nop
 8101a7c:	bd80      	pop	{r7, pc}
 8101a7e:	bf00      	nop
 8101a80:	10000328 	.word	0x10000328

08101a84 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101a84:	b580      	push	{r7, lr}
 8101a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101a88:	f000 fc5a 	bl	8102340 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101a8c:	bf00      	nop
 8101a8e:	bd80      	pop	{r7, pc}

08101a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101a90:	b480      	push	{r7}
 8101a92:	af00      	add	r7, sp, #0
	return 1;
 8101a94:	2301      	movs	r3, #1
}
 8101a96:	4618      	mov	r0, r3
 8101a98:	46bd      	mov	sp, r7
 8101a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a9e:	4770      	bx	lr

08101aa0 <_kill>:

int _kill(int pid, int sig)
{
 8101aa0:	b580      	push	{r7, lr}
 8101aa2:	b082      	sub	sp, #8
 8101aa4:	af00      	add	r7, sp, #0
 8101aa6:	6078      	str	r0, [r7, #4]
 8101aa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101aaa:	f007 f851 	bl	8108b50 <__errno>
 8101aae:	4603      	mov	r3, r0
 8101ab0:	2216      	movs	r2, #22
 8101ab2:	601a      	str	r2, [r3, #0]
	return -1;
 8101ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101ab8:	4618      	mov	r0, r3
 8101aba:	3708      	adds	r7, #8
 8101abc:	46bd      	mov	sp, r7
 8101abe:	bd80      	pop	{r7, pc}

08101ac0 <_exit>:

void _exit (int status)
{
 8101ac0:	b580      	push	{r7, lr}
 8101ac2:	b082      	sub	sp, #8
 8101ac4:	af00      	add	r7, sp, #0
 8101ac6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8101acc:	6878      	ldr	r0, [r7, #4]
 8101ace:	f7ff ffe7 	bl	8101aa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101ad2:	e7fe      	b.n	8101ad2 <_exit+0x12>

08101ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	b086      	sub	sp, #24
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	60f8      	str	r0, [r7, #12]
 8101adc:	60b9      	str	r1, [r7, #8]
 8101ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ae0:	2300      	movs	r3, #0
 8101ae2:	617b      	str	r3, [r7, #20]
 8101ae4:	e00a      	b.n	8101afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101ae6:	f3af 8000 	nop.w
 8101aea:	4601      	mov	r1, r0
 8101aec:	68bb      	ldr	r3, [r7, #8]
 8101aee:	1c5a      	adds	r2, r3, #1
 8101af0:	60ba      	str	r2, [r7, #8]
 8101af2:	b2ca      	uxtb	r2, r1
 8101af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101af6:	697b      	ldr	r3, [r7, #20]
 8101af8:	3301      	adds	r3, #1
 8101afa:	617b      	str	r3, [r7, #20]
 8101afc:	697a      	ldr	r2, [r7, #20]
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	429a      	cmp	r2, r3
 8101b02:	dbf0      	blt.n	8101ae6 <_read+0x12>
	}

return len;
 8101b04:	687b      	ldr	r3, [r7, #4]
}
 8101b06:	4618      	mov	r0, r3
 8101b08:	3718      	adds	r7, #24
 8101b0a:	46bd      	mov	sp, r7
 8101b0c:	bd80      	pop	{r7, pc}

08101b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101b0e:	b580      	push	{r7, lr}
 8101b10:	b086      	sub	sp, #24
 8101b12:	af00      	add	r7, sp, #0
 8101b14:	60f8      	str	r0, [r7, #12]
 8101b16:	60b9      	str	r1, [r7, #8]
 8101b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b1a:	2300      	movs	r3, #0
 8101b1c:	617b      	str	r3, [r7, #20]
 8101b1e:	e009      	b.n	8101b34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101b20:	68bb      	ldr	r3, [r7, #8]
 8101b22:	1c5a      	adds	r2, r3, #1
 8101b24:	60ba      	str	r2, [r7, #8]
 8101b26:	781b      	ldrb	r3, [r3, #0]
 8101b28:	4618      	mov	r0, r3
 8101b2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b2e:	697b      	ldr	r3, [r7, #20]
 8101b30:	3301      	adds	r3, #1
 8101b32:	617b      	str	r3, [r7, #20]
 8101b34:	697a      	ldr	r2, [r7, #20]
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	429a      	cmp	r2, r3
 8101b3a:	dbf1      	blt.n	8101b20 <_write+0x12>
	}
	return len;
 8101b3c:	687b      	ldr	r3, [r7, #4]
}
 8101b3e:	4618      	mov	r0, r3
 8101b40:	3718      	adds	r7, #24
 8101b42:	46bd      	mov	sp, r7
 8101b44:	bd80      	pop	{r7, pc}

08101b46 <_close>:

int _close(int file)
{
 8101b46:	b480      	push	{r7}
 8101b48:	b083      	sub	sp, #12
 8101b4a:	af00      	add	r7, sp, #0
 8101b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8101b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101b52:	4618      	mov	r0, r3
 8101b54:	370c      	adds	r7, #12
 8101b56:	46bd      	mov	sp, r7
 8101b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b5c:	4770      	bx	lr

08101b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101b5e:	b480      	push	{r7}
 8101b60:	b083      	sub	sp, #12
 8101b62:	af00      	add	r7, sp, #0
 8101b64:	6078      	str	r0, [r7, #4]
 8101b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101b68:	683b      	ldr	r3, [r7, #0]
 8101b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8101b70:	2300      	movs	r3, #0
}
 8101b72:	4618      	mov	r0, r3
 8101b74:	370c      	adds	r7, #12
 8101b76:	46bd      	mov	sp, r7
 8101b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7c:	4770      	bx	lr

08101b7e <_isatty>:

int _isatty(int file)
{
 8101b7e:	b480      	push	{r7}
 8101b80:	b083      	sub	sp, #12
 8101b82:	af00      	add	r7, sp, #0
 8101b84:	6078      	str	r0, [r7, #4]
	return 1;
 8101b86:	2301      	movs	r3, #1
}
 8101b88:	4618      	mov	r0, r3
 8101b8a:	370c      	adds	r7, #12
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b92:	4770      	bx	lr

08101b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101b94:	b480      	push	{r7}
 8101b96:	b085      	sub	sp, #20
 8101b98:	af00      	add	r7, sp, #0
 8101b9a:	60f8      	str	r0, [r7, #12]
 8101b9c:	60b9      	str	r1, [r7, #8]
 8101b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8101ba0:	2300      	movs	r3, #0
}
 8101ba2:	4618      	mov	r0, r3
 8101ba4:	3714      	adds	r7, #20
 8101ba6:	46bd      	mov	sp, r7
 8101ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bac:	4770      	bx	lr
	...

08101bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101bb0:	b580      	push	{r7, lr}
 8101bb2:	b086      	sub	sp, #24
 8101bb4:	af00      	add	r7, sp, #0
 8101bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101bb8:	4a14      	ldr	r2, [pc, #80]	; (8101c0c <_sbrk+0x5c>)
 8101bba:	4b15      	ldr	r3, [pc, #84]	; (8101c10 <_sbrk+0x60>)
 8101bbc:	1ad3      	subs	r3, r2, r3
 8101bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101bc0:	697b      	ldr	r3, [r7, #20]
 8101bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101bc4:	4b13      	ldr	r3, [pc, #76]	; (8101c14 <_sbrk+0x64>)
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	2b00      	cmp	r3, #0
 8101bca:	d102      	bne.n	8101bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101bcc:	4b11      	ldr	r3, [pc, #68]	; (8101c14 <_sbrk+0x64>)
 8101bce:	4a12      	ldr	r2, [pc, #72]	; (8101c18 <_sbrk+0x68>)
 8101bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101bd2:	4b10      	ldr	r3, [pc, #64]	; (8101c14 <_sbrk+0x64>)
 8101bd4:	681a      	ldr	r2, [r3, #0]
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	4413      	add	r3, r2
 8101bda:	693a      	ldr	r2, [r7, #16]
 8101bdc:	429a      	cmp	r2, r3
 8101bde:	d207      	bcs.n	8101bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101be0:	f006 ffb6 	bl	8108b50 <__errno>
 8101be4:	4603      	mov	r3, r0
 8101be6:	220c      	movs	r2, #12
 8101be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101bea:	f04f 33ff 	mov.w	r3, #4294967295
 8101bee:	e009      	b.n	8101c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101bf0:	4b08      	ldr	r3, [pc, #32]	; (8101c14 <_sbrk+0x64>)
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101bf6:	4b07      	ldr	r3, [pc, #28]	; (8101c14 <_sbrk+0x64>)
 8101bf8:	681a      	ldr	r2, [r3, #0]
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	4413      	add	r3, r2
 8101bfe:	4a05      	ldr	r2, [pc, #20]	; (8101c14 <_sbrk+0x64>)
 8101c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101c02:	68fb      	ldr	r3, [r7, #12]
}
 8101c04:	4618      	mov	r0, r3
 8101c06:	3718      	adds	r7, #24
 8101c08:	46bd      	mov	sp, r7
 8101c0a:	bd80      	pop	{r7, pc}
 8101c0c:	10048000 	.word	0x10048000
 8101c10:	00000400 	.word	0x00000400
 8101c14:	10000374 	.word	0x10000374
 8101c18:	10004da0 	.word	0x10004da0

08101c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101c54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c20:	f7ff f8f0 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c24:	480c      	ldr	r0, [pc, #48]	; (8101c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c26:	490d      	ldr	r1, [pc, #52]	; (8101c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c28:	4a0d      	ldr	r2, [pc, #52]	; (8101c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c2c:	e002      	b.n	8101c34 <LoopCopyDataInit>

08101c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c32:	3304      	adds	r3, #4

08101c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c38:	d3f9      	bcc.n	8101c2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c3a:	4a0a      	ldr	r2, [pc, #40]	; (8101c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c3c:	4c0a      	ldr	r4, [pc, #40]	; (8101c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101c40:	e001      	b.n	8101c46 <LoopFillZerobss>

08101c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101c44:	3204      	adds	r2, #4

08101c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101c48:	d3fb      	bcc.n	8101c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101c4a:	f007 f87d 	bl	8108d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101c4e:	f7ff f8f1 	bl	8100e34 <main>
  bx  lr
 8101c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101c54:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101c58:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101c5c:	10000200 	.word	0x10000200
  ldr r2, =_sidata
 8101c60:	0810daa4 	.word	0x0810daa4
  ldr r2, =_sbss
 8101c64:	10000200 	.word	0x10000200
  ldr r4, =_ebss
 8101c68:	10004d9c 	.word	0x10004d9c

08101c6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101c6c:	e7fe      	b.n	8101c6c <ADC3_IRQHandler>
	...

08101c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101c70:	b580      	push	{r7, lr}
 8101c72:	b082      	sub	sp, #8
 8101c74:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101c76:	4b28      	ldr	r3, [pc, #160]	; (8101d18 <HAL_Init+0xa8>)
 8101c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c7c:	4a26      	ldr	r2, [pc, #152]	; (8101d18 <HAL_Init+0xa8>)
 8101c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101c86:	4b24      	ldr	r3, [pc, #144]	; (8101d18 <HAL_Init+0xa8>)
 8101c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101c90:	603b      	str	r3, [r7, #0]
 8101c92:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101c94:	4b21      	ldr	r3, [pc, #132]	; (8101d1c <HAL_Init+0xac>)
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101c9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101ca0:	4a1e      	ldr	r2, [pc, #120]	; (8101d1c <HAL_Init+0xac>)
 8101ca2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101ca6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101ca8:	4b1c      	ldr	r3, [pc, #112]	; (8101d1c <HAL_Init+0xac>)
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	4a1b      	ldr	r2, [pc, #108]	; (8101d1c <HAL_Init+0xac>)
 8101cae:	f043 0301 	orr.w	r3, r3, #1
 8101cb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101cb4:	2003      	movs	r0, #3
 8101cb6:	f000 f906 	bl	8101ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101cba:	f001 fa75 	bl	81031a8 <HAL_RCC_GetSysClockFreq>
 8101cbe:	4602      	mov	r2, r0
 8101cc0:	4b15      	ldr	r3, [pc, #84]	; (8101d18 <HAL_Init+0xa8>)
 8101cc2:	699b      	ldr	r3, [r3, #24]
 8101cc4:	0a1b      	lsrs	r3, r3, #8
 8101cc6:	f003 030f 	and.w	r3, r3, #15
 8101cca:	4915      	ldr	r1, [pc, #84]	; (8101d20 <HAL_Init+0xb0>)
 8101ccc:	5ccb      	ldrb	r3, [r1, r3]
 8101cce:	f003 031f 	and.w	r3, r3, #31
 8101cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8101cd6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101cd8:	4b0f      	ldr	r3, [pc, #60]	; (8101d18 <HAL_Init+0xa8>)
 8101cda:	699b      	ldr	r3, [r3, #24]
 8101cdc:	f003 030f 	and.w	r3, r3, #15
 8101ce0:	4a0f      	ldr	r2, [pc, #60]	; (8101d20 <HAL_Init+0xb0>)
 8101ce2:	5cd3      	ldrb	r3, [r2, r3]
 8101ce4:	f003 031f 	and.w	r3, r3, #31
 8101ce8:	687a      	ldr	r2, [r7, #4]
 8101cea:	fa22 f303 	lsr.w	r3, r2, r3
 8101cee:	4a0d      	ldr	r2, [pc, #52]	; (8101d24 <HAL_Init+0xb4>)
 8101cf0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101cf2:	4b0c      	ldr	r3, [pc, #48]	; (8101d24 <HAL_Init+0xb4>)
 8101cf4:	681b      	ldr	r3, [r3, #0]
 8101cf6:	4a0c      	ldr	r2, [pc, #48]	; (8101d28 <HAL_Init+0xb8>)
 8101cf8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101cfa:	200f      	movs	r0, #15
 8101cfc:	f7ff fe42 	bl	8101984 <HAL_InitTick>
 8101d00:	4603      	mov	r3, r0
 8101d02:	2b00      	cmp	r3, #0
 8101d04:	d001      	beq.n	8101d0a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d06:	2301      	movs	r3, #1
 8101d08:	e002      	b.n	8101d10 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d0a:	f7ff fd0f 	bl	810172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d0e:	2300      	movs	r3, #0
}
 8101d10:	4618      	mov	r0, r3
 8101d12:	3708      	adds	r7, #8
 8101d14:	46bd      	mov	sp, r7
 8101d16:	bd80      	pop	{r7, pc}
 8101d18:	58024400 	.word	0x58024400
 8101d1c:	40024400 	.word	0x40024400
 8101d20:	0810d5b4 	.word	0x0810d5b4
 8101d24:	10000004 	.word	0x10000004
 8101d28:	10000000 	.word	0x10000000

08101d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101d2c:	b480      	push	{r7}
 8101d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101d30:	4b06      	ldr	r3, [pc, #24]	; (8101d4c <HAL_IncTick+0x20>)
 8101d32:	781b      	ldrb	r3, [r3, #0]
 8101d34:	461a      	mov	r2, r3
 8101d36:	4b06      	ldr	r3, [pc, #24]	; (8101d50 <HAL_IncTick+0x24>)
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4413      	add	r3, r2
 8101d3c:	4a04      	ldr	r2, [pc, #16]	; (8101d50 <HAL_IncTick+0x24>)
 8101d3e:	6013      	str	r3, [r2, #0]
}
 8101d40:	bf00      	nop
 8101d42:	46bd      	mov	sp, r7
 8101d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d48:	4770      	bx	lr
 8101d4a:	bf00      	nop
 8101d4c:	10000024 	.word	0x10000024
 8101d50:	10000378 	.word	0x10000378

08101d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101d54:	b480      	push	{r7}
 8101d56:	af00      	add	r7, sp, #0
  return uwTick;
 8101d58:	4b03      	ldr	r3, [pc, #12]	; (8101d68 <HAL_GetTick+0x14>)
 8101d5a:	681b      	ldr	r3, [r3, #0]
}
 8101d5c:	4618      	mov	r0, r3
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d64:	4770      	bx	lr
 8101d66:	bf00      	nop
 8101d68:	10000378 	.word	0x10000378

08101d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d6c:	b480      	push	{r7}
 8101d6e:	b085      	sub	sp, #20
 8101d70:	af00      	add	r7, sp, #0
 8101d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	f003 0307 	and.w	r3, r3, #7
 8101d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101d7c:	4b0c      	ldr	r3, [pc, #48]	; (8101db0 <__NVIC_SetPriorityGrouping+0x44>)
 8101d7e:	68db      	ldr	r3, [r3, #12]
 8101d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d82:	68ba      	ldr	r2, [r7, #8]
 8101d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101d88:	4013      	ands	r3, r2
 8101d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d8c:	68fb      	ldr	r3, [r7, #12]
 8101d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d90:	68bb      	ldr	r3, [r7, #8]
 8101d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101d9e:	4a04      	ldr	r2, [pc, #16]	; (8101db0 <__NVIC_SetPriorityGrouping+0x44>)
 8101da0:	68bb      	ldr	r3, [r7, #8]
 8101da2:	60d3      	str	r3, [r2, #12]
}
 8101da4:	bf00      	nop
 8101da6:	3714      	adds	r7, #20
 8101da8:	46bd      	mov	sp, r7
 8101daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dae:	4770      	bx	lr
 8101db0:	e000ed00 	.word	0xe000ed00

08101db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101db4:	b480      	push	{r7}
 8101db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101db8:	4b04      	ldr	r3, [pc, #16]	; (8101dcc <__NVIC_GetPriorityGrouping+0x18>)
 8101dba:	68db      	ldr	r3, [r3, #12]
 8101dbc:	0a1b      	lsrs	r3, r3, #8
 8101dbe:	f003 0307 	and.w	r3, r3, #7
}
 8101dc2:	4618      	mov	r0, r3
 8101dc4:	46bd      	mov	sp, r7
 8101dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dca:	4770      	bx	lr
 8101dcc:	e000ed00 	.word	0xe000ed00

08101dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101dd0:	b480      	push	{r7}
 8101dd2:	b083      	sub	sp, #12
 8101dd4:	af00      	add	r7, sp, #0
 8101dd6:	4603      	mov	r3, r0
 8101dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101dde:	2b00      	cmp	r3, #0
 8101de0:	db0b      	blt.n	8101dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101de2:	88fb      	ldrh	r3, [r7, #6]
 8101de4:	f003 021f 	and.w	r2, r3, #31
 8101de8:	4907      	ldr	r1, [pc, #28]	; (8101e08 <__NVIC_EnableIRQ+0x38>)
 8101dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101dee:	095b      	lsrs	r3, r3, #5
 8101df0:	2001      	movs	r0, #1
 8101df2:	fa00 f202 	lsl.w	r2, r0, r2
 8101df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101dfa:	bf00      	nop
 8101dfc:	370c      	adds	r7, #12
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e04:	4770      	bx	lr
 8101e06:	bf00      	nop
 8101e08:	e000e100 	.word	0xe000e100

08101e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101e0c:	b480      	push	{r7}
 8101e0e:	b083      	sub	sp, #12
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	4603      	mov	r3, r0
 8101e14:	6039      	str	r1, [r7, #0]
 8101e16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e1c:	2b00      	cmp	r3, #0
 8101e1e:	db0a      	blt.n	8101e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e20:	683b      	ldr	r3, [r7, #0]
 8101e22:	b2da      	uxtb	r2, r3
 8101e24:	490c      	ldr	r1, [pc, #48]	; (8101e58 <__NVIC_SetPriority+0x4c>)
 8101e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e2a:	0112      	lsls	r2, r2, #4
 8101e2c:	b2d2      	uxtb	r2, r2
 8101e2e:	440b      	add	r3, r1
 8101e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101e34:	e00a      	b.n	8101e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e36:	683b      	ldr	r3, [r7, #0]
 8101e38:	b2da      	uxtb	r2, r3
 8101e3a:	4908      	ldr	r1, [pc, #32]	; (8101e5c <__NVIC_SetPriority+0x50>)
 8101e3c:	88fb      	ldrh	r3, [r7, #6]
 8101e3e:	f003 030f 	and.w	r3, r3, #15
 8101e42:	3b04      	subs	r3, #4
 8101e44:	0112      	lsls	r2, r2, #4
 8101e46:	b2d2      	uxtb	r2, r2
 8101e48:	440b      	add	r3, r1
 8101e4a:	761a      	strb	r2, [r3, #24]
}
 8101e4c:	bf00      	nop
 8101e4e:	370c      	adds	r7, #12
 8101e50:	46bd      	mov	sp, r7
 8101e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e56:	4770      	bx	lr
 8101e58:	e000e100 	.word	0xe000e100
 8101e5c:	e000ed00 	.word	0xe000ed00

08101e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e60:	b480      	push	{r7}
 8101e62:	b089      	sub	sp, #36	; 0x24
 8101e64:	af00      	add	r7, sp, #0
 8101e66:	60f8      	str	r0, [r7, #12]
 8101e68:	60b9      	str	r1, [r7, #8]
 8101e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101e6c:	68fb      	ldr	r3, [r7, #12]
 8101e6e:	f003 0307 	and.w	r3, r3, #7
 8101e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101e74:	69fb      	ldr	r3, [r7, #28]
 8101e76:	f1c3 0307 	rsb	r3, r3, #7
 8101e7a:	2b04      	cmp	r3, #4
 8101e7c:	bf28      	it	cs
 8101e7e:	2304      	movcs	r3, #4
 8101e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101e82:	69fb      	ldr	r3, [r7, #28]
 8101e84:	3304      	adds	r3, #4
 8101e86:	2b06      	cmp	r3, #6
 8101e88:	d902      	bls.n	8101e90 <NVIC_EncodePriority+0x30>
 8101e8a:	69fb      	ldr	r3, [r7, #28]
 8101e8c:	3b03      	subs	r3, #3
 8101e8e:	e000      	b.n	8101e92 <NVIC_EncodePriority+0x32>
 8101e90:	2300      	movs	r3, #0
 8101e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e94:	f04f 32ff 	mov.w	r2, #4294967295
 8101e98:	69bb      	ldr	r3, [r7, #24]
 8101e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8101e9e:	43da      	mvns	r2, r3
 8101ea0:	68bb      	ldr	r3, [r7, #8]
 8101ea2:	401a      	ands	r2, r3
 8101ea4:	697b      	ldr	r3, [r7, #20]
 8101ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8101eac:	697b      	ldr	r3, [r7, #20]
 8101eae:	fa01 f303 	lsl.w	r3, r1, r3
 8101eb2:	43d9      	mvns	r1, r3
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101eb8:	4313      	orrs	r3, r2
         );
}
 8101eba:	4618      	mov	r0, r3
 8101ebc:	3724      	adds	r7, #36	; 0x24
 8101ebe:	46bd      	mov	sp, r7
 8101ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec4:	4770      	bx	lr

08101ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ec6:	b580      	push	{r7, lr}
 8101ec8:	b082      	sub	sp, #8
 8101eca:	af00      	add	r7, sp, #0
 8101ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101ece:	6878      	ldr	r0, [r7, #4]
 8101ed0:	f7ff ff4c 	bl	8101d6c <__NVIC_SetPriorityGrouping>
}
 8101ed4:	bf00      	nop
 8101ed6:	3708      	adds	r7, #8
 8101ed8:	46bd      	mov	sp, r7
 8101eda:	bd80      	pop	{r7, pc}

08101edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101edc:	b580      	push	{r7, lr}
 8101ede:	b086      	sub	sp, #24
 8101ee0:	af00      	add	r7, sp, #0
 8101ee2:	4603      	mov	r3, r0
 8101ee4:	60b9      	str	r1, [r7, #8]
 8101ee6:	607a      	str	r2, [r7, #4]
 8101ee8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101eea:	f7ff ff63 	bl	8101db4 <__NVIC_GetPriorityGrouping>
 8101eee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ef0:	687a      	ldr	r2, [r7, #4]
 8101ef2:	68b9      	ldr	r1, [r7, #8]
 8101ef4:	6978      	ldr	r0, [r7, #20]
 8101ef6:	f7ff ffb3 	bl	8101e60 <NVIC_EncodePriority>
 8101efa:	4602      	mov	r2, r0
 8101efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101f00:	4611      	mov	r1, r2
 8101f02:	4618      	mov	r0, r3
 8101f04:	f7ff ff82 	bl	8101e0c <__NVIC_SetPriority>
}
 8101f08:	bf00      	nop
 8101f0a:	3718      	adds	r7, #24
 8101f0c:	46bd      	mov	sp, r7
 8101f0e:	bd80      	pop	{r7, pc}

08101f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101f10:	b580      	push	{r7, lr}
 8101f12:	b082      	sub	sp, #8
 8101f14:	af00      	add	r7, sp, #0
 8101f16:	4603      	mov	r3, r0
 8101f18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f1e:	4618      	mov	r0, r3
 8101f20:	f7ff ff56 	bl	8101dd0 <__NVIC_EnableIRQ>
}
 8101f24:	bf00      	nop
 8101f26:	3708      	adds	r7, #8
 8101f28:	46bd      	mov	sp, r7
 8101f2a:	bd80      	pop	{r7, pc}

08101f2c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f2c:	b480      	push	{r7}
 8101f2e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f30:	4b07      	ldr	r3, [pc, #28]	; (8101f50 <HAL_GetCurrentCPUID+0x24>)
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	091b      	lsrs	r3, r3, #4
 8101f36:	f003 030f 	and.w	r3, r3, #15
 8101f3a:	2b07      	cmp	r3, #7
 8101f3c:	d101      	bne.n	8101f42 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101f3e:	2303      	movs	r3, #3
 8101f40:	e000      	b.n	8101f44 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101f42:	2301      	movs	r3, #1
  }
}
 8101f44:	4618      	mov	r0, r3
 8101f46:	46bd      	mov	sp, r7
 8101f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4c:	4770      	bx	lr
 8101f4e:	bf00      	nop
 8101f50:	e000ed00 	.word	0xe000ed00

08101f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101f54:	b480      	push	{r7}
 8101f56:	b089      	sub	sp, #36	; 0x24
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	6078      	str	r0, [r7, #4]
 8101f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101f5e:	2300      	movs	r3, #0
 8101f60:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101f62:	4b89      	ldr	r3, [pc, #548]	; (8102188 <HAL_GPIO_Init+0x234>)
 8101f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f66:	e194      	b.n	8102292 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101f68:	683b      	ldr	r3, [r7, #0]
 8101f6a:	681a      	ldr	r2, [r3, #0]
 8101f6c:	2101      	movs	r1, #1
 8101f6e:	69fb      	ldr	r3, [r7, #28]
 8101f70:	fa01 f303 	lsl.w	r3, r1, r3
 8101f74:	4013      	ands	r3, r2
 8101f76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101f78:	693b      	ldr	r3, [r7, #16]
 8101f7a:	2b00      	cmp	r3, #0
 8101f7c:	f000 8186 	beq.w	810228c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101f80:	683b      	ldr	r3, [r7, #0]
 8101f82:	685b      	ldr	r3, [r3, #4]
 8101f84:	f003 0303 	and.w	r3, r3, #3
 8101f88:	2b01      	cmp	r3, #1
 8101f8a:	d005      	beq.n	8101f98 <HAL_GPIO_Init+0x44>
 8101f8c:	683b      	ldr	r3, [r7, #0]
 8101f8e:	685b      	ldr	r3, [r3, #4]
 8101f90:	f003 0303 	and.w	r3, r3, #3
 8101f94:	2b02      	cmp	r3, #2
 8101f96:	d130      	bne.n	8101ffa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	689b      	ldr	r3, [r3, #8]
 8101f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101f9e:	69fb      	ldr	r3, [r7, #28]
 8101fa0:	005b      	lsls	r3, r3, #1
 8101fa2:	2203      	movs	r2, #3
 8101fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8101fa8:	43db      	mvns	r3, r3
 8101faa:	69ba      	ldr	r2, [r7, #24]
 8101fac:	4013      	ands	r3, r2
 8101fae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101fb0:	683b      	ldr	r3, [r7, #0]
 8101fb2:	68da      	ldr	r2, [r3, #12]
 8101fb4:	69fb      	ldr	r3, [r7, #28]
 8101fb6:	005b      	lsls	r3, r3, #1
 8101fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8101fbc:	69ba      	ldr	r2, [r7, #24]
 8101fbe:	4313      	orrs	r3, r2
 8101fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	69ba      	ldr	r2, [r7, #24]
 8101fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	685b      	ldr	r3, [r3, #4]
 8101fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101fce:	2201      	movs	r2, #1
 8101fd0:	69fb      	ldr	r3, [r7, #28]
 8101fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8101fd6:	43db      	mvns	r3, r3
 8101fd8:	69ba      	ldr	r2, [r7, #24]
 8101fda:	4013      	ands	r3, r2
 8101fdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101fde:	683b      	ldr	r3, [r7, #0]
 8101fe0:	685b      	ldr	r3, [r3, #4]
 8101fe2:	091b      	lsrs	r3, r3, #4
 8101fe4:	f003 0201 	and.w	r2, r3, #1
 8101fe8:	69fb      	ldr	r3, [r7, #28]
 8101fea:	fa02 f303 	lsl.w	r3, r2, r3
 8101fee:	69ba      	ldr	r2, [r7, #24]
 8101ff0:	4313      	orrs	r3, r2
 8101ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	69ba      	ldr	r2, [r7, #24]
 8101ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101ffa:	683b      	ldr	r3, [r7, #0]
 8101ffc:	685b      	ldr	r3, [r3, #4]
 8101ffe:	f003 0303 	and.w	r3, r3, #3
 8102002:	2b03      	cmp	r3, #3
 8102004:	d017      	beq.n	8102036 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	68db      	ldr	r3, [r3, #12]
 810200a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810200c:	69fb      	ldr	r3, [r7, #28]
 810200e:	005b      	lsls	r3, r3, #1
 8102010:	2203      	movs	r2, #3
 8102012:	fa02 f303 	lsl.w	r3, r2, r3
 8102016:	43db      	mvns	r3, r3
 8102018:	69ba      	ldr	r2, [r7, #24]
 810201a:	4013      	ands	r3, r2
 810201c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810201e:	683b      	ldr	r3, [r7, #0]
 8102020:	689a      	ldr	r2, [r3, #8]
 8102022:	69fb      	ldr	r3, [r7, #28]
 8102024:	005b      	lsls	r3, r3, #1
 8102026:	fa02 f303 	lsl.w	r3, r2, r3
 810202a:	69ba      	ldr	r2, [r7, #24]
 810202c:	4313      	orrs	r3, r2
 810202e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	69ba      	ldr	r2, [r7, #24]
 8102034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102036:	683b      	ldr	r3, [r7, #0]
 8102038:	685b      	ldr	r3, [r3, #4]
 810203a:	f003 0303 	and.w	r3, r3, #3
 810203e:	2b02      	cmp	r3, #2
 8102040:	d123      	bne.n	810208a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102042:	69fb      	ldr	r3, [r7, #28]
 8102044:	08da      	lsrs	r2, r3, #3
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	3208      	adds	r2, #8
 810204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102050:	69fb      	ldr	r3, [r7, #28]
 8102052:	f003 0307 	and.w	r3, r3, #7
 8102056:	009b      	lsls	r3, r3, #2
 8102058:	220f      	movs	r2, #15
 810205a:	fa02 f303 	lsl.w	r3, r2, r3
 810205e:	43db      	mvns	r3, r3
 8102060:	69ba      	ldr	r2, [r7, #24]
 8102062:	4013      	ands	r3, r2
 8102064:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102066:	683b      	ldr	r3, [r7, #0]
 8102068:	691a      	ldr	r2, [r3, #16]
 810206a:	69fb      	ldr	r3, [r7, #28]
 810206c:	f003 0307 	and.w	r3, r3, #7
 8102070:	009b      	lsls	r3, r3, #2
 8102072:	fa02 f303 	lsl.w	r3, r2, r3
 8102076:	69ba      	ldr	r2, [r7, #24]
 8102078:	4313      	orrs	r3, r2
 810207a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810207c:	69fb      	ldr	r3, [r7, #28]
 810207e:	08da      	lsrs	r2, r3, #3
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	3208      	adds	r2, #8
 8102084:	69b9      	ldr	r1, [r7, #24]
 8102086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102090:	69fb      	ldr	r3, [r7, #28]
 8102092:	005b      	lsls	r3, r3, #1
 8102094:	2203      	movs	r2, #3
 8102096:	fa02 f303 	lsl.w	r3, r2, r3
 810209a:	43db      	mvns	r3, r3
 810209c:	69ba      	ldr	r2, [r7, #24]
 810209e:	4013      	ands	r3, r2
 81020a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81020a2:	683b      	ldr	r3, [r7, #0]
 81020a4:	685b      	ldr	r3, [r3, #4]
 81020a6:	f003 0203 	and.w	r2, r3, #3
 81020aa:	69fb      	ldr	r3, [r7, #28]
 81020ac:	005b      	lsls	r3, r3, #1
 81020ae:	fa02 f303 	lsl.w	r3, r2, r3
 81020b2:	69ba      	ldr	r2, [r7, #24]
 81020b4:	4313      	orrs	r3, r2
 81020b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	69ba      	ldr	r2, [r7, #24]
 81020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81020be:	683b      	ldr	r3, [r7, #0]
 81020c0:	685b      	ldr	r3, [r3, #4]
 81020c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020c6:	2b00      	cmp	r3, #0
 81020c8:	f000 80e0 	beq.w	810228c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81020cc:	4b2f      	ldr	r3, [pc, #188]	; (810218c <HAL_GPIO_Init+0x238>)
 81020ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020d2:	4a2e      	ldr	r2, [pc, #184]	; (810218c <HAL_GPIO_Init+0x238>)
 81020d4:	f043 0302 	orr.w	r3, r3, #2
 81020d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81020dc:	4b2b      	ldr	r3, [pc, #172]	; (810218c <HAL_GPIO_Init+0x238>)
 81020de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020e2:	f003 0302 	and.w	r3, r3, #2
 81020e6:	60fb      	str	r3, [r7, #12]
 81020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81020ea:	4a29      	ldr	r2, [pc, #164]	; (8102190 <HAL_GPIO_Init+0x23c>)
 81020ec:	69fb      	ldr	r3, [r7, #28]
 81020ee:	089b      	lsrs	r3, r3, #2
 81020f0:	3302      	adds	r3, #2
 81020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81020f8:	69fb      	ldr	r3, [r7, #28]
 81020fa:	f003 0303 	and.w	r3, r3, #3
 81020fe:	009b      	lsls	r3, r3, #2
 8102100:	220f      	movs	r2, #15
 8102102:	fa02 f303 	lsl.w	r3, r2, r3
 8102106:	43db      	mvns	r3, r3
 8102108:	69ba      	ldr	r2, [r7, #24]
 810210a:	4013      	ands	r3, r2
 810210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	4a20      	ldr	r2, [pc, #128]	; (8102194 <HAL_GPIO_Init+0x240>)
 8102112:	4293      	cmp	r3, r2
 8102114:	d052      	beq.n	81021bc <HAL_GPIO_Init+0x268>
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	4a1f      	ldr	r2, [pc, #124]	; (8102198 <HAL_GPIO_Init+0x244>)
 810211a:	4293      	cmp	r3, r2
 810211c:	d031      	beq.n	8102182 <HAL_GPIO_Init+0x22e>
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	4a1e      	ldr	r2, [pc, #120]	; (810219c <HAL_GPIO_Init+0x248>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d02b      	beq.n	810217e <HAL_GPIO_Init+0x22a>
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	4a1d      	ldr	r2, [pc, #116]	; (81021a0 <HAL_GPIO_Init+0x24c>)
 810212a:	4293      	cmp	r3, r2
 810212c:	d025      	beq.n	810217a <HAL_GPIO_Init+0x226>
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	4a1c      	ldr	r2, [pc, #112]	; (81021a4 <HAL_GPIO_Init+0x250>)
 8102132:	4293      	cmp	r3, r2
 8102134:	d01f      	beq.n	8102176 <HAL_GPIO_Init+0x222>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	4a1b      	ldr	r2, [pc, #108]	; (81021a8 <HAL_GPIO_Init+0x254>)
 810213a:	4293      	cmp	r3, r2
 810213c:	d019      	beq.n	8102172 <HAL_GPIO_Init+0x21e>
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	4a1a      	ldr	r2, [pc, #104]	; (81021ac <HAL_GPIO_Init+0x258>)
 8102142:	4293      	cmp	r3, r2
 8102144:	d013      	beq.n	810216e <HAL_GPIO_Init+0x21a>
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	4a19      	ldr	r2, [pc, #100]	; (81021b0 <HAL_GPIO_Init+0x25c>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d00d      	beq.n	810216a <HAL_GPIO_Init+0x216>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	4a18      	ldr	r2, [pc, #96]	; (81021b4 <HAL_GPIO_Init+0x260>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d007      	beq.n	8102166 <HAL_GPIO_Init+0x212>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	4a17      	ldr	r2, [pc, #92]	; (81021b8 <HAL_GPIO_Init+0x264>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d101      	bne.n	8102162 <HAL_GPIO_Init+0x20e>
 810215e:	2309      	movs	r3, #9
 8102160:	e02d      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102162:	230a      	movs	r3, #10
 8102164:	e02b      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102166:	2308      	movs	r3, #8
 8102168:	e029      	b.n	81021be <HAL_GPIO_Init+0x26a>
 810216a:	2307      	movs	r3, #7
 810216c:	e027      	b.n	81021be <HAL_GPIO_Init+0x26a>
 810216e:	2306      	movs	r3, #6
 8102170:	e025      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102172:	2305      	movs	r3, #5
 8102174:	e023      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102176:	2304      	movs	r3, #4
 8102178:	e021      	b.n	81021be <HAL_GPIO_Init+0x26a>
 810217a:	2303      	movs	r3, #3
 810217c:	e01f      	b.n	81021be <HAL_GPIO_Init+0x26a>
 810217e:	2302      	movs	r3, #2
 8102180:	e01d      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102182:	2301      	movs	r3, #1
 8102184:	e01b      	b.n	81021be <HAL_GPIO_Init+0x26a>
 8102186:	bf00      	nop
 8102188:	580000c0 	.word	0x580000c0
 810218c:	58024400 	.word	0x58024400
 8102190:	58000400 	.word	0x58000400
 8102194:	58020000 	.word	0x58020000
 8102198:	58020400 	.word	0x58020400
 810219c:	58020800 	.word	0x58020800
 81021a0:	58020c00 	.word	0x58020c00
 81021a4:	58021000 	.word	0x58021000
 81021a8:	58021400 	.word	0x58021400
 81021ac:	58021800 	.word	0x58021800
 81021b0:	58021c00 	.word	0x58021c00
 81021b4:	58022000 	.word	0x58022000
 81021b8:	58022400 	.word	0x58022400
 81021bc:	2300      	movs	r3, #0
 81021be:	69fa      	ldr	r2, [r7, #28]
 81021c0:	f002 0203 	and.w	r2, r2, #3
 81021c4:	0092      	lsls	r2, r2, #2
 81021c6:	4093      	lsls	r3, r2
 81021c8:	69ba      	ldr	r2, [r7, #24]
 81021ca:	4313      	orrs	r3, r2
 81021cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81021ce:	4938      	ldr	r1, [pc, #224]	; (81022b0 <HAL_GPIO_Init+0x35c>)
 81021d0:	69fb      	ldr	r3, [r7, #28]
 81021d2:	089b      	lsrs	r3, r3, #2
 81021d4:	3302      	adds	r3, #2
 81021d6:	69ba      	ldr	r2, [r7, #24]
 81021d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81021e0:	681b      	ldr	r3, [r3, #0]
 81021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021e4:	693b      	ldr	r3, [r7, #16]
 81021e6:	43db      	mvns	r3, r3
 81021e8:	69ba      	ldr	r2, [r7, #24]
 81021ea:	4013      	ands	r3, r2
 81021ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81021ee:	683b      	ldr	r3, [r7, #0]
 81021f0:	685b      	ldr	r3, [r3, #4]
 81021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d003      	beq.n	8102202 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81021fa:	69ba      	ldr	r2, [r7, #24]
 81021fc:	693b      	ldr	r3, [r7, #16]
 81021fe:	4313      	orrs	r3, r2
 8102200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102206:	69bb      	ldr	r3, [r7, #24]
 8102208:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810220e:	685b      	ldr	r3, [r3, #4]
 8102210:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102212:	693b      	ldr	r3, [r7, #16]
 8102214:	43db      	mvns	r3, r3
 8102216:	69ba      	ldr	r2, [r7, #24]
 8102218:	4013      	ands	r3, r2
 810221a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810221c:	683b      	ldr	r3, [r7, #0]
 810221e:	685b      	ldr	r3, [r3, #4]
 8102220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102224:	2b00      	cmp	r3, #0
 8102226:	d003      	beq.n	8102230 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102228:	69ba      	ldr	r2, [r7, #24]
 810222a:	693b      	ldr	r3, [r7, #16]
 810222c:	4313      	orrs	r3, r2
 810222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102234:	69bb      	ldr	r3, [r7, #24]
 8102236:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102238:	697b      	ldr	r3, [r7, #20]
 810223a:	685b      	ldr	r3, [r3, #4]
 810223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810223e:	693b      	ldr	r3, [r7, #16]
 8102240:	43db      	mvns	r3, r3
 8102242:	69ba      	ldr	r2, [r7, #24]
 8102244:	4013      	ands	r3, r2
 8102246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102248:	683b      	ldr	r3, [r7, #0]
 810224a:	685b      	ldr	r3, [r3, #4]
 810224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102250:	2b00      	cmp	r3, #0
 8102252:	d003      	beq.n	810225c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102254:	69ba      	ldr	r2, [r7, #24]
 8102256:	693b      	ldr	r3, [r7, #16]
 8102258:	4313      	orrs	r3, r2
 810225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810225c:	697b      	ldr	r3, [r7, #20]
 810225e:	69ba      	ldr	r2, [r7, #24]
 8102260:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102262:	697b      	ldr	r3, [r7, #20]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102268:	693b      	ldr	r3, [r7, #16]
 810226a:	43db      	mvns	r3, r3
 810226c:	69ba      	ldr	r2, [r7, #24]
 810226e:	4013      	ands	r3, r2
 8102270:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102272:	683b      	ldr	r3, [r7, #0]
 8102274:	685b      	ldr	r3, [r3, #4]
 8102276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810227a:	2b00      	cmp	r3, #0
 810227c:	d003      	beq.n	8102286 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810227e:	69ba      	ldr	r2, [r7, #24]
 8102280:	693b      	ldr	r3, [r7, #16]
 8102282:	4313      	orrs	r3, r2
 8102284:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102286:	697b      	ldr	r3, [r7, #20]
 8102288:	69ba      	ldr	r2, [r7, #24]
 810228a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810228c:	69fb      	ldr	r3, [r7, #28]
 810228e:	3301      	adds	r3, #1
 8102290:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102292:	683b      	ldr	r3, [r7, #0]
 8102294:	681a      	ldr	r2, [r3, #0]
 8102296:	69fb      	ldr	r3, [r7, #28]
 8102298:	fa22 f303 	lsr.w	r3, r2, r3
 810229c:	2b00      	cmp	r3, #0
 810229e:	f47f ae63 	bne.w	8101f68 <HAL_GPIO_Init+0x14>
  }
}
 81022a2:	bf00      	nop
 81022a4:	bf00      	nop
 81022a6:	3724      	adds	r7, #36	; 0x24
 81022a8:	46bd      	mov	sp, r7
 81022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ae:	4770      	bx	lr
 81022b0:	58000400 	.word	0x58000400

081022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81022b4:	b480      	push	{r7}
 81022b6:	b083      	sub	sp, #12
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	6078      	str	r0, [r7, #4]
 81022bc:	460b      	mov	r3, r1
 81022be:	807b      	strh	r3, [r7, #2]
 81022c0:	4613      	mov	r3, r2
 81022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81022c4:	787b      	ldrb	r3, [r7, #1]
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d003      	beq.n	81022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81022ca:	887a      	ldrh	r2, [r7, #2]
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81022d0:	e003      	b.n	81022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81022d2:	887b      	ldrh	r3, [r7, #2]
 81022d4:	041a      	lsls	r2, r3, #16
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	619a      	str	r2, [r3, #24]
}
 81022da:	bf00      	nop
 81022dc:	370c      	adds	r7, #12
 81022de:	46bd      	mov	sp, r7
 81022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e4:	4770      	bx	lr

081022e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81022e6:	b480      	push	{r7}
 81022e8:	b085      	sub	sp, #20
 81022ea:	af00      	add	r7, sp, #0
 81022ec:	6078      	str	r0, [r7, #4]
 81022ee:	460b      	mov	r3, r1
 81022f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	695b      	ldr	r3, [r3, #20]
 81022f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81022f8:	887a      	ldrh	r2, [r7, #2]
 81022fa:	68fb      	ldr	r3, [r7, #12]
 81022fc:	4013      	ands	r3, r2
 81022fe:	041a      	lsls	r2, r3, #16
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	43d9      	mvns	r1, r3
 8102304:	887b      	ldrh	r3, [r7, #2]
 8102306:	400b      	ands	r3, r1
 8102308:	431a      	orrs	r2, r3
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	619a      	str	r2, [r3, #24]
}
 810230e:	bf00      	nop
 8102310:	3714      	adds	r7, #20
 8102312:	46bd      	mov	sp, r7
 8102314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102318:	4770      	bx	lr
	...

0810231c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810231c:	b480      	push	{r7}
 810231e:	b083      	sub	sp, #12
 8102320:	af00      	add	r7, sp, #0
 8102322:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102324:	4b05      	ldr	r3, [pc, #20]	; (810233c <HAL_HSEM_ActivateNotification+0x20>)
 8102326:	681a      	ldr	r2, [r3, #0]
 8102328:	4904      	ldr	r1, [pc, #16]	; (810233c <HAL_HSEM_ActivateNotification+0x20>)
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	4313      	orrs	r3, r2
 810232e:	600b      	str	r3, [r1, #0]
#endif
}
 8102330:	bf00      	nop
 8102332:	370c      	adds	r7, #12
 8102334:	46bd      	mov	sp, r7
 8102336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810233a:	4770      	bx	lr
 810233c:	58026510 	.word	0x58026510

08102340 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8102340:	b580      	push	{r7, lr}
 8102342:	b082      	sub	sp, #8
 8102344:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8102346:	4b0a      	ldr	r3, [pc, #40]	; (8102370 <HAL_HSEM_IRQHandler+0x30>)
 8102348:	68db      	ldr	r3, [r3, #12]
 810234a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810234c:	4b08      	ldr	r3, [pc, #32]	; (8102370 <HAL_HSEM_IRQHandler+0x30>)
 810234e:	681a      	ldr	r2, [r3, #0]
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	43db      	mvns	r3, r3
 8102354:	4906      	ldr	r1, [pc, #24]	; (8102370 <HAL_HSEM_IRQHandler+0x30>)
 8102356:	4013      	ands	r3, r2
 8102358:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810235a:	4a05      	ldr	r2, [pc, #20]	; (8102370 <HAL_HSEM_IRQHandler+0x30>)
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8102360:	6878      	ldr	r0, [r7, #4]
 8102362:	f7fe ffd7 	bl	8101314 <HAL_HSEM_FreeCallback>
}
 8102366:	bf00      	nop
 8102368:	3708      	adds	r7, #8
 810236a:	46bd      	mov	sp, r7
 810236c:	bd80      	pop	{r7, pc}
 810236e:	bf00      	nop
 8102370:	58026510 	.word	0x58026510

08102374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102374:	b580      	push	{r7, lr}
 8102376:	b082      	sub	sp, #8
 8102378:	af00      	add	r7, sp, #0
 810237a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	2b00      	cmp	r3, #0
 8102380:	d101      	bne.n	8102386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102382:	2301      	movs	r3, #1
 8102384:	e081      	b.n	810248a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810238c:	b2db      	uxtb	r3, r3
 810238e:	2b00      	cmp	r3, #0
 8102390:	d106      	bne.n	81023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	2200      	movs	r2, #0
 8102396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810239a:	6878      	ldr	r0, [r7, #4]
 810239c:	f7ff f9ec 	bl	8101778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	2224      	movs	r2, #36	; 0x24
 81023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	681a      	ldr	r2, [r3, #0]
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	f022 0201 	bic.w	r2, r2, #1
 81023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	685a      	ldr	r2, [r3, #4]
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81023c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	689a      	ldr	r2, [r3, #8]
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	681b      	ldr	r3, [r3, #0]
 81023d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	68db      	ldr	r3, [r3, #12]
 81023da:	2b01      	cmp	r3, #1
 81023dc:	d107      	bne.n	81023ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	689a      	ldr	r2, [r3, #8]
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81023ea:	609a      	str	r2, [r3, #8]
 81023ec:	e006      	b.n	81023fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	689a      	ldr	r2, [r3, #8]
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81023fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	68db      	ldr	r3, [r3, #12]
 8102400:	2b02      	cmp	r3, #2
 8102402:	d104      	bne.n	810240e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810240c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	685b      	ldr	r3, [r3, #4]
 8102414:	687a      	ldr	r2, [r7, #4]
 8102416:	6812      	ldr	r2, [r2, #0]
 8102418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810241c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102420:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	68da      	ldr	r2, [r3, #12]
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102430:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	691a      	ldr	r2, [r3, #16]
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	695b      	ldr	r3, [r3, #20]
 810243a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	699b      	ldr	r3, [r3, #24]
 8102442:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	430a      	orrs	r2, r1
 810244a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	69d9      	ldr	r1, [r3, #28]
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	6a1a      	ldr	r2, [r3, #32]
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	430a      	orrs	r2, r1
 810245a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	681a      	ldr	r2, [r3, #0]
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	f042 0201 	orr.w	r2, r2, #1
 810246a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	2200      	movs	r2, #0
 8102470:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	2220      	movs	r2, #32
 8102476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	2200      	movs	r2, #0
 810247e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	2200      	movs	r2, #0
 8102484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102488:	2300      	movs	r3, #0
}
 810248a:	4618      	mov	r0, r3
 810248c:	3708      	adds	r7, #8
 810248e:	46bd      	mov	sp, r7
 8102490:	bd80      	pop	{r7, pc}
	...

08102494 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8102494:	b580      	push	{r7, lr}
 8102496:	b088      	sub	sp, #32
 8102498:	af02      	add	r7, sp, #8
 810249a:	60f8      	str	r0, [r7, #12]
 810249c:	607a      	str	r2, [r7, #4]
 810249e:	461a      	mov	r2, r3
 81024a0:	460b      	mov	r3, r1
 81024a2:	817b      	strh	r3, [r7, #10]
 81024a4:	4613      	mov	r3, r2
 81024a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81024ae:	b2db      	uxtb	r3, r3
 81024b0:	2b20      	cmp	r3, #32
 81024b2:	f040 80da 	bne.w	810266a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81024b6:	68fb      	ldr	r3, [r7, #12]
 81024b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81024bc:	2b01      	cmp	r3, #1
 81024be:	d101      	bne.n	81024c4 <HAL_I2C_Master_Transmit+0x30>
 81024c0:	2302      	movs	r3, #2
 81024c2:	e0d3      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
 81024c4:	68fb      	ldr	r3, [r7, #12]
 81024c6:	2201      	movs	r2, #1
 81024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81024cc:	f7ff fc42 	bl	8101d54 <HAL_GetTick>
 81024d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81024d2:	697b      	ldr	r3, [r7, #20]
 81024d4:	9300      	str	r3, [sp, #0]
 81024d6:	2319      	movs	r3, #25
 81024d8:	2201      	movs	r2, #1
 81024da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81024de:	68f8      	ldr	r0, [r7, #12]
 81024e0:	f000 faed 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81024e4:	4603      	mov	r3, r0
 81024e6:	2b00      	cmp	r3, #0
 81024e8:	d001      	beq.n	81024ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81024ea:	2301      	movs	r3, #1
 81024ec:	e0be      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81024ee:	68fb      	ldr	r3, [r7, #12]
 81024f0:	2221      	movs	r2, #33	; 0x21
 81024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81024f6:	68fb      	ldr	r3, [r7, #12]
 81024f8:	2210      	movs	r2, #16
 81024fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81024fe:	68fb      	ldr	r3, [r7, #12]
 8102500:	2200      	movs	r2, #0
 8102502:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102504:	68fb      	ldr	r3, [r7, #12]
 8102506:	687a      	ldr	r2, [r7, #4]
 8102508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	893a      	ldrh	r2, [r7, #8]
 810250e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	2200      	movs	r2, #0
 8102514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810251a:	b29b      	uxth	r3, r3
 810251c:	2bff      	cmp	r3, #255	; 0xff
 810251e:	d90e      	bls.n	810253e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102520:	68fb      	ldr	r3, [r7, #12]
 8102522:	22ff      	movs	r2, #255	; 0xff
 8102524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102526:	68fb      	ldr	r3, [r7, #12]
 8102528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810252a:	b2da      	uxtb	r2, r3
 810252c:	8979      	ldrh	r1, [r7, #10]
 810252e:	4b51      	ldr	r3, [pc, #324]	; (8102674 <HAL_I2C_Master_Transmit+0x1e0>)
 8102530:	9300      	str	r3, [sp, #0]
 8102532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102536:	68f8      	ldr	r0, [r7, #12]
 8102538:	f000 fce4 	bl	8102f04 <I2C_TransferConfig>
 810253c:	e06c      	b.n	8102618 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810253e:	68fb      	ldr	r3, [r7, #12]
 8102540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102542:	b29a      	uxth	r2, r3
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810254c:	b2da      	uxtb	r2, r3
 810254e:	8979      	ldrh	r1, [r7, #10]
 8102550:	4b48      	ldr	r3, [pc, #288]	; (8102674 <HAL_I2C_Master_Transmit+0x1e0>)
 8102552:	9300      	str	r3, [sp, #0]
 8102554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102558:	68f8      	ldr	r0, [r7, #12]
 810255a:	f000 fcd3 	bl	8102f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 810255e:	e05b      	b.n	8102618 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102560:	697a      	ldr	r2, [r7, #20]
 8102562:	6a39      	ldr	r1, [r7, #32]
 8102564:	68f8      	ldr	r0, [r7, #12]
 8102566:	f000 faea 	bl	8102b3e <I2C_WaitOnTXISFlagUntilTimeout>
 810256a:	4603      	mov	r3, r0
 810256c:	2b00      	cmp	r3, #0
 810256e:	d001      	beq.n	8102574 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8102570:	2301      	movs	r3, #1
 8102572:	e07b      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102574:	68fb      	ldr	r3, [r7, #12]
 8102576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102578:	781a      	ldrb	r2, [r3, #0]
 810257a:	68fb      	ldr	r3, [r7, #12]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102580:	68fb      	ldr	r3, [r7, #12]
 8102582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102584:	1c5a      	adds	r2, r3, #1
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810258a:	68fb      	ldr	r3, [r7, #12]
 810258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810258e:	b29b      	uxth	r3, r3
 8102590:	3b01      	subs	r3, #1
 8102592:	b29a      	uxth	r2, r3
 8102594:	68fb      	ldr	r3, [r7, #12]
 8102596:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102598:	68fb      	ldr	r3, [r7, #12]
 810259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810259c:	3b01      	subs	r3, #1
 810259e:	b29a      	uxth	r2, r3
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025a8:	b29b      	uxth	r3, r3
 81025aa:	2b00      	cmp	r3, #0
 81025ac:	d034      	beq.n	8102618 <HAL_I2C_Master_Transmit+0x184>
 81025ae:	68fb      	ldr	r3, [r7, #12]
 81025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025b2:	2b00      	cmp	r3, #0
 81025b4:	d130      	bne.n	8102618 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81025b6:	697b      	ldr	r3, [r7, #20]
 81025b8:	9300      	str	r3, [sp, #0]
 81025ba:	6a3b      	ldr	r3, [r7, #32]
 81025bc:	2200      	movs	r2, #0
 81025be:	2180      	movs	r1, #128	; 0x80
 81025c0:	68f8      	ldr	r0, [r7, #12]
 81025c2:	f000 fa7c 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81025c6:	4603      	mov	r3, r0
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d001      	beq.n	81025d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81025cc:	2301      	movs	r3, #1
 81025ce:	e04d      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025d4:	b29b      	uxth	r3, r3
 81025d6:	2bff      	cmp	r3, #255	; 0xff
 81025d8:	d90e      	bls.n	81025f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81025da:	68fb      	ldr	r3, [r7, #12]
 81025dc:	22ff      	movs	r2, #255	; 0xff
 81025de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81025e0:	68fb      	ldr	r3, [r7, #12]
 81025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025e4:	b2da      	uxtb	r2, r3
 81025e6:	8979      	ldrh	r1, [r7, #10]
 81025e8:	2300      	movs	r3, #0
 81025ea:	9300      	str	r3, [sp, #0]
 81025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81025f0:	68f8      	ldr	r0, [r7, #12]
 81025f2:	f000 fc87 	bl	8102f04 <I2C_TransferConfig>
 81025f6:	e00f      	b.n	8102618 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025fc:	b29a      	uxth	r2, r3
 81025fe:	68fb      	ldr	r3, [r7, #12]
 8102600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102602:	68fb      	ldr	r3, [r7, #12]
 8102604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102606:	b2da      	uxtb	r2, r3
 8102608:	8979      	ldrh	r1, [r7, #10]
 810260a:	2300      	movs	r3, #0
 810260c:	9300      	str	r3, [sp, #0]
 810260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102612:	68f8      	ldr	r0, [r7, #12]
 8102614:	f000 fc76 	bl	8102f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102618:	68fb      	ldr	r3, [r7, #12]
 810261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810261c:	b29b      	uxth	r3, r3
 810261e:	2b00      	cmp	r3, #0
 8102620:	d19e      	bne.n	8102560 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102622:	697a      	ldr	r2, [r7, #20]
 8102624:	6a39      	ldr	r1, [r7, #32]
 8102626:	68f8      	ldr	r0, [r7, #12]
 8102628:	f000 fac9 	bl	8102bbe <I2C_WaitOnSTOPFlagUntilTimeout>
 810262c:	4603      	mov	r3, r0
 810262e:	2b00      	cmp	r3, #0
 8102630:	d001      	beq.n	8102636 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8102632:	2301      	movs	r3, #1
 8102634:	e01a      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	2220      	movs	r2, #32
 810263c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810263e:	68fb      	ldr	r3, [r7, #12]
 8102640:	681b      	ldr	r3, [r3, #0]
 8102642:	6859      	ldr	r1, [r3, #4]
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	681a      	ldr	r2, [r3, #0]
 8102648:	4b0b      	ldr	r3, [pc, #44]	; (8102678 <HAL_I2C_Master_Transmit+0x1e4>)
 810264a:	400b      	ands	r3, r1
 810264c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	2220      	movs	r2, #32
 8102652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102656:	68fb      	ldr	r3, [r7, #12]
 8102658:	2200      	movs	r2, #0
 810265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	2200      	movs	r2, #0
 8102662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102666:	2300      	movs	r3, #0
 8102668:	e000      	b.n	810266c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 810266a:	2302      	movs	r3, #2
  }
}
 810266c:	4618      	mov	r0, r3
 810266e:	3718      	adds	r7, #24
 8102670:	46bd      	mov	sp, r7
 8102672:	bd80      	pop	{r7, pc}
 8102674:	80002000 	.word	0x80002000
 8102678:	fe00e800 	.word	0xfe00e800

0810267c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 810267c:	b580      	push	{r7, lr}
 810267e:	b088      	sub	sp, #32
 8102680:	af02      	add	r7, sp, #8
 8102682:	60f8      	str	r0, [r7, #12]
 8102684:	607a      	str	r2, [r7, #4]
 8102686:	461a      	mov	r2, r3
 8102688:	460b      	mov	r3, r1
 810268a:	817b      	strh	r3, [r7, #10]
 810268c:	4613      	mov	r3, r2
 810268e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102690:	68fb      	ldr	r3, [r7, #12]
 8102692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102696:	b2db      	uxtb	r3, r3
 8102698:	2b20      	cmp	r3, #32
 810269a:	f040 80db 	bne.w	8102854 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810269e:	68fb      	ldr	r3, [r7, #12]
 81026a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81026a4:	2b01      	cmp	r3, #1
 81026a6:	d101      	bne.n	81026ac <HAL_I2C_Master_Receive+0x30>
 81026a8:	2302      	movs	r3, #2
 81026aa:	e0d4      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	2201      	movs	r2, #1
 81026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81026b4:	f7ff fb4e 	bl	8101d54 <HAL_GetTick>
 81026b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81026ba:	697b      	ldr	r3, [r7, #20]
 81026bc:	9300      	str	r3, [sp, #0]
 81026be:	2319      	movs	r3, #25
 81026c0:	2201      	movs	r2, #1
 81026c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81026c6:	68f8      	ldr	r0, [r7, #12]
 81026c8:	f000 f9f9 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81026cc:	4603      	mov	r3, r0
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d001      	beq.n	81026d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81026d2:	2301      	movs	r3, #1
 81026d4:	e0bf      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	2222      	movs	r2, #34	; 0x22
 81026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81026de:	68fb      	ldr	r3, [r7, #12]
 81026e0:	2210      	movs	r2, #16
 81026e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81026e6:	68fb      	ldr	r3, [r7, #12]
 81026e8:	2200      	movs	r2, #0
 81026ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	687a      	ldr	r2, [r7, #4]
 81026f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81026f2:	68fb      	ldr	r3, [r7, #12]
 81026f4:	893a      	ldrh	r2, [r7, #8]
 81026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	2200      	movs	r2, #0
 81026fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102702:	b29b      	uxth	r3, r3
 8102704:	2bff      	cmp	r3, #255	; 0xff
 8102706:	d90e      	bls.n	8102726 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	22ff      	movs	r2, #255	; 0xff
 810270c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810270e:	68fb      	ldr	r3, [r7, #12]
 8102710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102712:	b2da      	uxtb	r2, r3
 8102714:	8979      	ldrh	r1, [r7, #10]
 8102716:	4b52      	ldr	r3, [pc, #328]	; (8102860 <HAL_I2C_Master_Receive+0x1e4>)
 8102718:	9300      	str	r3, [sp, #0]
 810271a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810271e:	68f8      	ldr	r0, [r7, #12]
 8102720:	f000 fbf0 	bl	8102f04 <I2C_TransferConfig>
 8102724:	e06d      	b.n	8102802 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810272a:	b29a      	uxth	r2, r3
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102734:	b2da      	uxtb	r2, r3
 8102736:	8979      	ldrh	r1, [r7, #10]
 8102738:	4b49      	ldr	r3, [pc, #292]	; (8102860 <HAL_I2C_Master_Receive+0x1e4>)
 810273a:	9300      	str	r3, [sp, #0]
 810273c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102740:	68f8      	ldr	r0, [r7, #12]
 8102742:	f000 fbdf 	bl	8102f04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8102746:	e05c      	b.n	8102802 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102748:	697a      	ldr	r2, [r7, #20]
 810274a:	6a39      	ldr	r1, [r7, #32]
 810274c:	68f8      	ldr	r0, [r7, #12]
 810274e:	f000 fa73 	bl	8102c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8102752:	4603      	mov	r3, r0
 8102754:	2b00      	cmp	r3, #0
 8102756:	d001      	beq.n	810275c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8102758:	2301      	movs	r3, #1
 810275a:	e07c      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	681b      	ldr	r3, [r3, #0]
 8102760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102766:	b2d2      	uxtb	r2, r2
 8102768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810276a:	68fb      	ldr	r3, [r7, #12]
 810276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810276e:	1c5a      	adds	r2, r3, #1
 8102770:	68fb      	ldr	r3, [r7, #12]
 8102772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102774:	68fb      	ldr	r3, [r7, #12]
 8102776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102778:	3b01      	subs	r3, #1
 810277a:	b29a      	uxth	r2, r3
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102780:	68fb      	ldr	r3, [r7, #12]
 8102782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102784:	b29b      	uxth	r3, r3
 8102786:	3b01      	subs	r3, #1
 8102788:	b29a      	uxth	r2, r3
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102792:	b29b      	uxth	r3, r3
 8102794:	2b00      	cmp	r3, #0
 8102796:	d034      	beq.n	8102802 <HAL_I2C_Master_Receive+0x186>
 8102798:	68fb      	ldr	r3, [r7, #12]
 810279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810279c:	2b00      	cmp	r3, #0
 810279e:	d130      	bne.n	8102802 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81027a0:	697b      	ldr	r3, [r7, #20]
 81027a2:	9300      	str	r3, [sp, #0]
 81027a4:	6a3b      	ldr	r3, [r7, #32]
 81027a6:	2200      	movs	r2, #0
 81027a8:	2180      	movs	r1, #128	; 0x80
 81027aa:	68f8      	ldr	r0, [r7, #12]
 81027ac:	f000 f987 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81027b0:	4603      	mov	r3, r0
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d001      	beq.n	81027ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81027b6:	2301      	movs	r3, #1
 81027b8:	e04d      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81027ba:	68fb      	ldr	r3, [r7, #12]
 81027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027be:	b29b      	uxth	r3, r3
 81027c0:	2bff      	cmp	r3, #255	; 0xff
 81027c2:	d90e      	bls.n	81027e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	22ff      	movs	r2, #255	; 0xff
 81027c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81027ca:	68fb      	ldr	r3, [r7, #12]
 81027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027ce:	b2da      	uxtb	r2, r3
 81027d0:	8979      	ldrh	r1, [r7, #10]
 81027d2:	2300      	movs	r3, #0
 81027d4:	9300      	str	r3, [sp, #0]
 81027d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81027da:	68f8      	ldr	r0, [r7, #12]
 81027dc:	f000 fb92 	bl	8102f04 <I2C_TransferConfig>
 81027e0:	e00f      	b.n	8102802 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027e6:	b29a      	uxth	r2, r3
 81027e8:	68fb      	ldr	r3, [r7, #12]
 81027ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81027ec:	68fb      	ldr	r3, [r7, #12]
 81027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027f0:	b2da      	uxtb	r2, r3
 81027f2:	8979      	ldrh	r1, [r7, #10]
 81027f4:	2300      	movs	r3, #0
 81027f6:	9300      	str	r3, [sp, #0]
 81027f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81027fc:	68f8      	ldr	r0, [r7, #12]
 81027fe:	f000 fb81 	bl	8102f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102802:	68fb      	ldr	r3, [r7, #12]
 8102804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102806:	b29b      	uxth	r3, r3
 8102808:	2b00      	cmp	r3, #0
 810280a:	d19d      	bne.n	8102748 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810280c:	697a      	ldr	r2, [r7, #20]
 810280e:	6a39      	ldr	r1, [r7, #32]
 8102810:	68f8      	ldr	r0, [r7, #12]
 8102812:	f000 f9d4 	bl	8102bbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8102816:	4603      	mov	r3, r0
 8102818:	2b00      	cmp	r3, #0
 810281a:	d001      	beq.n	8102820 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810281c:	2301      	movs	r3, #1
 810281e:	e01a      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	681b      	ldr	r3, [r3, #0]
 8102824:	2220      	movs	r2, #32
 8102826:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102828:	68fb      	ldr	r3, [r7, #12]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	6859      	ldr	r1, [r3, #4]
 810282e:	68fb      	ldr	r3, [r7, #12]
 8102830:	681a      	ldr	r2, [r3, #0]
 8102832:	4b0c      	ldr	r3, [pc, #48]	; (8102864 <HAL_I2C_Master_Receive+0x1e8>)
 8102834:	400b      	ands	r3, r1
 8102836:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	2220      	movs	r2, #32
 810283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	2200      	movs	r2, #0
 8102844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	2200      	movs	r2, #0
 810284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102850:	2300      	movs	r3, #0
 8102852:	e000      	b.n	8102856 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8102854:	2302      	movs	r3, #2
  }
}
 8102856:	4618      	mov	r0, r3
 8102858:	3718      	adds	r7, #24
 810285a:	46bd      	mov	sp, r7
 810285c:	bd80      	pop	{r7, pc}
 810285e:	bf00      	nop
 8102860:	80002400 	.word	0x80002400
 8102864:	fe00e800 	.word	0xfe00e800

08102868 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8102868:	b580      	push	{r7, lr}
 810286a:	b08a      	sub	sp, #40	; 0x28
 810286c:	af02      	add	r7, sp, #8
 810286e:	60f8      	str	r0, [r7, #12]
 8102870:	607a      	str	r2, [r7, #4]
 8102872:	603b      	str	r3, [r7, #0]
 8102874:	460b      	mov	r3, r1
 8102876:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8102878:	2300      	movs	r3, #0
 810287a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810287c:	68fb      	ldr	r3, [r7, #12]
 810287e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102882:	b2db      	uxtb	r3, r3
 8102884:	2b20      	cmp	r3, #32
 8102886:	f040 80f1 	bne.w	8102a6c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 810288a:	68fb      	ldr	r3, [r7, #12]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	699b      	ldr	r3, [r3, #24]
 8102890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102898:	d101      	bne.n	810289e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 810289a:	2302      	movs	r3, #2
 810289c:	e0e7      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81028a4:	2b01      	cmp	r3, #1
 81028a6:	d101      	bne.n	81028ac <HAL_I2C_IsDeviceReady+0x44>
 81028a8:	2302      	movs	r3, #2
 81028aa:	e0e0      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	2201      	movs	r2, #1
 81028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	2224      	movs	r2, #36	; 0x24
 81028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	2200      	movs	r2, #0
 81028c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	68db      	ldr	r3, [r3, #12]
 81028c6:	2b01      	cmp	r3, #1
 81028c8:	d107      	bne.n	81028da <HAL_I2C_IsDeviceReady+0x72>
 81028ca:	897b      	ldrh	r3, [r7, #10]
 81028cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81028d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81028d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81028d8:	e004      	b.n	81028e4 <HAL_I2C_IsDeviceReady+0x7c>
 81028da:	897b      	ldrh	r3, [r7, #10]
 81028dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81028e0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 81028e4:	68fa      	ldr	r2, [r7, #12]
 81028e6:	6812      	ldr	r2, [r2, #0]
 81028e8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 81028ea:	f7ff fa33 	bl	8101d54 <HAL_GetTick>
 81028ee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	699b      	ldr	r3, [r3, #24]
 81028f6:	f003 0320 	and.w	r3, r3, #32
 81028fa:	2b20      	cmp	r3, #32
 81028fc:	bf0c      	ite	eq
 81028fe:	2301      	moveq	r3, #1
 8102900:	2300      	movne	r3, #0
 8102902:	b2db      	uxtb	r3, r3
 8102904:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102906:	68fb      	ldr	r3, [r7, #12]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	699b      	ldr	r3, [r3, #24]
 810290c:	f003 0310 	and.w	r3, r3, #16
 8102910:	2b10      	cmp	r3, #16
 8102912:	bf0c      	ite	eq
 8102914:	2301      	moveq	r3, #1
 8102916:	2300      	movne	r3, #0
 8102918:	b2db      	uxtb	r3, r3
 810291a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 810291c:	e034      	b.n	8102988 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 810291e:	683b      	ldr	r3, [r7, #0]
 8102920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102924:	d01a      	beq.n	810295c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102926:	f7ff fa15 	bl	8101d54 <HAL_GetTick>
 810292a:	4602      	mov	r2, r0
 810292c:	69bb      	ldr	r3, [r7, #24]
 810292e:	1ad3      	subs	r3, r2, r3
 8102930:	683a      	ldr	r2, [r7, #0]
 8102932:	429a      	cmp	r2, r3
 8102934:	d302      	bcc.n	810293c <HAL_I2C_IsDeviceReady+0xd4>
 8102936:	683b      	ldr	r3, [r7, #0]
 8102938:	2b00      	cmp	r3, #0
 810293a:	d10f      	bne.n	810295c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 810293c:	68fb      	ldr	r3, [r7, #12]
 810293e:	2220      	movs	r2, #32
 8102940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102944:	68fb      	ldr	r3, [r7, #12]
 8102946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102948:	f043 0220 	orr.w	r2, r3, #32
 810294c:	68fb      	ldr	r3, [r7, #12]
 810294e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	2200      	movs	r2, #0
 8102954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8102958:	2301      	movs	r3, #1
 810295a:	e088      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	699b      	ldr	r3, [r3, #24]
 8102962:	f003 0320 	and.w	r3, r3, #32
 8102966:	2b20      	cmp	r3, #32
 8102968:	bf0c      	ite	eq
 810296a:	2301      	moveq	r3, #1
 810296c:	2300      	movne	r3, #0
 810296e:	b2db      	uxtb	r3, r3
 8102970:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	699b      	ldr	r3, [r3, #24]
 8102978:	f003 0310 	and.w	r3, r3, #16
 810297c:	2b10      	cmp	r3, #16
 810297e:	bf0c      	ite	eq
 8102980:	2301      	moveq	r3, #1
 8102982:	2300      	movne	r3, #0
 8102984:	b2db      	uxtb	r3, r3
 8102986:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102988:	7ffb      	ldrb	r3, [r7, #31]
 810298a:	2b00      	cmp	r3, #0
 810298c:	d102      	bne.n	8102994 <HAL_I2C_IsDeviceReady+0x12c>
 810298e:	7fbb      	ldrb	r3, [r7, #30]
 8102990:	2b00      	cmp	r3, #0
 8102992:	d0c4      	beq.n	810291e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	699b      	ldr	r3, [r3, #24]
 810299a:	f003 0310 	and.w	r3, r3, #16
 810299e:	2b10      	cmp	r3, #16
 81029a0:	d01a      	beq.n	81029d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81029a2:	69bb      	ldr	r3, [r7, #24]
 81029a4:	9300      	str	r3, [sp, #0]
 81029a6:	683b      	ldr	r3, [r7, #0]
 81029a8:	2200      	movs	r2, #0
 81029aa:	2120      	movs	r1, #32
 81029ac:	68f8      	ldr	r0, [r7, #12]
 81029ae:	f000 f886 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81029b2:	4603      	mov	r3, r0
 81029b4:	2b00      	cmp	r3, #0
 81029b6:	d001      	beq.n	81029bc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 81029b8:	2301      	movs	r3, #1
 81029ba:	e058      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	2220      	movs	r2, #32
 81029c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	2220      	movs	r2, #32
 81029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	2200      	movs	r2, #0
 81029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 81029d4:	2300      	movs	r3, #0
 81029d6:	e04a      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81029d8:	69bb      	ldr	r3, [r7, #24]
 81029da:	9300      	str	r3, [sp, #0]
 81029dc:	683b      	ldr	r3, [r7, #0]
 81029de:	2200      	movs	r2, #0
 81029e0:	2120      	movs	r1, #32
 81029e2:	68f8      	ldr	r0, [r7, #12]
 81029e4:	f000 f86b 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 81029e8:	4603      	mov	r3, r0
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d001      	beq.n	81029f2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 81029ee:	2301      	movs	r3, #1
 81029f0:	e03d      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81029f2:	68fb      	ldr	r3, [r7, #12]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	2210      	movs	r2, #16
 81029f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81029fa:	68fb      	ldr	r3, [r7, #12]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	2220      	movs	r2, #32
 8102a00:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102a02:	697b      	ldr	r3, [r7, #20]
 8102a04:	687a      	ldr	r2, [r7, #4]
 8102a06:	429a      	cmp	r2, r3
 8102a08:	d118      	bne.n	8102a3c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102a0a:	68fb      	ldr	r3, [r7, #12]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	685a      	ldr	r2, [r3, #4]
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102a18:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102a1a:	69bb      	ldr	r3, [r7, #24]
 8102a1c:	9300      	str	r3, [sp, #0]
 8102a1e:	683b      	ldr	r3, [r7, #0]
 8102a20:	2200      	movs	r2, #0
 8102a22:	2120      	movs	r1, #32
 8102a24:	68f8      	ldr	r0, [r7, #12]
 8102a26:	f000 f84a 	bl	8102abe <I2C_WaitOnFlagUntilTimeout>
 8102a2a:	4603      	mov	r3, r0
 8102a2c:	2b00      	cmp	r3, #0
 8102a2e:	d001      	beq.n	8102a34 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102a30:	2301      	movs	r3, #1
 8102a32:	e01c      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a34:	68fb      	ldr	r3, [r7, #12]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	2220      	movs	r2, #32
 8102a3a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102a3c:	697b      	ldr	r3, [r7, #20]
 8102a3e:	3301      	adds	r3, #1
 8102a40:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102a42:	697b      	ldr	r3, [r7, #20]
 8102a44:	687a      	ldr	r2, [r7, #4]
 8102a46:	429a      	cmp	r2, r3
 8102a48:	f63f af3b 	bhi.w	81028c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102a4c:	68fb      	ldr	r3, [r7, #12]
 8102a4e:	2220      	movs	r2, #32
 8102a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a58:	f043 0220 	orr.w	r2, r3, #32
 8102a5c:	68fb      	ldr	r3, [r7, #12]
 8102a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	2200      	movs	r2, #0
 8102a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102a68:	2301      	movs	r3, #1
 8102a6a:	e000      	b.n	8102a6e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102a6c:	2302      	movs	r3, #2
  }
}
 8102a6e:	4618      	mov	r0, r3
 8102a70:	3720      	adds	r7, #32
 8102a72:	46bd      	mov	sp, r7
 8102a74:	bd80      	pop	{r7, pc}

08102a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102a76:	b480      	push	{r7}
 8102a78:	b083      	sub	sp, #12
 8102a7a:	af00      	add	r7, sp, #0
 8102a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	699b      	ldr	r3, [r3, #24]
 8102a84:	f003 0302 	and.w	r3, r3, #2
 8102a88:	2b02      	cmp	r3, #2
 8102a8a:	d103      	bne.n	8102a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	2200      	movs	r2, #0
 8102a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	699b      	ldr	r3, [r3, #24]
 8102a9a:	f003 0301 	and.w	r3, r3, #1
 8102a9e:	2b01      	cmp	r3, #1
 8102aa0:	d007      	beq.n	8102ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	699a      	ldr	r2, [r3, #24]
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	f042 0201 	orr.w	r2, r2, #1
 8102ab0:	619a      	str	r2, [r3, #24]
  }
}
 8102ab2:	bf00      	nop
 8102ab4:	370c      	adds	r7, #12
 8102ab6:	46bd      	mov	sp, r7
 8102ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102abc:	4770      	bx	lr

08102abe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102abe:	b580      	push	{r7, lr}
 8102ac0:	b084      	sub	sp, #16
 8102ac2:	af00      	add	r7, sp, #0
 8102ac4:	60f8      	str	r0, [r7, #12]
 8102ac6:	60b9      	str	r1, [r7, #8]
 8102ac8:	603b      	str	r3, [r7, #0]
 8102aca:	4613      	mov	r3, r2
 8102acc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102ace:	e022      	b.n	8102b16 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102ad0:	683b      	ldr	r3, [r7, #0]
 8102ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ad6:	d01e      	beq.n	8102b16 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ad8:	f7ff f93c 	bl	8101d54 <HAL_GetTick>
 8102adc:	4602      	mov	r2, r0
 8102ade:	69bb      	ldr	r3, [r7, #24]
 8102ae0:	1ad3      	subs	r3, r2, r3
 8102ae2:	683a      	ldr	r2, [r7, #0]
 8102ae4:	429a      	cmp	r2, r3
 8102ae6:	d302      	bcc.n	8102aee <I2C_WaitOnFlagUntilTimeout+0x30>
 8102ae8:	683b      	ldr	r3, [r7, #0]
 8102aea:	2b00      	cmp	r3, #0
 8102aec:	d113      	bne.n	8102b16 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102aee:	68fb      	ldr	r3, [r7, #12]
 8102af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102af2:	f043 0220 	orr.w	r2, r3, #32
 8102af6:	68fb      	ldr	r3, [r7, #12]
 8102af8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	2220      	movs	r2, #32
 8102afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b02:	68fb      	ldr	r3, [r7, #12]
 8102b04:	2200      	movs	r2, #0
 8102b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b0a:	68fb      	ldr	r3, [r7, #12]
 8102b0c:	2200      	movs	r2, #0
 8102b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102b12:	2301      	movs	r3, #1
 8102b14:	e00f      	b.n	8102b36 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102b16:	68fb      	ldr	r3, [r7, #12]
 8102b18:	681b      	ldr	r3, [r3, #0]
 8102b1a:	699a      	ldr	r2, [r3, #24]
 8102b1c:	68bb      	ldr	r3, [r7, #8]
 8102b1e:	4013      	ands	r3, r2
 8102b20:	68ba      	ldr	r2, [r7, #8]
 8102b22:	429a      	cmp	r2, r3
 8102b24:	bf0c      	ite	eq
 8102b26:	2301      	moveq	r3, #1
 8102b28:	2300      	movne	r3, #0
 8102b2a:	b2db      	uxtb	r3, r3
 8102b2c:	461a      	mov	r2, r3
 8102b2e:	79fb      	ldrb	r3, [r7, #7]
 8102b30:	429a      	cmp	r2, r3
 8102b32:	d0cd      	beq.n	8102ad0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102b34:	2300      	movs	r3, #0
}
 8102b36:	4618      	mov	r0, r3
 8102b38:	3710      	adds	r7, #16
 8102b3a:	46bd      	mov	sp, r7
 8102b3c:	bd80      	pop	{r7, pc}

08102b3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102b3e:	b580      	push	{r7, lr}
 8102b40:	b084      	sub	sp, #16
 8102b42:	af00      	add	r7, sp, #0
 8102b44:	60f8      	str	r0, [r7, #12]
 8102b46:	60b9      	str	r1, [r7, #8]
 8102b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102b4a:	e02c      	b.n	8102ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b4c:	687a      	ldr	r2, [r7, #4]
 8102b4e:	68b9      	ldr	r1, [r7, #8]
 8102b50:	68f8      	ldr	r0, [r7, #12]
 8102b52:	f000 f8eb 	bl	8102d2c <I2C_IsErrorOccurred>
 8102b56:	4603      	mov	r3, r0
 8102b58:	2b00      	cmp	r3, #0
 8102b5a:	d001      	beq.n	8102b60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b5c:	2301      	movs	r3, #1
 8102b5e:	e02a      	b.n	8102bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102b60:	68bb      	ldr	r3, [r7, #8]
 8102b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b66:	d01e      	beq.n	8102ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b68:	f7ff f8f4 	bl	8101d54 <HAL_GetTick>
 8102b6c:	4602      	mov	r2, r0
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	1ad3      	subs	r3, r2, r3
 8102b72:	68ba      	ldr	r2, [r7, #8]
 8102b74:	429a      	cmp	r2, r3
 8102b76:	d302      	bcc.n	8102b7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102b78:	68bb      	ldr	r3, [r7, #8]
 8102b7a:	2b00      	cmp	r3, #0
 8102b7c:	d113      	bne.n	8102ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b82:	f043 0220 	orr.w	r2, r3, #32
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b8a:	68fb      	ldr	r3, [r7, #12]
 8102b8c:	2220      	movs	r2, #32
 8102b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	2200      	movs	r2, #0
 8102b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	2200      	movs	r2, #0
 8102b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102ba2:	2301      	movs	r3, #1
 8102ba4:	e007      	b.n	8102bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102ba6:	68fb      	ldr	r3, [r7, #12]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	699b      	ldr	r3, [r3, #24]
 8102bac:	f003 0302 	and.w	r3, r3, #2
 8102bb0:	2b02      	cmp	r3, #2
 8102bb2:	d1cb      	bne.n	8102b4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102bb4:	2300      	movs	r3, #0
}
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	3710      	adds	r7, #16
 8102bba:	46bd      	mov	sp, r7
 8102bbc:	bd80      	pop	{r7, pc}

08102bbe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102bbe:	b580      	push	{r7, lr}
 8102bc0:	b084      	sub	sp, #16
 8102bc2:	af00      	add	r7, sp, #0
 8102bc4:	60f8      	str	r0, [r7, #12]
 8102bc6:	60b9      	str	r1, [r7, #8]
 8102bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bca:	e028      	b.n	8102c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102bcc:	687a      	ldr	r2, [r7, #4]
 8102bce:	68b9      	ldr	r1, [r7, #8]
 8102bd0:	68f8      	ldr	r0, [r7, #12]
 8102bd2:	f000 f8ab 	bl	8102d2c <I2C_IsErrorOccurred>
 8102bd6:	4603      	mov	r3, r0
 8102bd8:	2b00      	cmp	r3, #0
 8102bda:	d001      	beq.n	8102be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102bdc:	2301      	movs	r3, #1
 8102bde:	e026      	b.n	8102c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102be0:	f7ff f8b8 	bl	8101d54 <HAL_GetTick>
 8102be4:	4602      	mov	r2, r0
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	1ad3      	subs	r3, r2, r3
 8102bea:	68ba      	ldr	r2, [r7, #8]
 8102bec:	429a      	cmp	r2, r3
 8102bee:	d302      	bcc.n	8102bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102bf0:	68bb      	ldr	r3, [r7, #8]
 8102bf2:	2b00      	cmp	r3, #0
 8102bf4:	d113      	bne.n	8102c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102bfa:	f043 0220 	orr.w	r2, r3, #32
 8102bfe:	68fb      	ldr	r3, [r7, #12]
 8102c00:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	2220      	movs	r2, #32
 8102c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c0a:	68fb      	ldr	r3, [r7, #12]
 8102c0c:	2200      	movs	r2, #0
 8102c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102c12:	68fb      	ldr	r3, [r7, #12]
 8102c14:	2200      	movs	r2, #0
 8102c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102c1a:	2301      	movs	r3, #1
 8102c1c:	e007      	b.n	8102c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c1e:	68fb      	ldr	r3, [r7, #12]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	699b      	ldr	r3, [r3, #24]
 8102c24:	f003 0320 	and.w	r3, r3, #32
 8102c28:	2b20      	cmp	r3, #32
 8102c2a:	d1cf      	bne.n	8102bcc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102c2c:	2300      	movs	r3, #0
}
 8102c2e:	4618      	mov	r0, r3
 8102c30:	3710      	adds	r7, #16
 8102c32:	46bd      	mov	sp, r7
 8102c34:	bd80      	pop	{r7, pc}
	...

08102c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102c38:	b580      	push	{r7, lr}
 8102c3a:	b084      	sub	sp, #16
 8102c3c:	af00      	add	r7, sp, #0
 8102c3e:	60f8      	str	r0, [r7, #12]
 8102c40:	60b9      	str	r1, [r7, #8]
 8102c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8102c44:	e064      	b.n	8102d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c46:	687a      	ldr	r2, [r7, #4]
 8102c48:	68b9      	ldr	r1, [r7, #8]
 8102c4a:	68f8      	ldr	r0, [r7, #12]
 8102c4c:	f000 f86e 	bl	8102d2c <I2C_IsErrorOccurred>
 8102c50:	4603      	mov	r3, r0
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d001      	beq.n	8102c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102c56:	2301      	movs	r3, #1
 8102c58:	e062      	b.n	8102d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8102c5a:	68fb      	ldr	r3, [r7, #12]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	699b      	ldr	r3, [r3, #24]
 8102c60:	f003 0320 	and.w	r3, r3, #32
 8102c64:	2b20      	cmp	r3, #32
 8102c66:	d138      	bne.n	8102cda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8102c68:	68fb      	ldr	r3, [r7, #12]
 8102c6a:	681b      	ldr	r3, [r3, #0]
 8102c6c:	699b      	ldr	r3, [r3, #24]
 8102c6e:	f003 0304 	and.w	r3, r3, #4
 8102c72:	2b04      	cmp	r3, #4
 8102c74:	d105      	bne.n	8102c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102c7a:	2b00      	cmp	r3, #0
 8102c7c:	d001      	beq.n	8102c82 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8102c7e:	2300      	movs	r3, #0
 8102c80:	e04e      	b.n	8102d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102c82:	68fb      	ldr	r3, [r7, #12]
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	699b      	ldr	r3, [r3, #24]
 8102c88:	f003 0310 	and.w	r3, r3, #16
 8102c8c:	2b10      	cmp	r3, #16
 8102c8e:	d107      	bne.n	8102ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	2210      	movs	r2, #16
 8102c96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8102c98:	68fb      	ldr	r3, [r7, #12]
 8102c9a:	2204      	movs	r2, #4
 8102c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8102c9e:	e002      	b.n	8102ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102ca0:	68fb      	ldr	r3, [r7, #12]
 8102ca2:	2200      	movs	r2, #0
 8102ca4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ca6:	68fb      	ldr	r3, [r7, #12]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	2220      	movs	r2, #32
 8102cac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8102cae:	68fb      	ldr	r3, [r7, #12]
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	6859      	ldr	r1, [r3, #4]
 8102cb4:	68fb      	ldr	r3, [r7, #12]
 8102cb6:	681a      	ldr	r2, [r3, #0]
 8102cb8:	4b1b      	ldr	r3, [pc, #108]	; (8102d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8102cba:	400b      	ands	r3, r1
 8102cbc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8102cbe:	68fb      	ldr	r3, [r7, #12]
 8102cc0:	2220      	movs	r2, #32
 8102cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	2200      	movs	r2, #0
 8102cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	2200      	movs	r2, #0
 8102cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102cd6:	2301      	movs	r3, #1
 8102cd8:	e022      	b.n	8102d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102cda:	f7ff f83b 	bl	8101d54 <HAL_GetTick>
 8102cde:	4602      	mov	r2, r0
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	1ad3      	subs	r3, r2, r3
 8102ce4:	68ba      	ldr	r2, [r7, #8]
 8102ce6:	429a      	cmp	r2, r3
 8102ce8:	d302      	bcc.n	8102cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8102cea:	68bb      	ldr	r3, [r7, #8]
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	d10f      	bne.n	8102d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102cf0:	68fb      	ldr	r3, [r7, #12]
 8102cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cf4:	f043 0220 	orr.w	r2, r3, #32
 8102cf8:	68fb      	ldr	r3, [r7, #12]
 8102cfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102cfc:	68fb      	ldr	r3, [r7, #12]
 8102cfe:	2220      	movs	r2, #32
 8102d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102d04:	68fb      	ldr	r3, [r7, #12]
 8102d06:	2200      	movs	r2, #0
 8102d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102d0c:	2301      	movs	r3, #1
 8102d0e:	e007      	b.n	8102d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8102d10:	68fb      	ldr	r3, [r7, #12]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	699b      	ldr	r3, [r3, #24]
 8102d16:	f003 0304 	and.w	r3, r3, #4
 8102d1a:	2b04      	cmp	r3, #4
 8102d1c:	d193      	bne.n	8102c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102d1e:	2300      	movs	r3, #0
}
 8102d20:	4618      	mov	r0, r3
 8102d22:	3710      	adds	r7, #16
 8102d24:	46bd      	mov	sp, r7
 8102d26:	bd80      	pop	{r7, pc}
 8102d28:	fe00e800 	.word	0xfe00e800

08102d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102d2c:	b580      	push	{r7, lr}
 8102d2e:	b08a      	sub	sp, #40	; 0x28
 8102d30:	af00      	add	r7, sp, #0
 8102d32:	60f8      	str	r0, [r7, #12]
 8102d34:	60b9      	str	r1, [r7, #8]
 8102d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102d38:	2300      	movs	r3, #0
 8102d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	699b      	ldr	r3, [r3, #24]
 8102d44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8102d46:	2300      	movs	r3, #0
 8102d48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102d4e:	69bb      	ldr	r3, [r7, #24]
 8102d50:	f003 0310 	and.w	r3, r3, #16
 8102d54:	2b00      	cmp	r3, #0
 8102d56:	d075      	beq.n	8102e44 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102d58:	68fb      	ldr	r3, [r7, #12]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	2210      	movs	r2, #16
 8102d5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102d60:	e056      	b.n	8102e10 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102d62:	68bb      	ldr	r3, [r7, #8]
 8102d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d68:	d052      	beq.n	8102e10 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102d6a:	f7fe fff3 	bl	8101d54 <HAL_GetTick>
 8102d6e:	4602      	mov	r2, r0
 8102d70:	69fb      	ldr	r3, [r7, #28]
 8102d72:	1ad3      	subs	r3, r2, r3
 8102d74:	68ba      	ldr	r2, [r7, #8]
 8102d76:	429a      	cmp	r2, r3
 8102d78:	d302      	bcc.n	8102d80 <I2C_IsErrorOccurred+0x54>
 8102d7a:	68bb      	ldr	r3, [r7, #8]
 8102d7c:	2b00      	cmp	r3, #0
 8102d7e:	d147      	bne.n	8102e10 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102d80:	68fb      	ldr	r3, [r7, #12]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	685b      	ldr	r3, [r3, #4]
 8102d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102d8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102d92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102d94:	68fb      	ldr	r3, [r7, #12]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	699b      	ldr	r3, [r3, #24]
 8102d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102da2:	d12e      	bne.n	8102e02 <I2C_IsErrorOccurred+0xd6>
 8102da4:	697b      	ldr	r3, [r7, #20]
 8102da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102daa:	d02a      	beq.n	8102e02 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8102dac:	7cfb      	ldrb	r3, [r7, #19]
 8102dae:	2b20      	cmp	r3, #32
 8102db0:	d027      	beq.n	8102e02 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102db2:	68fb      	ldr	r3, [r7, #12]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	685a      	ldr	r2, [r3, #4]
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102dc0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102dc2:	f7fe ffc7 	bl	8101d54 <HAL_GetTick>
 8102dc6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102dc8:	e01b      	b.n	8102e02 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102dca:	f7fe ffc3 	bl	8101d54 <HAL_GetTick>
 8102dce:	4602      	mov	r2, r0
 8102dd0:	69fb      	ldr	r3, [r7, #28]
 8102dd2:	1ad3      	subs	r3, r2, r3
 8102dd4:	2b19      	cmp	r3, #25
 8102dd6:	d914      	bls.n	8102e02 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ddc:	f043 0220 	orr.w	r2, r3, #32
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8102de4:	68fb      	ldr	r3, [r7, #12]
 8102de6:	2220      	movs	r2, #32
 8102de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	2200      	movs	r2, #0
 8102df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	2200      	movs	r2, #0
 8102df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8102dfc:	2301      	movs	r3, #1
 8102dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102e02:	68fb      	ldr	r3, [r7, #12]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	699b      	ldr	r3, [r3, #24]
 8102e08:	f003 0320 	and.w	r3, r3, #32
 8102e0c:	2b20      	cmp	r3, #32
 8102e0e:	d1dc      	bne.n	8102dca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102e10:	68fb      	ldr	r3, [r7, #12]
 8102e12:	681b      	ldr	r3, [r3, #0]
 8102e14:	699b      	ldr	r3, [r3, #24]
 8102e16:	f003 0320 	and.w	r3, r3, #32
 8102e1a:	2b20      	cmp	r3, #32
 8102e1c:	d003      	beq.n	8102e26 <I2C_IsErrorOccurred+0xfa>
 8102e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d09d      	beq.n	8102d62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8102e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e2a:	2b00      	cmp	r3, #0
 8102e2c:	d103      	bne.n	8102e36 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102e2e:	68fb      	ldr	r3, [r7, #12]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	2220      	movs	r2, #32
 8102e34:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8102e36:	6a3b      	ldr	r3, [r7, #32]
 8102e38:	f043 0304 	orr.w	r3, r3, #4
 8102e3c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8102e3e:	2301      	movs	r3, #1
 8102e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	699b      	ldr	r3, [r3, #24]
 8102e4a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8102e4c:	69bb      	ldr	r3, [r7, #24]
 8102e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102e52:	2b00      	cmp	r3, #0
 8102e54:	d00b      	beq.n	8102e6e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8102e56:	6a3b      	ldr	r3, [r7, #32]
 8102e58:	f043 0301 	orr.w	r3, r3, #1
 8102e5c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8102e5e:	68fb      	ldr	r3, [r7, #12]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102e68:	2301      	movs	r3, #1
 8102e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8102e6e:	69bb      	ldr	r3, [r7, #24]
 8102e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102e74:	2b00      	cmp	r3, #0
 8102e76:	d00b      	beq.n	8102e90 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8102e78:	6a3b      	ldr	r3, [r7, #32]
 8102e7a:	f043 0308 	orr.w	r3, r3, #8
 8102e7e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102e8a:	2301      	movs	r3, #1
 8102e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8102e90:	69bb      	ldr	r3, [r7, #24]
 8102e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102e96:	2b00      	cmp	r3, #0
 8102e98:	d00b      	beq.n	8102eb2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8102e9a:	6a3b      	ldr	r3, [r7, #32]
 8102e9c:	f043 0302 	orr.w	r3, r3, #2
 8102ea0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8102ea2:	68fb      	ldr	r3, [r7, #12]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102eac:	2301      	movs	r3, #1
 8102eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8102eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d01c      	beq.n	8102ef4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102eba:	68f8      	ldr	r0, [r7, #12]
 8102ebc:	f7ff fddb 	bl	8102a76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	6859      	ldr	r1, [r3, #4]
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	681a      	ldr	r2, [r3, #0]
 8102eca:	4b0d      	ldr	r3, [pc, #52]	; (8102f00 <I2C_IsErrorOccurred+0x1d4>)
 8102ecc:	400b      	ands	r3, r1
 8102ece:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102ed0:	68fb      	ldr	r3, [r7, #12]
 8102ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102ed4:	6a3b      	ldr	r3, [r7, #32]
 8102ed6:	431a      	orrs	r2, r3
 8102ed8:	68fb      	ldr	r3, [r7, #12]
 8102eda:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	2220      	movs	r2, #32
 8102ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102ee4:	68fb      	ldr	r3, [r7, #12]
 8102ee6:	2200      	movs	r2, #0
 8102ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	2200      	movs	r2, #0
 8102ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8102ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102ef8:	4618      	mov	r0, r3
 8102efa:	3728      	adds	r7, #40	; 0x28
 8102efc:	46bd      	mov	sp, r7
 8102efe:	bd80      	pop	{r7, pc}
 8102f00:	fe00e800 	.word	0xfe00e800

08102f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102f04:	b480      	push	{r7}
 8102f06:	b087      	sub	sp, #28
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	60f8      	str	r0, [r7, #12]
 8102f0c:	607b      	str	r3, [r7, #4]
 8102f0e:	460b      	mov	r3, r1
 8102f10:	817b      	strh	r3, [r7, #10]
 8102f12:	4613      	mov	r3, r2
 8102f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f16:	897b      	ldrh	r3, [r7, #10]
 8102f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102f1c:	7a7b      	ldrb	r3, [r7, #9]
 8102f1e:	041b      	lsls	r3, r3, #16
 8102f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f24:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102f2a:	6a3b      	ldr	r3, [r7, #32]
 8102f2c:	4313      	orrs	r3, r2
 8102f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102f32:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8102f34:	68fb      	ldr	r3, [r7, #12]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	685a      	ldr	r2, [r3, #4]
 8102f3a:	6a3b      	ldr	r3, [r7, #32]
 8102f3c:	0d5b      	lsrs	r3, r3, #21
 8102f3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102f42:	4b08      	ldr	r3, [pc, #32]	; (8102f64 <I2C_TransferConfig+0x60>)
 8102f44:	430b      	orrs	r3, r1
 8102f46:	43db      	mvns	r3, r3
 8102f48:	ea02 0103 	and.w	r1, r2, r3
 8102f4c:	68fb      	ldr	r3, [r7, #12]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	697a      	ldr	r2, [r7, #20]
 8102f52:	430a      	orrs	r2, r1
 8102f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8102f56:	bf00      	nop
 8102f58:	371c      	adds	r7, #28
 8102f5a:	46bd      	mov	sp, r7
 8102f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f60:	4770      	bx	lr
 8102f62:	bf00      	nop
 8102f64:	03ff63ff 	.word	0x03ff63ff

08102f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102f68:	b480      	push	{r7}
 8102f6a:	b083      	sub	sp, #12
 8102f6c:	af00      	add	r7, sp, #0
 8102f6e:	6078      	str	r0, [r7, #4]
 8102f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102f78:	b2db      	uxtb	r3, r3
 8102f7a:	2b20      	cmp	r3, #32
 8102f7c:	d138      	bne.n	8102ff0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102f84:	2b01      	cmp	r3, #1
 8102f86:	d101      	bne.n	8102f8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102f88:	2302      	movs	r3, #2
 8102f8a:	e032      	b.n	8102ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	2201      	movs	r2, #1
 8102f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	2224      	movs	r2, #36	; 0x24
 8102f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	681a      	ldr	r2, [r3, #0]
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	681b      	ldr	r3, [r3, #0]
 8102fa6:	f022 0201 	bic.w	r2, r2, #1
 8102faa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	681a      	ldr	r2, [r3, #0]
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102fba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	6819      	ldr	r1, [r3, #0]
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	683a      	ldr	r2, [r7, #0]
 8102fc8:	430a      	orrs	r2, r1
 8102fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	681a      	ldr	r2, [r3, #0]
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	f042 0201 	orr.w	r2, r2, #1
 8102fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	2220      	movs	r2, #32
 8102fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	2200      	movs	r2, #0
 8102fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102fec:	2300      	movs	r3, #0
 8102fee:	e000      	b.n	8102ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102ff0:	2302      	movs	r3, #2
  }
}
 8102ff2:	4618      	mov	r0, r3
 8102ff4:	370c      	adds	r7, #12
 8102ff6:	46bd      	mov	sp, r7
 8102ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ffc:	4770      	bx	lr

08102ffe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102ffe:	b480      	push	{r7}
 8103000:	b085      	sub	sp, #20
 8103002:	af00      	add	r7, sp, #0
 8103004:	6078      	str	r0, [r7, #4]
 8103006:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810300e:	b2db      	uxtb	r3, r3
 8103010:	2b20      	cmp	r3, #32
 8103012:	d139      	bne.n	8103088 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810301a:	2b01      	cmp	r3, #1
 810301c:	d101      	bne.n	8103022 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810301e:	2302      	movs	r3, #2
 8103020:	e033      	b.n	810308a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	2201      	movs	r2, #1
 8103026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	2224      	movs	r2, #36	; 0x24
 810302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	681a      	ldr	r2, [r3, #0]
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	f022 0201 	bic.w	r2, r2, #1
 8103040:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	681b      	ldr	r3, [r3, #0]
 8103048:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810304a:	68fb      	ldr	r3, [r7, #12]
 810304c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103050:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8103052:	683b      	ldr	r3, [r7, #0]
 8103054:	021b      	lsls	r3, r3, #8
 8103056:	68fa      	ldr	r2, [r7, #12]
 8103058:	4313      	orrs	r3, r2
 810305a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	68fa      	ldr	r2, [r7, #12]
 8103062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	681a      	ldr	r2, [r3, #0]
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	681b      	ldr	r3, [r3, #0]
 810306e:	f042 0201 	orr.w	r2, r2, #1
 8103072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	2220      	movs	r2, #32
 8103078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	2200      	movs	r2, #0
 8103080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103084:	2300      	movs	r3, #0
 8103086:	e000      	b.n	810308a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103088:	2302      	movs	r3, #2
  }
}
 810308a:	4618      	mov	r0, r3
 810308c:	3714      	adds	r7, #20
 810308e:	46bd      	mov	sp, r7
 8103090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103094:	4770      	bx	lr
	...

08103098 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103098:	b580      	push	{r7, lr}
 810309a:	b084      	sub	sp, #16
 810309c:	af00      	add	r7, sp, #0
 810309e:	60f8      	str	r0, [r7, #12]
 81030a0:	460b      	mov	r3, r1
 81030a2:	607a      	str	r2, [r7, #4]
 81030a4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81030a6:	4b37      	ldr	r3, [pc, #220]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	f023 0201 	bic.w	r2, r3, #1
 81030ae:	4935      	ldr	r1, [pc, #212]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 81030b0:	68fb      	ldr	r3, [r7, #12]
 81030b2:	4313      	orrs	r3, r2
 81030b4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	d123      	bne.n	8103104 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81030bc:	f7fe ff36 	bl	8101f2c <HAL_GetCurrentCPUID>
 81030c0:	4603      	mov	r3, r0
 81030c2:	2b03      	cmp	r3, #3
 81030c4:	d158      	bne.n	8103178 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81030c6:	4b2f      	ldr	r3, [pc, #188]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 81030c8:	691b      	ldr	r3, [r3, #16]
 81030ca:	4a2e      	ldr	r2, [pc, #184]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 81030cc:	f023 0301 	bic.w	r3, r3, #1
 81030d0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81030d2:	4b2d      	ldr	r3, [pc, #180]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81030d4:	691b      	ldr	r3, [r3, #16]
 81030d6:	4a2c      	ldr	r2, [pc, #176]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81030d8:	f043 0304 	orr.w	r3, r3, #4
 81030dc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81030de:	f3bf 8f4f 	dsb	sy
}
 81030e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81030e4:	f3bf 8f6f 	isb	sy
}
 81030e8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81030ea:	7afb      	ldrb	r3, [r7, #11]
 81030ec:	2b01      	cmp	r3, #1
 81030ee:	d101      	bne.n	81030f4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81030f0:	bf30      	wfi
 81030f2:	e000      	b.n	81030f6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81030f4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81030f6:	4b24      	ldr	r3, [pc, #144]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81030f8:	691b      	ldr	r3, [r3, #16]
 81030fa:	4a23      	ldr	r2, [pc, #140]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81030fc:	f023 0304 	bic.w	r3, r3, #4
 8103100:	6113      	str	r3, [r2, #16]
 8103102:	e03c      	b.n	810317e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	2b01      	cmp	r3, #1
 8103108:	d123      	bne.n	8103152 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810310a:	f7fe ff0f 	bl	8101f2c <HAL_GetCurrentCPUID>
 810310e:	4603      	mov	r3, r0
 8103110:	2b01      	cmp	r3, #1
 8103112:	d133      	bne.n	810317c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103114:	4b1b      	ldr	r3, [pc, #108]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103116:	695b      	ldr	r3, [r3, #20]
 8103118:	4a1a      	ldr	r2, [pc, #104]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 810311a:	f023 0302 	bic.w	r3, r3, #2
 810311e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103120:	4b19      	ldr	r3, [pc, #100]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103122:	691b      	ldr	r3, [r3, #16]
 8103124:	4a18      	ldr	r2, [pc, #96]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103126:	f043 0304 	orr.w	r3, r3, #4
 810312a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810312c:	f3bf 8f4f 	dsb	sy
}
 8103130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103132:	f3bf 8f6f 	isb	sy
}
 8103136:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103138:	7afb      	ldrb	r3, [r7, #11]
 810313a:	2b01      	cmp	r3, #1
 810313c:	d101      	bne.n	8103142 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810313e:	bf30      	wfi
 8103140:	e000      	b.n	8103144 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103142:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103144:	4b10      	ldr	r3, [pc, #64]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103146:	691b      	ldr	r3, [r3, #16]
 8103148:	4a0f      	ldr	r2, [pc, #60]	; (8103188 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810314a:	f023 0304 	bic.w	r3, r3, #4
 810314e:	6113      	str	r3, [r2, #16]
 8103150:	e015      	b.n	810317e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103152:	f7fe feeb 	bl	8101f2c <HAL_GetCurrentCPUID>
 8103156:	4603      	mov	r3, r0
 8103158:	2b03      	cmp	r3, #3
 810315a:	d106      	bne.n	810316a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810315c:	4b09      	ldr	r3, [pc, #36]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 810315e:	691b      	ldr	r3, [r3, #16]
 8103160:	4a08      	ldr	r2, [pc, #32]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103162:	f023 0304 	bic.w	r3, r3, #4
 8103166:	6113      	str	r3, [r2, #16]
 8103168:	e009      	b.n	810317e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810316a:	4b06      	ldr	r3, [pc, #24]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 810316c:	695b      	ldr	r3, [r3, #20]
 810316e:	4a05      	ldr	r2, [pc, #20]	; (8103184 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103170:	f023 0304 	bic.w	r3, r3, #4
 8103174:	6153      	str	r3, [r2, #20]
 8103176:	e002      	b.n	810317e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103178:	bf00      	nop
 810317a:	e000      	b.n	810317e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810317c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810317e:	3710      	adds	r7, #16
 8103180:	46bd      	mov	sp, r7
 8103182:	bd80      	pop	{r7, pc}
 8103184:	58024800 	.word	0x58024800
 8103188:	e000ed00 	.word	0xe000ed00

0810318c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810318c:	b580      	push	{r7, lr}
 810318e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103190:	f7fe fecc 	bl	8101f2c <HAL_GetCurrentCPUID>
 8103194:	4603      	mov	r3, r0
 8103196:	2b03      	cmp	r3, #3
 8103198:	d101      	bne.n	810319e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810319a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810319c:	e001      	b.n	81031a2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810319e:	bf40      	sev
    __WFE ();
 81031a0:	bf20      	wfe
}
 81031a2:	bf00      	nop
 81031a4:	bd80      	pop	{r7, pc}
	...

081031a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81031a8:	b480      	push	{r7}
 81031aa:	b089      	sub	sp, #36	; 0x24
 81031ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81031ae:	4bb3      	ldr	r3, [pc, #716]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031b0:	691b      	ldr	r3, [r3, #16]
 81031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81031b6:	2b18      	cmp	r3, #24
 81031b8:	f200 8155 	bhi.w	8103466 <HAL_RCC_GetSysClockFreq+0x2be>
 81031bc:	a201      	add	r2, pc, #4	; (adr r2, 81031c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031c2:	bf00      	nop
 81031c4:	08103229 	.word	0x08103229
 81031c8:	08103467 	.word	0x08103467
 81031cc:	08103467 	.word	0x08103467
 81031d0:	08103467 	.word	0x08103467
 81031d4:	08103467 	.word	0x08103467
 81031d8:	08103467 	.word	0x08103467
 81031dc:	08103467 	.word	0x08103467
 81031e0:	08103467 	.word	0x08103467
 81031e4:	0810324f 	.word	0x0810324f
 81031e8:	08103467 	.word	0x08103467
 81031ec:	08103467 	.word	0x08103467
 81031f0:	08103467 	.word	0x08103467
 81031f4:	08103467 	.word	0x08103467
 81031f8:	08103467 	.word	0x08103467
 81031fc:	08103467 	.word	0x08103467
 8103200:	08103467 	.word	0x08103467
 8103204:	08103255 	.word	0x08103255
 8103208:	08103467 	.word	0x08103467
 810320c:	08103467 	.word	0x08103467
 8103210:	08103467 	.word	0x08103467
 8103214:	08103467 	.word	0x08103467
 8103218:	08103467 	.word	0x08103467
 810321c:	08103467 	.word	0x08103467
 8103220:	08103467 	.word	0x08103467
 8103224:	0810325b 	.word	0x0810325b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103228:	4b94      	ldr	r3, [pc, #592]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	f003 0320 	and.w	r3, r3, #32
 8103230:	2b00      	cmp	r3, #0
 8103232:	d009      	beq.n	8103248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103234:	4b91      	ldr	r3, [pc, #580]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	08db      	lsrs	r3, r3, #3
 810323a:	f003 0303 	and.w	r3, r3, #3
 810323e:	4a90      	ldr	r2, [pc, #576]	; (8103480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103240:	fa22 f303 	lsr.w	r3, r2, r3
 8103244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103246:	e111      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103248:	4b8d      	ldr	r3, [pc, #564]	; (8103480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810324a:	61bb      	str	r3, [r7, #24]
    break;
 810324c:	e10e      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810324e:	4b8d      	ldr	r3, [pc, #564]	; (8103484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103250:	61bb      	str	r3, [r7, #24]
    break;
 8103252:	e10b      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103254:	4b8c      	ldr	r3, [pc, #560]	; (8103488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103256:	61bb      	str	r3, [r7, #24]
    break;
 8103258:	e108      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810325a:	4b88      	ldr	r3, [pc, #544]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810325e:	f003 0303 	and.w	r3, r3, #3
 8103262:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103264:	4b85      	ldr	r3, [pc, #532]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103268:	091b      	lsrs	r3, r3, #4
 810326a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810326e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103270:	4b82      	ldr	r3, [pc, #520]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103274:	f003 0301 	and.w	r3, r3, #1
 8103278:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810327a:	4b80      	ldr	r3, [pc, #512]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810327e:	08db      	lsrs	r3, r3, #3
 8103280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103284:	68fa      	ldr	r2, [r7, #12]
 8103286:	fb02 f303 	mul.w	r3, r2, r3
 810328a:	ee07 3a90 	vmov	s15, r3
 810328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103292:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103296:	693b      	ldr	r3, [r7, #16]
 8103298:	2b00      	cmp	r3, #0
 810329a:	f000 80e1 	beq.w	8103460 <HAL_RCC_GetSysClockFreq+0x2b8>
 810329e:	697b      	ldr	r3, [r7, #20]
 81032a0:	2b02      	cmp	r3, #2
 81032a2:	f000 8083 	beq.w	81033ac <HAL_RCC_GetSysClockFreq+0x204>
 81032a6:	697b      	ldr	r3, [r7, #20]
 81032a8:	2b02      	cmp	r3, #2
 81032aa:	f200 80a1 	bhi.w	81033f0 <HAL_RCC_GetSysClockFreq+0x248>
 81032ae:	697b      	ldr	r3, [r7, #20]
 81032b0:	2b00      	cmp	r3, #0
 81032b2:	d003      	beq.n	81032bc <HAL_RCC_GetSysClockFreq+0x114>
 81032b4:	697b      	ldr	r3, [r7, #20]
 81032b6:	2b01      	cmp	r3, #1
 81032b8:	d056      	beq.n	8103368 <HAL_RCC_GetSysClockFreq+0x1c0>
 81032ba:	e099      	b.n	81033f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81032bc:	4b6f      	ldr	r3, [pc, #444]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	f003 0320 	and.w	r3, r3, #32
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	d02d      	beq.n	8103324 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81032c8:	4b6c      	ldr	r3, [pc, #432]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	08db      	lsrs	r3, r3, #3
 81032ce:	f003 0303 	and.w	r3, r3, #3
 81032d2:	4a6b      	ldr	r2, [pc, #428]	; (8103480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81032d4:	fa22 f303 	lsr.w	r3, r2, r3
 81032d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	ee07 3a90 	vmov	s15, r3
 81032e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032e4:	693b      	ldr	r3, [r7, #16]
 81032e6:	ee07 3a90 	vmov	s15, r3
 81032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032f2:	4b62      	ldr	r3, [pc, #392]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032fa:	ee07 3a90 	vmov	s15, r3
 81032fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103302:	ed97 6a02 	vldr	s12, [r7, #8]
 8103306:	eddf 5a61 	vldr	s11, [pc, #388]	; 810348c <HAL_RCC_GetSysClockFreq+0x2e4>
 810330a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810330e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810331e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103322:	e087      	b.n	8103434 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103324:	693b      	ldr	r3, [r7, #16]
 8103326:	ee07 3a90 	vmov	s15, r3
 810332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810332e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103490 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103336:	4b51      	ldr	r3, [pc, #324]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810333e:	ee07 3a90 	vmov	s15, r3
 8103342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103346:	ed97 6a02 	vldr	s12, [r7, #8]
 810334a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810348c <HAL_RCC_GetSysClockFreq+0x2e4>
 810334e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103366:	e065      	b.n	8103434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103368:	693b      	ldr	r3, [r7, #16]
 810336a:	ee07 3a90 	vmov	s15, r3
 810336e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103372:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103494 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810337a:	4b40      	ldr	r3, [pc, #256]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103382:	ee07 3a90 	vmov	s15, r3
 8103386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810338a:	ed97 6a02 	vldr	s12, [r7, #8]
 810338e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810348c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810339a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810339e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033aa:	e043      	b.n	8103434 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81033ac:	693b      	ldr	r3, [r7, #16]
 81033ae:	ee07 3a90 	vmov	s15, r3
 81033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103498 <HAL_RCC_GetSysClockFreq+0x2f0>
 81033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033be:	4b2f      	ldr	r3, [pc, #188]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033c6:	ee07 3a90 	vmov	s15, r3
 81033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81033d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810348c <HAL_RCC_GetSysClockFreq+0x2e4>
 81033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033ee:	e021      	b.n	8103434 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81033f0:	693b      	ldr	r3, [r7, #16]
 81033f2:	ee07 3a90 	vmov	s15, r3
 81033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103494 <HAL_RCC_GetSysClockFreq+0x2ec>
 81033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103402:	4b1e      	ldr	r3, [pc, #120]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810340a:	ee07 3a90 	vmov	s15, r3
 810340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103412:	ed97 6a02 	vldr	s12, [r7, #8]
 8103416:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810348c <HAL_RCC_GetSysClockFreq+0x2e4>
 810341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810342e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103432:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103434:	4b11      	ldr	r3, [pc, #68]	; (810347c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103438:	0a5b      	lsrs	r3, r3, #9
 810343a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810343e:	3301      	adds	r3, #1
 8103440:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103442:	683b      	ldr	r3, [r7, #0]
 8103444:	ee07 3a90 	vmov	s15, r3
 8103448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810344c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103458:	ee17 3a90 	vmov	r3, s15
 810345c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810345e:	e005      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103460:	2300      	movs	r3, #0
 8103462:	61bb      	str	r3, [r7, #24]
    break;
 8103464:	e002      	b.n	810346c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103466:	4b07      	ldr	r3, [pc, #28]	; (8103484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103468:	61bb      	str	r3, [r7, #24]
    break;
 810346a:	bf00      	nop
  }

  return sysclockfreq;
 810346c:	69bb      	ldr	r3, [r7, #24]
}
 810346e:	4618      	mov	r0, r3
 8103470:	3724      	adds	r7, #36	; 0x24
 8103472:	46bd      	mov	sp, r7
 8103474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103478:	4770      	bx	lr
 810347a:	bf00      	nop
 810347c:	58024400 	.word	0x58024400
 8103480:	03d09000 	.word	0x03d09000
 8103484:	003d0900 	.word	0x003d0900
 8103488:	007a1200 	.word	0x007a1200
 810348c:	46000000 	.word	0x46000000
 8103490:	4c742400 	.word	0x4c742400
 8103494:	4a742400 	.word	0x4a742400
 8103498:	4af42400 	.word	0x4af42400

0810349c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810349c:	b580      	push	{r7, lr}
 810349e:	b082      	sub	sp, #8
 81034a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81034a2:	f7ff fe81 	bl	81031a8 <HAL_RCC_GetSysClockFreq>
 81034a6:	4602      	mov	r2, r0
 81034a8:	4b11      	ldr	r3, [pc, #68]	; (81034f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81034aa:	699b      	ldr	r3, [r3, #24]
 81034ac:	0a1b      	lsrs	r3, r3, #8
 81034ae:	f003 030f 	and.w	r3, r3, #15
 81034b2:	4910      	ldr	r1, [pc, #64]	; (81034f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81034b4:	5ccb      	ldrb	r3, [r1, r3]
 81034b6:	f003 031f 	and.w	r3, r3, #31
 81034ba:	fa22 f303 	lsr.w	r3, r2, r3
 81034be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81034c0:	4b0b      	ldr	r3, [pc, #44]	; (81034f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81034c2:	699b      	ldr	r3, [r3, #24]
 81034c4:	f003 030f 	and.w	r3, r3, #15
 81034c8:	4a0a      	ldr	r2, [pc, #40]	; (81034f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81034ca:	5cd3      	ldrb	r3, [r2, r3]
 81034cc:	f003 031f 	and.w	r3, r3, #31
 81034d0:	687a      	ldr	r2, [r7, #4]
 81034d2:	fa22 f303 	lsr.w	r3, r2, r3
 81034d6:	4a08      	ldr	r2, [pc, #32]	; (81034f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81034d8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81034da:	4b07      	ldr	r3, [pc, #28]	; (81034f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	4a07      	ldr	r2, [pc, #28]	; (81034fc <HAL_RCC_GetHCLKFreq+0x60>)
 81034e0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81034e2:	4b05      	ldr	r3, [pc, #20]	; (81034f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81034e4:	681b      	ldr	r3, [r3, #0]
}
 81034e6:	4618      	mov	r0, r3
 81034e8:	3708      	adds	r7, #8
 81034ea:	46bd      	mov	sp, r7
 81034ec:	bd80      	pop	{r7, pc}
 81034ee:	bf00      	nop
 81034f0:	58024400 	.word	0x58024400
 81034f4:	0810d5b4 	.word	0x0810d5b4
 81034f8:	10000004 	.word	0x10000004
 81034fc:	10000000 	.word	0x10000000

08103500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103500:	b580      	push	{r7, lr}
 8103502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103504:	f7ff ffca 	bl	810349c <HAL_RCC_GetHCLKFreq>
 8103508:	4602      	mov	r2, r0
 810350a:	4b06      	ldr	r3, [pc, #24]	; (8103524 <HAL_RCC_GetPCLK2Freq+0x24>)
 810350c:	69db      	ldr	r3, [r3, #28]
 810350e:	0a1b      	lsrs	r3, r3, #8
 8103510:	f003 0307 	and.w	r3, r3, #7
 8103514:	4904      	ldr	r1, [pc, #16]	; (8103528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103516:	5ccb      	ldrb	r3, [r1, r3]
 8103518:	f003 031f 	and.w	r3, r3, #31
 810351c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103520:	4618      	mov	r0, r3
 8103522:	bd80      	pop	{r7, pc}
 8103524:	58024400 	.word	0x58024400
 8103528:	0810d5b4 	.word	0x0810d5b4

0810352c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810352c:	b480      	push	{r7}
 810352e:	b083      	sub	sp, #12
 8103530:	af00      	add	r7, sp, #0
 8103532:	6078      	str	r0, [r7, #4]
 8103534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	223f      	movs	r2, #63	; 0x3f
 810353a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810353c:	4b1a      	ldr	r3, [pc, #104]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 810353e:	691b      	ldr	r3, [r3, #16]
 8103540:	f003 0207 	and.w	r2, r3, #7
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103548:	4b17      	ldr	r3, [pc, #92]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 810354a:	699b      	ldr	r3, [r3, #24]
 810354c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103554:	4b14      	ldr	r3, [pc, #80]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 8103556:	699b      	ldr	r3, [r3, #24]
 8103558:	f003 020f 	and.w	r2, r3, #15
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103560:	4b11      	ldr	r3, [pc, #68]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 8103562:	699b      	ldr	r3, [r3, #24]
 8103564:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810356c:	4b0e      	ldr	r3, [pc, #56]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 810356e:	69db      	ldr	r3, [r3, #28]
 8103570:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103578:	4b0b      	ldr	r3, [pc, #44]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 810357a:	69db      	ldr	r3, [r3, #28]
 810357c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103584:	4b08      	ldr	r3, [pc, #32]	; (81035a8 <HAL_RCC_GetClockConfig+0x7c>)
 8103586:	6a1b      	ldr	r3, [r3, #32]
 8103588:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103590:	4b06      	ldr	r3, [pc, #24]	; (81035ac <HAL_RCC_GetClockConfig+0x80>)
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	f003 020f 	and.w	r2, r3, #15
 8103598:	683b      	ldr	r3, [r7, #0]
 810359a:	601a      	str	r2, [r3, #0]
}
 810359c:	bf00      	nop
 810359e:	370c      	adds	r7, #12
 81035a0:	46bd      	mov	sp, r7
 81035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035a6:	4770      	bx	lr
 81035a8:	58024400 	.word	0x58024400
 81035ac:	52002000 	.word	0x52002000

081035b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81035b0:	b580      	push	{r7, lr}
 81035b2:	b086      	sub	sp, #24
 81035b4:	af00      	add	r7, sp, #0
 81035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81035b8:	2300      	movs	r3, #0
 81035ba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81035bc:	2300      	movs	r3, #0
 81035be:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81035c8:	2b00      	cmp	r3, #0
 81035ca:	d03f      	beq.n	810364c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81035d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81035d4:	d02a      	beq.n	810362c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81035d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81035da:	d824      	bhi.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81035dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81035e0:	d018      	beq.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81035e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81035e6:	d81e      	bhi.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d003      	beq.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81035ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81035f0:	d007      	beq.n	8103602 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81035f2:	e018      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035f4:	4ba3      	ldr	r3, [pc, #652]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035f8:	4aa2      	ldr	r2, [pc, #648]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81035fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103600:	e015      	b.n	810362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	3304      	adds	r3, #4
 8103606:	2102      	movs	r1, #2
 8103608:	4618      	mov	r0, r3
 810360a:	f000 ff17 	bl	810443c <RCCEx_PLL2_Config>
 810360e:	4603      	mov	r3, r0
 8103610:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103612:	e00c      	b.n	810362e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	3324      	adds	r3, #36	; 0x24
 8103618:	2102      	movs	r1, #2
 810361a:	4618      	mov	r0, r3
 810361c:	f000 ffc0 	bl	81045a0 <RCCEx_PLL3_Config>
 8103620:	4603      	mov	r3, r0
 8103622:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103624:	e003      	b.n	810362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103626:	2301      	movs	r3, #1
 8103628:	75fb      	strb	r3, [r7, #23]
      break;
 810362a:	e000      	b.n	810362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810362c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810362e:	7dfb      	ldrb	r3, [r7, #23]
 8103630:	2b00      	cmp	r3, #0
 8103632:	d109      	bne.n	8103648 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103634:	4b93      	ldr	r3, [pc, #588]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103640:	4990      	ldr	r1, [pc, #576]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103642:	4313      	orrs	r3, r2
 8103644:	650b      	str	r3, [r1, #80]	; 0x50
 8103646:	e001      	b.n	810364c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103648:	7dfb      	ldrb	r3, [r7, #23]
 810364a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103654:	2b00      	cmp	r3, #0
 8103656:	d03d      	beq.n	81036d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810365c:	2b04      	cmp	r3, #4
 810365e:	d826      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103660:	a201      	add	r2, pc, #4	; (adr r2, 8103668 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103666:	bf00      	nop
 8103668:	0810367d 	.word	0x0810367d
 810366c:	0810368b 	.word	0x0810368b
 8103670:	0810369d 	.word	0x0810369d
 8103674:	081036b5 	.word	0x081036b5
 8103678:	081036b5 	.word	0x081036b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810367c:	4b81      	ldr	r3, [pc, #516]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103680:	4a80      	ldr	r2, [pc, #512]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103686:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103688:	e015      	b.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	3304      	adds	r3, #4
 810368e:	2100      	movs	r1, #0
 8103690:	4618      	mov	r0, r3
 8103692:	f000 fed3 	bl	810443c <RCCEx_PLL2_Config>
 8103696:	4603      	mov	r3, r0
 8103698:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810369a:	e00c      	b.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	3324      	adds	r3, #36	; 0x24
 81036a0:	2100      	movs	r1, #0
 81036a2:	4618      	mov	r0, r3
 81036a4:	f000 ff7c 	bl	81045a0 <RCCEx_PLL3_Config>
 81036a8:	4603      	mov	r3, r0
 81036aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81036ac:	e003      	b.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036ae:	2301      	movs	r3, #1
 81036b0:	75fb      	strb	r3, [r7, #23]
      break;
 81036b2:	e000      	b.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036b6:	7dfb      	ldrb	r3, [r7, #23]
 81036b8:	2b00      	cmp	r3, #0
 81036ba:	d109      	bne.n	81036d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81036bc:	4b71      	ldr	r3, [pc, #452]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036c0:	f023 0207 	bic.w	r2, r3, #7
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036c8:	496e      	ldr	r1, [pc, #440]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81036ca:	4313      	orrs	r3, r2
 81036cc:	650b      	str	r3, [r1, #80]	; 0x50
 81036ce:	e001      	b.n	81036d4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036d0:	7dfb      	ldrb	r3, [r7, #23]
 81036d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81036dc:	2b00      	cmp	r3, #0
 81036de:	d042      	beq.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81036e8:	d02b      	beq.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81036ee:	d825      	bhi.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81036f0:	2bc0      	cmp	r3, #192	; 0xc0
 81036f2:	d028      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81036f4:	2bc0      	cmp	r3, #192	; 0xc0
 81036f6:	d821      	bhi.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81036f8:	2b80      	cmp	r3, #128	; 0x80
 81036fa:	d016      	beq.n	810372a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81036fc:	2b80      	cmp	r3, #128	; 0x80
 81036fe:	d81d      	bhi.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103700:	2b00      	cmp	r3, #0
 8103702:	d002      	beq.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103704:	2b40      	cmp	r3, #64	; 0x40
 8103706:	d007      	beq.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103708:	e018      	b.n	810373c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810370a:	4b5e      	ldr	r3, [pc, #376]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810370e:	4a5d      	ldr	r2, [pc, #372]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103714:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103716:	e017      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103718:	687b      	ldr	r3, [r7, #4]
 810371a:	3304      	adds	r3, #4
 810371c:	2100      	movs	r1, #0
 810371e:	4618      	mov	r0, r3
 8103720:	f000 fe8c 	bl	810443c <RCCEx_PLL2_Config>
 8103724:	4603      	mov	r3, r0
 8103726:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103728:	e00e      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	3324      	adds	r3, #36	; 0x24
 810372e:	2100      	movs	r1, #0
 8103730:	4618      	mov	r0, r3
 8103732:	f000 ff35 	bl	81045a0 <RCCEx_PLL3_Config>
 8103736:	4603      	mov	r3, r0
 8103738:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810373a:	e005      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810373c:	2301      	movs	r3, #1
 810373e:	75fb      	strb	r3, [r7, #23]
      break;
 8103740:	e002      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103742:	bf00      	nop
 8103744:	e000      	b.n	8103748 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103748:	7dfb      	ldrb	r3, [r7, #23]
 810374a:	2b00      	cmp	r3, #0
 810374c:	d109      	bne.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810374e:	4b4d      	ldr	r3, [pc, #308]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103752:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810375a:	494a      	ldr	r1, [pc, #296]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810375c:	4313      	orrs	r3, r2
 810375e:	650b      	str	r3, [r1, #80]	; 0x50
 8103760:	e001      	b.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103762:	7dfb      	ldrb	r3, [r7, #23]
 8103764:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	681b      	ldr	r3, [r3, #0]
 810376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810376e:	2b00      	cmp	r3, #0
 8103770:	d049      	beq.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810377c:	d030      	beq.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810377e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103782:	d82a      	bhi.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103784:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103788:	d02c      	beq.n	81037e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810378a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810378e:	d824      	bhi.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103794:	d018      	beq.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810379a:	d81e      	bhi.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810379c:	2b00      	cmp	r3, #0
 810379e:	d003      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81037a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81037a4:	d007      	beq.n	81037b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81037a6:	e018      	b.n	81037da <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037a8:	4b36      	ldr	r3, [pc, #216]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ac:	4a35      	ldr	r2, [pc, #212]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81037b4:	e017      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	3304      	adds	r3, #4
 81037ba:	2100      	movs	r1, #0
 81037bc:	4618      	mov	r0, r3
 81037be:	f000 fe3d 	bl	810443c <RCCEx_PLL2_Config>
 81037c2:	4603      	mov	r3, r0
 81037c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81037c6:	e00e      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	3324      	adds	r3, #36	; 0x24
 81037cc:	2100      	movs	r1, #0
 81037ce:	4618      	mov	r0, r3
 81037d0:	f000 fee6 	bl	81045a0 <RCCEx_PLL3_Config>
 81037d4:	4603      	mov	r3, r0
 81037d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81037d8:	e005      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81037da:	2301      	movs	r3, #1
 81037dc:	75fb      	strb	r3, [r7, #23]
      break;
 81037de:	e002      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81037e0:	bf00      	nop
 81037e2:	e000      	b.n	81037e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81037e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037e6:	7dfb      	ldrb	r3, [r7, #23]
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d10a      	bne.n	8103802 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81037ec:	4b25      	ldr	r3, [pc, #148]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037f0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81037fa:	4922      	ldr	r1, [pc, #136]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037fc:	4313      	orrs	r3, r2
 81037fe:	658b      	str	r3, [r1, #88]	; 0x58
 8103800:	e001      	b.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103802:	7dfb      	ldrb	r3, [r7, #23]
 8103804:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810380e:	2b00      	cmp	r3, #0
 8103810:	d04b      	beq.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810381c:	d030      	beq.n	8103880 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810381e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103822:	d82a      	bhi.n	810387a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103828:	d02e      	beq.n	8103888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810382a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810382e:	d824      	bhi.n	810387a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103834:	d018      	beq.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810383a:	d81e      	bhi.n	810387a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810383c:	2b00      	cmp	r3, #0
 810383e:	d003      	beq.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103844:	d007      	beq.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103846:	e018      	b.n	810387a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103848:	4b0e      	ldr	r3, [pc, #56]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810384c:	4a0d      	ldr	r2, [pc, #52]	; (8103884 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810384e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103854:	e019      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	3304      	adds	r3, #4
 810385a:	2100      	movs	r1, #0
 810385c:	4618      	mov	r0, r3
 810385e:	f000 fded 	bl	810443c <RCCEx_PLL2_Config>
 8103862:	4603      	mov	r3, r0
 8103864:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103866:	e010      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	3324      	adds	r3, #36	; 0x24
 810386c:	2100      	movs	r1, #0
 810386e:	4618      	mov	r0, r3
 8103870:	f000 fe96 	bl	81045a0 <RCCEx_PLL3_Config>
 8103874:	4603      	mov	r3, r0
 8103876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103878:	e007      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810387a:	2301      	movs	r3, #1
 810387c:	75fb      	strb	r3, [r7, #23]
      break;
 810387e:	e004      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103880:	bf00      	nop
 8103882:	e002      	b.n	810388a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103884:	58024400 	.word	0x58024400
      break;
 8103888:	bf00      	nop
    }

    if(ret == HAL_OK)
 810388a:	7dfb      	ldrb	r3, [r7, #23]
 810388c:	2b00      	cmp	r3, #0
 810388e:	d10a      	bne.n	81038a6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103890:	4b99      	ldr	r3, [pc, #612]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103894:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810389e:	4996      	ldr	r1, [pc, #600]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038a0:	4313      	orrs	r3, r2
 81038a2:	658b      	str	r3, [r1, #88]	; 0x58
 81038a4:	e001      	b.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038a6:	7dfb      	ldrb	r3, [r7, #23]
 81038a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81038b2:	2b00      	cmp	r3, #0
 81038b4:	d032      	beq.n	810391c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81038ba:	2b30      	cmp	r3, #48	; 0x30
 81038bc:	d01c      	beq.n	81038f8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 81038be:	2b30      	cmp	r3, #48	; 0x30
 81038c0:	d817      	bhi.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81038c2:	2b20      	cmp	r3, #32
 81038c4:	d00c      	beq.n	81038e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 81038c6:	2b20      	cmp	r3, #32
 81038c8:	d813      	bhi.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d016      	beq.n	81038fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 81038ce:	2b10      	cmp	r3, #16
 81038d0:	d10f      	bne.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038d2:	4b89      	ldr	r3, [pc, #548]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038d6:	4a88      	ldr	r2, [pc, #544]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81038d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81038de:	e00e      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	3304      	adds	r3, #4
 81038e4:	2102      	movs	r1, #2
 81038e6:	4618      	mov	r0, r3
 81038e8:	f000 fda8 	bl	810443c <RCCEx_PLL2_Config>
 81038ec:	4603      	mov	r3, r0
 81038ee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81038f0:	e005      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81038f2:	2301      	movs	r3, #1
 81038f4:	75fb      	strb	r3, [r7, #23]
      break;
 81038f6:	e002      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81038f8:	bf00      	nop
 81038fa:	e000      	b.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81038fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038fe:	7dfb      	ldrb	r3, [r7, #23]
 8103900:	2b00      	cmp	r3, #0
 8103902:	d109      	bne.n	8103918 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103904:	4b7c      	ldr	r3, [pc, #496]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103908:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103910:	4979      	ldr	r1, [pc, #484]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103912:	4313      	orrs	r3, r2
 8103914:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103916:	e001      	b.n	810391c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103918:	7dfb      	ldrb	r3, [r7, #23]
 810391a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103924:	2b00      	cmp	r3, #0
 8103926:	d047      	beq.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810392c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103930:	d030      	beq.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103936:	d82a      	bhi.n	810398e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810393c:	d02c      	beq.n	8103998 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 810393e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103942:	d824      	bhi.n	810398e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103948:	d018      	beq.n	810397c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810394e:	d81e      	bhi.n	810398e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103950:	2b00      	cmp	r3, #0
 8103952:	d003      	beq.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103958:	d007      	beq.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810395a:	e018      	b.n	810398e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810395c:	4b66      	ldr	r3, [pc, #408]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103960:	4a65      	ldr	r2, [pc, #404]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103968:	e017      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	3304      	adds	r3, #4
 810396e:	2100      	movs	r1, #0
 8103970:	4618      	mov	r0, r3
 8103972:	f000 fd63 	bl	810443c <RCCEx_PLL2_Config>
 8103976:	4603      	mov	r3, r0
 8103978:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810397a:	e00e      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	3324      	adds	r3, #36	; 0x24
 8103980:	2100      	movs	r1, #0
 8103982:	4618      	mov	r0, r3
 8103984:	f000 fe0c 	bl	81045a0 <RCCEx_PLL3_Config>
 8103988:	4603      	mov	r3, r0
 810398a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810398c:	e005      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810398e:	2301      	movs	r3, #1
 8103990:	75fb      	strb	r3, [r7, #23]
      break;
 8103992:	e002      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103994:	bf00      	nop
 8103996:	e000      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103998:	bf00      	nop
    }

    if(ret == HAL_OK)
 810399a:	7dfb      	ldrb	r3, [r7, #23]
 810399c:	2b00      	cmp	r3, #0
 810399e:	d109      	bne.n	81039b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81039a0:	4b55      	ldr	r3, [pc, #340]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039ac:	4952      	ldr	r1, [pc, #328]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81039ae:	4313      	orrs	r3, r2
 81039b0:	650b      	str	r3, [r1, #80]	; 0x50
 81039b2:	e001      	b.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039b4:	7dfb      	ldrb	r3, [r7, #23]
 81039b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d049      	beq.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81039cc:	d02e      	beq.n	8103a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 81039ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81039d2:	d828      	bhi.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81039d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81039d8:	d02a      	beq.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0x480>
 81039da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81039de:	d822      	bhi.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81039e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81039e4:	d026      	beq.n	8103a34 <HAL_RCCEx_PeriphCLKConfig+0x484>
 81039e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81039ea:	d81c      	bhi.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81039ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81039f0:	d010      	beq.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x464>
 81039f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81039f6:	d816      	bhi.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d01d      	beq.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x488>
 81039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103a00:	d111      	bne.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	3304      	adds	r3, #4
 8103a06:	2101      	movs	r1, #1
 8103a08:	4618      	mov	r0, r3
 8103a0a:	f000 fd17 	bl	810443c <RCCEx_PLL2_Config>
 8103a0e:	4603      	mov	r3, r0
 8103a10:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103a12:	e012      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	3324      	adds	r3, #36	; 0x24
 8103a18:	2101      	movs	r1, #1
 8103a1a:	4618      	mov	r0, r3
 8103a1c:	f000 fdc0 	bl	81045a0 <RCCEx_PLL3_Config>
 8103a20:	4603      	mov	r3, r0
 8103a22:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103a24:	e009      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a26:	2301      	movs	r3, #1
 8103a28:	75fb      	strb	r3, [r7, #23]
      break;
 8103a2a:	e006      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103a2c:	bf00      	nop
 8103a2e:	e004      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103a30:	bf00      	nop
 8103a32:	e002      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103a34:	bf00      	nop
 8103a36:	e000      	b.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a3a:	7dfb      	ldrb	r3, [r7, #23]
 8103a3c:	2b00      	cmp	r3, #0
 8103a3e:	d109      	bne.n	8103a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103a40:	4b2d      	ldr	r3, [pc, #180]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a44:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103a4c:	492a      	ldr	r1, [pc, #168]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a4e:	4313      	orrs	r3, r2
 8103a50:	650b      	str	r3, [r1, #80]	; 0x50
 8103a52:	e001      	b.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a54:	7dfb      	ldrb	r3, [r7, #23]
 8103a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d04d      	beq.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103a6e:	d02e      	beq.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103a74:	d828      	bhi.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103a7a:	d02a      	beq.n	8103ad2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103a80:	d822      	bhi.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103a82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103a86:	d026      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103a88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103a8c:	d81c      	bhi.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a92:	d010      	beq.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103a98:	d816      	bhi.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103a9a:	2b00      	cmp	r3, #0
 8103a9c:	d01d      	beq.n	8103ada <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103aa2:	d111      	bne.n	8103ac8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	3304      	adds	r3, #4
 8103aa8:	2101      	movs	r1, #1
 8103aaa:	4618      	mov	r0, r3
 8103aac:	f000 fcc6 	bl	810443c <RCCEx_PLL2_Config>
 8103ab0:	4603      	mov	r3, r0
 8103ab2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ab4:	e012      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	3324      	adds	r3, #36	; 0x24
 8103aba:	2101      	movs	r1, #1
 8103abc:	4618      	mov	r0, r3
 8103abe:	f000 fd6f 	bl	81045a0 <RCCEx_PLL3_Config>
 8103ac2:	4603      	mov	r3, r0
 8103ac4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ac6:	e009      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103ac8:	2301      	movs	r3, #1
 8103aca:	75fb      	strb	r3, [r7, #23]
      break;
 8103acc:	e006      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103ace:	bf00      	nop
 8103ad0:	e004      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103ad2:	bf00      	nop
 8103ad4:	e002      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103ad6:	bf00      	nop
 8103ad8:	e000      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103adc:	7dfb      	ldrb	r3, [r7, #23]
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d10c      	bne.n	8103afc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103ae2:	4b05      	ldr	r3, [pc, #20]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ae6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103af0:	4901      	ldr	r1, [pc, #4]	; (8103af8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103af2:	4313      	orrs	r3, r2
 8103af4:	658b      	str	r3, [r1, #88]	; 0x58
 8103af6:	e003      	b.n	8103b00 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103afc:	7dfb      	ldrb	r3, [r7, #23]
 8103afe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d02f      	beq.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103b14:	d00e      	beq.n	8103b34 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103b1a:	d814      	bhi.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103b1c:	2b00      	cmp	r3, #0
 8103b1e:	d015      	beq.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103b24:	d10f      	bne.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b26:	4bb0      	ldr	r3, [pc, #704]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b2a:	4aaf      	ldr	r2, [pc, #700]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103b32:	e00c      	b.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	3304      	adds	r3, #4
 8103b38:	2101      	movs	r1, #1
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f000 fc7e 	bl	810443c <RCCEx_PLL2_Config>
 8103b40:	4603      	mov	r3, r0
 8103b42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103b44:	e003      	b.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b46:	2301      	movs	r3, #1
 8103b48:	75fb      	strb	r3, [r7, #23]
      break;
 8103b4a:	e000      	b.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b4e:	7dfb      	ldrb	r3, [r7, #23]
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d109      	bne.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103b54:	4ba4      	ldr	r3, [pc, #656]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b60:	49a1      	ldr	r1, [pc, #644]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b62:	4313      	orrs	r3, r2
 8103b64:	650b      	str	r3, [r1, #80]	; 0x50
 8103b66:	e001      	b.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b68:	7dfb      	ldrb	r3, [r7, #23]
 8103b6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d032      	beq.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103b7c:	2b03      	cmp	r3, #3
 8103b7e:	d81b      	bhi.n	8103bb8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103b80:	a201      	add	r2, pc, #4	; (adr r2, 8103b88 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b86:	bf00      	nop
 8103b88:	08103bbf 	.word	0x08103bbf
 8103b8c:	08103b99 	.word	0x08103b99
 8103b90:	08103ba7 	.word	0x08103ba7
 8103b94:	08103bbf 	.word	0x08103bbf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b98:	4b93      	ldr	r3, [pc, #588]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b9c:	4a92      	ldr	r2, [pc, #584]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103ba4:	e00c      	b.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	3304      	adds	r3, #4
 8103baa:	2102      	movs	r1, #2
 8103bac:	4618      	mov	r0, r3
 8103bae:	f000 fc45 	bl	810443c <RCCEx_PLL2_Config>
 8103bb2:	4603      	mov	r3, r0
 8103bb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103bb6:	e003      	b.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103bb8:	2301      	movs	r3, #1
 8103bba:	75fb      	strb	r3, [r7, #23]
      break;
 8103bbc:	e000      	b.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bc0:	7dfb      	ldrb	r3, [r7, #23]
 8103bc2:	2b00      	cmp	r3, #0
 8103bc4:	d109      	bne.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103bc6:	4b88      	ldr	r3, [pc, #544]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103bca:	f023 0203 	bic.w	r2, r3, #3
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103bd2:	4985      	ldr	r1, [pc, #532]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103bd4:	4313      	orrs	r3, r2
 8103bd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103bd8:	e001      	b.n	8103bde <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bda:	7dfb      	ldrb	r3, [r7, #23]
 8103bdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	f000 8088 	beq.w	8103cfc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103bec:	4b7f      	ldr	r3, [pc, #508]	; (8103dec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	4a7e      	ldr	r2, [pc, #504]	; (8103dec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103bf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103bf8:	f7fe f8ac 	bl	8101d54 <HAL_GetTick>
 8103bfc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103bfe:	e009      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103c00:	f7fe f8a8 	bl	8101d54 <HAL_GetTick>
 8103c04:	4602      	mov	r2, r0
 8103c06:	693b      	ldr	r3, [r7, #16]
 8103c08:	1ad3      	subs	r3, r2, r3
 8103c0a:	2b64      	cmp	r3, #100	; 0x64
 8103c0c:	d902      	bls.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103c0e:	2303      	movs	r3, #3
 8103c10:	75fb      	strb	r3, [r7, #23]
        break;
 8103c12:	e005      	b.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103c14:	4b75      	ldr	r3, [pc, #468]	; (8103dec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103c1c:	2b00      	cmp	r3, #0
 8103c1e:	d0ef      	beq.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103c20:	7dfb      	ldrb	r3, [r7, #23]
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d168      	bne.n	8103cf8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103c26:	4b70      	ldr	r3, [pc, #448]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103c30:	4053      	eors	r3, r2
 8103c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d013      	beq.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103c3a:	4b6b      	ldr	r3, [pc, #428]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103c42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103c44:	4b68      	ldr	r3, [pc, #416]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c48:	4a67      	ldr	r2, [pc, #412]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103c4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103c50:	4b65      	ldr	r3, [pc, #404]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c54:	4a64      	ldr	r2, [pc, #400]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103c5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103c5c:	4a62      	ldr	r2, [pc, #392]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c5e:	68fb      	ldr	r3, [r7, #12]
 8103c60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c6c:	d115      	bne.n	8103c9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103c6e:	f7fe f871 	bl	8101d54 <HAL_GetTick>
 8103c72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103c74:	e00b      	b.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103c76:	f7fe f86d 	bl	8101d54 <HAL_GetTick>
 8103c7a:	4602      	mov	r2, r0
 8103c7c:	693b      	ldr	r3, [r7, #16]
 8103c7e:	1ad3      	subs	r3, r2, r3
 8103c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8103c84:	4293      	cmp	r3, r2
 8103c86:	d902      	bls.n	8103c8e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103c88:	2303      	movs	r3, #3
 8103c8a:	75fb      	strb	r3, [r7, #23]
            break;
 8103c8c:	e005      	b.n	8103c9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103c8e:	4b56      	ldr	r3, [pc, #344]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103c92:	f003 0302 	and.w	r3, r3, #2
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d0ed      	beq.n	8103c76 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103c9a:	7dfb      	ldrb	r3, [r7, #23]
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d128      	bne.n	8103cf2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103cae:	d10f      	bne.n	8103cd0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103cb0:	4b4d      	ldr	r3, [pc, #308]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cb2:	691b      	ldr	r3, [r3, #16]
 8103cb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103cbe:	091b      	lsrs	r3, r3, #4
 8103cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103cc4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103cc8:	4947      	ldr	r1, [pc, #284]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cca:	4313      	orrs	r3, r2
 8103ccc:	610b      	str	r3, [r1, #16]
 8103cce:	e005      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103cd0:	4b45      	ldr	r3, [pc, #276]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cd2:	691b      	ldr	r3, [r3, #16]
 8103cd4:	4a44      	ldr	r2, [pc, #272]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103cda:	6113      	str	r3, [r2, #16]
 8103cdc:	4b42      	ldr	r3, [pc, #264]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103cea:	493f      	ldr	r1, [pc, #252]	; (8103de8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cec:	4313      	orrs	r3, r2
 8103cee:	670b      	str	r3, [r1, #112]	; 0x70
 8103cf0:	e004      	b.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103cf2:	7dfb      	ldrb	r3, [r7, #23]
 8103cf4:	75bb      	strb	r3, [r7, #22]
 8103cf6:	e001      	b.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cf8:	7dfb      	ldrb	r3, [r7, #23]
 8103cfa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	f003 0301 	and.w	r3, r3, #1
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	f000 8083 	beq.w	8103e10 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103d0e:	2b28      	cmp	r3, #40	; 0x28
 8103d10:	d866      	bhi.n	8103de0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103d12:	a201      	add	r2, pc, #4	; (adr r2, 8103d18 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d18:	08103df1 	.word	0x08103df1
 8103d1c:	08103de1 	.word	0x08103de1
 8103d20:	08103de1 	.word	0x08103de1
 8103d24:	08103de1 	.word	0x08103de1
 8103d28:	08103de1 	.word	0x08103de1
 8103d2c:	08103de1 	.word	0x08103de1
 8103d30:	08103de1 	.word	0x08103de1
 8103d34:	08103de1 	.word	0x08103de1
 8103d38:	08103dbd 	.word	0x08103dbd
 8103d3c:	08103de1 	.word	0x08103de1
 8103d40:	08103de1 	.word	0x08103de1
 8103d44:	08103de1 	.word	0x08103de1
 8103d48:	08103de1 	.word	0x08103de1
 8103d4c:	08103de1 	.word	0x08103de1
 8103d50:	08103de1 	.word	0x08103de1
 8103d54:	08103de1 	.word	0x08103de1
 8103d58:	08103dcf 	.word	0x08103dcf
 8103d5c:	08103de1 	.word	0x08103de1
 8103d60:	08103de1 	.word	0x08103de1
 8103d64:	08103de1 	.word	0x08103de1
 8103d68:	08103de1 	.word	0x08103de1
 8103d6c:	08103de1 	.word	0x08103de1
 8103d70:	08103de1 	.word	0x08103de1
 8103d74:	08103de1 	.word	0x08103de1
 8103d78:	08103df1 	.word	0x08103df1
 8103d7c:	08103de1 	.word	0x08103de1
 8103d80:	08103de1 	.word	0x08103de1
 8103d84:	08103de1 	.word	0x08103de1
 8103d88:	08103de1 	.word	0x08103de1
 8103d8c:	08103de1 	.word	0x08103de1
 8103d90:	08103de1 	.word	0x08103de1
 8103d94:	08103de1 	.word	0x08103de1
 8103d98:	08103df1 	.word	0x08103df1
 8103d9c:	08103de1 	.word	0x08103de1
 8103da0:	08103de1 	.word	0x08103de1
 8103da4:	08103de1 	.word	0x08103de1
 8103da8:	08103de1 	.word	0x08103de1
 8103dac:	08103de1 	.word	0x08103de1
 8103db0:	08103de1 	.word	0x08103de1
 8103db4:	08103de1 	.word	0x08103de1
 8103db8:	08103df1 	.word	0x08103df1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	3304      	adds	r3, #4
 8103dc0:	2101      	movs	r1, #1
 8103dc2:	4618      	mov	r0, r3
 8103dc4:	f000 fb3a 	bl	810443c <RCCEx_PLL2_Config>
 8103dc8:	4603      	mov	r3, r0
 8103dca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103dcc:	e011      	b.n	8103df2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	3324      	adds	r3, #36	; 0x24
 8103dd2:	2101      	movs	r1, #1
 8103dd4:	4618      	mov	r0, r3
 8103dd6:	f000 fbe3 	bl	81045a0 <RCCEx_PLL3_Config>
 8103dda:	4603      	mov	r3, r0
 8103ddc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103dde:	e008      	b.n	8103df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103de0:	2301      	movs	r3, #1
 8103de2:	75fb      	strb	r3, [r7, #23]
      break;
 8103de4:	e005      	b.n	8103df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8103de6:	bf00      	nop
 8103de8:	58024400 	.word	0x58024400
 8103dec:	58024800 	.word	0x58024800
      break;
 8103df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103df2:	7dfb      	ldrb	r3, [r7, #23]
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d109      	bne.n	8103e0c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103df8:	4b96      	ldr	r3, [pc, #600]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dfc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103e04:	4993      	ldr	r1, [pc, #588]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103e06:	4313      	orrs	r3, r2
 8103e08:	654b      	str	r3, [r1, #84]	; 0x54
 8103e0a:	e001      	b.n	8103e10 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e0c:	7dfb      	ldrb	r3, [r7, #23]
 8103e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	f003 0302 	and.w	r3, r3, #2
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d038      	beq.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103e20:	2b05      	cmp	r3, #5
 8103e22:	d821      	bhi.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103e24:	a201      	add	r2, pc, #4	; (adr r2, 8103e2c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8103e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e2a:	bf00      	nop
 8103e2c:	08103e6f 	.word	0x08103e6f
 8103e30:	08103e45 	.word	0x08103e45
 8103e34:	08103e57 	.word	0x08103e57
 8103e38:	08103e6f 	.word	0x08103e6f
 8103e3c:	08103e6f 	.word	0x08103e6f
 8103e40:	08103e6f 	.word	0x08103e6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	3304      	adds	r3, #4
 8103e48:	2101      	movs	r1, #1
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	f000 faf6 	bl	810443c <RCCEx_PLL2_Config>
 8103e50:	4603      	mov	r3, r0
 8103e52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103e54:	e00c      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	3324      	adds	r3, #36	; 0x24
 8103e5a:	2101      	movs	r1, #1
 8103e5c:	4618      	mov	r0, r3
 8103e5e:	f000 fb9f 	bl	81045a0 <RCCEx_PLL3_Config>
 8103e62:	4603      	mov	r3, r0
 8103e64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103e66:	e003      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e68:	2301      	movs	r3, #1
 8103e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8103e6c:	e000      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8103e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e70:	7dfb      	ldrb	r3, [r7, #23]
 8103e72:	2b00      	cmp	r3, #0
 8103e74:	d109      	bne.n	8103e8a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103e76:	4b77      	ldr	r3, [pc, #476]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e7a:	f023 0207 	bic.w	r2, r3, #7
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103e82:	4974      	ldr	r1, [pc, #464]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103e84:	4313      	orrs	r3, r2
 8103e86:	654b      	str	r3, [r1, #84]	; 0x54
 8103e88:	e001      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e8a:	7dfb      	ldrb	r3, [r7, #23]
 8103e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	f003 0304 	and.w	r3, r3, #4
 8103e96:	2b00      	cmp	r3, #0
 8103e98:	d03a      	beq.n	8103f10 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103ea0:	2b05      	cmp	r3, #5
 8103ea2:	d821      	bhi.n	8103ee8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8103ea4:	a201      	add	r2, pc, #4	; (adr r2, 8103eac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8103ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103eaa:	bf00      	nop
 8103eac:	08103eef 	.word	0x08103eef
 8103eb0:	08103ec5 	.word	0x08103ec5
 8103eb4:	08103ed7 	.word	0x08103ed7
 8103eb8:	08103eef 	.word	0x08103eef
 8103ebc:	08103eef 	.word	0x08103eef
 8103ec0:	08103eef 	.word	0x08103eef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	3304      	adds	r3, #4
 8103ec8:	2101      	movs	r1, #1
 8103eca:	4618      	mov	r0, r3
 8103ecc:	f000 fab6 	bl	810443c <RCCEx_PLL2_Config>
 8103ed0:	4603      	mov	r3, r0
 8103ed2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103ed4:	e00c      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	3324      	adds	r3, #36	; 0x24
 8103eda:	2101      	movs	r1, #1
 8103edc:	4618      	mov	r0, r3
 8103ede:	f000 fb5f 	bl	81045a0 <RCCEx_PLL3_Config>
 8103ee2:	4603      	mov	r3, r0
 8103ee4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103ee6:	e003      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ee8:	2301      	movs	r3, #1
 8103eea:	75fb      	strb	r3, [r7, #23]
      break;
 8103eec:	e000      	b.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8103eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ef0:	7dfb      	ldrb	r3, [r7, #23]
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d10a      	bne.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103ef6:	4b57      	ldr	r3, [pc, #348]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103efa:	f023 0207 	bic.w	r2, r3, #7
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103f04:	4953      	ldr	r1, [pc, #332]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f06:	4313      	orrs	r3, r2
 8103f08:	658b      	str	r3, [r1, #88]	; 0x58
 8103f0a:	e001      	b.n	8103f10 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f0c:	7dfb      	ldrb	r3, [r7, #23]
 8103f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	f003 0320 	and.w	r3, r3, #32
 8103f18:	2b00      	cmp	r3, #0
 8103f1a:	d04b      	beq.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103f26:	d02e      	beq.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103f2c:	d828      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103f32:	d02a      	beq.n	8103f8a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103f38:	d822      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103f3e:	d026      	beq.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103f44:	d81c      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f4a:	d010      	beq.n	8103f6e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f50:	d816      	bhi.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d01d      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8103f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f5a:	d111      	bne.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	3304      	adds	r3, #4
 8103f60:	2100      	movs	r1, #0
 8103f62:	4618      	mov	r0, r3
 8103f64:	f000 fa6a 	bl	810443c <RCCEx_PLL2_Config>
 8103f68:	4603      	mov	r3, r0
 8103f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103f6c:	e012      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	3324      	adds	r3, #36	; 0x24
 8103f72:	2102      	movs	r1, #2
 8103f74:	4618      	mov	r0, r3
 8103f76:	f000 fb13 	bl	81045a0 <RCCEx_PLL3_Config>
 8103f7a:	4603      	mov	r3, r0
 8103f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103f7e:	e009      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f80:	2301      	movs	r3, #1
 8103f82:	75fb      	strb	r3, [r7, #23]
      break;
 8103f84:	e006      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103f86:	bf00      	nop
 8103f88:	e004      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103f8a:	bf00      	nop
 8103f8c:	e002      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103f8e:	bf00      	nop
 8103f90:	e000      	b.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f94:	7dfb      	ldrb	r3, [r7, #23]
 8103f96:	2b00      	cmp	r3, #0
 8103f98:	d10a      	bne.n	8103fb0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103f9a:	4b2e      	ldr	r3, [pc, #184]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103fa8:	492a      	ldr	r1, [pc, #168]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103faa:	4313      	orrs	r3, r2
 8103fac:	654b      	str	r3, [r1, #84]	; 0x54
 8103fae:	e001      	b.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fb0:	7dfb      	ldrb	r3, [r7, #23]
 8103fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d04d      	beq.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103fc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103fca:	d02e      	beq.n	810402a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103fcc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103fd0:	d828      	bhi.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103fd6:	d02a      	beq.n	810402e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103fdc:	d822      	bhi.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103fe2:	d026      	beq.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103fe8:	d81c      	bhi.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103fee:	d010      	beq.n	8104012 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8103ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103ff4:	d816      	bhi.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103ff6:	2b00      	cmp	r3, #0
 8103ff8:	d01d      	beq.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8103ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103ffe:	d111      	bne.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	3304      	adds	r3, #4
 8104004:	2100      	movs	r1, #0
 8104006:	4618      	mov	r0, r3
 8104008:	f000 fa18 	bl	810443c <RCCEx_PLL2_Config>
 810400c:	4603      	mov	r3, r0
 810400e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104010:	e012      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	3324      	adds	r3, #36	; 0x24
 8104016:	2102      	movs	r1, #2
 8104018:	4618      	mov	r0, r3
 810401a:	f000 fac1 	bl	81045a0 <RCCEx_PLL3_Config>
 810401e:	4603      	mov	r3, r0
 8104020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104022:	e009      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104024:	2301      	movs	r3, #1
 8104026:	75fb      	strb	r3, [r7, #23]
      break;
 8104028:	e006      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810402a:	bf00      	nop
 810402c:	e004      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810402e:	bf00      	nop
 8104030:	e002      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104032:	bf00      	nop
 8104034:	e000      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104038:	7dfb      	ldrb	r3, [r7, #23]
 810403a:	2b00      	cmp	r3, #0
 810403c:	d10c      	bne.n	8104058 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810403e:	4b05      	ldr	r3, [pc, #20]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104042:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810404c:	4901      	ldr	r1, [pc, #4]	; (8104054 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810404e:	4313      	orrs	r3, r2
 8104050:	658b      	str	r3, [r1, #88]	; 0x58
 8104052:	e003      	b.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104058:	7dfb      	ldrb	r3, [r7, #23]
 810405a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104064:	2b00      	cmp	r3, #0
 8104066:	d04b      	beq.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810406e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104072:	d02e      	beq.n	81040d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104074:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104078:	d828      	bhi.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810407a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810407e:	d02a      	beq.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104084:	d822      	bhi.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104086:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810408a:	d026      	beq.n	81040da <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 810408c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104090:	d81c      	bhi.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104096:	d010      	beq.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810409c:	d816      	bhi.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d01d      	beq.n	81040de <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81040a6:	d111      	bne.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	3304      	adds	r3, #4
 81040ac:	2100      	movs	r1, #0
 81040ae:	4618      	mov	r0, r3
 81040b0:	f000 f9c4 	bl	810443c <RCCEx_PLL2_Config>
 81040b4:	4603      	mov	r3, r0
 81040b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81040b8:	e012      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	3324      	adds	r3, #36	; 0x24
 81040be:	2102      	movs	r1, #2
 81040c0:	4618      	mov	r0, r3
 81040c2:	f000 fa6d 	bl	81045a0 <RCCEx_PLL3_Config>
 81040c6:	4603      	mov	r3, r0
 81040c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81040ca:	e009      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040cc:	2301      	movs	r3, #1
 81040ce:	75fb      	strb	r3, [r7, #23]
      break;
 81040d0:	e006      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81040d2:	bf00      	nop
 81040d4:	e004      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81040d6:	bf00      	nop
 81040d8:	e002      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81040da:	bf00      	nop
 81040dc:	e000      	b.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81040de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040e0:	7dfb      	ldrb	r3, [r7, #23]
 81040e2:	2b00      	cmp	r3, #0
 81040e4:	d10a      	bne.n	81040fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81040e6:	4b9d      	ldr	r3, [pc, #628]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81040ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81040f4:	4999      	ldr	r1, [pc, #612]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81040f6:	4313      	orrs	r3, r2
 81040f8:	658b      	str	r3, [r1, #88]	; 0x58
 81040fa:	e001      	b.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040fc:	7dfb      	ldrb	r3, [r7, #23]
 81040fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	f003 0308 	and.w	r3, r3, #8
 8104108:	2b00      	cmp	r3, #0
 810410a:	d01a      	beq.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104116:	d10a      	bne.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	3324      	adds	r3, #36	; 0x24
 810411c:	2102      	movs	r1, #2
 810411e:	4618      	mov	r0, r3
 8104120:	f000 fa3e 	bl	81045a0 <RCCEx_PLL3_Config>
 8104124:	4603      	mov	r3, r0
 8104126:	2b00      	cmp	r3, #0
 8104128:	d001      	beq.n	810412e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810412a:	2301      	movs	r3, #1
 810412c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810412e:	4b8b      	ldr	r3, [pc, #556]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810413c:	4987      	ldr	r1, [pc, #540]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810413e:	4313      	orrs	r3, r2
 8104140:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f003 0310 	and.w	r3, r3, #16
 810414a:	2b00      	cmp	r3, #0
 810414c:	d01a      	beq.n	8104184 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104158:	d10a      	bne.n	8104170 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	3324      	adds	r3, #36	; 0x24
 810415e:	2102      	movs	r1, #2
 8104160:	4618      	mov	r0, r3
 8104162:	f000 fa1d 	bl	81045a0 <RCCEx_PLL3_Config>
 8104166:	4603      	mov	r3, r0
 8104168:	2b00      	cmp	r3, #0
 810416a:	d001      	beq.n	8104170 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 810416c:	2301      	movs	r3, #1
 810416e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104170:	4b7a      	ldr	r3, [pc, #488]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810417e:	4977      	ldr	r1, [pc, #476]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104180:	4313      	orrs	r3, r2
 8104182:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810418c:	2b00      	cmp	r3, #0
 810418e:	d034      	beq.n	81041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810419a:	d01d      	beq.n	81041d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 810419c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81041a0:	d817      	bhi.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81041a2:	2b00      	cmp	r3, #0
 81041a4:	d003      	beq.n	81041ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81041aa:	d009      	beq.n	81041c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81041ac:	e011      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	3304      	adds	r3, #4
 81041b2:	2100      	movs	r1, #0
 81041b4:	4618      	mov	r0, r3
 81041b6:	f000 f941 	bl	810443c <RCCEx_PLL2_Config>
 81041ba:	4603      	mov	r3, r0
 81041bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81041be:	e00c      	b.n	81041da <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	3324      	adds	r3, #36	; 0x24
 81041c4:	2102      	movs	r1, #2
 81041c6:	4618      	mov	r0, r3
 81041c8:	f000 f9ea 	bl	81045a0 <RCCEx_PLL3_Config>
 81041cc:	4603      	mov	r3, r0
 81041ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81041d0:	e003      	b.n	81041da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041d2:	2301      	movs	r3, #1
 81041d4:	75fb      	strb	r3, [r7, #23]
      break;
 81041d6:	e000      	b.n	81041da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 81041d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041da:	7dfb      	ldrb	r3, [r7, #23]
 81041dc:	2b00      	cmp	r3, #0
 81041de:	d10a      	bne.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81041e0:	4b5e      	ldr	r3, [pc, #376]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81041ee:	495b      	ldr	r1, [pc, #364]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81041f0:	4313      	orrs	r3, r2
 81041f2:	658b      	str	r3, [r1, #88]	; 0x58
 81041f4:	e001      	b.n	81041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041f6:	7dfb      	ldrb	r3, [r7, #23]
 81041f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104202:	2b00      	cmp	r3, #0
 8104204:	d033      	beq.n	810426e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810420c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104210:	d01c      	beq.n	810424c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104212:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104216:	d816      	bhi.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810421c:	d003      	beq.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810421e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104222:	d007      	beq.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104224:	e00f      	b.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104226:	4b4d      	ldr	r3, [pc, #308]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810422a:	4a4c      	ldr	r2, [pc, #304]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104232:	e00c      	b.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	3324      	adds	r3, #36	; 0x24
 8104238:	2101      	movs	r1, #1
 810423a:	4618      	mov	r0, r3
 810423c:	f000 f9b0 	bl	81045a0 <RCCEx_PLL3_Config>
 8104240:	4603      	mov	r3, r0
 8104242:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104244:	e003      	b.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104246:	2301      	movs	r3, #1
 8104248:	75fb      	strb	r3, [r7, #23]
      break;
 810424a:	e000      	b.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810424c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810424e:	7dfb      	ldrb	r3, [r7, #23]
 8104250:	2b00      	cmp	r3, #0
 8104252:	d10a      	bne.n	810426a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104254:	4b41      	ldr	r3, [pc, #260]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104262:	493e      	ldr	r1, [pc, #248]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104264:	4313      	orrs	r3, r2
 8104266:	654b      	str	r3, [r1, #84]	; 0x54
 8104268:	e001      	b.n	810426e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810426a:	7dfb      	ldrb	r3, [r7, #23]
 810426c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	681b      	ldr	r3, [r3, #0]
 8104272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104276:	2b00      	cmp	r3, #0
 8104278:	d029      	beq.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810427e:	2b00      	cmp	r3, #0
 8104280:	d003      	beq.n	810428a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104286:	d007      	beq.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104288:	e00f      	b.n	81042aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810428a:	4b34      	ldr	r3, [pc, #208]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810428e:	4a33      	ldr	r2, [pc, #204]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104296:	e00b      	b.n	81042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	3304      	adds	r3, #4
 810429c:	2102      	movs	r1, #2
 810429e:	4618      	mov	r0, r3
 81042a0:	f000 f8cc 	bl	810443c <RCCEx_PLL2_Config>
 81042a4:	4603      	mov	r3, r0
 81042a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81042a8:	e002      	b.n	81042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81042aa:	2301      	movs	r3, #1
 81042ac:	75fb      	strb	r3, [r7, #23]
      break;
 81042ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042b0:	7dfb      	ldrb	r3, [r7, #23]
 81042b2:	2b00      	cmp	r3, #0
 81042b4:	d109      	bne.n	81042ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81042b6:	4b29      	ldr	r3, [pc, #164]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042c2:	4926      	ldr	r1, [pc, #152]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042c4:	4313      	orrs	r3, r2
 81042c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81042c8:	e001      	b.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ca:	7dfb      	ldrb	r3, [r7, #23]
 81042cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d00a      	beq.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	3324      	adds	r3, #36	; 0x24
 81042de:	2102      	movs	r1, #2
 81042e0:	4618      	mov	r0, r3
 81042e2:	f000 f95d 	bl	81045a0 <RCCEx_PLL3_Config>
 81042e6:	4603      	mov	r3, r0
 81042e8:	2b00      	cmp	r3, #0
 81042ea:	d001      	beq.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81042ec:	2301      	movs	r3, #1
 81042ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81042f8:	2b00      	cmp	r3, #0
 81042fa:	d033      	beq.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104304:	d017      	beq.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810430a:	d811      	bhi.n	8104330 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810430c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104310:	d013      	beq.n	810433a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104316:	d80b      	bhi.n	8104330 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104318:	2b00      	cmp	r3, #0
 810431a:	d010      	beq.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 810431c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104320:	d106      	bne.n	8104330 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104322:	4b0e      	ldr	r3, [pc, #56]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104326:	4a0d      	ldr	r2, [pc, #52]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810432c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810432e:	e007      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104330:	2301      	movs	r3, #1
 8104332:	75fb      	strb	r3, [r7, #23]
      break;
 8104334:	e004      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104336:	bf00      	nop
 8104338:	e002      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810433a:	bf00      	nop
 810433c:	e000      	b.n	8104340 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810433e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104340:	7dfb      	ldrb	r3, [r7, #23]
 8104342:	2b00      	cmp	r3, #0
 8104344:	d10c      	bne.n	8104360 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104346:	4b05      	ldr	r3, [pc, #20]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810434a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104352:	4902      	ldr	r1, [pc, #8]	; (810435c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104354:	4313      	orrs	r3, r2
 8104356:	654b      	str	r3, [r1, #84]	; 0x54
 8104358:	e004      	b.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810435a:	bf00      	nop
 810435c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104360:	7dfb      	ldrb	r3, [r7, #23]
 8104362:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810436c:	2b00      	cmp	r3, #0
 810436e:	d008      	beq.n	8104382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104370:	4b31      	ldr	r3, [pc, #196]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810437c:	492e      	ldr	r1, [pc, #184]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810437e:	4313      	orrs	r3, r2
 8104380:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810438a:	2b00      	cmp	r3, #0
 810438c:	d009      	beq.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810438e:	4b2a      	ldr	r3, [pc, #168]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104390:	691b      	ldr	r3, [r3, #16]
 8104392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810439c:	4926      	ldr	r1, [pc, #152]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810439e:	4313      	orrs	r3, r2
 81043a0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81043aa:	2b00      	cmp	r3, #0
 81043ac:	d008      	beq.n	81043c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81043ae:	4b22      	ldr	r3, [pc, #136]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81043ba:	491f      	ldr	r1, [pc, #124]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043bc:	4313      	orrs	r3, r2
 81043be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d00d      	beq.n	81043e8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81043cc:	4b1a      	ldr	r3, [pc, #104]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043ce:	691b      	ldr	r3, [r3, #16]
 81043d0:	4a19      	ldr	r2, [pc, #100]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81043d6:	6113      	str	r3, [r2, #16]
 81043d8:	4b17      	ldr	r3, [pc, #92]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043da:	691a      	ldr	r2, [r3, #16]
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81043e2:	4915      	ldr	r1, [pc, #84]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043e4:	4313      	orrs	r3, r2
 81043e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	2b00      	cmp	r3, #0
 81043ee:	da08      	bge.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81043f0:	4b11      	ldr	r3, [pc, #68]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81043f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043fc:	490e      	ldr	r1, [pc, #56]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81043fe:	4313      	orrs	r3, r2
 8104400:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810440a:	2b00      	cmp	r3, #0
 810440c:	d009      	beq.n	8104422 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810440e:	4b0a      	ldr	r3, [pc, #40]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810441c:	4906      	ldr	r1, [pc, #24]	; (8104438 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810441e:	4313      	orrs	r3, r2
 8104420:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104422:	7dbb      	ldrb	r3, [r7, #22]
 8104424:	2b00      	cmp	r3, #0
 8104426:	d101      	bne.n	810442c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104428:	2300      	movs	r3, #0
 810442a:	e000      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810442c:	2301      	movs	r3, #1
}
 810442e:	4618      	mov	r0, r3
 8104430:	3718      	adds	r7, #24
 8104432:	46bd      	mov	sp, r7
 8104434:	bd80      	pop	{r7, pc}
 8104436:	bf00      	nop
 8104438:	58024400 	.word	0x58024400

0810443c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810443c:	b580      	push	{r7, lr}
 810443e:	b084      	sub	sp, #16
 8104440:	af00      	add	r7, sp, #0
 8104442:	6078      	str	r0, [r7, #4]
 8104444:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104446:	2300      	movs	r3, #0
 8104448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810444a:	4b54      	ldr	r3, [pc, #336]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810444e:	f003 0303 	and.w	r3, r3, #3
 8104452:	2b03      	cmp	r3, #3
 8104454:	d101      	bne.n	810445a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104456:	2301      	movs	r3, #1
 8104458:	e09b      	b.n	8104592 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810445a:	4b50      	ldr	r3, [pc, #320]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	4a4f      	ldr	r2, [pc, #316]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104460:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104466:	f7fd fc75 	bl	8101d54 <HAL_GetTick>
 810446a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810446c:	e008      	b.n	8104480 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810446e:	f7fd fc71 	bl	8101d54 <HAL_GetTick>
 8104472:	4602      	mov	r2, r0
 8104474:	68bb      	ldr	r3, [r7, #8]
 8104476:	1ad3      	subs	r3, r2, r3
 8104478:	2b02      	cmp	r3, #2
 810447a:	d901      	bls.n	8104480 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810447c:	2303      	movs	r3, #3
 810447e:	e088      	b.n	8104592 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104480:	4b46      	ldr	r3, [pc, #280]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104488:	2b00      	cmp	r3, #0
 810448a:	d1f0      	bne.n	810446e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810448c:	4b43      	ldr	r3, [pc, #268]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104490:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	031b      	lsls	r3, r3, #12
 810449a:	4940      	ldr	r1, [pc, #256]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810449c:	4313      	orrs	r3, r2
 810449e:	628b      	str	r3, [r1, #40]	; 0x28
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	685b      	ldr	r3, [r3, #4]
 81044a4:	3b01      	subs	r3, #1
 81044a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	689b      	ldr	r3, [r3, #8]
 81044ae:	3b01      	subs	r3, #1
 81044b0:	025b      	lsls	r3, r3, #9
 81044b2:	b29b      	uxth	r3, r3
 81044b4:	431a      	orrs	r2, r3
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	68db      	ldr	r3, [r3, #12]
 81044ba:	3b01      	subs	r3, #1
 81044bc:	041b      	lsls	r3, r3, #16
 81044be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81044c2:	431a      	orrs	r2, r3
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	691b      	ldr	r3, [r3, #16]
 81044c8:	3b01      	subs	r3, #1
 81044ca:	061b      	lsls	r3, r3, #24
 81044cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81044d0:	4932      	ldr	r1, [pc, #200]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044d2:	4313      	orrs	r3, r2
 81044d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81044d6:	4b31      	ldr	r3, [pc, #196]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	695b      	ldr	r3, [r3, #20]
 81044e2:	492e      	ldr	r1, [pc, #184]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044e4:	4313      	orrs	r3, r2
 81044e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81044e8:	4b2c      	ldr	r3, [pc, #176]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044ec:	f023 0220 	bic.w	r2, r3, #32
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	699b      	ldr	r3, [r3, #24]
 81044f4:	4929      	ldr	r1, [pc, #164]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044f6:	4313      	orrs	r3, r2
 81044f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81044fa:	4b28      	ldr	r3, [pc, #160]	; (810459c <RCCEx_PLL2_Config+0x160>)
 81044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044fe:	4a27      	ldr	r2, [pc, #156]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104500:	f023 0310 	bic.w	r3, r3, #16
 8104504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104506:	4b25      	ldr	r3, [pc, #148]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810450e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104512:	687a      	ldr	r2, [r7, #4]
 8104514:	69d2      	ldr	r2, [r2, #28]
 8104516:	00d2      	lsls	r2, r2, #3
 8104518:	4920      	ldr	r1, [pc, #128]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810451a:	4313      	orrs	r3, r2
 810451c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810451e:	4b1f      	ldr	r3, [pc, #124]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104522:	4a1e      	ldr	r2, [pc, #120]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104524:	f043 0310 	orr.w	r3, r3, #16
 8104528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810452a:	683b      	ldr	r3, [r7, #0]
 810452c:	2b00      	cmp	r3, #0
 810452e:	d106      	bne.n	810453e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104530:	4b1a      	ldr	r3, [pc, #104]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104534:	4a19      	ldr	r2, [pc, #100]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810453a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810453c:	e00f      	b.n	810455e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810453e:	683b      	ldr	r3, [r7, #0]
 8104540:	2b01      	cmp	r3, #1
 8104542:	d106      	bne.n	8104552 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104544:	4b15      	ldr	r3, [pc, #84]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104548:	4a14      	ldr	r2, [pc, #80]	; (810459c <RCCEx_PLL2_Config+0x160>)
 810454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810454e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104550:	e005      	b.n	810455e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104552:	4b12      	ldr	r3, [pc, #72]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104556:	4a11      	ldr	r2, [pc, #68]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810455c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810455e:	4b0f      	ldr	r3, [pc, #60]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a0e      	ldr	r2, [pc, #56]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810456a:	f7fd fbf3 	bl	8101d54 <HAL_GetTick>
 810456e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104570:	e008      	b.n	8104584 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104572:	f7fd fbef 	bl	8101d54 <HAL_GetTick>
 8104576:	4602      	mov	r2, r0
 8104578:	68bb      	ldr	r3, [r7, #8]
 810457a:	1ad3      	subs	r3, r2, r3
 810457c:	2b02      	cmp	r3, #2
 810457e:	d901      	bls.n	8104584 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104580:	2303      	movs	r3, #3
 8104582:	e006      	b.n	8104592 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104584:	4b05      	ldr	r3, [pc, #20]	; (810459c <RCCEx_PLL2_Config+0x160>)
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810458c:	2b00      	cmp	r3, #0
 810458e:	d0f0      	beq.n	8104572 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104590:	7bfb      	ldrb	r3, [r7, #15]
}
 8104592:	4618      	mov	r0, r3
 8104594:	3710      	adds	r7, #16
 8104596:	46bd      	mov	sp, r7
 8104598:	bd80      	pop	{r7, pc}
 810459a:	bf00      	nop
 810459c:	58024400 	.word	0x58024400

081045a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81045a0:	b580      	push	{r7, lr}
 81045a2:	b084      	sub	sp, #16
 81045a4:	af00      	add	r7, sp, #0
 81045a6:	6078      	str	r0, [r7, #4]
 81045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81045aa:	2300      	movs	r3, #0
 81045ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81045ae:	4b54      	ldr	r3, [pc, #336]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045b2:	f003 0303 	and.w	r3, r3, #3
 81045b6:	2b03      	cmp	r3, #3
 81045b8:	d101      	bne.n	81045be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81045ba:	2301      	movs	r3, #1
 81045bc:	e09b      	b.n	81046f6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81045be:	4b50      	ldr	r3, [pc, #320]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a4f      	ldr	r2, [pc, #316]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81045c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81045ca:	f7fd fbc3 	bl	8101d54 <HAL_GetTick>
 81045ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81045d0:	e008      	b.n	81045e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81045d2:	f7fd fbbf 	bl	8101d54 <HAL_GetTick>
 81045d6:	4602      	mov	r2, r0
 81045d8:	68bb      	ldr	r3, [r7, #8]
 81045da:	1ad3      	subs	r3, r2, r3
 81045dc:	2b02      	cmp	r3, #2
 81045de:	d901      	bls.n	81045e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81045e0:	2303      	movs	r3, #3
 81045e2:	e088      	b.n	81046f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81045e4:	4b46      	ldr	r3, [pc, #280]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d1f0      	bne.n	81045d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81045f0:	4b43      	ldr	r3, [pc, #268]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81045f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	051b      	lsls	r3, r3, #20
 81045fe:	4940      	ldr	r1, [pc, #256]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104600:	4313      	orrs	r3, r2
 8104602:	628b      	str	r3, [r1, #40]	; 0x28
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	685b      	ldr	r3, [r3, #4]
 8104608:	3b01      	subs	r3, #1
 810460a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	689b      	ldr	r3, [r3, #8]
 8104612:	3b01      	subs	r3, #1
 8104614:	025b      	lsls	r3, r3, #9
 8104616:	b29b      	uxth	r3, r3
 8104618:	431a      	orrs	r2, r3
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	68db      	ldr	r3, [r3, #12]
 810461e:	3b01      	subs	r3, #1
 8104620:	041b      	lsls	r3, r3, #16
 8104622:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104626:	431a      	orrs	r2, r3
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	691b      	ldr	r3, [r3, #16]
 810462c:	3b01      	subs	r3, #1
 810462e:	061b      	lsls	r3, r3, #24
 8104630:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104634:	4932      	ldr	r1, [pc, #200]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104636:	4313      	orrs	r3, r2
 8104638:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810463a:	4b31      	ldr	r3, [pc, #196]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810463e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	695b      	ldr	r3, [r3, #20]
 8104646:	492e      	ldr	r1, [pc, #184]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104648:	4313      	orrs	r3, r2
 810464a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810464c:	4b2c      	ldr	r3, [pc, #176]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104650:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	699b      	ldr	r3, [r3, #24]
 8104658:	4929      	ldr	r1, [pc, #164]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810465a:	4313      	orrs	r3, r2
 810465c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810465e:	4b28      	ldr	r3, [pc, #160]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104662:	4a27      	ldr	r2, [pc, #156]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810466a:	4b25      	ldr	r3, [pc, #148]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104672:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104676:	687a      	ldr	r2, [r7, #4]
 8104678:	69d2      	ldr	r2, [r2, #28]
 810467a:	00d2      	lsls	r2, r2, #3
 810467c:	4920      	ldr	r1, [pc, #128]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810467e:	4313      	orrs	r3, r2
 8104680:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104682:	4b1f      	ldr	r3, [pc, #124]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104686:	4a1e      	ldr	r2, [pc, #120]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810468c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810468e:	683b      	ldr	r3, [r7, #0]
 8104690:	2b00      	cmp	r3, #0
 8104692:	d106      	bne.n	81046a2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104694:	4b1a      	ldr	r3, [pc, #104]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 8104696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104698:	4a19      	ldr	r2, [pc, #100]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 810469a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810469e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81046a0:	e00f      	b.n	81046c2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81046a2:	683b      	ldr	r3, [r7, #0]
 81046a4:	2b01      	cmp	r3, #1
 81046a6:	d106      	bne.n	81046b6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81046a8:	4b15      	ldr	r3, [pc, #84]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046ac:	4a14      	ldr	r2, [pc, #80]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81046b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81046b4:	e005      	b.n	81046c2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81046b6:	4b12      	ldr	r3, [pc, #72]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046ba:	4a11      	ldr	r2, [pc, #68]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81046c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81046c2:	4b0f      	ldr	r3, [pc, #60]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a0e      	ldr	r2, [pc, #56]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81046cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81046ce:	f7fd fb41 	bl	8101d54 <HAL_GetTick>
 81046d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81046d4:	e008      	b.n	81046e8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81046d6:	f7fd fb3d 	bl	8101d54 <HAL_GetTick>
 81046da:	4602      	mov	r2, r0
 81046dc:	68bb      	ldr	r3, [r7, #8]
 81046de:	1ad3      	subs	r3, r2, r3
 81046e0:	2b02      	cmp	r3, #2
 81046e2:	d901      	bls.n	81046e8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81046e4:	2303      	movs	r3, #3
 81046e6:	e006      	b.n	81046f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81046e8:	4b05      	ldr	r3, [pc, #20]	; (8104700 <RCCEx_PLL3_Config+0x160>)
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81046f0:	2b00      	cmp	r3, #0
 81046f2:	d0f0      	beq.n	81046d6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81046f6:	4618      	mov	r0, r3
 81046f8:	3710      	adds	r7, #16
 81046fa:	46bd      	mov	sp, r7
 81046fc:	bd80      	pop	{r7, pc}
 81046fe:	bf00      	nop
 8104700:	58024400 	.word	0x58024400

08104704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8104704:	b580      	push	{r7, lr}
 8104706:	b082      	sub	sp, #8
 8104708:	af00      	add	r7, sp, #0
 810470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	2b00      	cmp	r3, #0
 8104710:	d101      	bne.n	8104716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8104712:	2301      	movs	r3, #1
 8104714:	e049      	b.n	81047aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810471c:	b2db      	uxtb	r3, r3
 810471e:	2b00      	cmp	r3, #0
 8104720:	d106      	bne.n	8104730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	2200      	movs	r2, #0
 8104726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810472a:	6878      	ldr	r0, [r7, #4]
 810472c:	f7fd f88a 	bl	8101844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	2202      	movs	r2, #2
 8104734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681a      	ldr	r2, [r3, #0]
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	3304      	adds	r3, #4
 8104740:	4619      	mov	r1, r3
 8104742:	4610      	mov	r0, r2
 8104744:	f000 fd72 	bl	810522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	2201      	movs	r2, #1
 810474c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	2201      	movs	r2, #1
 8104754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	2201      	movs	r2, #1
 810475c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	2201      	movs	r2, #1
 8104764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	2201      	movs	r2, #1
 810476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	2201      	movs	r2, #1
 8104774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	2201      	movs	r2, #1
 810477c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	2201      	movs	r2, #1
 8104784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	2201      	movs	r2, #1
 810478c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	2201      	movs	r2, #1
 8104794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	2201      	movs	r2, #1
 810479c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	2201      	movs	r2, #1
 81047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81047a8:	2300      	movs	r3, #0
}
 81047aa:	4618      	mov	r0, r3
 81047ac:	3708      	adds	r7, #8
 81047ae:	46bd      	mov	sp, r7
 81047b0:	bd80      	pop	{r7, pc}
	...

081047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81047b4:	b480      	push	{r7}
 81047b6:	b085      	sub	sp, #20
 81047b8:	af00      	add	r7, sp, #0
 81047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81047c2:	b2db      	uxtb	r3, r3
 81047c4:	2b01      	cmp	r3, #1
 81047c6:	d001      	beq.n	81047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81047c8:	2301      	movs	r3, #1
 81047ca:	e054      	b.n	8104876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	2202      	movs	r2, #2
 81047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	68da      	ldr	r2, [r3, #12]
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	681b      	ldr	r3, [r3, #0]
 81047de:	f042 0201 	orr.w	r2, r2, #1
 81047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	4a26      	ldr	r2, [pc, #152]	; (8104884 <HAL_TIM_Base_Start_IT+0xd0>)
 81047ea:	4293      	cmp	r3, r2
 81047ec:	d022      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81047f6:	d01d      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	4a22      	ldr	r2, [pc, #136]	; (8104888 <HAL_TIM_Base_Start_IT+0xd4>)
 81047fe:	4293      	cmp	r3, r2
 8104800:	d018      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	681b      	ldr	r3, [r3, #0]
 8104806:	4a21      	ldr	r2, [pc, #132]	; (810488c <HAL_TIM_Base_Start_IT+0xd8>)
 8104808:	4293      	cmp	r3, r2
 810480a:	d013      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	4a1f      	ldr	r2, [pc, #124]	; (8104890 <HAL_TIM_Base_Start_IT+0xdc>)
 8104812:	4293      	cmp	r3, r2
 8104814:	d00e      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	681b      	ldr	r3, [r3, #0]
 810481a:	4a1e      	ldr	r2, [pc, #120]	; (8104894 <HAL_TIM_Base_Start_IT+0xe0>)
 810481c:	4293      	cmp	r3, r2
 810481e:	d009      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	4a1c      	ldr	r2, [pc, #112]	; (8104898 <HAL_TIM_Base_Start_IT+0xe4>)
 8104826:	4293      	cmp	r3, r2
 8104828:	d004      	beq.n	8104834 <HAL_TIM_Base_Start_IT+0x80>
 810482a:	687b      	ldr	r3, [r7, #4]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	4a1b      	ldr	r2, [pc, #108]	; (810489c <HAL_TIM_Base_Start_IT+0xe8>)
 8104830:	4293      	cmp	r3, r2
 8104832:	d115      	bne.n	8104860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	689a      	ldr	r2, [r3, #8]
 810483a:	4b19      	ldr	r3, [pc, #100]	; (81048a0 <HAL_TIM_Base_Start_IT+0xec>)
 810483c:	4013      	ands	r3, r2
 810483e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	2b06      	cmp	r3, #6
 8104844:	d015      	beq.n	8104872 <HAL_TIM_Base_Start_IT+0xbe>
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810484c:	d011      	beq.n	8104872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	681a      	ldr	r2, [r3, #0]
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	f042 0201 	orr.w	r2, r2, #1
 810485c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810485e:	e008      	b.n	8104872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	681a      	ldr	r2, [r3, #0]
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	f042 0201 	orr.w	r2, r2, #1
 810486e:	601a      	str	r2, [r3, #0]
 8104870:	e000      	b.n	8104874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104874:	2300      	movs	r3, #0
}
 8104876:	4618      	mov	r0, r3
 8104878:	3714      	adds	r7, #20
 810487a:	46bd      	mov	sp, r7
 810487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104880:	4770      	bx	lr
 8104882:	bf00      	nop
 8104884:	40010000 	.word	0x40010000
 8104888:	40000400 	.word	0x40000400
 810488c:	40000800 	.word	0x40000800
 8104890:	40000c00 	.word	0x40000c00
 8104894:	40010400 	.word	0x40010400
 8104898:	40001800 	.word	0x40001800
 810489c:	40014000 	.word	0x40014000
 81048a0:	00010007 	.word	0x00010007

081048a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81048a4:	b580      	push	{r7, lr}
 81048a6:	b082      	sub	sp, #8
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	2b00      	cmp	r3, #0
 81048b0:	d101      	bne.n	81048b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81048b2:	2301      	movs	r3, #1
 81048b4:	e049      	b.n	810494a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81048bc:	b2db      	uxtb	r3, r3
 81048be:	2b00      	cmp	r3, #0
 81048c0:	d106      	bne.n	81048d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	2200      	movs	r2, #0
 81048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81048ca:	6878      	ldr	r0, [r7, #4]
 81048cc:	f000 f841 	bl	8104952 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	2202      	movs	r2, #2
 81048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681a      	ldr	r2, [r3, #0]
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	3304      	adds	r3, #4
 81048e0:	4619      	mov	r1, r3
 81048e2:	4610      	mov	r0, r2
 81048e4:	f000 fca2 	bl	810522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	2201      	movs	r2, #1
 81048ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	2201      	movs	r2, #1
 81048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	2201      	movs	r2, #1
 81048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	2201      	movs	r2, #1
 8104904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	2201      	movs	r2, #1
 810490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	2201      	movs	r2, #1
 8104914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	2201      	movs	r2, #1
 810491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	2201      	movs	r2, #1
 8104924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	2201      	movs	r2, #1
 810492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	2201      	movs	r2, #1
 8104934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	2201      	movs	r2, #1
 810493c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	2201      	movs	r2, #1
 8104944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104948:	2300      	movs	r3, #0
}
 810494a:	4618      	mov	r0, r3
 810494c:	3708      	adds	r7, #8
 810494e:	46bd      	mov	sp, r7
 8104950:	bd80      	pop	{r7, pc}

08104952 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8104952:	b480      	push	{r7}
 8104954:	b083      	sub	sp, #12
 8104956:	af00      	add	r7, sp, #0
 8104958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810495a:	bf00      	nop
 810495c:	370c      	adds	r7, #12
 810495e:	46bd      	mov	sp, r7
 8104960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104964:	4770      	bx	lr
	...

08104968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8104968:	b580      	push	{r7, lr}
 810496a:	b084      	sub	sp, #16
 810496c:	af00      	add	r7, sp, #0
 810496e:	6078      	str	r0, [r7, #4]
 8104970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8104972:	683b      	ldr	r3, [r7, #0]
 8104974:	2b00      	cmp	r3, #0
 8104976:	d109      	bne.n	810498c <HAL_TIM_PWM_Start+0x24>
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810497e:	b2db      	uxtb	r3, r3
 8104980:	2b01      	cmp	r3, #1
 8104982:	bf14      	ite	ne
 8104984:	2301      	movne	r3, #1
 8104986:	2300      	moveq	r3, #0
 8104988:	b2db      	uxtb	r3, r3
 810498a:	e03c      	b.n	8104a06 <HAL_TIM_PWM_Start+0x9e>
 810498c:	683b      	ldr	r3, [r7, #0]
 810498e:	2b04      	cmp	r3, #4
 8104990:	d109      	bne.n	81049a6 <HAL_TIM_PWM_Start+0x3e>
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8104998:	b2db      	uxtb	r3, r3
 810499a:	2b01      	cmp	r3, #1
 810499c:	bf14      	ite	ne
 810499e:	2301      	movne	r3, #1
 81049a0:	2300      	moveq	r3, #0
 81049a2:	b2db      	uxtb	r3, r3
 81049a4:	e02f      	b.n	8104a06 <HAL_TIM_PWM_Start+0x9e>
 81049a6:	683b      	ldr	r3, [r7, #0]
 81049a8:	2b08      	cmp	r3, #8
 81049aa:	d109      	bne.n	81049c0 <HAL_TIM_PWM_Start+0x58>
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81049b2:	b2db      	uxtb	r3, r3
 81049b4:	2b01      	cmp	r3, #1
 81049b6:	bf14      	ite	ne
 81049b8:	2301      	movne	r3, #1
 81049ba:	2300      	moveq	r3, #0
 81049bc:	b2db      	uxtb	r3, r3
 81049be:	e022      	b.n	8104a06 <HAL_TIM_PWM_Start+0x9e>
 81049c0:	683b      	ldr	r3, [r7, #0]
 81049c2:	2b0c      	cmp	r3, #12
 81049c4:	d109      	bne.n	81049da <HAL_TIM_PWM_Start+0x72>
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81049cc:	b2db      	uxtb	r3, r3
 81049ce:	2b01      	cmp	r3, #1
 81049d0:	bf14      	ite	ne
 81049d2:	2301      	movne	r3, #1
 81049d4:	2300      	moveq	r3, #0
 81049d6:	b2db      	uxtb	r3, r3
 81049d8:	e015      	b.n	8104a06 <HAL_TIM_PWM_Start+0x9e>
 81049da:	683b      	ldr	r3, [r7, #0]
 81049dc:	2b10      	cmp	r3, #16
 81049de:	d109      	bne.n	81049f4 <HAL_TIM_PWM_Start+0x8c>
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81049e6:	b2db      	uxtb	r3, r3
 81049e8:	2b01      	cmp	r3, #1
 81049ea:	bf14      	ite	ne
 81049ec:	2301      	movne	r3, #1
 81049ee:	2300      	moveq	r3, #0
 81049f0:	b2db      	uxtb	r3, r3
 81049f2:	e008      	b.n	8104a06 <HAL_TIM_PWM_Start+0x9e>
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81049fa:	b2db      	uxtb	r3, r3
 81049fc:	2b01      	cmp	r3, #1
 81049fe:	bf14      	ite	ne
 8104a00:	2301      	movne	r3, #1
 8104a02:	2300      	moveq	r3, #0
 8104a04:	b2db      	uxtb	r3, r3
 8104a06:	2b00      	cmp	r3, #0
 8104a08:	d001      	beq.n	8104a0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8104a0a:	2301      	movs	r3, #1
 8104a0c:	e0a1      	b.n	8104b52 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	2b00      	cmp	r3, #0
 8104a12:	d104      	bne.n	8104a1e <HAL_TIM_PWM_Start+0xb6>
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	2202      	movs	r2, #2
 8104a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104a1c:	e023      	b.n	8104a66 <HAL_TIM_PWM_Start+0xfe>
 8104a1e:	683b      	ldr	r3, [r7, #0]
 8104a20:	2b04      	cmp	r3, #4
 8104a22:	d104      	bne.n	8104a2e <HAL_TIM_PWM_Start+0xc6>
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	2202      	movs	r2, #2
 8104a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104a2c:	e01b      	b.n	8104a66 <HAL_TIM_PWM_Start+0xfe>
 8104a2e:	683b      	ldr	r3, [r7, #0]
 8104a30:	2b08      	cmp	r3, #8
 8104a32:	d104      	bne.n	8104a3e <HAL_TIM_PWM_Start+0xd6>
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	2202      	movs	r2, #2
 8104a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104a3c:	e013      	b.n	8104a66 <HAL_TIM_PWM_Start+0xfe>
 8104a3e:	683b      	ldr	r3, [r7, #0]
 8104a40:	2b0c      	cmp	r3, #12
 8104a42:	d104      	bne.n	8104a4e <HAL_TIM_PWM_Start+0xe6>
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	2202      	movs	r2, #2
 8104a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104a4c:	e00b      	b.n	8104a66 <HAL_TIM_PWM_Start+0xfe>
 8104a4e:	683b      	ldr	r3, [r7, #0]
 8104a50:	2b10      	cmp	r3, #16
 8104a52:	d104      	bne.n	8104a5e <HAL_TIM_PWM_Start+0xf6>
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	2202      	movs	r2, #2
 8104a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104a5c:	e003      	b.n	8104a66 <HAL_TIM_PWM_Start+0xfe>
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	2202      	movs	r2, #2
 8104a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	2201      	movs	r2, #1
 8104a6c:	6839      	ldr	r1, [r7, #0]
 8104a6e:	4618      	mov	r0, r3
 8104a70:	f000 ffe8 	bl	8105a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a38      	ldr	r2, [pc, #224]	; (8104b5c <HAL_TIM_PWM_Start+0x1f4>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d013      	beq.n	8104aa6 <HAL_TIM_PWM_Start+0x13e>
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	4a37      	ldr	r2, [pc, #220]	; (8104b60 <HAL_TIM_PWM_Start+0x1f8>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d00e      	beq.n	8104aa6 <HAL_TIM_PWM_Start+0x13e>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	4a35      	ldr	r2, [pc, #212]	; (8104b64 <HAL_TIM_PWM_Start+0x1fc>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d009      	beq.n	8104aa6 <HAL_TIM_PWM_Start+0x13e>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	4a34      	ldr	r2, [pc, #208]	; (8104b68 <HAL_TIM_PWM_Start+0x200>)
 8104a98:	4293      	cmp	r3, r2
 8104a9a:	d004      	beq.n	8104aa6 <HAL_TIM_PWM_Start+0x13e>
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	4a32      	ldr	r2, [pc, #200]	; (8104b6c <HAL_TIM_PWM_Start+0x204>)
 8104aa2:	4293      	cmp	r3, r2
 8104aa4:	d101      	bne.n	8104aaa <HAL_TIM_PWM_Start+0x142>
 8104aa6:	2301      	movs	r3, #1
 8104aa8:	e000      	b.n	8104aac <HAL_TIM_PWM_Start+0x144>
 8104aaa:	2300      	movs	r3, #0
 8104aac:	2b00      	cmp	r3, #0
 8104aae:	d007      	beq.n	8104ac0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104abe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	4a25      	ldr	r2, [pc, #148]	; (8104b5c <HAL_TIM_PWM_Start+0x1f4>)
 8104ac6:	4293      	cmp	r3, r2
 8104ac8:	d022      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104ad2:	d01d      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	4a25      	ldr	r2, [pc, #148]	; (8104b70 <HAL_TIM_PWM_Start+0x208>)
 8104ada:	4293      	cmp	r3, r2
 8104adc:	d018      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	681b      	ldr	r3, [r3, #0]
 8104ae2:	4a24      	ldr	r2, [pc, #144]	; (8104b74 <HAL_TIM_PWM_Start+0x20c>)
 8104ae4:	4293      	cmp	r3, r2
 8104ae6:	d013      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	4a22      	ldr	r2, [pc, #136]	; (8104b78 <HAL_TIM_PWM_Start+0x210>)
 8104aee:	4293      	cmp	r3, r2
 8104af0:	d00e      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	4a1a      	ldr	r2, [pc, #104]	; (8104b60 <HAL_TIM_PWM_Start+0x1f8>)
 8104af8:	4293      	cmp	r3, r2
 8104afa:	d009      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	4a1e      	ldr	r2, [pc, #120]	; (8104b7c <HAL_TIM_PWM_Start+0x214>)
 8104b02:	4293      	cmp	r3, r2
 8104b04:	d004      	beq.n	8104b10 <HAL_TIM_PWM_Start+0x1a8>
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	4a16      	ldr	r2, [pc, #88]	; (8104b64 <HAL_TIM_PWM_Start+0x1fc>)
 8104b0c:	4293      	cmp	r3, r2
 8104b0e:	d115      	bne.n	8104b3c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	689a      	ldr	r2, [r3, #8]
 8104b16:	4b1a      	ldr	r3, [pc, #104]	; (8104b80 <HAL_TIM_PWM_Start+0x218>)
 8104b18:	4013      	ands	r3, r2
 8104b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b1c:	68fb      	ldr	r3, [r7, #12]
 8104b1e:	2b06      	cmp	r3, #6
 8104b20:	d015      	beq.n	8104b4e <HAL_TIM_PWM_Start+0x1e6>
 8104b22:	68fb      	ldr	r3, [r7, #12]
 8104b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104b28:	d011      	beq.n	8104b4e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	681b      	ldr	r3, [r3, #0]
 8104b2e:	681a      	ldr	r2, [r3, #0]
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	681b      	ldr	r3, [r3, #0]
 8104b34:	f042 0201 	orr.w	r2, r2, #1
 8104b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b3a:	e008      	b.n	8104b4e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	681a      	ldr	r2, [r3, #0]
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	681b      	ldr	r3, [r3, #0]
 8104b46:	f042 0201 	orr.w	r2, r2, #1
 8104b4a:	601a      	str	r2, [r3, #0]
 8104b4c:	e000      	b.n	8104b50 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8104b50:	2300      	movs	r3, #0
}
 8104b52:	4618      	mov	r0, r3
 8104b54:	3710      	adds	r7, #16
 8104b56:	46bd      	mov	sp, r7
 8104b58:	bd80      	pop	{r7, pc}
 8104b5a:	bf00      	nop
 8104b5c:	40010000 	.word	0x40010000
 8104b60:	40010400 	.word	0x40010400
 8104b64:	40014000 	.word	0x40014000
 8104b68:	40014400 	.word	0x40014400
 8104b6c:	40014800 	.word	0x40014800
 8104b70:	40000400 	.word	0x40000400
 8104b74:	40000800 	.word	0x40000800
 8104b78:	40000c00 	.word	0x40000c00
 8104b7c:	40001800 	.word	0x40001800
 8104b80:	00010007 	.word	0x00010007

08104b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104b84:	b580      	push	{r7, lr}
 8104b86:	b082      	sub	sp, #8
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	691b      	ldr	r3, [r3, #16]
 8104b92:	f003 0302 	and.w	r3, r3, #2
 8104b96:	2b02      	cmp	r3, #2
 8104b98:	d122      	bne.n	8104be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	68db      	ldr	r3, [r3, #12]
 8104ba0:	f003 0302 	and.w	r3, r3, #2
 8104ba4:	2b02      	cmp	r3, #2
 8104ba6:	d11b      	bne.n	8104be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	f06f 0202 	mvn.w	r2, #2
 8104bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	2201      	movs	r2, #1
 8104bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	699b      	ldr	r3, [r3, #24]
 8104bbe:	f003 0303 	and.w	r3, r3, #3
 8104bc2:	2b00      	cmp	r3, #0
 8104bc4:	d003      	beq.n	8104bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104bc6:	6878      	ldr	r0, [r7, #4]
 8104bc8:	f000 fb12 	bl	81051f0 <HAL_TIM_IC_CaptureCallback>
 8104bcc:	e005      	b.n	8104bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104bce:	6878      	ldr	r0, [r7, #4]
 8104bd0:	f000 fb04 	bl	81051dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104bd4:	6878      	ldr	r0, [r7, #4]
 8104bd6:	f000 fb15 	bl	8105204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	2200      	movs	r2, #0
 8104bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	691b      	ldr	r3, [r3, #16]
 8104be6:	f003 0304 	and.w	r3, r3, #4
 8104bea:	2b04      	cmp	r3, #4
 8104bec:	d122      	bne.n	8104c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	68db      	ldr	r3, [r3, #12]
 8104bf4:	f003 0304 	and.w	r3, r3, #4
 8104bf8:	2b04      	cmp	r3, #4
 8104bfa:	d11b      	bne.n	8104c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	f06f 0204 	mvn.w	r2, #4
 8104c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	2202      	movs	r2, #2
 8104c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	699b      	ldr	r3, [r3, #24]
 8104c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104c16:	2b00      	cmp	r3, #0
 8104c18:	d003      	beq.n	8104c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104c1a:	6878      	ldr	r0, [r7, #4]
 8104c1c:	f000 fae8 	bl	81051f0 <HAL_TIM_IC_CaptureCallback>
 8104c20:	e005      	b.n	8104c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104c22:	6878      	ldr	r0, [r7, #4]
 8104c24:	f000 fada 	bl	81051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104c28:	6878      	ldr	r0, [r7, #4]
 8104c2a:	f000 faeb 	bl	8105204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	2200      	movs	r2, #0
 8104c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	691b      	ldr	r3, [r3, #16]
 8104c3a:	f003 0308 	and.w	r3, r3, #8
 8104c3e:	2b08      	cmp	r3, #8
 8104c40:	d122      	bne.n	8104c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	68db      	ldr	r3, [r3, #12]
 8104c48:	f003 0308 	and.w	r3, r3, #8
 8104c4c:	2b08      	cmp	r3, #8
 8104c4e:	d11b      	bne.n	8104c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	f06f 0208 	mvn.w	r2, #8
 8104c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	2204      	movs	r2, #4
 8104c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	69db      	ldr	r3, [r3, #28]
 8104c66:	f003 0303 	and.w	r3, r3, #3
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d003      	beq.n	8104c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104c6e:	6878      	ldr	r0, [r7, #4]
 8104c70:	f000 fabe 	bl	81051f0 <HAL_TIM_IC_CaptureCallback>
 8104c74:	e005      	b.n	8104c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104c76:	6878      	ldr	r0, [r7, #4]
 8104c78:	f000 fab0 	bl	81051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104c7c:	6878      	ldr	r0, [r7, #4]
 8104c7e:	f000 fac1 	bl	8105204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	2200      	movs	r2, #0
 8104c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	691b      	ldr	r3, [r3, #16]
 8104c8e:	f003 0310 	and.w	r3, r3, #16
 8104c92:	2b10      	cmp	r3, #16
 8104c94:	d122      	bne.n	8104cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	68db      	ldr	r3, [r3, #12]
 8104c9c:	f003 0310 	and.w	r3, r3, #16
 8104ca0:	2b10      	cmp	r3, #16
 8104ca2:	d11b      	bne.n	8104cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	f06f 0210 	mvn.w	r2, #16
 8104cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	2208      	movs	r2, #8
 8104cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	69db      	ldr	r3, [r3, #28]
 8104cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d003      	beq.n	8104cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104cc2:	6878      	ldr	r0, [r7, #4]
 8104cc4:	f000 fa94 	bl	81051f0 <HAL_TIM_IC_CaptureCallback>
 8104cc8:	e005      	b.n	8104cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104cca:	6878      	ldr	r0, [r7, #4]
 8104ccc:	f000 fa86 	bl	81051dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104cd0:	6878      	ldr	r0, [r7, #4]
 8104cd2:	f000 fa97 	bl	8105204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	2200      	movs	r2, #0
 8104cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	691b      	ldr	r3, [r3, #16]
 8104ce2:	f003 0301 	and.w	r3, r3, #1
 8104ce6:	2b01      	cmp	r3, #1
 8104ce8:	d10e      	bne.n	8104d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	68db      	ldr	r3, [r3, #12]
 8104cf0:	f003 0301 	and.w	r3, r3, #1
 8104cf4:	2b01      	cmp	r3, #1
 8104cf6:	d107      	bne.n	8104d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	f06f 0201 	mvn.w	r2, #1
 8104d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104d02:	6878      	ldr	r0, [r7, #4]
 8104d04:	f7fc fc18 	bl	8101538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	681b      	ldr	r3, [r3, #0]
 8104d0c:	691b      	ldr	r3, [r3, #16]
 8104d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d12:	2b80      	cmp	r3, #128	; 0x80
 8104d14:	d10e      	bne.n	8104d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	68db      	ldr	r3, [r3, #12]
 8104d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d20:	2b80      	cmp	r3, #128	; 0x80
 8104d22:	d107      	bne.n	8104d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	681b      	ldr	r3, [r3, #0]
 8104d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104d2e:	6878      	ldr	r0, [r7, #4]
 8104d30:	f000 ffc4 	bl	8105cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	691b      	ldr	r3, [r3, #16]
 8104d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d42:	d10e      	bne.n	8104d62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	681b      	ldr	r3, [r3, #0]
 8104d48:	68db      	ldr	r3, [r3, #12]
 8104d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104d4e:	2b80      	cmp	r3, #128	; 0x80
 8104d50:	d107      	bne.n	8104d62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104d5c:	6878      	ldr	r0, [r7, #4]
 8104d5e:	f000 ffb7 	bl	8105cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	681b      	ldr	r3, [r3, #0]
 8104d66:	691b      	ldr	r3, [r3, #16]
 8104d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104d6c:	2b40      	cmp	r3, #64	; 0x40
 8104d6e:	d10e      	bne.n	8104d8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	68db      	ldr	r3, [r3, #12]
 8104d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104d7a:	2b40      	cmp	r3, #64	; 0x40
 8104d7c:	d107      	bne.n	8104d8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	681b      	ldr	r3, [r3, #0]
 8104d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8104d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104d88:	6878      	ldr	r0, [r7, #4]
 8104d8a:	f000 fa45 	bl	8105218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	691b      	ldr	r3, [r3, #16]
 8104d94:	f003 0320 	and.w	r3, r3, #32
 8104d98:	2b20      	cmp	r3, #32
 8104d9a:	d10e      	bne.n	8104dba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	681b      	ldr	r3, [r3, #0]
 8104da0:	68db      	ldr	r3, [r3, #12]
 8104da2:	f003 0320 	and.w	r3, r3, #32
 8104da6:	2b20      	cmp	r3, #32
 8104da8:	d107      	bne.n	8104dba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	681b      	ldr	r3, [r3, #0]
 8104dae:	f06f 0220 	mvn.w	r2, #32
 8104db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8104db4:	6878      	ldr	r0, [r7, #4]
 8104db6:	f000 ff77 	bl	8105ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8104dba:	bf00      	nop
 8104dbc:	3708      	adds	r7, #8
 8104dbe:	46bd      	mov	sp, r7
 8104dc0:	bd80      	pop	{r7, pc}
	...

08104dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8104dc4:	b580      	push	{r7, lr}
 8104dc6:	b086      	sub	sp, #24
 8104dc8:	af00      	add	r7, sp, #0
 8104dca:	60f8      	str	r0, [r7, #12]
 8104dcc:	60b9      	str	r1, [r7, #8]
 8104dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104dd0:	2300      	movs	r3, #0
 8104dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8104dd4:	68fb      	ldr	r3, [r7, #12]
 8104dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104dda:	2b01      	cmp	r3, #1
 8104ddc:	d101      	bne.n	8104de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8104dde:	2302      	movs	r3, #2
 8104de0:	e0ff      	b.n	8104fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8104de2:	68fb      	ldr	r3, [r7, #12]
 8104de4:	2201      	movs	r2, #1
 8104de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	2b14      	cmp	r3, #20
 8104dee:	f200 80f0 	bhi.w	8104fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8104df2:	a201      	add	r2, pc, #4	; (adr r2, 8104df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8104df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104df8:	08104e4d 	.word	0x08104e4d
 8104dfc:	08104fd3 	.word	0x08104fd3
 8104e00:	08104fd3 	.word	0x08104fd3
 8104e04:	08104fd3 	.word	0x08104fd3
 8104e08:	08104e8d 	.word	0x08104e8d
 8104e0c:	08104fd3 	.word	0x08104fd3
 8104e10:	08104fd3 	.word	0x08104fd3
 8104e14:	08104fd3 	.word	0x08104fd3
 8104e18:	08104ecf 	.word	0x08104ecf
 8104e1c:	08104fd3 	.word	0x08104fd3
 8104e20:	08104fd3 	.word	0x08104fd3
 8104e24:	08104fd3 	.word	0x08104fd3
 8104e28:	08104f0f 	.word	0x08104f0f
 8104e2c:	08104fd3 	.word	0x08104fd3
 8104e30:	08104fd3 	.word	0x08104fd3
 8104e34:	08104fd3 	.word	0x08104fd3
 8104e38:	08104f51 	.word	0x08104f51
 8104e3c:	08104fd3 	.word	0x08104fd3
 8104e40:	08104fd3 	.word	0x08104fd3
 8104e44:	08104fd3 	.word	0x08104fd3
 8104e48:	08104f91 	.word	0x08104f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	68b9      	ldr	r1, [r7, #8]
 8104e52:	4618      	mov	r0, r3
 8104e54:	f000 fa84 	bl	8105360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	699a      	ldr	r2, [r3, #24]
 8104e5e:	68fb      	ldr	r3, [r7, #12]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	f042 0208 	orr.w	r2, r2, #8
 8104e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	699a      	ldr	r2, [r3, #24]
 8104e6e:	68fb      	ldr	r3, [r7, #12]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	f022 0204 	bic.w	r2, r2, #4
 8104e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104e78:	68fb      	ldr	r3, [r7, #12]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	6999      	ldr	r1, [r3, #24]
 8104e7e:	68bb      	ldr	r3, [r7, #8]
 8104e80:	691a      	ldr	r2, [r3, #16]
 8104e82:	68fb      	ldr	r3, [r7, #12]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	430a      	orrs	r2, r1
 8104e88:	619a      	str	r2, [r3, #24]
      break;
 8104e8a:	e0a5      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	68b9      	ldr	r1, [r7, #8]
 8104e92:	4618      	mov	r0, r3
 8104e94:	f000 faf4 	bl	8105480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104e98:	68fb      	ldr	r3, [r7, #12]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	699a      	ldr	r2, [r3, #24]
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	681b      	ldr	r3, [r3, #0]
 8104eac:	699a      	ldr	r2, [r3, #24]
 8104eae:	68fb      	ldr	r3, [r7, #12]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104eb8:	68fb      	ldr	r3, [r7, #12]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	6999      	ldr	r1, [r3, #24]
 8104ebe:	68bb      	ldr	r3, [r7, #8]
 8104ec0:	691b      	ldr	r3, [r3, #16]
 8104ec2:	021a      	lsls	r2, r3, #8
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	681b      	ldr	r3, [r3, #0]
 8104ec8:	430a      	orrs	r2, r1
 8104eca:	619a      	str	r2, [r3, #24]
      break;
 8104ecc:	e084      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8104ece:	68fb      	ldr	r3, [r7, #12]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	68b9      	ldr	r1, [r7, #8]
 8104ed4:	4618      	mov	r0, r3
 8104ed6:	f000 fb5d 	bl	8105594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	69da      	ldr	r2, [r3, #28]
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	f042 0208 	orr.w	r2, r2, #8
 8104ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8104eea:	68fb      	ldr	r3, [r7, #12]
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	69da      	ldr	r2, [r3, #28]
 8104ef0:	68fb      	ldr	r3, [r7, #12]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	f022 0204 	bic.w	r2, r2, #4
 8104ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104efa:	68fb      	ldr	r3, [r7, #12]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	69d9      	ldr	r1, [r3, #28]
 8104f00:	68bb      	ldr	r3, [r7, #8]
 8104f02:	691a      	ldr	r2, [r3, #16]
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	430a      	orrs	r2, r1
 8104f0a:	61da      	str	r2, [r3, #28]
      break;
 8104f0c:	e064      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	68b9      	ldr	r1, [r7, #8]
 8104f14:	4618      	mov	r0, r3
 8104f16:	f000 fbc5 	bl	81056a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8104f1a:	68fb      	ldr	r3, [r7, #12]
 8104f1c:	681b      	ldr	r3, [r3, #0]
 8104f1e:	69da      	ldr	r2, [r3, #28]
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8104f2a:	68fb      	ldr	r3, [r7, #12]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	69da      	ldr	r2, [r3, #28]
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8104f3a:	68fb      	ldr	r3, [r7, #12]
 8104f3c:	681b      	ldr	r3, [r3, #0]
 8104f3e:	69d9      	ldr	r1, [r3, #28]
 8104f40:	68bb      	ldr	r3, [r7, #8]
 8104f42:	691b      	ldr	r3, [r3, #16]
 8104f44:	021a      	lsls	r2, r3, #8
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	430a      	orrs	r2, r1
 8104f4c:	61da      	str	r2, [r3, #28]
      break;
 8104f4e:	e043      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104f50:	68fb      	ldr	r3, [r7, #12]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	68b9      	ldr	r1, [r7, #8]
 8104f56:	4618      	mov	r0, r3
 8104f58:	f000 fc0e 	bl	8105778 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104f5c:	68fb      	ldr	r3, [r7, #12]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104f62:	68fb      	ldr	r3, [r7, #12]
 8104f64:	681b      	ldr	r3, [r3, #0]
 8104f66:	f042 0208 	orr.w	r2, r2, #8
 8104f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104f6c:	68fb      	ldr	r3, [r7, #12]
 8104f6e:	681b      	ldr	r3, [r3, #0]
 8104f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104f72:	68fb      	ldr	r3, [r7, #12]
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	f022 0204 	bic.w	r2, r2, #4
 8104f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104f82:	68bb      	ldr	r3, [r7, #8]
 8104f84:	691a      	ldr	r2, [r3, #16]
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	430a      	orrs	r2, r1
 8104f8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104f8e:	e023      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104f90:	68fb      	ldr	r3, [r7, #12]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	68b9      	ldr	r1, [r7, #8]
 8104f96:	4618      	mov	r0, r3
 8104f98:	f000 fc52 	bl	8105840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104fa2:	68fb      	ldr	r3, [r7, #12]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104fac:	68fb      	ldr	r3, [r7, #12]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104fc2:	68bb      	ldr	r3, [r7, #8]
 8104fc4:	691b      	ldr	r3, [r3, #16]
 8104fc6:	021a      	lsls	r2, r3, #8
 8104fc8:	68fb      	ldr	r3, [r7, #12]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	430a      	orrs	r2, r1
 8104fce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104fd0:	e002      	b.n	8104fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8104fd2:	2301      	movs	r3, #1
 8104fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8104fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104fd8:	68fb      	ldr	r3, [r7, #12]
 8104fda:	2200      	movs	r2, #0
 8104fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8104fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8104fe2:	4618      	mov	r0, r3
 8104fe4:	3718      	adds	r7, #24
 8104fe6:	46bd      	mov	sp, r7
 8104fe8:	bd80      	pop	{r7, pc}
 8104fea:	bf00      	nop

08104fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8104fec:	b580      	push	{r7, lr}
 8104fee:	b084      	sub	sp, #16
 8104ff0:	af00      	add	r7, sp, #0
 8104ff2:	6078      	str	r0, [r7, #4]
 8104ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104ff6:	2300      	movs	r3, #0
 8104ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105000:	2b01      	cmp	r3, #1
 8105002:	d101      	bne.n	8105008 <HAL_TIM_ConfigClockSource+0x1c>
 8105004:	2302      	movs	r3, #2
 8105006:	e0de      	b.n	81051c6 <HAL_TIM_ConfigClockSource+0x1da>
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	2201      	movs	r2, #1
 810500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	2202      	movs	r2, #2
 8105014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	689b      	ldr	r3, [r3, #8]
 810501e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8105020:	68bb      	ldr	r3, [r7, #8]
 8105022:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8105026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810502c:	68bb      	ldr	r3, [r7, #8]
 810502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	68ba      	ldr	r2, [r7, #8]
 810503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810503c:	683b      	ldr	r3, [r7, #0]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	4a63      	ldr	r2, [pc, #396]	; (81051d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8105042:	4293      	cmp	r3, r2
 8105044:	f000 80a9 	beq.w	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 8105048:	4a61      	ldr	r2, [pc, #388]	; (81051d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810504a:	4293      	cmp	r3, r2
 810504c:	f200 80ae 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 8105050:	4a60      	ldr	r2, [pc, #384]	; (81051d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8105052:	4293      	cmp	r3, r2
 8105054:	f000 80a1 	beq.w	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 8105058:	4a5e      	ldr	r2, [pc, #376]	; (81051d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810505a:	4293      	cmp	r3, r2
 810505c:	f200 80a6 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 8105060:	4a5d      	ldr	r2, [pc, #372]	; (81051d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8105062:	4293      	cmp	r3, r2
 8105064:	f000 8099 	beq.w	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 8105068:	4a5b      	ldr	r2, [pc, #364]	; (81051d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810506a:	4293      	cmp	r3, r2
 810506c:	f200 809e 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 8105070:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8105074:	f000 8091 	beq.w	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 8105078:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810507c:	f200 8096 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 8105080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105084:	f000 8089 	beq.w	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 8105088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810508c:	f200 808e 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 8105090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105094:	d03e      	beq.n	8105114 <HAL_TIM_ConfigClockSource+0x128>
 8105096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810509a:	f200 8087 	bhi.w	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 810509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81050a2:	f000 8086 	beq.w	81051b2 <HAL_TIM_ConfigClockSource+0x1c6>
 81050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81050aa:	d87f      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050ac:	2b70      	cmp	r3, #112	; 0x70
 81050ae:	d01a      	beq.n	81050e6 <HAL_TIM_ConfigClockSource+0xfa>
 81050b0:	2b70      	cmp	r3, #112	; 0x70
 81050b2:	d87b      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050b4:	2b60      	cmp	r3, #96	; 0x60
 81050b6:	d050      	beq.n	810515a <HAL_TIM_ConfigClockSource+0x16e>
 81050b8:	2b60      	cmp	r3, #96	; 0x60
 81050ba:	d877      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050bc:	2b50      	cmp	r3, #80	; 0x50
 81050be:	d03c      	beq.n	810513a <HAL_TIM_ConfigClockSource+0x14e>
 81050c0:	2b50      	cmp	r3, #80	; 0x50
 81050c2:	d873      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050c4:	2b40      	cmp	r3, #64	; 0x40
 81050c6:	d058      	beq.n	810517a <HAL_TIM_ConfigClockSource+0x18e>
 81050c8:	2b40      	cmp	r3, #64	; 0x40
 81050ca:	d86f      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050cc:	2b30      	cmp	r3, #48	; 0x30
 81050ce:	d064      	beq.n	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 81050d0:	2b30      	cmp	r3, #48	; 0x30
 81050d2:	d86b      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050d4:	2b20      	cmp	r3, #32
 81050d6:	d060      	beq.n	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 81050d8:	2b20      	cmp	r3, #32
 81050da:	d867      	bhi.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
 81050dc:	2b00      	cmp	r3, #0
 81050de:	d05c      	beq.n	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 81050e0:	2b10      	cmp	r3, #16
 81050e2:	d05a      	beq.n	810519a <HAL_TIM_ConfigClockSource+0x1ae>
 81050e4:	e062      	b.n	81051ac <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	6818      	ldr	r0, [r3, #0]
 81050ea:	683b      	ldr	r3, [r7, #0]
 81050ec:	6899      	ldr	r1, [r3, #8]
 81050ee:	683b      	ldr	r3, [r7, #0]
 81050f0:	685a      	ldr	r2, [r3, #4]
 81050f2:	683b      	ldr	r3, [r7, #0]
 81050f4:	68db      	ldr	r3, [r3, #12]
 81050f6:	f000 fc85 	bl	8105a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	681b      	ldr	r3, [r3, #0]
 81050fe:	689b      	ldr	r3, [r3, #8]
 8105100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105102:	68bb      	ldr	r3, [r7, #8]
 8105104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8105108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	68ba      	ldr	r2, [r7, #8]
 8105110:	609a      	str	r2, [r3, #8]
      break;
 8105112:	e04f      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	6818      	ldr	r0, [r3, #0]
 8105118:	683b      	ldr	r3, [r7, #0]
 810511a:	6899      	ldr	r1, [r3, #8]
 810511c:	683b      	ldr	r3, [r7, #0]
 810511e:	685a      	ldr	r2, [r3, #4]
 8105120:	683b      	ldr	r3, [r7, #0]
 8105122:	68db      	ldr	r3, [r3, #12]
 8105124:	f000 fc6e 	bl	8105a04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	689a      	ldr	r2, [r3, #8]
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105136:	609a      	str	r2, [r3, #8]
      break;
 8105138:	e03c      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	6818      	ldr	r0, [r3, #0]
 810513e:	683b      	ldr	r3, [r7, #0]
 8105140:	6859      	ldr	r1, [r3, #4]
 8105142:	683b      	ldr	r3, [r7, #0]
 8105144:	68db      	ldr	r3, [r3, #12]
 8105146:	461a      	mov	r2, r3
 8105148:	f000 fbe0 	bl	810590c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	2150      	movs	r1, #80	; 0x50
 8105152:	4618      	mov	r0, r3
 8105154:	f000 fc39 	bl	81059ca <TIM_ITRx_SetConfig>
      break;
 8105158:	e02c      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	6818      	ldr	r0, [r3, #0]
 810515e:	683b      	ldr	r3, [r7, #0]
 8105160:	6859      	ldr	r1, [r3, #4]
 8105162:	683b      	ldr	r3, [r7, #0]
 8105164:	68db      	ldr	r3, [r3, #12]
 8105166:	461a      	mov	r2, r3
 8105168:	f000 fbff 	bl	810596a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	681b      	ldr	r3, [r3, #0]
 8105170:	2160      	movs	r1, #96	; 0x60
 8105172:	4618      	mov	r0, r3
 8105174:	f000 fc29 	bl	81059ca <TIM_ITRx_SetConfig>
      break;
 8105178:	e01c      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	6818      	ldr	r0, [r3, #0]
 810517e:	683b      	ldr	r3, [r7, #0]
 8105180:	6859      	ldr	r1, [r3, #4]
 8105182:	683b      	ldr	r3, [r7, #0]
 8105184:	68db      	ldr	r3, [r3, #12]
 8105186:	461a      	mov	r2, r3
 8105188:	f000 fbc0 	bl	810590c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	2140      	movs	r1, #64	; 0x40
 8105192:	4618      	mov	r0, r3
 8105194:	f000 fc19 	bl	81059ca <TIM_ITRx_SetConfig>
      break;
 8105198:	e00c      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681a      	ldr	r2, [r3, #0]
 810519e:	683b      	ldr	r3, [r7, #0]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	4619      	mov	r1, r3
 81051a4:	4610      	mov	r0, r2
 81051a6:	f000 fc10 	bl	81059ca <TIM_ITRx_SetConfig>
      break;
 81051aa:	e003      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81051ac:	2301      	movs	r3, #1
 81051ae:	73fb      	strb	r3, [r7, #15]
      break;
 81051b0:	e000      	b.n	81051b4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81051b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	2201      	movs	r2, #1
 81051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	2200      	movs	r2, #0
 81051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81051c6:	4618      	mov	r0, r3
 81051c8:	3710      	adds	r7, #16
 81051ca:	46bd      	mov	sp, r7
 81051cc:	bd80      	pop	{r7, pc}
 81051ce:	bf00      	nop
 81051d0:	00100040 	.word	0x00100040
 81051d4:	00100030 	.word	0x00100030
 81051d8:	00100020 	.word	0x00100020

081051dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81051dc:	b480      	push	{r7}
 81051de:	b083      	sub	sp, #12
 81051e0:	af00      	add	r7, sp, #0
 81051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81051e4:	bf00      	nop
 81051e6:	370c      	adds	r7, #12
 81051e8:	46bd      	mov	sp, r7
 81051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ee:	4770      	bx	lr

081051f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81051f0:	b480      	push	{r7}
 81051f2:	b083      	sub	sp, #12
 81051f4:	af00      	add	r7, sp, #0
 81051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81051f8:	bf00      	nop
 81051fa:	370c      	adds	r7, #12
 81051fc:	46bd      	mov	sp, r7
 81051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105202:	4770      	bx	lr

08105204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105204:	b480      	push	{r7}
 8105206:	b083      	sub	sp, #12
 8105208:	af00      	add	r7, sp, #0
 810520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810520c:	bf00      	nop
 810520e:	370c      	adds	r7, #12
 8105210:	46bd      	mov	sp, r7
 8105212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105216:	4770      	bx	lr

08105218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8105218:	b480      	push	{r7}
 810521a:	b083      	sub	sp, #12
 810521c:	af00      	add	r7, sp, #0
 810521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105220:	bf00      	nop
 8105222:	370c      	adds	r7, #12
 8105224:	46bd      	mov	sp, r7
 8105226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810522a:	4770      	bx	lr

0810522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810522c:	b480      	push	{r7}
 810522e:	b085      	sub	sp, #20
 8105230:	af00      	add	r7, sp, #0
 8105232:	6078      	str	r0, [r7, #4]
 8105234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	4a40      	ldr	r2, [pc, #256]	; (8105340 <TIM_Base_SetConfig+0x114>)
 8105240:	4293      	cmp	r3, r2
 8105242:	d013      	beq.n	810526c <TIM_Base_SetConfig+0x40>
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810524a:	d00f      	beq.n	810526c <TIM_Base_SetConfig+0x40>
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	4a3d      	ldr	r2, [pc, #244]	; (8105344 <TIM_Base_SetConfig+0x118>)
 8105250:	4293      	cmp	r3, r2
 8105252:	d00b      	beq.n	810526c <TIM_Base_SetConfig+0x40>
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	4a3c      	ldr	r2, [pc, #240]	; (8105348 <TIM_Base_SetConfig+0x11c>)
 8105258:	4293      	cmp	r3, r2
 810525a:	d007      	beq.n	810526c <TIM_Base_SetConfig+0x40>
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	4a3b      	ldr	r2, [pc, #236]	; (810534c <TIM_Base_SetConfig+0x120>)
 8105260:	4293      	cmp	r3, r2
 8105262:	d003      	beq.n	810526c <TIM_Base_SetConfig+0x40>
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	4a3a      	ldr	r2, [pc, #232]	; (8105350 <TIM_Base_SetConfig+0x124>)
 8105268:	4293      	cmp	r3, r2
 810526a:	d108      	bne.n	810527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810526c:	68fb      	ldr	r3, [r7, #12]
 810526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105274:	683b      	ldr	r3, [r7, #0]
 8105276:	685b      	ldr	r3, [r3, #4]
 8105278:	68fa      	ldr	r2, [r7, #12]
 810527a:	4313      	orrs	r3, r2
 810527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	4a2f      	ldr	r2, [pc, #188]	; (8105340 <TIM_Base_SetConfig+0x114>)
 8105282:	4293      	cmp	r3, r2
 8105284:	d01f      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810528c:	d01b      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	4a2c      	ldr	r2, [pc, #176]	; (8105344 <TIM_Base_SetConfig+0x118>)
 8105292:	4293      	cmp	r3, r2
 8105294:	d017      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	4a2b      	ldr	r2, [pc, #172]	; (8105348 <TIM_Base_SetConfig+0x11c>)
 810529a:	4293      	cmp	r3, r2
 810529c:	d013      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	4a2a      	ldr	r2, [pc, #168]	; (810534c <TIM_Base_SetConfig+0x120>)
 81052a2:	4293      	cmp	r3, r2
 81052a4:	d00f      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	4a29      	ldr	r2, [pc, #164]	; (8105350 <TIM_Base_SetConfig+0x124>)
 81052aa:	4293      	cmp	r3, r2
 81052ac:	d00b      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	4a28      	ldr	r2, [pc, #160]	; (8105354 <TIM_Base_SetConfig+0x128>)
 81052b2:	4293      	cmp	r3, r2
 81052b4:	d007      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	4a27      	ldr	r2, [pc, #156]	; (8105358 <TIM_Base_SetConfig+0x12c>)
 81052ba:	4293      	cmp	r3, r2
 81052bc:	d003      	beq.n	81052c6 <TIM_Base_SetConfig+0x9a>
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	4a26      	ldr	r2, [pc, #152]	; (810535c <TIM_Base_SetConfig+0x130>)
 81052c2:	4293      	cmp	r3, r2
 81052c4:	d108      	bne.n	81052d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81052c6:	68fb      	ldr	r3, [r7, #12]
 81052c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81052cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81052ce:	683b      	ldr	r3, [r7, #0]
 81052d0:	68db      	ldr	r3, [r3, #12]
 81052d2:	68fa      	ldr	r2, [r7, #12]
 81052d4:	4313      	orrs	r3, r2
 81052d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81052de:	683b      	ldr	r3, [r7, #0]
 81052e0:	695b      	ldr	r3, [r3, #20]
 81052e2:	4313      	orrs	r3, r2
 81052e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	68fa      	ldr	r2, [r7, #12]
 81052ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81052ec:	683b      	ldr	r3, [r7, #0]
 81052ee:	689a      	ldr	r2, [r3, #8]
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81052f4:	683b      	ldr	r3, [r7, #0]
 81052f6:	681a      	ldr	r2, [r3, #0]
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	4a10      	ldr	r2, [pc, #64]	; (8105340 <TIM_Base_SetConfig+0x114>)
 8105300:	4293      	cmp	r3, r2
 8105302:	d00f      	beq.n	8105324 <TIM_Base_SetConfig+0xf8>
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	4a12      	ldr	r2, [pc, #72]	; (8105350 <TIM_Base_SetConfig+0x124>)
 8105308:	4293      	cmp	r3, r2
 810530a:	d00b      	beq.n	8105324 <TIM_Base_SetConfig+0xf8>
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	4a11      	ldr	r2, [pc, #68]	; (8105354 <TIM_Base_SetConfig+0x128>)
 8105310:	4293      	cmp	r3, r2
 8105312:	d007      	beq.n	8105324 <TIM_Base_SetConfig+0xf8>
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	4a10      	ldr	r2, [pc, #64]	; (8105358 <TIM_Base_SetConfig+0x12c>)
 8105318:	4293      	cmp	r3, r2
 810531a:	d003      	beq.n	8105324 <TIM_Base_SetConfig+0xf8>
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	4a0f      	ldr	r2, [pc, #60]	; (810535c <TIM_Base_SetConfig+0x130>)
 8105320:	4293      	cmp	r3, r2
 8105322:	d103      	bne.n	810532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105324:	683b      	ldr	r3, [r7, #0]
 8105326:	691a      	ldr	r2, [r3, #16]
 8105328:	687b      	ldr	r3, [r7, #4]
 810532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	2201      	movs	r2, #1
 8105330:	615a      	str	r2, [r3, #20]
}
 8105332:	bf00      	nop
 8105334:	3714      	adds	r7, #20
 8105336:	46bd      	mov	sp, r7
 8105338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810533c:	4770      	bx	lr
 810533e:	bf00      	nop
 8105340:	40010000 	.word	0x40010000
 8105344:	40000400 	.word	0x40000400
 8105348:	40000800 	.word	0x40000800
 810534c:	40000c00 	.word	0x40000c00
 8105350:	40010400 	.word	0x40010400
 8105354:	40014000 	.word	0x40014000
 8105358:	40014400 	.word	0x40014400
 810535c:	40014800 	.word	0x40014800

08105360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105360:	b480      	push	{r7}
 8105362:	b087      	sub	sp, #28
 8105364:	af00      	add	r7, sp, #0
 8105366:	6078      	str	r0, [r7, #4]
 8105368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	6a1b      	ldr	r3, [r3, #32]
 810536e:	f023 0201 	bic.w	r2, r3, #1
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	6a1b      	ldr	r3, [r3, #32]
 810537a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	685b      	ldr	r3, [r3, #4]
 8105380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	699b      	ldr	r3, [r3, #24]
 8105386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	f023 0303 	bic.w	r3, r3, #3
 810539a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810539c:	683b      	ldr	r3, [r7, #0]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	68fa      	ldr	r2, [r7, #12]
 81053a2:	4313      	orrs	r3, r2
 81053a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81053a6:	697b      	ldr	r3, [r7, #20]
 81053a8:	f023 0302 	bic.w	r3, r3, #2
 81053ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81053ae:	683b      	ldr	r3, [r7, #0]
 81053b0:	689b      	ldr	r3, [r3, #8]
 81053b2:	697a      	ldr	r2, [r7, #20]
 81053b4:	4313      	orrs	r3, r2
 81053b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	4a2c      	ldr	r2, [pc, #176]	; (810546c <TIM_OC1_SetConfig+0x10c>)
 81053bc:	4293      	cmp	r3, r2
 81053be:	d00f      	beq.n	81053e0 <TIM_OC1_SetConfig+0x80>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	4a2b      	ldr	r2, [pc, #172]	; (8105470 <TIM_OC1_SetConfig+0x110>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d00b      	beq.n	81053e0 <TIM_OC1_SetConfig+0x80>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	4a2a      	ldr	r2, [pc, #168]	; (8105474 <TIM_OC1_SetConfig+0x114>)
 81053cc:	4293      	cmp	r3, r2
 81053ce:	d007      	beq.n	81053e0 <TIM_OC1_SetConfig+0x80>
 81053d0:	687b      	ldr	r3, [r7, #4]
 81053d2:	4a29      	ldr	r2, [pc, #164]	; (8105478 <TIM_OC1_SetConfig+0x118>)
 81053d4:	4293      	cmp	r3, r2
 81053d6:	d003      	beq.n	81053e0 <TIM_OC1_SetConfig+0x80>
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	4a28      	ldr	r2, [pc, #160]	; (810547c <TIM_OC1_SetConfig+0x11c>)
 81053dc:	4293      	cmp	r3, r2
 81053de:	d10c      	bne.n	81053fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81053e0:	697b      	ldr	r3, [r7, #20]
 81053e2:	f023 0308 	bic.w	r3, r3, #8
 81053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81053e8:	683b      	ldr	r3, [r7, #0]
 81053ea:	68db      	ldr	r3, [r3, #12]
 81053ec:	697a      	ldr	r2, [r7, #20]
 81053ee:	4313      	orrs	r3, r2
 81053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81053f2:	697b      	ldr	r3, [r7, #20]
 81053f4:	f023 0304 	bic.w	r3, r3, #4
 81053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	4a1b      	ldr	r2, [pc, #108]	; (810546c <TIM_OC1_SetConfig+0x10c>)
 81053fe:	4293      	cmp	r3, r2
 8105400:	d00f      	beq.n	8105422 <TIM_OC1_SetConfig+0xc2>
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	4a1a      	ldr	r2, [pc, #104]	; (8105470 <TIM_OC1_SetConfig+0x110>)
 8105406:	4293      	cmp	r3, r2
 8105408:	d00b      	beq.n	8105422 <TIM_OC1_SetConfig+0xc2>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	4a19      	ldr	r2, [pc, #100]	; (8105474 <TIM_OC1_SetConfig+0x114>)
 810540e:	4293      	cmp	r3, r2
 8105410:	d007      	beq.n	8105422 <TIM_OC1_SetConfig+0xc2>
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	4a18      	ldr	r2, [pc, #96]	; (8105478 <TIM_OC1_SetConfig+0x118>)
 8105416:	4293      	cmp	r3, r2
 8105418:	d003      	beq.n	8105422 <TIM_OC1_SetConfig+0xc2>
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	4a17      	ldr	r2, [pc, #92]	; (810547c <TIM_OC1_SetConfig+0x11c>)
 810541e:	4293      	cmp	r3, r2
 8105420:	d111      	bne.n	8105446 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8105422:	693b      	ldr	r3, [r7, #16]
 8105424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810542a:	693b      	ldr	r3, [r7, #16]
 810542c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8105432:	683b      	ldr	r3, [r7, #0]
 8105434:	695b      	ldr	r3, [r3, #20]
 8105436:	693a      	ldr	r2, [r7, #16]
 8105438:	4313      	orrs	r3, r2
 810543a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810543c:	683b      	ldr	r3, [r7, #0]
 810543e:	699b      	ldr	r3, [r3, #24]
 8105440:	693a      	ldr	r2, [r7, #16]
 8105442:	4313      	orrs	r3, r2
 8105444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	693a      	ldr	r2, [r7, #16]
 810544a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	68fa      	ldr	r2, [r7, #12]
 8105450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105452:	683b      	ldr	r3, [r7, #0]
 8105454:	685a      	ldr	r2, [r3, #4]
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	697a      	ldr	r2, [r7, #20]
 810545e:	621a      	str	r2, [r3, #32]
}
 8105460:	bf00      	nop
 8105462:	371c      	adds	r7, #28
 8105464:	46bd      	mov	sp, r7
 8105466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810546a:	4770      	bx	lr
 810546c:	40010000 	.word	0x40010000
 8105470:	40010400 	.word	0x40010400
 8105474:	40014000 	.word	0x40014000
 8105478:	40014400 	.word	0x40014400
 810547c:	40014800 	.word	0x40014800

08105480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105480:	b480      	push	{r7}
 8105482:	b087      	sub	sp, #28
 8105484:	af00      	add	r7, sp, #0
 8105486:	6078      	str	r0, [r7, #4]
 8105488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	6a1b      	ldr	r3, [r3, #32]
 810548e:	f023 0210 	bic.w	r2, r3, #16
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	6a1b      	ldr	r3, [r3, #32]
 810549a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	685b      	ldr	r3, [r3, #4]
 81054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	699b      	ldr	r3, [r3, #24]
 81054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81054a8:	68fb      	ldr	r3, [r7, #12]
 81054aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81054ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81054bc:	683b      	ldr	r3, [r7, #0]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	021b      	lsls	r3, r3, #8
 81054c2:	68fa      	ldr	r2, [r7, #12]
 81054c4:	4313      	orrs	r3, r2
 81054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81054c8:	697b      	ldr	r3, [r7, #20]
 81054ca:	f023 0320 	bic.w	r3, r3, #32
 81054ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81054d0:	683b      	ldr	r3, [r7, #0]
 81054d2:	689b      	ldr	r3, [r3, #8]
 81054d4:	011b      	lsls	r3, r3, #4
 81054d6:	697a      	ldr	r2, [r7, #20]
 81054d8:	4313      	orrs	r3, r2
 81054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	4a28      	ldr	r2, [pc, #160]	; (8105580 <TIM_OC2_SetConfig+0x100>)
 81054e0:	4293      	cmp	r3, r2
 81054e2:	d003      	beq.n	81054ec <TIM_OC2_SetConfig+0x6c>
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	4a27      	ldr	r2, [pc, #156]	; (8105584 <TIM_OC2_SetConfig+0x104>)
 81054e8:	4293      	cmp	r3, r2
 81054ea:	d10d      	bne.n	8105508 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81054ec:	697b      	ldr	r3, [r7, #20]
 81054ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81054f4:	683b      	ldr	r3, [r7, #0]
 81054f6:	68db      	ldr	r3, [r3, #12]
 81054f8:	011b      	lsls	r3, r3, #4
 81054fa:	697a      	ldr	r2, [r7, #20]
 81054fc:	4313      	orrs	r3, r2
 81054fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	4a1d      	ldr	r2, [pc, #116]	; (8105580 <TIM_OC2_SetConfig+0x100>)
 810550c:	4293      	cmp	r3, r2
 810550e:	d00f      	beq.n	8105530 <TIM_OC2_SetConfig+0xb0>
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	4a1c      	ldr	r2, [pc, #112]	; (8105584 <TIM_OC2_SetConfig+0x104>)
 8105514:	4293      	cmp	r3, r2
 8105516:	d00b      	beq.n	8105530 <TIM_OC2_SetConfig+0xb0>
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	4a1b      	ldr	r2, [pc, #108]	; (8105588 <TIM_OC2_SetConfig+0x108>)
 810551c:	4293      	cmp	r3, r2
 810551e:	d007      	beq.n	8105530 <TIM_OC2_SetConfig+0xb0>
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	4a1a      	ldr	r2, [pc, #104]	; (810558c <TIM_OC2_SetConfig+0x10c>)
 8105524:	4293      	cmp	r3, r2
 8105526:	d003      	beq.n	8105530 <TIM_OC2_SetConfig+0xb0>
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	4a19      	ldr	r2, [pc, #100]	; (8105590 <TIM_OC2_SetConfig+0x110>)
 810552c:	4293      	cmp	r3, r2
 810552e:	d113      	bne.n	8105558 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8105530:	693b      	ldr	r3, [r7, #16]
 8105532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105538:	693b      	ldr	r3, [r7, #16]
 810553a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810553e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8105540:	683b      	ldr	r3, [r7, #0]
 8105542:	695b      	ldr	r3, [r3, #20]
 8105544:	009b      	lsls	r3, r3, #2
 8105546:	693a      	ldr	r2, [r7, #16]
 8105548:	4313      	orrs	r3, r2
 810554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810554c:	683b      	ldr	r3, [r7, #0]
 810554e:	699b      	ldr	r3, [r3, #24]
 8105550:	009b      	lsls	r3, r3, #2
 8105552:	693a      	ldr	r2, [r7, #16]
 8105554:	4313      	orrs	r3, r2
 8105556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	693a      	ldr	r2, [r7, #16]
 810555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	68fa      	ldr	r2, [r7, #12]
 8105562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8105564:	683b      	ldr	r3, [r7, #0]
 8105566:	685a      	ldr	r2, [r3, #4]
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	697a      	ldr	r2, [r7, #20]
 8105570:	621a      	str	r2, [r3, #32]
}
 8105572:	bf00      	nop
 8105574:	371c      	adds	r7, #28
 8105576:	46bd      	mov	sp, r7
 8105578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810557c:	4770      	bx	lr
 810557e:	bf00      	nop
 8105580:	40010000 	.word	0x40010000
 8105584:	40010400 	.word	0x40010400
 8105588:	40014000 	.word	0x40014000
 810558c:	40014400 	.word	0x40014400
 8105590:	40014800 	.word	0x40014800

08105594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8105594:	b480      	push	{r7}
 8105596:	b087      	sub	sp, #28
 8105598:	af00      	add	r7, sp, #0
 810559a:	6078      	str	r0, [r7, #4]
 810559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	6a1b      	ldr	r3, [r3, #32]
 81055a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	6a1b      	ldr	r3, [r3, #32]
 81055ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	685b      	ldr	r3, [r3, #4]
 81055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	69db      	ldr	r3, [r3, #28]
 81055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	f023 0303 	bic.w	r3, r3, #3
 81055ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81055d0:	683b      	ldr	r3, [r7, #0]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	68fa      	ldr	r2, [r7, #12]
 81055d6:	4313      	orrs	r3, r2
 81055d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81055da:	697b      	ldr	r3, [r7, #20]
 81055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81055e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81055e2:	683b      	ldr	r3, [r7, #0]
 81055e4:	689b      	ldr	r3, [r3, #8]
 81055e6:	021b      	lsls	r3, r3, #8
 81055e8:	697a      	ldr	r2, [r7, #20]
 81055ea:	4313      	orrs	r3, r2
 81055ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	4a27      	ldr	r2, [pc, #156]	; (8105690 <TIM_OC3_SetConfig+0xfc>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d003      	beq.n	81055fe <TIM_OC3_SetConfig+0x6a>
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	4a26      	ldr	r2, [pc, #152]	; (8105694 <TIM_OC3_SetConfig+0x100>)
 81055fa:	4293      	cmp	r3, r2
 81055fc:	d10d      	bne.n	810561a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81055fe:	697b      	ldr	r3, [r7, #20]
 8105600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8105604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105606:	683b      	ldr	r3, [r7, #0]
 8105608:	68db      	ldr	r3, [r3, #12]
 810560a:	021b      	lsls	r3, r3, #8
 810560c:	697a      	ldr	r2, [r7, #20]
 810560e:	4313      	orrs	r3, r2
 8105610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8105612:	697b      	ldr	r3, [r7, #20]
 8105614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	4a1c      	ldr	r2, [pc, #112]	; (8105690 <TIM_OC3_SetConfig+0xfc>)
 810561e:	4293      	cmp	r3, r2
 8105620:	d00f      	beq.n	8105642 <TIM_OC3_SetConfig+0xae>
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	4a1b      	ldr	r2, [pc, #108]	; (8105694 <TIM_OC3_SetConfig+0x100>)
 8105626:	4293      	cmp	r3, r2
 8105628:	d00b      	beq.n	8105642 <TIM_OC3_SetConfig+0xae>
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	4a1a      	ldr	r2, [pc, #104]	; (8105698 <TIM_OC3_SetConfig+0x104>)
 810562e:	4293      	cmp	r3, r2
 8105630:	d007      	beq.n	8105642 <TIM_OC3_SetConfig+0xae>
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	4a19      	ldr	r2, [pc, #100]	; (810569c <TIM_OC3_SetConfig+0x108>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d003      	beq.n	8105642 <TIM_OC3_SetConfig+0xae>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	4a18      	ldr	r2, [pc, #96]	; (81056a0 <TIM_OC3_SetConfig+0x10c>)
 810563e:	4293      	cmp	r3, r2
 8105640:	d113      	bne.n	810566a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8105642:	693b      	ldr	r3, [r7, #16]
 8105644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810564a:	693b      	ldr	r3, [r7, #16]
 810564c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8105650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8105652:	683b      	ldr	r3, [r7, #0]
 8105654:	695b      	ldr	r3, [r3, #20]
 8105656:	011b      	lsls	r3, r3, #4
 8105658:	693a      	ldr	r2, [r7, #16]
 810565a:	4313      	orrs	r3, r2
 810565c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810565e:	683b      	ldr	r3, [r7, #0]
 8105660:	699b      	ldr	r3, [r3, #24]
 8105662:	011b      	lsls	r3, r3, #4
 8105664:	693a      	ldr	r2, [r7, #16]
 8105666:	4313      	orrs	r3, r2
 8105668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	693a      	ldr	r2, [r7, #16]
 810566e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	68fa      	ldr	r2, [r7, #12]
 8105674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105676:	683b      	ldr	r3, [r7, #0]
 8105678:	685a      	ldr	r2, [r3, #4]
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	697a      	ldr	r2, [r7, #20]
 8105682:	621a      	str	r2, [r3, #32]
}
 8105684:	bf00      	nop
 8105686:	371c      	adds	r7, #28
 8105688:	46bd      	mov	sp, r7
 810568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810568e:	4770      	bx	lr
 8105690:	40010000 	.word	0x40010000
 8105694:	40010400 	.word	0x40010400
 8105698:	40014000 	.word	0x40014000
 810569c:	40014400 	.word	0x40014400
 81056a0:	40014800 	.word	0x40014800

081056a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81056a4:	b480      	push	{r7}
 81056a6:	b087      	sub	sp, #28
 81056a8:	af00      	add	r7, sp, #0
 81056aa:	6078      	str	r0, [r7, #4]
 81056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	6a1b      	ldr	r3, [r3, #32]
 81056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	6a1b      	ldr	r3, [r3, #32]
 81056be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	685b      	ldr	r3, [r3, #4]
 81056c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	69db      	ldr	r3, [r3, #28]
 81056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81056cc:	68fb      	ldr	r3, [r7, #12]
 81056ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81056d8:	68fb      	ldr	r3, [r7, #12]
 81056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81056e0:	683b      	ldr	r3, [r7, #0]
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	021b      	lsls	r3, r3, #8
 81056e6:	68fa      	ldr	r2, [r7, #12]
 81056e8:	4313      	orrs	r3, r2
 81056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81056ec:	693b      	ldr	r3, [r7, #16]
 81056ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81056f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81056f4:	683b      	ldr	r3, [r7, #0]
 81056f6:	689b      	ldr	r3, [r3, #8]
 81056f8:	031b      	lsls	r3, r3, #12
 81056fa:	693a      	ldr	r2, [r7, #16]
 81056fc:	4313      	orrs	r3, r2
 81056fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	4a18      	ldr	r2, [pc, #96]	; (8105764 <TIM_OC4_SetConfig+0xc0>)
 8105704:	4293      	cmp	r3, r2
 8105706:	d00f      	beq.n	8105728 <TIM_OC4_SetConfig+0x84>
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	4a17      	ldr	r2, [pc, #92]	; (8105768 <TIM_OC4_SetConfig+0xc4>)
 810570c:	4293      	cmp	r3, r2
 810570e:	d00b      	beq.n	8105728 <TIM_OC4_SetConfig+0x84>
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	4a16      	ldr	r2, [pc, #88]	; (810576c <TIM_OC4_SetConfig+0xc8>)
 8105714:	4293      	cmp	r3, r2
 8105716:	d007      	beq.n	8105728 <TIM_OC4_SetConfig+0x84>
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	4a15      	ldr	r2, [pc, #84]	; (8105770 <TIM_OC4_SetConfig+0xcc>)
 810571c:	4293      	cmp	r3, r2
 810571e:	d003      	beq.n	8105728 <TIM_OC4_SetConfig+0x84>
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	4a14      	ldr	r2, [pc, #80]	; (8105774 <TIM_OC4_SetConfig+0xd0>)
 8105724:	4293      	cmp	r3, r2
 8105726:	d109      	bne.n	810573c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105728:	697b      	ldr	r3, [r7, #20]
 810572a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810572e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105730:	683b      	ldr	r3, [r7, #0]
 8105732:	695b      	ldr	r3, [r3, #20]
 8105734:	019b      	lsls	r3, r3, #6
 8105736:	697a      	ldr	r2, [r7, #20]
 8105738:	4313      	orrs	r3, r2
 810573a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	697a      	ldr	r2, [r7, #20]
 8105740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	68fa      	ldr	r2, [r7, #12]
 8105746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8105748:	683b      	ldr	r3, [r7, #0]
 810574a:	685a      	ldr	r2, [r3, #4]
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	693a      	ldr	r2, [r7, #16]
 8105754:	621a      	str	r2, [r3, #32]
}
 8105756:	bf00      	nop
 8105758:	371c      	adds	r7, #28
 810575a:	46bd      	mov	sp, r7
 810575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105760:	4770      	bx	lr
 8105762:	bf00      	nop
 8105764:	40010000 	.word	0x40010000
 8105768:	40010400 	.word	0x40010400
 810576c:	40014000 	.word	0x40014000
 8105770:	40014400 	.word	0x40014400
 8105774:	40014800 	.word	0x40014800

08105778 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8105778:	b480      	push	{r7}
 810577a:	b087      	sub	sp, #28
 810577c:	af00      	add	r7, sp, #0
 810577e:	6078      	str	r0, [r7, #4]
 8105780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	6a1b      	ldr	r3, [r3, #32]
 8105786:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	6a1b      	ldr	r3, [r3, #32]
 8105792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	685b      	ldr	r3, [r3, #4]
 8105798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81057aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81057ac:	683b      	ldr	r3, [r7, #0]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	68fa      	ldr	r2, [r7, #12]
 81057b2:	4313      	orrs	r3, r2
 81057b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81057b6:	693b      	ldr	r3, [r7, #16]
 81057b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81057bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81057be:	683b      	ldr	r3, [r7, #0]
 81057c0:	689b      	ldr	r3, [r3, #8]
 81057c2:	041b      	lsls	r3, r3, #16
 81057c4:	693a      	ldr	r2, [r7, #16]
 81057c6:	4313      	orrs	r3, r2
 81057c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	4a17      	ldr	r2, [pc, #92]	; (810582c <TIM_OC5_SetConfig+0xb4>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d00f      	beq.n	81057f2 <TIM_OC5_SetConfig+0x7a>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	4a16      	ldr	r2, [pc, #88]	; (8105830 <TIM_OC5_SetConfig+0xb8>)
 81057d6:	4293      	cmp	r3, r2
 81057d8:	d00b      	beq.n	81057f2 <TIM_OC5_SetConfig+0x7a>
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	4a15      	ldr	r2, [pc, #84]	; (8105834 <TIM_OC5_SetConfig+0xbc>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d007      	beq.n	81057f2 <TIM_OC5_SetConfig+0x7a>
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	4a14      	ldr	r2, [pc, #80]	; (8105838 <TIM_OC5_SetConfig+0xc0>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d003      	beq.n	81057f2 <TIM_OC5_SetConfig+0x7a>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	4a13      	ldr	r2, [pc, #76]	; (810583c <TIM_OC5_SetConfig+0xc4>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d109      	bne.n	8105806 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81057f2:	697b      	ldr	r3, [r7, #20]
 81057f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81057f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81057fa:	683b      	ldr	r3, [r7, #0]
 81057fc:	695b      	ldr	r3, [r3, #20]
 81057fe:	021b      	lsls	r3, r3, #8
 8105800:	697a      	ldr	r2, [r7, #20]
 8105802:	4313      	orrs	r3, r2
 8105804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	697a      	ldr	r2, [r7, #20]
 810580a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810580c:	687b      	ldr	r3, [r7, #4]
 810580e:	68fa      	ldr	r2, [r7, #12]
 8105810:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105812:	683b      	ldr	r3, [r7, #0]
 8105814:	685a      	ldr	r2, [r3, #4]
 8105816:	687b      	ldr	r3, [r7, #4]
 8105818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	693a      	ldr	r2, [r7, #16]
 810581e:	621a      	str	r2, [r3, #32]
}
 8105820:	bf00      	nop
 8105822:	371c      	adds	r7, #28
 8105824:	46bd      	mov	sp, r7
 8105826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810582a:	4770      	bx	lr
 810582c:	40010000 	.word	0x40010000
 8105830:	40010400 	.word	0x40010400
 8105834:	40014000 	.word	0x40014000
 8105838:	40014400 	.word	0x40014400
 810583c:	40014800 	.word	0x40014800

08105840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8105840:	b480      	push	{r7}
 8105842:	b087      	sub	sp, #28
 8105844:	af00      	add	r7, sp, #0
 8105846:	6078      	str	r0, [r7, #4]
 8105848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	6a1b      	ldr	r3, [r3, #32]
 810584e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	6a1b      	ldr	r3, [r3, #32]
 810585a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	685b      	ldr	r3, [r3, #4]
 8105860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105874:	683b      	ldr	r3, [r7, #0]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	021b      	lsls	r3, r3, #8
 810587a:	68fa      	ldr	r2, [r7, #12]
 810587c:	4313      	orrs	r3, r2
 810587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8105880:	693b      	ldr	r3, [r7, #16]
 8105882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105888:	683b      	ldr	r3, [r7, #0]
 810588a:	689b      	ldr	r3, [r3, #8]
 810588c:	051b      	lsls	r3, r3, #20
 810588e:	693a      	ldr	r2, [r7, #16]
 8105890:	4313      	orrs	r3, r2
 8105892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	4a18      	ldr	r2, [pc, #96]	; (81058f8 <TIM_OC6_SetConfig+0xb8>)
 8105898:	4293      	cmp	r3, r2
 810589a:	d00f      	beq.n	81058bc <TIM_OC6_SetConfig+0x7c>
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	4a17      	ldr	r2, [pc, #92]	; (81058fc <TIM_OC6_SetConfig+0xbc>)
 81058a0:	4293      	cmp	r3, r2
 81058a2:	d00b      	beq.n	81058bc <TIM_OC6_SetConfig+0x7c>
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	4a16      	ldr	r2, [pc, #88]	; (8105900 <TIM_OC6_SetConfig+0xc0>)
 81058a8:	4293      	cmp	r3, r2
 81058aa:	d007      	beq.n	81058bc <TIM_OC6_SetConfig+0x7c>
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	4a15      	ldr	r2, [pc, #84]	; (8105904 <TIM_OC6_SetConfig+0xc4>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d003      	beq.n	81058bc <TIM_OC6_SetConfig+0x7c>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	4a14      	ldr	r2, [pc, #80]	; (8105908 <TIM_OC6_SetConfig+0xc8>)
 81058b8:	4293      	cmp	r3, r2
 81058ba:	d109      	bne.n	81058d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81058bc:	697b      	ldr	r3, [r7, #20]
 81058be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81058c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81058c4:	683b      	ldr	r3, [r7, #0]
 81058c6:	695b      	ldr	r3, [r3, #20]
 81058c8:	029b      	lsls	r3, r3, #10
 81058ca:	697a      	ldr	r2, [r7, #20]
 81058cc:	4313      	orrs	r3, r2
 81058ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	697a      	ldr	r2, [r7, #20]
 81058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	68fa      	ldr	r2, [r7, #12]
 81058da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81058dc:	683b      	ldr	r3, [r7, #0]
 81058de:	685a      	ldr	r2, [r3, #4]
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	693a      	ldr	r2, [r7, #16]
 81058e8:	621a      	str	r2, [r3, #32]
}
 81058ea:	bf00      	nop
 81058ec:	371c      	adds	r7, #28
 81058ee:	46bd      	mov	sp, r7
 81058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058f4:	4770      	bx	lr
 81058f6:	bf00      	nop
 81058f8:	40010000 	.word	0x40010000
 81058fc:	40010400 	.word	0x40010400
 8105900:	40014000 	.word	0x40014000
 8105904:	40014400 	.word	0x40014400
 8105908:	40014800 	.word	0x40014800

0810590c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810590c:	b480      	push	{r7}
 810590e:	b087      	sub	sp, #28
 8105910:	af00      	add	r7, sp, #0
 8105912:	60f8      	str	r0, [r7, #12]
 8105914:	60b9      	str	r1, [r7, #8]
 8105916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	6a1b      	ldr	r3, [r3, #32]
 810591c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810591e:	68fb      	ldr	r3, [r7, #12]
 8105920:	6a1b      	ldr	r3, [r3, #32]
 8105922:	f023 0201 	bic.w	r2, r3, #1
 8105926:	68fb      	ldr	r3, [r7, #12]
 8105928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810592a:	68fb      	ldr	r3, [r7, #12]
 810592c:	699b      	ldr	r3, [r3, #24]
 810592e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105930:	693b      	ldr	r3, [r7, #16]
 8105932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8105936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	011b      	lsls	r3, r3, #4
 810593c:	693a      	ldr	r2, [r7, #16]
 810593e:	4313      	orrs	r3, r2
 8105940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105942:	697b      	ldr	r3, [r7, #20]
 8105944:	f023 030a 	bic.w	r3, r3, #10
 8105948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810594a:	697a      	ldr	r2, [r7, #20]
 810594c:	68bb      	ldr	r3, [r7, #8]
 810594e:	4313      	orrs	r3, r2
 8105950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8105952:	68fb      	ldr	r3, [r7, #12]
 8105954:	693a      	ldr	r2, [r7, #16]
 8105956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	697a      	ldr	r2, [r7, #20]
 810595c:	621a      	str	r2, [r3, #32]
}
 810595e:	bf00      	nop
 8105960:	371c      	adds	r7, #28
 8105962:	46bd      	mov	sp, r7
 8105964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105968:	4770      	bx	lr

0810596a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810596a:	b480      	push	{r7}
 810596c:	b087      	sub	sp, #28
 810596e:	af00      	add	r7, sp, #0
 8105970:	60f8      	str	r0, [r7, #12]
 8105972:	60b9      	str	r1, [r7, #8]
 8105974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105976:	68fb      	ldr	r3, [r7, #12]
 8105978:	6a1b      	ldr	r3, [r3, #32]
 810597a:	f023 0210 	bic.w	r2, r3, #16
 810597e:	68fb      	ldr	r3, [r7, #12]
 8105980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105982:	68fb      	ldr	r3, [r7, #12]
 8105984:	699b      	ldr	r3, [r3, #24]
 8105986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8105988:	68fb      	ldr	r3, [r7, #12]
 810598a:	6a1b      	ldr	r3, [r3, #32]
 810598c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810598e:	697b      	ldr	r3, [r7, #20]
 8105990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8105994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	031b      	lsls	r3, r3, #12
 810599a:	697a      	ldr	r2, [r7, #20]
 810599c:	4313      	orrs	r3, r2
 810599e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81059a0:	693b      	ldr	r3, [r7, #16]
 81059a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81059a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81059a8:	68bb      	ldr	r3, [r7, #8]
 81059aa:	011b      	lsls	r3, r3, #4
 81059ac:	693a      	ldr	r2, [r7, #16]
 81059ae:	4313      	orrs	r3, r2
 81059b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81059b2:	68fb      	ldr	r3, [r7, #12]
 81059b4:	697a      	ldr	r2, [r7, #20]
 81059b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81059b8:	68fb      	ldr	r3, [r7, #12]
 81059ba:	693a      	ldr	r2, [r7, #16]
 81059bc:	621a      	str	r2, [r3, #32]
}
 81059be:	bf00      	nop
 81059c0:	371c      	adds	r7, #28
 81059c2:	46bd      	mov	sp, r7
 81059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059c8:	4770      	bx	lr

081059ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81059ca:	b480      	push	{r7}
 81059cc:	b085      	sub	sp, #20
 81059ce:	af00      	add	r7, sp, #0
 81059d0:	6078      	str	r0, [r7, #4]
 81059d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	689b      	ldr	r3, [r3, #8]
 81059d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81059da:	68fb      	ldr	r3, [r7, #12]
 81059dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81059e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81059e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81059e6:	683a      	ldr	r2, [r7, #0]
 81059e8:	68fb      	ldr	r3, [r7, #12]
 81059ea:	4313      	orrs	r3, r2
 81059ec:	f043 0307 	orr.w	r3, r3, #7
 81059f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	68fa      	ldr	r2, [r7, #12]
 81059f6:	609a      	str	r2, [r3, #8]
}
 81059f8:	bf00      	nop
 81059fa:	3714      	adds	r7, #20
 81059fc:	46bd      	mov	sp, r7
 81059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a02:	4770      	bx	lr

08105a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105a04:	b480      	push	{r7}
 8105a06:	b087      	sub	sp, #28
 8105a08:	af00      	add	r7, sp, #0
 8105a0a:	60f8      	str	r0, [r7, #12]
 8105a0c:	60b9      	str	r1, [r7, #8]
 8105a0e:	607a      	str	r2, [r7, #4]
 8105a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105a12:	68fb      	ldr	r3, [r7, #12]
 8105a14:	689b      	ldr	r3, [r3, #8]
 8105a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105a18:	697b      	ldr	r3, [r7, #20]
 8105a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105a20:	683b      	ldr	r3, [r7, #0]
 8105a22:	021a      	lsls	r2, r3, #8
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	431a      	orrs	r2, r3
 8105a28:	68bb      	ldr	r3, [r7, #8]
 8105a2a:	4313      	orrs	r3, r2
 8105a2c:	697a      	ldr	r2, [r7, #20]
 8105a2e:	4313      	orrs	r3, r2
 8105a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105a32:	68fb      	ldr	r3, [r7, #12]
 8105a34:	697a      	ldr	r2, [r7, #20]
 8105a36:	609a      	str	r2, [r3, #8]
}
 8105a38:	bf00      	nop
 8105a3a:	371c      	adds	r7, #28
 8105a3c:	46bd      	mov	sp, r7
 8105a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a42:	4770      	bx	lr

08105a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8105a44:	b480      	push	{r7}
 8105a46:	b087      	sub	sp, #28
 8105a48:	af00      	add	r7, sp, #0
 8105a4a:	60f8      	str	r0, [r7, #12]
 8105a4c:	60b9      	str	r1, [r7, #8]
 8105a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8105a50:	68bb      	ldr	r3, [r7, #8]
 8105a52:	f003 031f 	and.w	r3, r3, #31
 8105a56:	2201      	movs	r2, #1
 8105a58:	fa02 f303 	lsl.w	r3, r2, r3
 8105a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8105a5e:	68fb      	ldr	r3, [r7, #12]
 8105a60:	6a1a      	ldr	r2, [r3, #32]
 8105a62:	697b      	ldr	r3, [r7, #20]
 8105a64:	43db      	mvns	r3, r3
 8105a66:	401a      	ands	r2, r3
 8105a68:	68fb      	ldr	r3, [r7, #12]
 8105a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8105a6c:	68fb      	ldr	r3, [r7, #12]
 8105a6e:	6a1a      	ldr	r2, [r3, #32]
 8105a70:	68bb      	ldr	r3, [r7, #8]
 8105a72:	f003 031f 	and.w	r3, r3, #31
 8105a76:	6879      	ldr	r1, [r7, #4]
 8105a78:	fa01 f303 	lsl.w	r3, r1, r3
 8105a7c:	431a      	orrs	r2, r3
 8105a7e:	68fb      	ldr	r3, [r7, #12]
 8105a80:	621a      	str	r2, [r3, #32]
}
 8105a82:	bf00      	nop
 8105a84:	371c      	adds	r7, #28
 8105a86:	46bd      	mov	sp, r7
 8105a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a8c:	4770      	bx	lr
	...

08105a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105a90:	b480      	push	{r7}
 8105a92:	b085      	sub	sp, #20
 8105a94:	af00      	add	r7, sp, #0
 8105a96:	6078      	str	r0, [r7, #4]
 8105a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105aa0:	2b01      	cmp	r3, #1
 8105aa2:	d101      	bne.n	8105aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8105aa4:	2302      	movs	r3, #2
 8105aa6:	e06d      	b.n	8105b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	2201      	movs	r2, #1
 8105aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	2202      	movs	r2, #2
 8105ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	685b      	ldr	r3, [r3, #4]
 8105abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	689b      	ldr	r3, [r3, #8]
 8105ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	4a30      	ldr	r2, [pc, #192]	; (8105b90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105ace:	4293      	cmp	r3, r2
 8105ad0:	d004      	beq.n	8105adc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	4a2f      	ldr	r2, [pc, #188]	; (8105b94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105ad8:	4293      	cmp	r3, r2
 8105ada:	d108      	bne.n	8105aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8105ae2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105ae4:	683b      	ldr	r3, [r7, #0]
 8105ae6:	685b      	ldr	r3, [r3, #4]
 8105ae8:	68fa      	ldr	r2, [r7, #12]
 8105aea:	4313      	orrs	r3, r2
 8105aec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8105aee:	68fb      	ldr	r3, [r7, #12]
 8105af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8105af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105af6:	683b      	ldr	r3, [r7, #0]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	68fa      	ldr	r2, [r7, #12]
 8105afc:	4313      	orrs	r3, r2
 8105afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	68fa      	ldr	r2, [r7, #12]
 8105b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	4a20      	ldr	r2, [pc, #128]	; (8105b90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8105b0e:	4293      	cmp	r3, r2
 8105b10:	d022      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105b1a:	d01d      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	4a1d      	ldr	r2, [pc, #116]	; (8105b98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8105b22:	4293      	cmp	r3, r2
 8105b24:	d018      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	4a1c      	ldr	r2, [pc, #112]	; (8105b9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8105b2c:	4293      	cmp	r3, r2
 8105b2e:	d013      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	681b      	ldr	r3, [r3, #0]
 8105b34:	4a1a      	ldr	r2, [pc, #104]	; (8105ba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8105b36:	4293      	cmp	r3, r2
 8105b38:	d00e      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	4a15      	ldr	r2, [pc, #84]	; (8105b94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8105b40:	4293      	cmp	r3, r2
 8105b42:	d009      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	681b      	ldr	r3, [r3, #0]
 8105b48:	4a16      	ldr	r2, [pc, #88]	; (8105ba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8105b4a:	4293      	cmp	r3, r2
 8105b4c:	d004      	beq.n	8105b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	4a15      	ldr	r2, [pc, #84]	; (8105ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8105b54:	4293      	cmp	r3, r2
 8105b56:	d10c      	bne.n	8105b72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105b58:	68bb      	ldr	r3, [r7, #8]
 8105b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105b60:	683b      	ldr	r3, [r7, #0]
 8105b62:	689b      	ldr	r3, [r3, #8]
 8105b64:	68ba      	ldr	r2, [r7, #8]
 8105b66:	4313      	orrs	r3, r2
 8105b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	68ba      	ldr	r2, [r7, #8]
 8105b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	2201      	movs	r2, #1
 8105b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	2200      	movs	r2, #0
 8105b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8105b82:	2300      	movs	r3, #0
}
 8105b84:	4618      	mov	r0, r3
 8105b86:	3714      	adds	r7, #20
 8105b88:	46bd      	mov	sp, r7
 8105b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b8e:	4770      	bx	lr
 8105b90:	40010000 	.word	0x40010000
 8105b94:	40010400 	.word	0x40010400
 8105b98:	40000400 	.word	0x40000400
 8105b9c:	40000800 	.word	0x40000800
 8105ba0:	40000c00 	.word	0x40000c00
 8105ba4:	40001800 	.word	0x40001800
 8105ba8:	40014000 	.word	0x40014000

08105bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8105bac:	b480      	push	{r7}
 8105bae:	b085      	sub	sp, #20
 8105bb0:	af00      	add	r7, sp, #0
 8105bb2:	6078      	str	r0, [r7, #4]
 8105bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8105bb6:	2300      	movs	r3, #0
 8105bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105bc0:	2b01      	cmp	r3, #1
 8105bc2:	d101      	bne.n	8105bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8105bc4:	2302      	movs	r3, #2
 8105bc6:	e065      	b.n	8105c94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	2201      	movs	r2, #1
 8105bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8105bd6:	683b      	ldr	r3, [r7, #0]
 8105bd8:	68db      	ldr	r3, [r3, #12]
 8105bda:	4313      	orrs	r3, r2
 8105bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8105bde:	68fb      	ldr	r3, [r7, #12]
 8105be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105be4:	683b      	ldr	r3, [r7, #0]
 8105be6:	689b      	ldr	r3, [r3, #8]
 8105be8:	4313      	orrs	r3, r2
 8105bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8105bf2:	683b      	ldr	r3, [r7, #0]
 8105bf4:	685b      	ldr	r3, [r3, #4]
 8105bf6:	4313      	orrs	r3, r2
 8105bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8105c00:	683b      	ldr	r3, [r7, #0]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	4313      	orrs	r3, r2
 8105c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8105c08:	68fb      	ldr	r3, [r7, #12]
 8105c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8105c0e:	683b      	ldr	r3, [r7, #0]
 8105c10:	691b      	ldr	r3, [r3, #16]
 8105c12:	4313      	orrs	r3, r2
 8105c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8105c1c:	683b      	ldr	r3, [r7, #0]
 8105c1e:	695b      	ldr	r3, [r3, #20]
 8105c20:	4313      	orrs	r3, r2
 8105c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8105c24:	68fb      	ldr	r3, [r7, #12]
 8105c26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8105c2a:	683b      	ldr	r3, [r7, #0]
 8105c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c2e:	4313      	orrs	r3, r2
 8105c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8105c32:	68fb      	ldr	r3, [r7, #12]
 8105c34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8105c38:	683b      	ldr	r3, [r7, #0]
 8105c3a:	699b      	ldr	r3, [r3, #24]
 8105c3c:	041b      	lsls	r3, r3, #16
 8105c3e:	4313      	orrs	r3, r2
 8105c40:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	4a16      	ldr	r2, [pc, #88]	; (8105ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8105c48:	4293      	cmp	r3, r2
 8105c4a:	d004      	beq.n	8105c56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	4a14      	ldr	r2, [pc, #80]	; (8105ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8105c52:	4293      	cmp	r3, r2
 8105c54:	d115      	bne.n	8105c82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8105c56:	68fb      	ldr	r3, [r7, #12]
 8105c58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8105c5c:	683b      	ldr	r3, [r7, #0]
 8105c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c60:	051b      	lsls	r3, r3, #20
 8105c62:	4313      	orrs	r3, r2
 8105c64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8105c6c:	683b      	ldr	r3, [r7, #0]
 8105c6e:	69db      	ldr	r3, [r3, #28]
 8105c70:	4313      	orrs	r3, r2
 8105c72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8105c74:	68fb      	ldr	r3, [r7, #12]
 8105c76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8105c7a:	683b      	ldr	r3, [r7, #0]
 8105c7c:	6a1b      	ldr	r3, [r3, #32]
 8105c7e:	4313      	orrs	r3, r2
 8105c80:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	68fa      	ldr	r2, [r7, #12]
 8105c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	2200      	movs	r2, #0
 8105c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8105c92:	2300      	movs	r3, #0
}
 8105c94:	4618      	mov	r0, r3
 8105c96:	3714      	adds	r7, #20
 8105c98:	46bd      	mov	sp, r7
 8105c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c9e:	4770      	bx	lr
 8105ca0:	40010000 	.word	0x40010000
 8105ca4:	40010400 	.word	0x40010400

08105ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8105ca8:	b480      	push	{r7}
 8105caa:	b083      	sub	sp, #12
 8105cac:	af00      	add	r7, sp, #0
 8105cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8105cb0:	bf00      	nop
 8105cb2:	370c      	adds	r7, #12
 8105cb4:	46bd      	mov	sp, r7
 8105cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cba:	4770      	bx	lr

08105cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105cbc:	b480      	push	{r7}
 8105cbe:	b083      	sub	sp, #12
 8105cc0:	af00      	add	r7, sp, #0
 8105cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8105cc4:	bf00      	nop
 8105cc6:	370c      	adds	r7, #12
 8105cc8:	46bd      	mov	sp, r7
 8105cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cce:	4770      	bx	lr

08105cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8105cd0:	b480      	push	{r7}
 8105cd2:	b083      	sub	sp, #12
 8105cd4:	af00      	add	r7, sp, #0
 8105cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8105cd8:	bf00      	nop
 8105cda:	370c      	adds	r7, #12
 8105cdc:	46bd      	mov	sp, r7
 8105cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce2:	4770      	bx	lr

08105ce4 <__NVIC_SetPriority>:
{
 8105ce4:	b480      	push	{r7}
 8105ce6:	b083      	sub	sp, #12
 8105ce8:	af00      	add	r7, sp, #0
 8105cea:	4603      	mov	r3, r0
 8105cec:	6039      	str	r1, [r7, #0]
 8105cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	db0a      	blt.n	8105d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105cf8:	683b      	ldr	r3, [r7, #0]
 8105cfa:	b2da      	uxtb	r2, r3
 8105cfc:	490c      	ldr	r1, [pc, #48]	; (8105d30 <__NVIC_SetPriority+0x4c>)
 8105cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105d02:	0112      	lsls	r2, r2, #4
 8105d04:	b2d2      	uxtb	r2, r2
 8105d06:	440b      	add	r3, r1
 8105d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8105d0c:	e00a      	b.n	8105d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105d0e:	683b      	ldr	r3, [r7, #0]
 8105d10:	b2da      	uxtb	r2, r3
 8105d12:	4908      	ldr	r1, [pc, #32]	; (8105d34 <__NVIC_SetPriority+0x50>)
 8105d14:	88fb      	ldrh	r3, [r7, #6]
 8105d16:	f003 030f 	and.w	r3, r3, #15
 8105d1a:	3b04      	subs	r3, #4
 8105d1c:	0112      	lsls	r2, r2, #4
 8105d1e:	b2d2      	uxtb	r2, r2
 8105d20:	440b      	add	r3, r1
 8105d22:	761a      	strb	r2, [r3, #24]
}
 8105d24:	bf00      	nop
 8105d26:	370c      	adds	r7, #12
 8105d28:	46bd      	mov	sp, r7
 8105d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d2e:	4770      	bx	lr
 8105d30:	e000e100 	.word	0xe000e100
 8105d34:	e000ed00 	.word	0xe000ed00

08105d38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8105d38:	b580      	push	{r7, lr}
 8105d3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8105d3c:	4b05      	ldr	r3, [pc, #20]	; (8105d54 <SysTick_Handler+0x1c>)
 8105d3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8105d40:	f002 fa1e 	bl	8108180 <xTaskGetSchedulerState>
 8105d44:	4603      	mov	r3, r0
 8105d46:	2b01      	cmp	r3, #1
 8105d48:	d001      	beq.n	8105d4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8105d4a:	f000 fe55 	bl	81069f8 <xPortSysTickHandler>
  }
}
 8105d4e:	bf00      	nop
 8105d50:	bd80      	pop	{r7, pc}
 8105d52:	bf00      	nop
 8105d54:	e000e010 	.word	0xe000e010

08105d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8105d58:	b580      	push	{r7, lr}
 8105d5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8105d5c:	2100      	movs	r1, #0
 8105d5e:	f06f 0004 	mvn.w	r0, #4
 8105d62:	f7ff ffbf 	bl	8105ce4 <__NVIC_SetPriority>
#endif
}
 8105d66:	bf00      	nop
 8105d68:	bd80      	pop	{r7, pc}
	...

08105d6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105d6c:	b480      	push	{r7}
 8105d6e:	b083      	sub	sp, #12
 8105d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105d72:	f3ef 8305 	mrs	r3, IPSR
 8105d76:	603b      	str	r3, [r7, #0]
  return(result);
 8105d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	d003      	beq.n	8105d86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8105d7e:	f06f 0305 	mvn.w	r3, #5
 8105d82:	607b      	str	r3, [r7, #4]
 8105d84:	e00c      	b.n	8105da0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8105d86:	4b0a      	ldr	r3, [pc, #40]	; (8105db0 <osKernelInitialize+0x44>)
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d105      	bne.n	8105d9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8105d8e:	4b08      	ldr	r3, [pc, #32]	; (8105db0 <osKernelInitialize+0x44>)
 8105d90:	2201      	movs	r2, #1
 8105d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8105d94:	2300      	movs	r3, #0
 8105d96:	607b      	str	r3, [r7, #4]
 8105d98:	e002      	b.n	8105da0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8105d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8105d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8105da0:	687b      	ldr	r3, [r7, #4]
}
 8105da2:	4618      	mov	r0, r3
 8105da4:	370c      	adds	r7, #12
 8105da6:	46bd      	mov	sp, r7
 8105da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dac:	4770      	bx	lr
 8105dae:	bf00      	nop
 8105db0:	1000037c 	.word	0x1000037c

08105db4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8105db4:	b580      	push	{r7, lr}
 8105db6:	b082      	sub	sp, #8
 8105db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105dba:	f3ef 8305 	mrs	r3, IPSR
 8105dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8105dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105dc2:	2b00      	cmp	r3, #0
 8105dc4:	d003      	beq.n	8105dce <osKernelStart+0x1a>
    stat = osErrorISR;
 8105dc6:	f06f 0305 	mvn.w	r3, #5
 8105dca:	607b      	str	r3, [r7, #4]
 8105dcc:	e010      	b.n	8105df0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8105dce:	4b0b      	ldr	r3, [pc, #44]	; (8105dfc <osKernelStart+0x48>)
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	2b01      	cmp	r3, #1
 8105dd4:	d109      	bne.n	8105dea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8105dd6:	f7ff ffbf 	bl	8105d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8105dda:	4b08      	ldr	r3, [pc, #32]	; (8105dfc <osKernelStart+0x48>)
 8105ddc:	2202      	movs	r2, #2
 8105dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8105de0:	f001 fd72 	bl	81078c8 <vTaskStartScheduler>
      stat = osOK;
 8105de4:	2300      	movs	r3, #0
 8105de6:	607b      	str	r3, [r7, #4]
 8105de8:	e002      	b.n	8105df0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8105dea:	f04f 33ff 	mov.w	r3, #4294967295
 8105dee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8105df0:	687b      	ldr	r3, [r7, #4]
}
 8105df2:	4618      	mov	r0, r3
 8105df4:	3708      	adds	r7, #8
 8105df6:	46bd      	mov	sp, r7
 8105df8:	bd80      	pop	{r7, pc}
 8105dfa:	bf00      	nop
 8105dfc:	1000037c 	.word	0x1000037c

08105e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105e00:	b580      	push	{r7, lr}
 8105e02:	b08e      	sub	sp, #56	; 0x38
 8105e04:	af04      	add	r7, sp, #16
 8105e06:	60f8      	str	r0, [r7, #12]
 8105e08:	60b9      	str	r1, [r7, #8]
 8105e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105e0c:	2300      	movs	r3, #0
 8105e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105e10:	f3ef 8305 	mrs	r3, IPSR
 8105e14:	617b      	str	r3, [r7, #20]
  return(result);
 8105e16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	d17e      	bne.n	8105f1a <osThreadNew+0x11a>
 8105e1c:	68fb      	ldr	r3, [r7, #12]
 8105e1e:	2b00      	cmp	r3, #0
 8105e20:	d07b      	beq.n	8105f1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8105e22:	2380      	movs	r3, #128	; 0x80
 8105e24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8105e26:	2318      	movs	r3, #24
 8105e28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8105e2a:	2300      	movs	r3, #0
 8105e2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8105e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8105e32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	2b00      	cmp	r3, #0
 8105e38:	d045      	beq.n	8105ec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	681b      	ldr	r3, [r3, #0]
 8105e3e:	2b00      	cmp	r3, #0
 8105e40:	d002      	beq.n	8105e48 <osThreadNew+0x48>
        name = attr->name;
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	699b      	ldr	r3, [r3, #24]
 8105e4c:	2b00      	cmp	r3, #0
 8105e4e:	d002      	beq.n	8105e56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	699b      	ldr	r3, [r3, #24]
 8105e54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8105e56:	69fb      	ldr	r3, [r7, #28]
 8105e58:	2b00      	cmp	r3, #0
 8105e5a:	d008      	beq.n	8105e6e <osThreadNew+0x6e>
 8105e5c:	69fb      	ldr	r3, [r7, #28]
 8105e5e:	2b38      	cmp	r3, #56	; 0x38
 8105e60:	d805      	bhi.n	8105e6e <osThreadNew+0x6e>
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	685b      	ldr	r3, [r3, #4]
 8105e66:	f003 0301 	and.w	r3, r3, #1
 8105e6a:	2b00      	cmp	r3, #0
 8105e6c:	d001      	beq.n	8105e72 <osThreadNew+0x72>
        return (NULL);
 8105e6e:	2300      	movs	r3, #0
 8105e70:	e054      	b.n	8105f1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	695b      	ldr	r3, [r3, #20]
 8105e76:	2b00      	cmp	r3, #0
 8105e78:	d003      	beq.n	8105e82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	695b      	ldr	r3, [r3, #20]
 8105e7e:	089b      	lsrs	r3, r3, #2
 8105e80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	689b      	ldr	r3, [r3, #8]
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	d00e      	beq.n	8105ea8 <osThreadNew+0xa8>
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	68db      	ldr	r3, [r3, #12]
 8105e8e:	2bbb      	cmp	r3, #187	; 0xbb
 8105e90:	d90a      	bls.n	8105ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105e96:	2b00      	cmp	r3, #0
 8105e98:	d006      	beq.n	8105ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	695b      	ldr	r3, [r3, #20]
 8105e9e:	2b00      	cmp	r3, #0
 8105ea0:	d002      	beq.n	8105ea8 <osThreadNew+0xa8>
        mem = 1;
 8105ea2:	2301      	movs	r3, #1
 8105ea4:	61bb      	str	r3, [r7, #24]
 8105ea6:	e010      	b.n	8105eca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	689b      	ldr	r3, [r3, #8]
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d10c      	bne.n	8105eca <osThreadNew+0xca>
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	68db      	ldr	r3, [r3, #12]
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d108      	bne.n	8105eca <osThreadNew+0xca>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	691b      	ldr	r3, [r3, #16]
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d104      	bne.n	8105eca <osThreadNew+0xca>
          mem = 0;
 8105ec0:	2300      	movs	r3, #0
 8105ec2:	61bb      	str	r3, [r7, #24]
 8105ec4:	e001      	b.n	8105eca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8105ec6:	2300      	movs	r3, #0
 8105ec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8105eca:	69bb      	ldr	r3, [r7, #24]
 8105ecc:	2b01      	cmp	r3, #1
 8105ece:	d110      	bne.n	8105ef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8105ed4:	687a      	ldr	r2, [r7, #4]
 8105ed6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105ed8:	9202      	str	r2, [sp, #8]
 8105eda:	9301      	str	r3, [sp, #4]
 8105edc:	69fb      	ldr	r3, [r7, #28]
 8105ede:	9300      	str	r3, [sp, #0]
 8105ee0:	68bb      	ldr	r3, [r7, #8]
 8105ee2:	6a3a      	ldr	r2, [r7, #32]
 8105ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8105ee6:	68f8      	ldr	r0, [r7, #12]
 8105ee8:	f001 fb02 	bl	81074f0 <xTaskCreateStatic>
 8105eec:	4603      	mov	r3, r0
 8105eee:	613b      	str	r3, [r7, #16]
 8105ef0:	e013      	b.n	8105f1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8105ef2:	69bb      	ldr	r3, [r7, #24]
 8105ef4:	2b00      	cmp	r3, #0
 8105ef6:	d110      	bne.n	8105f1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8105ef8:	6a3b      	ldr	r3, [r7, #32]
 8105efa:	b29a      	uxth	r2, r3
 8105efc:	f107 0310 	add.w	r3, r7, #16
 8105f00:	9301      	str	r3, [sp, #4]
 8105f02:	69fb      	ldr	r3, [r7, #28]
 8105f04:	9300      	str	r3, [sp, #0]
 8105f06:	68bb      	ldr	r3, [r7, #8]
 8105f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8105f0a:	68f8      	ldr	r0, [r7, #12]
 8105f0c:	f001 fb4d 	bl	81075aa <xTaskCreate>
 8105f10:	4603      	mov	r3, r0
 8105f12:	2b01      	cmp	r3, #1
 8105f14:	d001      	beq.n	8105f1a <osThreadNew+0x11a>
            hTask = NULL;
 8105f16:	2300      	movs	r3, #0
 8105f18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8105f1a:	693b      	ldr	r3, [r7, #16]
}
 8105f1c:	4618      	mov	r0, r3
 8105f1e:	3728      	adds	r7, #40	; 0x28
 8105f20:	46bd      	mov	sp, r7
 8105f22:	bd80      	pop	{r7, pc}

08105f24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8105f24:	b580      	push	{r7, lr}
 8105f26:	b084      	sub	sp, #16
 8105f28:	af00      	add	r7, sp, #0
 8105f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105f2c:	f3ef 8305 	mrs	r3, IPSR
 8105f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8105f32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105f34:	2b00      	cmp	r3, #0
 8105f36:	d003      	beq.n	8105f40 <osDelay+0x1c>
    stat = osErrorISR;
 8105f38:	f06f 0305 	mvn.w	r3, #5
 8105f3c:	60fb      	str	r3, [r7, #12]
 8105f3e:	e007      	b.n	8105f50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8105f40:	2300      	movs	r3, #0
 8105f42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d002      	beq.n	8105f50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8105f4a:	6878      	ldr	r0, [r7, #4]
 8105f4c:	f001 fc88 	bl	8107860 <vTaskDelay>
    }
  }

  return (stat);
 8105f50:	68fb      	ldr	r3, [r7, #12]
}
 8105f52:	4618      	mov	r0, r3
 8105f54:	3710      	adds	r7, #16
 8105f56:	46bd      	mov	sp, r7
 8105f58:	bd80      	pop	{r7, pc}

08105f5a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8105f5a:	b580      	push	{r7, lr}
 8105f5c:	b084      	sub	sp, #16
 8105f5e:	af00      	add	r7, sp, #0
 8105f60:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8105f62:	6878      	ldr	r0, [r7, #4]
 8105f64:	f002 fdd4 	bl	8108b10 <pvTimerGetTimerID>
 8105f68:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d005      	beq.n	8105f7c <TimerCallback+0x22>
    callb->func (callb->arg);
 8105f70:	68fb      	ldr	r3, [r7, #12]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	68fa      	ldr	r2, [r7, #12]
 8105f76:	6852      	ldr	r2, [r2, #4]
 8105f78:	4610      	mov	r0, r2
 8105f7a:	4798      	blx	r3
  }
}
 8105f7c:	bf00      	nop
 8105f7e:	3710      	adds	r7, #16
 8105f80:	46bd      	mov	sp, r7
 8105f82:	bd80      	pop	{r7, pc}

08105f84 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8105f84:	b580      	push	{r7, lr}
 8105f86:	b08c      	sub	sp, #48	; 0x30
 8105f88:	af02      	add	r7, sp, #8
 8105f8a:	60f8      	str	r0, [r7, #12]
 8105f8c:	607a      	str	r2, [r7, #4]
 8105f8e:	603b      	str	r3, [r7, #0]
 8105f90:	460b      	mov	r3, r1
 8105f92:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8105f94:	2300      	movs	r3, #0
 8105f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105f98:	f3ef 8305 	mrs	r3, IPSR
 8105f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8105f9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d163      	bne.n	810606c <osTimerNew+0xe8>
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	2b00      	cmp	r3, #0
 8105fa8:	d060      	beq.n	810606c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8105faa:	2008      	movs	r0, #8
 8105fac:	f000 f8c8 	bl	8106140 <pvPortMalloc>
 8105fb0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8105fb2:	697b      	ldr	r3, [r7, #20]
 8105fb4:	2b00      	cmp	r3, #0
 8105fb6:	d059      	beq.n	810606c <osTimerNew+0xe8>
      callb->func = func;
 8105fb8:	697b      	ldr	r3, [r7, #20]
 8105fba:	68fa      	ldr	r2, [r7, #12]
 8105fbc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8105fbe:	697b      	ldr	r3, [r7, #20]
 8105fc0:	687a      	ldr	r2, [r7, #4]
 8105fc2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8105fc4:	7afb      	ldrb	r3, [r7, #11]
 8105fc6:	2b00      	cmp	r3, #0
 8105fc8:	d102      	bne.n	8105fd0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8105fca:	2300      	movs	r3, #0
 8105fcc:	61fb      	str	r3, [r7, #28]
 8105fce:	e001      	b.n	8105fd4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8105fd0:	2301      	movs	r3, #1
 8105fd2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8105fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8105fd8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8105fda:	2300      	movs	r3, #0
 8105fdc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8105fde:	683b      	ldr	r3, [r7, #0]
 8105fe0:	2b00      	cmp	r3, #0
 8105fe2:	d01c      	beq.n	810601e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8105fe4:	683b      	ldr	r3, [r7, #0]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	2b00      	cmp	r3, #0
 8105fea:	d002      	beq.n	8105ff2 <osTimerNew+0x6e>
          name = attr->name;
 8105fec:	683b      	ldr	r3, [r7, #0]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8105ff2:	683b      	ldr	r3, [r7, #0]
 8105ff4:	689b      	ldr	r3, [r3, #8]
 8105ff6:	2b00      	cmp	r3, #0
 8105ff8:	d006      	beq.n	8106008 <osTimerNew+0x84>
 8105ffa:	683b      	ldr	r3, [r7, #0]
 8105ffc:	68db      	ldr	r3, [r3, #12]
 8105ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8106000:	d902      	bls.n	8106008 <osTimerNew+0x84>
          mem = 1;
 8106002:	2301      	movs	r3, #1
 8106004:	61bb      	str	r3, [r7, #24]
 8106006:	e00c      	b.n	8106022 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8106008:	683b      	ldr	r3, [r7, #0]
 810600a:	689b      	ldr	r3, [r3, #8]
 810600c:	2b00      	cmp	r3, #0
 810600e:	d108      	bne.n	8106022 <osTimerNew+0x9e>
 8106010:	683b      	ldr	r3, [r7, #0]
 8106012:	68db      	ldr	r3, [r3, #12]
 8106014:	2b00      	cmp	r3, #0
 8106016:	d104      	bne.n	8106022 <osTimerNew+0x9e>
            mem = 0;
 8106018:	2300      	movs	r3, #0
 810601a:	61bb      	str	r3, [r7, #24]
 810601c:	e001      	b.n	8106022 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 810601e:	2300      	movs	r3, #0
 8106020:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8106022:	69bb      	ldr	r3, [r7, #24]
 8106024:	2b01      	cmp	r3, #1
 8106026:	d10c      	bne.n	8106042 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8106028:	683b      	ldr	r3, [r7, #0]
 810602a:	689b      	ldr	r3, [r3, #8]
 810602c:	9301      	str	r3, [sp, #4]
 810602e:	4b12      	ldr	r3, [pc, #72]	; (8106078 <osTimerNew+0xf4>)
 8106030:	9300      	str	r3, [sp, #0]
 8106032:	697b      	ldr	r3, [r7, #20]
 8106034:	69fa      	ldr	r2, [r7, #28]
 8106036:	2101      	movs	r1, #1
 8106038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810603a:	f002 f9ea 	bl	8108412 <xTimerCreateStatic>
 810603e:	6238      	str	r0, [r7, #32]
 8106040:	e00b      	b.n	810605a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8106042:	69bb      	ldr	r3, [r7, #24]
 8106044:	2b00      	cmp	r3, #0
 8106046:	d108      	bne.n	810605a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8106048:	4b0b      	ldr	r3, [pc, #44]	; (8106078 <osTimerNew+0xf4>)
 810604a:	9300      	str	r3, [sp, #0]
 810604c:	697b      	ldr	r3, [r7, #20]
 810604e:	69fa      	ldr	r2, [r7, #28]
 8106050:	2101      	movs	r1, #1
 8106052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8106054:	f002 f9bc 	bl	81083d0 <xTimerCreate>
 8106058:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 810605a:	6a3b      	ldr	r3, [r7, #32]
 810605c:	2b00      	cmp	r3, #0
 810605e:	d105      	bne.n	810606c <osTimerNew+0xe8>
 8106060:	697b      	ldr	r3, [r7, #20]
 8106062:	2b00      	cmp	r3, #0
 8106064:	d002      	beq.n	810606c <osTimerNew+0xe8>
        vPortFree (callb);
 8106066:	6978      	ldr	r0, [r7, #20]
 8106068:	f000 f936 	bl	81062d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 810606c:	6a3b      	ldr	r3, [r7, #32]
}
 810606e:	4618      	mov	r0, r3
 8106070:	3728      	adds	r7, #40	; 0x28
 8106072:	46bd      	mov	sp, r7
 8106074:	bd80      	pop	{r7, pc}
 8106076:	bf00      	nop
 8106078:	08105f5b 	.word	0x08105f5b

0810607c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 810607c:	b580      	push	{r7, lr}
 810607e:	b088      	sub	sp, #32
 8106080:	af02      	add	r7, sp, #8
 8106082:	6078      	str	r0, [r7, #4]
 8106084:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810608a:	f3ef 8305 	mrs	r3, IPSR
 810608e:	60fb      	str	r3, [r7, #12]
  return(result);
 8106090:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8106092:	2b00      	cmp	r3, #0
 8106094:	d003      	beq.n	810609e <osTimerStart+0x22>
    stat = osErrorISR;
 8106096:	f06f 0305 	mvn.w	r3, #5
 810609a:	617b      	str	r3, [r7, #20]
 810609c:	e017      	b.n	81060ce <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 810609e:	693b      	ldr	r3, [r7, #16]
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	d103      	bne.n	81060ac <osTimerStart+0x30>
    stat = osErrorParameter;
 81060a4:	f06f 0303 	mvn.w	r3, #3
 81060a8:	617b      	str	r3, [r7, #20]
 81060aa:	e010      	b.n	81060ce <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 81060ac:	2300      	movs	r3, #0
 81060ae:	9300      	str	r3, [sp, #0]
 81060b0:	2300      	movs	r3, #0
 81060b2:	683a      	ldr	r2, [r7, #0]
 81060b4:	2104      	movs	r1, #4
 81060b6:	6938      	ldr	r0, [r7, #16]
 81060b8:	f002 fa24 	bl	8108504 <xTimerGenericCommand>
 81060bc:	4603      	mov	r3, r0
 81060be:	2b01      	cmp	r3, #1
 81060c0:	d102      	bne.n	81060c8 <osTimerStart+0x4c>
      stat = osOK;
 81060c2:	2300      	movs	r3, #0
 81060c4:	617b      	str	r3, [r7, #20]
 81060c6:	e002      	b.n	81060ce <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 81060c8:	f06f 0302 	mvn.w	r3, #2
 81060cc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 81060ce:	697b      	ldr	r3, [r7, #20]
}
 81060d0:	4618      	mov	r0, r3
 81060d2:	3718      	adds	r7, #24
 81060d4:	46bd      	mov	sp, r7
 81060d6:	bd80      	pop	{r7, pc}

081060d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81060d8:	b480      	push	{r7}
 81060da:	b085      	sub	sp, #20
 81060dc:	af00      	add	r7, sp, #0
 81060de:	60f8      	str	r0, [r7, #12]
 81060e0:	60b9      	str	r1, [r7, #8]
 81060e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81060e4:	68fb      	ldr	r3, [r7, #12]
 81060e6:	4a07      	ldr	r2, [pc, #28]	; (8106104 <vApplicationGetIdleTaskMemory+0x2c>)
 81060e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81060ea:	68bb      	ldr	r3, [r7, #8]
 81060ec:	4a06      	ldr	r2, [pc, #24]	; (8106108 <vApplicationGetIdleTaskMemory+0x30>)
 81060ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	2280      	movs	r2, #128	; 0x80
 81060f4:	601a      	str	r2, [r3, #0]
}
 81060f6:	bf00      	nop
 81060f8:	3714      	adds	r7, #20
 81060fa:	46bd      	mov	sp, r7
 81060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106100:	4770      	bx	lr
 8106102:	bf00      	nop
 8106104:	10000380 	.word	0x10000380
 8106108:	1000043c 	.word	0x1000043c

0810610c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810610c:	b480      	push	{r7}
 810610e:	b085      	sub	sp, #20
 8106110:	af00      	add	r7, sp, #0
 8106112:	60f8      	str	r0, [r7, #12]
 8106114:	60b9      	str	r1, [r7, #8]
 8106116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8106118:	68fb      	ldr	r3, [r7, #12]
 810611a:	4a07      	ldr	r2, [pc, #28]	; (8106138 <vApplicationGetTimerTaskMemory+0x2c>)
 810611c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810611e:	68bb      	ldr	r3, [r7, #8]
 8106120:	4a06      	ldr	r2, [pc, #24]	; (810613c <vApplicationGetTimerTaskMemory+0x30>)
 8106122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	f44f 7280 	mov.w	r2, #256	; 0x100
 810612a:	601a      	str	r2, [r3, #0]
}
 810612c:	bf00      	nop
 810612e:	3714      	adds	r7, #20
 8106130:	46bd      	mov	sp, r7
 8106132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106136:	4770      	bx	lr
 8106138:	1000063c 	.word	0x1000063c
 810613c:	100006f8 	.word	0x100006f8

08106140 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8106140:	b580      	push	{r7, lr}
 8106142:	b08a      	sub	sp, #40	; 0x28
 8106144:	af00      	add	r7, sp, #0
 8106146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8106148:	2300      	movs	r3, #0
 810614a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810614c:	f001 fc2c 	bl	81079a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8106150:	4b5b      	ldr	r3, [pc, #364]	; (81062c0 <pvPortMalloc+0x180>)
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	2b00      	cmp	r3, #0
 8106156:	d101      	bne.n	810615c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8106158:	f000 f920 	bl	810639c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810615c:	4b59      	ldr	r3, [pc, #356]	; (81062c4 <pvPortMalloc+0x184>)
 810615e:	681a      	ldr	r2, [r3, #0]
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	4013      	ands	r3, r2
 8106164:	2b00      	cmp	r3, #0
 8106166:	f040 8093 	bne.w	8106290 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	2b00      	cmp	r3, #0
 810616e:	d01d      	beq.n	81061ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8106170:	2208      	movs	r2, #8
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	4413      	add	r3, r2
 8106176:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	f003 0307 	and.w	r3, r3, #7
 810617e:	2b00      	cmp	r3, #0
 8106180:	d014      	beq.n	81061ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	f023 0307 	bic.w	r3, r3, #7
 8106188:	3308      	adds	r3, #8
 810618a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	f003 0307 	and.w	r3, r3, #7
 8106192:	2b00      	cmp	r3, #0
 8106194:	d00a      	beq.n	81061ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8106196:	f04f 0350 	mov.w	r3, #80	; 0x50
 810619a:	f383 8811 	msr	BASEPRI, r3
 810619e:	f3bf 8f6f 	isb	sy
 81061a2:	f3bf 8f4f 	dsb	sy
 81061a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81061a8:	bf00      	nop
 81061aa:	e7fe      	b.n	81061aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	2b00      	cmp	r3, #0
 81061b0:	d06e      	beq.n	8106290 <pvPortMalloc+0x150>
 81061b2:	4b45      	ldr	r3, [pc, #276]	; (81062c8 <pvPortMalloc+0x188>)
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	687a      	ldr	r2, [r7, #4]
 81061b8:	429a      	cmp	r2, r3
 81061ba:	d869      	bhi.n	8106290 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81061bc:	4b43      	ldr	r3, [pc, #268]	; (81062cc <pvPortMalloc+0x18c>)
 81061be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81061c0:	4b42      	ldr	r3, [pc, #264]	; (81062cc <pvPortMalloc+0x18c>)
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81061c6:	e004      	b.n	81061d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 81061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ce:	681b      	ldr	r3, [r3, #0]
 81061d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061d4:	685b      	ldr	r3, [r3, #4]
 81061d6:	687a      	ldr	r2, [r7, #4]
 81061d8:	429a      	cmp	r2, r3
 81061da:	d903      	bls.n	81061e4 <pvPortMalloc+0xa4>
 81061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061de:	681b      	ldr	r3, [r3, #0]
 81061e0:	2b00      	cmp	r3, #0
 81061e2:	d1f1      	bne.n	81061c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81061e4:	4b36      	ldr	r3, [pc, #216]	; (81062c0 <pvPortMalloc+0x180>)
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81061ea:	429a      	cmp	r2, r3
 81061ec:	d050      	beq.n	8106290 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81061ee:	6a3b      	ldr	r3, [r7, #32]
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	2208      	movs	r2, #8
 81061f4:	4413      	add	r3, r2
 81061f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061fa:	681a      	ldr	r2, [r3, #0]
 81061fc:	6a3b      	ldr	r3, [r7, #32]
 81061fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8106200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106202:	685a      	ldr	r2, [r3, #4]
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	1ad2      	subs	r2, r2, r3
 8106208:	2308      	movs	r3, #8
 810620a:	005b      	lsls	r3, r3, #1
 810620c:	429a      	cmp	r2, r3
 810620e:	d91f      	bls.n	8106250 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8106210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	4413      	add	r3, r2
 8106216:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106218:	69bb      	ldr	r3, [r7, #24]
 810621a:	f003 0307 	and.w	r3, r3, #7
 810621e:	2b00      	cmp	r3, #0
 8106220:	d00a      	beq.n	8106238 <pvPortMalloc+0xf8>
	__asm volatile
 8106222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106226:	f383 8811 	msr	BASEPRI, r3
 810622a:	f3bf 8f6f 	isb	sy
 810622e:	f3bf 8f4f 	dsb	sy
 8106232:	613b      	str	r3, [r7, #16]
}
 8106234:	bf00      	nop
 8106236:	e7fe      	b.n	8106236 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8106238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810623a:	685a      	ldr	r2, [r3, #4]
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	1ad2      	subs	r2, r2, r3
 8106240:	69bb      	ldr	r3, [r7, #24]
 8106242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8106244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106246:	687a      	ldr	r2, [r7, #4]
 8106248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810624a:	69b8      	ldr	r0, [r7, #24]
 810624c:	f000 f908 	bl	8106460 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8106250:	4b1d      	ldr	r3, [pc, #116]	; (81062c8 <pvPortMalloc+0x188>)
 8106252:	681a      	ldr	r2, [r3, #0]
 8106254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106256:	685b      	ldr	r3, [r3, #4]
 8106258:	1ad3      	subs	r3, r2, r3
 810625a:	4a1b      	ldr	r2, [pc, #108]	; (81062c8 <pvPortMalloc+0x188>)
 810625c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810625e:	4b1a      	ldr	r3, [pc, #104]	; (81062c8 <pvPortMalloc+0x188>)
 8106260:	681a      	ldr	r2, [r3, #0]
 8106262:	4b1b      	ldr	r3, [pc, #108]	; (81062d0 <pvPortMalloc+0x190>)
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	429a      	cmp	r2, r3
 8106268:	d203      	bcs.n	8106272 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810626a:	4b17      	ldr	r3, [pc, #92]	; (81062c8 <pvPortMalloc+0x188>)
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	4a18      	ldr	r2, [pc, #96]	; (81062d0 <pvPortMalloc+0x190>)
 8106270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8106272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106274:	685a      	ldr	r2, [r3, #4]
 8106276:	4b13      	ldr	r3, [pc, #76]	; (81062c4 <pvPortMalloc+0x184>)
 8106278:	681b      	ldr	r3, [r3, #0]
 810627a:	431a      	orrs	r2, r3
 810627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810627e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8106280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106282:	2200      	movs	r2, #0
 8106284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8106286:	4b13      	ldr	r3, [pc, #76]	; (81062d4 <pvPortMalloc+0x194>)
 8106288:	681b      	ldr	r3, [r3, #0]
 810628a:	3301      	adds	r3, #1
 810628c:	4a11      	ldr	r2, [pc, #68]	; (81062d4 <pvPortMalloc+0x194>)
 810628e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8106290:	f001 fb98 	bl	81079c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8106294:	69fb      	ldr	r3, [r7, #28]
 8106296:	f003 0307 	and.w	r3, r3, #7
 810629a:	2b00      	cmp	r3, #0
 810629c:	d00a      	beq.n	81062b4 <pvPortMalloc+0x174>
	__asm volatile
 810629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81062a2:	f383 8811 	msr	BASEPRI, r3
 81062a6:	f3bf 8f6f 	isb	sy
 81062aa:	f3bf 8f4f 	dsb	sy
 81062ae:	60fb      	str	r3, [r7, #12]
}
 81062b0:	bf00      	nop
 81062b2:	e7fe      	b.n	81062b2 <pvPortMalloc+0x172>
	return pvReturn;
 81062b4:	69fb      	ldr	r3, [r7, #28]
}
 81062b6:	4618      	mov	r0, r3
 81062b8:	3728      	adds	r7, #40	; 0x28
 81062ba:	46bd      	mov	sp, r7
 81062bc:	bd80      	pop	{r7, pc}
 81062be:	bf00      	nop
 81062c0:	10004700 	.word	0x10004700
 81062c4:	10004714 	.word	0x10004714
 81062c8:	10004704 	.word	0x10004704
 81062cc:	100046f8 	.word	0x100046f8
 81062d0:	10004708 	.word	0x10004708
 81062d4:	1000470c 	.word	0x1000470c

081062d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81062d8:	b580      	push	{r7, lr}
 81062da:	b086      	sub	sp, #24
 81062dc:	af00      	add	r7, sp, #0
 81062de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	d04d      	beq.n	8106386 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81062ea:	2308      	movs	r3, #8
 81062ec:	425b      	negs	r3, r3
 81062ee:	697a      	ldr	r2, [r7, #20]
 81062f0:	4413      	add	r3, r2
 81062f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81062f4:	697b      	ldr	r3, [r7, #20]
 81062f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81062f8:	693b      	ldr	r3, [r7, #16]
 81062fa:	685a      	ldr	r2, [r3, #4]
 81062fc:	4b24      	ldr	r3, [pc, #144]	; (8106390 <vPortFree+0xb8>)
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	4013      	ands	r3, r2
 8106302:	2b00      	cmp	r3, #0
 8106304:	d10a      	bne.n	810631c <vPortFree+0x44>
	__asm volatile
 8106306:	f04f 0350 	mov.w	r3, #80	; 0x50
 810630a:	f383 8811 	msr	BASEPRI, r3
 810630e:	f3bf 8f6f 	isb	sy
 8106312:	f3bf 8f4f 	dsb	sy
 8106316:	60fb      	str	r3, [r7, #12]
}
 8106318:	bf00      	nop
 810631a:	e7fe      	b.n	810631a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810631c:	693b      	ldr	r3, [r7, #16]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	2b00      	cmp	r3, #0
 8106322:	d00a      	beq.n	810633a <vPortFree+0x62>
	__asm volatile
 8106324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106328:	f383 8811 	msr	BASEPRI, r3
 810632c:	f3bf 8f6f 	isb	sy
 8106330:	f3bf 8f4f 	dsb	sy
 8106334:	60bb      	str	r3, [r7, #8]
}
 8106336:	bf00      	nop
 8106338:	e7fe      	b.n	8106338 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810633a:	693b      	ldr	r3, [r7, #16]
 810633c:	685a      	ldr	r2, [r3, #4]
 810633e:	4b14      	ldr	r3, [pc, #80]	; (8106390 <vPortFree+0xb8>)
 8106340:	681b      	ldr	r3, [r3, #0]
 8106342:	4013      	ands	r3, r2
 8106344:	2b00      	cmp	r3, #0
 8106346:	d01e      	beq.n	8106386 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8106348:	693b      	ldr	r3, [r7, #16]
 810634a:	681b      	ldr	r3, [r3, #0]
 810634c:	2b00      	cmp	r3, #0
 810634e:	d11a      	bne.n	8106386 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8106350:	693b      	ldr	r3, [r7, #16]
 8106352:	685a      	ldr	r2, [r3, #4]
 8106354:	4b0e      	ldr	r3, [pc, #56]	; (8106390 <vPortFree+0xb8>)
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	43db      	mvns	r3, r3
 810635a:	401a      	ands	r2, r3
 810635c:	693b      	ldr	r3, [r7, #16]
 810635e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8106360:	f001 fb22 	bl	81079a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8106364:	693b      	ldr	r3, [r7, #16]
 8106366:	685a      	ldr	r2, [r3, #4]
 8106368:	4b0a      	ldr	r3, [pc, #40]	; (8106394 <vPortFree+0xbc>)
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	4413      	add	r3, r2
 810636e:	4a09      	ldr	r2, [pc, #36]	; (8106394 <vPortFree+0xbc>)
 8106370:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8106372:	6938      	ldr	r0, [r7, #16]
 8106374:	f000 f874 	bl	8106460 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8106378:	4b07      	ldr	r3, [pc, #28]	; (8106398 <vPortFree+0xc0>)
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	3301      	adds	r3, #1
 810637e:	4a06      	ldr	r2, [pc, #24]	; (8106398 <vPortFree+0xc0>)
 8106380:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8106382:	f001 fb1f 	bl	81079c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8106386:	bf00      	nop
 8106388:	3718      	adds	r7, #24
 810638a:	46bd      	mov	sp, r7
 810638c:	bd80      	pop	{r7, pc}
 810638e:	bf00      	nop
 8106390:	10004714 	.word	0x10004714
 8106394:	10004704 	.word	0x10004704
 8106398:	10004710 	.word	0x10004710

0810639c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810639c:	b480      	push	{r7}
 810639e:	b085      	sub	sp, #20
 81063a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81063a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81063a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81063a8:	4b27      	ldr	r3, [pc, #156]	; (8106448 <prvHeapInit+0xac>)
 81063aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81063ac:	68fb      	ldr	r3, [r7, #12]
 81063ae:	f003 0307 	and.w	r3, r3, #7
 81063b2:	2b00      	cmp	r3, #0
 81063b4:	d00c      	beq.n	81063d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81063b6:	68fb      	ldr	r3, [r7, #12]
 81063b8:	3307      	adds	r3, #7
 81063ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81063bc:	68fb      	ldr	r3, [r7, #12]
 81063be:	f023 0307 	bic.w	r3, r3, #7
 81063c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81063c4:	68ba      	ldr	r2, [r7, #8]
 81063c6:	68fb      	ldr	r3, [r7, #12]
 81063c8:	1ad3      	subs	r3, r2, r3
 81063ca:	4a1f      	ldr	r2, [pc, #124]	; (8106448 <prvHeapInit+0xac>)
 81063cc:	4413      	add	r3, r2
 81063ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81063d4:	4a1d      	ldr	r2, [pc, #116]	; (810644c <prvHeapInit+0xb0>)
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81063da:	4b1c      	ldr	r3, [pc, #112]	; (810644c <prvHeapInit+0xb0>)
 81063dc:	2200      	movs	r2, #0
 81063de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	68ba      	ldr	r2, [r7, #8]
 81063e4:	4413      	add	r3, r2
 81063e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81063e8:	2208      	movs	r2, #8
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	1a9b      	subs	r3, r3, r2
 81063ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81063f0:	68fb      	ldr	r3, [r7, #12]
 81063f2:	f023 0307 	bic.w	r3, r3, #7
 81063f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81063f8:	68fb      	ldr	r3, [r7, #12]
 81063fa:	4a15      	ldr	r2, [pc, #84]	; (8106450 <prvHeapInit+0xb4>)
 81063fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81063fe:	4b14      	ldr	r3, [pc, #80]	; (8106450 <prvHeapInit+0xb4>)
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	2200      	movs	r2, #0
 8106404:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8106406:	4b12      	ldr	r3, [pc, #72]	; (8106450 <prvHeapInit+0xb4>)
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	2200      	movs	r2, #0
 810640c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8106412:	683b      	ldr	r3, [r7, #0]
 8106414:	68fa      	ldr	r2, [r7, #12]
 8106416:	1ad2      	subs	r2, r2, r3
 8106418:	683b      	ldr	r3, [r7, #0]
 810641a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810641c:	4b0c      	ldr	r3, [pc, #48]	; (8106450 <prvHeapInit+0xb4>)
 810641e:	681a      	ldr	r2, [r3, #0]
 8106420:	683b      	ldr	r3, [r7, #0]
 8106422:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106424:	683b      	ldr	r3, [r7, #0]
 8106426:	685b      	ldr	r3, [r3, #4]
 8106428:	4a0a      	ldr	r2, [pc, #40]	; (8106454 <prvHeapInit+0xb8>)
 810642a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810642c:	683b      	ldr	r3, [r7, #0]
 810642e:	685b      	ldr	r3, [r3, #4]
 8106430:	4a09      	ldr	r2, [pc, #36]	; (8106458 <prvHeapInit+0xbc>)
 8106432:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8106434:	4b09      	ldr	r3, [pc, #36]	; (810645c <prvHeapInit+0xc0>)
 8106436:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810643a:	601a      	str	r2, [r3, #0]
}
 810643c:	bf00      	nop
 810643e:	3714      	adds	r7, #20
 8106440:	46bd      	mov	sp, r7
 8106442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106446:	4770      	bx	lr
 8106448:	10000af8 	.word	0x10000af8
 810644c:	100046f8 	.word	0x100046f8
 8106450:	10004700 	.word	0x10004700
 8106454:	10004708 	.word	0x10004708
 8106458:	10004704 	.word	0x10004704
 810645c:	10004714 	.word	0x10004714

08106460 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8106460:	b480      	push	{r7}
 8106462:	b085      	sub	sp, #20
 8106464:	af00      	add	r7, sp, #0
 8106466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8106468:	4b28      	ldr	r3, [pc, #160]	; (810650c <prvInsertBlockIntoFreeList+0xac>)
 810646a:	60fb      	str	r3, [r7, #12]
 810646c:	e002      	b.n	8106474 <prvInsertBlockIntoFreeList+0x14>
 810646e:	68fb      	ldr	r3, [r7, #12]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	60fb      	str	r3, [r7, #12]
 8106474:	68fb      	ldr	r3, [r7, #12]
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	687a      	ldr	r2, [r7, #4]
 810647a:	429a      	cmp	r2, r3
 810647c:	d8f7      	bhi.n	810646e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810647e:	68fb      	ldr	r3, [r7, #12]
 8106480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8106482:	68fb      	ldr	r3, [r7, #12]
 8106484:	685b      	ldr	r3, [r3, #4]
 8106486:	68ba      	ldr	r2, [r7, #8]
 8106488:	4413      	add	r3, r2
 810648a:	687a      	ldr	r2, [r7, #4]
 810648c:	429a      	cmp	r2, r3
 810648e:	d108      	bne.n	81064a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8106490:	68fb      	ldr	r3, [r7, #12]
 8106492:	685a      	ldr	r2, [r3, #4]
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	685b      	ldr	r3, [r3, #4]
 8106498:	441a      	add	r2, r3
 810649a:	68fb      	ldr	r3, [r7, #12]
 810649c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	685b      	ldr	r3, [r3, #4]
 81064aa:	68ba      	ldr	r2, [r7, #8]
 81064ac:	441a      	add	r2, r3
 81064ae:	68fb      	ldr	r3, [r7, #12]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	429a      	cmp	r2, r3
 81064b4:	d118      	bne.n	81064e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81064b6:	68fb      	ldr	r3, [r7, #12]
 81064b8:	681a      	ldr	r2, [r3, #0]
 81064ba:	4b15      	ldr	r3, [pc, #84]	; (8106510 <prvInsertBlockIntoFreeList+0xb0>)
 81064bc:	681b      	ldr	r3, [r3, #0]
 81064be:	429a      	cmp	r2, r3
 81064c0:	d00d      	beq.n	81064de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	685a      	ldr	r2, [r3, #4]
 81064c6:	68fb      	ldr	r3, [r7, #12]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	685b      	ldr	r3, [r3, #4]
 81064cc:	441a      	add	r2, r3
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81064d2:	68fb      	ldr	r3, [r7, #12]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	681a      	ldr	r2, [r3, #0]
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	601a      	str	r2, [r3, #0]
 81064dc:	e008      	b.n	81064f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81064de:	4b0c      	ldr	r3, [pc, #48]	; (8106510 <prvInsertBlockIntoFreeList+0xb0>)
 81064e0:	681a      	ldr	r2, [r3, #0]
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	601a      	str	r2, [r3, #0]
 81064e6:	e003      	b.n	81064f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81064e8:	68fb      	ldr	r3, [r7, #12]
 81064ea:	681a      	ldr	r2, [r3, #0]
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81064f0:	68fa      	ldr	r2, [r7, #12]
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	429a      	cmp	r2, r3
 81064f6:	d002      	beq.n	81064fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81064f8:	68fb      	ldr	r3, [r7, #12]
 81064fa:	687a      	ldr	r2, [r7, #4]
 81064fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81064fe:	bf00      	nop
 8106500:	3714      	adds	r7, #20
 8106502:	46bd      	mov	sp, r7
 8106504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106508:	4770      	bx	lr
 810650a:	bf00      	nop
 810650c:	100046f8 	.word	0x100046f8
 8106510:	10004700 	.word	0x10004700

08106514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8106514:	b480      	push	{r7}
 8106516:	b083      	sub	sp, #12
 8106518:	af00      	add	r7, sp, #0
 810651a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	f103 0208 	add.w	r2, r3, #8
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	f04f 32ff 	mov.w	r2, #4294967295
 810652c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f103 0208 	add.w	r2, r3, #8
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	f103 0208 	add.w	r2, r3, #8
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	2200      	movs	r2, #0
 8106546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8106548:	bf00      	nop
 810654a:	370c      	adds	r7, #12
 810654c:	46bd      	mov	sp, r7
 810654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106552:	4770      	bx	lr

08106554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8106554:	b480      	push	{r7}
 8106556:	b083      	sub	sp, #12
 8106558:	af00      	add	r7, sp, #0
 810655a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	2200      	movs	r2, #0
 8106560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8106562:	bf00      	nop
 8106564:	370c      	adds	r7, #12
 8106566:	46bd      	mov	sp, r7
 8106568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656c:	4770      	bx	lr

0810656e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810656e:	b480      	push	{r7}
 8106570:	b085      	sub	sp, #20
 8106572:	af00      	add	r7, sp, #0
 8106574:	6078      	str	r0, [r7, #4]
 8106576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	685b      	ldr	r3, [r3, #4]
 810657c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810657e:	683b      	ldr	r3, [r7, #0]
 8106580:	68fa      	ldr	r2, [r7, #12]
 8106582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8106584:	68fb      	ldr	r3, [r7, #12]
 8106586:	689a      	ldr	r2, [r3, #8]
 8106588:	683b      	ldr	r3, [r7, #0]
 810658a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810658c:	68fb      	ldr	r3, [r7, #12]
 810658e:	689b      	ldr	r3, [r3, #8]
 8106590:	683a      	ldr	r2, [r7, #0]
 8106592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8106594:	68fb      	ldr	r3, [r7, #12]
 8106596:	683a      	ldr	r2, [r7, #0]
 8106598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810659a:	683b      	ldr	r3, [r7, #0]
 810659c:	687a      	ldr	r2, [r7, #4]
 810659e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81065a0:	687b      	ldr	r3, [r7, #4]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	1c5a      	adds	r2, r3, #1
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	601a      	str	r2, [r3, #0]
}
 81065aa:	bf00      	nop
 81065ac:	3714      	adds	r7, #20
 81065ae:	46bd      	mov	sp, r7
 81065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065b4:	4770      	bx	lr

081065b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81065b6:	b480      	push	{r7}
 81065b8:	b085      	sub	sp, #20
 81065ba:	af00      	add	r7, sp, #0
 81065bc:	6078      	str	r0, [r7, #4]
 81065be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81065c0:	683b      	ldr	r3, [r7, #0]
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81065c6:	68bb      	ldr	r3, [r7, #8]
 81065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065cc:	d103      	bne.n	81065d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	691b      	ldr	r3, [r3, #16]
 81065d2:	60fb      	str	r3, [r7, #12]
 81065d4:	e00c      	b.n	81065f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	3308      	adds	r3, #8
 81065da:	60fb      	str	r3, [r7, #12]
 81065dc:	e002      	b.n	81065e4 <vListInsert+0x2e>
 81065de:	68fb      	ldr	r3, [r7, #12]
 81065e0:	685b      	ldr	r3, [r3, #4]
 81065e2:	60fb      	str	r3, [r7, #12]
 81065e4:	68fb      	ldr	r3, [r7, #12]
 81065e6:	685b      	ldr	r3, [r3, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	68ba      	ldr	r2, [r7, #8]
 81065ec:	429a      	cmp	r2, r3
 81065ee:	d2f6      	bcs.n	81065de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81065f0:	68fb      	ldr	r3, [r7, #12]
 81065f2:	685a      	ldr	r2, [r3, #4]
 81065f4:	683b      	ldr	r3, [r7, #0]
 81065f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81065f8:	683b      	ldr	r3, [r7, #0]
 81065fa:	685b      	ldr	r3, [r3, #4]
 81065fc:	683a      	ldr	r2, [r7, #0]
 81065fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8106600:	683b      	ldr	r3, [r7, #0]
 8106602:	68fa      	ldr	r2, [r7, #12]
 8106604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8106606:	68fb      	ldr	r3, [r7, #12]
 8106608:	683a      	ldr	r2, [r7, #0]
 810660a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810660c:	683b      	ldr	r3, [r7, #0]
 810660e:	687a      	ldr	r2, [r7, #4]
 8106610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	1c5a      	adds	r2, r3, #1
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	601a      	str	r2, [r3, #0]
}
 810661c:	bf00      	nop
 810661e:	3714      	adds	r7, #20
 8106620:	46bd      	mov	sp, r7
 8106622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106626:	4770      	bx	lr

08106628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8106628:	b480      	push	{r7}
 810662a:	b085      	sub	sp, #20
 810662c:	af00      	add	r7, sp, #0
 810662e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	691b      	ldr	r3, [r3, #16]
 8106634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	685b      	ldr	r3, [r3, #4]
 810663a:	687a      	ldr	r2, [r7, #4]
 810663c:	6892      	ldr	r2, [r2, #8]
 810663e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	689b      	ldr	r3, [r3, #8]
 8106644:	687a      	ldr	r2, [r7, #4]
 8106646:	6852      	ldr	r2, [r2, #4]
 8106648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	685b      	ldr	r3, [r3, #4]
 810664e:	687a      	ldr	r2, [r7, #4]
 8106650:	429a      	cmp	r2, r3
 8106652:	d103      	bne.n	810665c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	689a      	ldr	r2, [r3, #8]
 8106658:	68fb      	ldr	r3, [r7, #12]
 810665a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	2200      	movs	r2, #0
 8106660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8106662:	68fb      	ldr	r3, [r7, #12]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	1e5a      	subs	r2, r3, #1
 8106668:	68fb      	ldr	r3, [r7, #12]
 810666a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	681b      	ldr	r3, [r3, #0]
}
 8106670:	4618      	mov	r0, r3
 8106672:	3714      	adds	r7, #20
 8106674:	46bd      	mov	sp, r7
 8106676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810667a:	4770      	bx	lr

0810667c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810667c:	b480      	push	{r7}
 810667e:	b085      	sub	sp, #20
 8106680:	af00      	add	r7, sp, #0
 8106682:	60f8      	str	r0, [r7, #12]
 8106684:	60b9      	str	r1, [r7, #8]
 8106686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8106688:	68fb      	ldr	r3, [r7, #12]
 810668a:	3b04      	subs	r3, #4
 810668c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810668e:	68fb      	ldr	r3, [r7, #12]
 8106690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8106694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8106696:	68fb      	ldr	r3, [r7, #12]
 8106698:	3b04      	subs	r3, #4
 810669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810669c:	68bb      	ldr	r3, [r7, #8]
 810669e:	f023 0201 	bic.w	r2, r3, #1
 81066a2:	68fb      	ldr	r3, [r7, #12]
 81066a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	3b04      	subs	r3, #4
 81066aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81066ac:	4a0c      	ldr	r2, [pc, #48]	; (81066e0 <pxPortInitialiseStack+0x64>)
 81066ae:	68fb      	ldr	r3, [r7, #12]
 81066b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81066b2:	68fb      	ldr	r3, [r7, #12]
 81066b4:	3b14      	subs	r3, #20
 81066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81066b8:	687a      	ldr	r2, [r7, #4]
 81066ba:	68fb      	ldr	r3, [r7, #12]
 81066bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81066be:	68fb      	ldr	r3, [r7, #12]
 81066c0:	3b04      	subs	r3, #4
 81066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81066c4:	68fb      	ldr	r3, [r7, #12]
 81066c6:	f06f 0202 	mvn.w	r2, #2
 81066ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81066cc:	68fb      	ldr	r3, [r7, #12]
 81066ce:	3b20      	subs	r3, #32
 81066d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81066d2:	68fb      	ldr	r3, [r7, #12]
}
 81066d4:	4618      	mov	r0, r3
 81066d6:	3714      	adds	r7, #20
 81066d8:	46bd      	mov	sp, r7
 81066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066de:	4770      	bx	lr
 81066e0:	081066e5 	.word	0x081066e5

081066e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81066e4:	b480      	push	{r7}
 81066e6:	b085      	sub	sp, #20
 81066e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81066ea:	2300      	movs	r3, #0
 81066ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81066ee:	4b12      	ldr	r3, [pc, #72]	; (8106738 <prvTaskExitError+0x54>)
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81066f6:	d00a      	beq.n	810670e <prvTaskExitError+0x2a>
	__asm volatile
 81066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81066fc:	f383 8811 	msr	BASEPRI, r3
 8106700:	f3bf 8f6f 	isb	sy
 8106704:	f3bf 8f4f 	dsb	sy
 8106708:	60fb      	str	r3, [r7, #12]
}
 810670a:	bf00      	nop
 810670c:	e7fe      	b.n	810670c <prvTaskExitError+0x28>
	__asm volatile
 810670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106712:	f383 8811 	msr	BASEPRI, r3
 8106716:	f3bf 8f6f 	isb	sy
 810671a:	f3bf 8f4f 	dsb	sy
 810671e:	60bb      	str	r3, [r7, #8]
}
 8106720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8106722:	bf00      	nop
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	2b00      	cmp	r3, #0
 8106728:	d0fc      	beq.n	8106724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810672a:	bf00      	nop
 810672c:	bf00      	nop
 810672e:	3714      	adds	r7, #20
 8106730:	46bd      	mov	sp, r7
 8106732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106736:	4770      	bx	lr
 8106738:	10000028 	.word	0x10000028
 810673c:	00000000 	.word	0x00000000

08106740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8106740:	4b07      	ldr	r3, [pc, #28]	; (8106760 <pxCurrentTCBConst2>)
 8106742:	6819      	ldr	r1, [r3, #0]
 8106744:	6808      	ldr	r0, [r1, #0]
 8106746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810674a:	f380 8809 	msr	PSP, r0
 810674e:	f3bf 8f6f 	isb	sy
 8106752:	f04f 0000 	mov.w	r0, #0
 8106756:	f380 8811 	msr	BASEPRI, r0
 810675a:	4770      	bx	lr
 810675c:	f3af 8000 	nop.w

08106760 <pxCurrentTCBConst2>:
 8106760:	10004760 	.word	0x10004760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8106764:	bf00      	nop
 8106766:	bf00      	nop

08106768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8106768:	4808      	ldr	r0, [pc, #32]	; (810678c <prvPortStartFirstTask+0x24>)
 810676a:	6800      	ldr	r0, [r0, #0]
 810676c:	6800      	ldr	r0, [r0, #0]
 810676e:	f380 8808 	msr	MSP, r0
 8106772:	f04f 0000 	mov.w	r0, #0
 8106776:	f380 8814 	msr	CONTROL, r0
 810677a:	b662      	cpsie	i
 810677c:	b661      	cpsie	f
 810677e:	f3bf 8f4f 	dsb	sy
 8106782:	f3bf 8f6f 	isb	sy
 8106786:	df00      	svc	0
 8106788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810678a:	bf00      	nop
 810678c:	e000ed08 	.word	0xe000ed08

08106790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8106790:	b580      	push	{r7, lr}
 8106792:	b086      	sub	sp, #24
 8106794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8106796:	4b46      	ldr	r3, [pc, #280]	; (81068b0 <xPortStartScheduler+0x120>)
 8106798:	681b      	ldr	r3, [r3, #0]
 810679a:	4a46      	ldr	r2, [pc, #280]	; (81068b4 <xPortStartScheduler+0x124>)
 810679c:	4293      	cmp	r3, r2
 810679e:	d10a      	bne.n	81067b6 <xPortStartScheduler+0x26>
	__asm volatile
 81067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067a4:	f383 8811 	msr	BASEPRI, r3
 81067a8:	f3bf 8f6f 	isb	sy
 81067ac:	f3bf 8f4f 	dsb	sy
 81067b0:	613b      	str	r3, [r7, #16]
}
 81067b2:	bf00      	nop
 81067b4:	e7fe      	b.n	81067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81067b6:	4b3e      	ldr	r3, [pc, #248]	; (81068b0 <xPortStartScheduler+0x120>)
 81067b8:	681b      	ldr	r3, [r3, #0]
 81067ba:	4a3f      	ldr	r2, [pc, #252]	; (81068b8 <xPortStartScheduler+0x128>)
 81067bc:	4293      	cmp	r3, r2
 81067be:	d10a      	bne.n	81067d6 <xPortStartScheduler+0x46>
	__asm volatile
 81067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067c4:	f383 8811 	msr	BASEPRI, r3
 81067c8:	f3bf 8f6f 	isb	sy
 81067cc:	f3bf 8f4f 	dsb	sy
 81067d0:	60fb      	str	r3, [r7, #12]
}
 81067d2:	bf00      	nop
 81067d4:	e7fe      	b.n	81067d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81067d6:	4b39      	ldr	r3, [pc, #228]	; (81068bc <xPortStartScheduler+0x12c>)
 81067d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81067da:	697b      	ldr	r3, [r7, #20]
 81067dc:	781b      	ldrb	r3, [r3, #0]
 81067de:	b2db      	uxtb	r3, r3
 81067e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81067e2:	697b      	ldr	r3, [r7, #20]
 81067e4:	22ff      	movs	r2, #255	; 0xff
 81067e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81067e8:	697b      	ldr	r3, [r7, #20]
 81067ea:	781b      	ldrb	r3, [r3, #0]
 81067ec:	b2db      	uxtb	r3, r3
 81067ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81067f0:	78fb      	ldrb	r3, [r7, #3]
 81067f2:	b2db      	uxtb	r3, r3
 81067f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81067f8:	b2da      	uxtb	r2, r3
 81067fa:	4b31      	ldr	r3, [pc, #196]	; (81068c0 <xPortStartScheduler+0x130>)
 81067fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81067fe:	4b31      	ldr	r3, [pc, #196]	; (81068c4 <xPortStartScheduler+0x134>)
 8106800:	2207      	movs	r2, #7
 8106802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8106804:	e009      	b.n	810681a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8106806:	4b2f      	ldr	r3, [pc, #188]	; (81068c4 <xPortStartScheduler+0x134>)
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	3b01      	subs	r3, #1
 810680c:	4a2d      	ldr	r2, [pc, #180]	; (81068c4 <xPortStartScheduler+0x134>)
 810680e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8106810:	78fb      	ldrb	r3, [r7, #3]
 8106812:	b2db      	uxtb	r3, r3
 8106814:	005b      	lsls	r3, r3, #1
 8106816:	b2db      	uxtb	r3, r3
 8106818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810681a:	78fb      	ldrb	r3, [r7, #3]
 810681c:	b2db      	uxtb	r3, r3
 810681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106822:	2b80      	cmp	r3, #128	; 0x80
 8106824:	d0ef      	beq.n	8106806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8106826:	4b27      	ldr	r3, [pc, #156]	; (81068c4 <xPortStartScheduler+0x134>)
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	f1c3 0307 	rsb	r3, r3, #7
 810682e:	2b04      	cmp	r3, #4
 8106830:	d00a      	beq.n	8106848 <xPortStartScheduler+0xb8>
	__asm volatile
 8106832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106836:	f383 8811 	msr	BASEPRI, r3
 810683a:	f3bf 8f6f 	isb	sy
 810683e:	f3bf 8f4f 	dsb	sy
 8106842:	60bb      	str	r3, [r7, #8]
}
 8106844:	bf00      	nop
 8106846:	e7fe      	b.n	8106846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8106848:	4b1e      	ldr	r3, [pc, #120]	; (81068c4 <xPortStartScheduler+0x134>)
 810684a:	681b      	ldr	r3, [r3, #0]
 810684c:	021b      	lsls	r3, r3, #8
 810684e:	4a1d      	ldr	r2, [pc, #116]	; (81068c4 <xPortStartScheduler+0x134>)
 8106850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8106852:	4b1c      	ldr	r3, [pc, #112]	; (81068c4 <xPortStartScheduler+0x134>)
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810685a:	4a1a      	ldr	r2, [pc, #104]	; (81068c4 <xPortStartScheduler+0x134>)
 810685c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	b2da      	uxtb	r2, r3
 8106862:	697b      	ldr	r3, [r7, #20]
 8106864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8106866:	4b18      	ldr	r3, [pc, #96]	; (81068c8 <xPortStartScheduler+0x138>)
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	4a17      	ldr	r2, [pc, #92]	; (81068c8 <xPortStartScheduler+0x138>)
 810686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8106870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8106872:	4b15      	ldr	r3, [pc, #84]	; (81068c8 <xPortStartScheduler+0x138>)
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	4a14      	ldr	r2, [pc, #80]	; (81068c8 <xPortStartScheduler+0x138>)
 8106878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810687c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810687e:	f000 f8dd 	bl	8106a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8106882:	4b12      	ldr	r3, [pc, #72]	; (81068cc <xPortStartScheduler+0x13c>)
 8106884:	2200      	movs	r2, #0
 8106886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8106888:	f000 f8fc 	bl	8106a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810688c:	4b10      	ldr	r3, [pc, #64]	; (81068d0 <xPortStartScheduler+0x140>)
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	4a0f      	ldr	r2, [pc, #60]	; (81068d0 <xPortStartScheduler+0x140>)
 8106892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8106896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8106898:	f7ff ff66 	bl	8106768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810689c:	f001 f9fa 	bl	8107c94 <vTaskSwitchContext>
	prvTaskExitError();
 81068a0:	f7ff ff20 	bl	81066e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81068a4:	2300      	movs	r3, #0
}
 81068a6:	4618      	mov	r0, r3
 81068a8:	3718      	adds	r7, #24
 81068aa:	46bd      	mov	sp, r7
 81068ac:	bd80      	pop	{r7, pc}
 81068ae:	bf00      	nop
 81068b0:	e000ed00 	.word	0xe000ed00
 81068b4:	410fc271 	.word	0x410fc271
 81068b8:	410fc270 	.word	0x410fc270
 81068bc:	e000e400 	.word	0xe000e400
 81068c0:	10004718 	.word	0x10004718
 81068c4:	1000471c 	.word	0x1000471c
 81068c8:	e000ed20 	.word	0xe000ed20
 81068cc:	10000028 	.word	0x10000028
 81068d0:	e000ef34 	.word	0xe000ef34

081068d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81068d4:	b480      	push	{r7}
 81068d6:	b083      	sub	sp, #12
 81068d8:	af00      	add	r7, sp, #0
	__asm volatile
 81068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068de:	f383 8811 	msr	BASEPRI, r3
 81068e2:	f3bf 8f6f 	isb	sy
 81068e6:	f3bf 8f4f 	dsb	sy
 81068ea:	607b      	str	r3, [r7, #4]
}
 81068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81068ee:	4b0f      	ldr	r3, [pc, #60]	; (810692c <vPortEnterCritical+0x58>)
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	3301      	adds	r3, #1
 81068f4:	4a0d      	ldr	r2, [pc, #52]	; (810692c <vPortEnterCritical+0x58>)
 81068f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81068f8:	4b0c      	ldr	r3, [pc, #48]	; (810692c <vPortEnterCritical+0x58>)
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	2b01      	cmp	r3, #1
 81068fe:	d10f      	bne.n	8106920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8106900:	4b0b      	ldr	r3, [pc, #44]	; (8106930 <vPortEnterCritical+0x5c>)
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	b2db      	uxtb	r3, r3
 8106906:	2b00      	cmp	r3, #0
 8106908:	d00a      	beq.n	8106920 <vPortEnterCritical+0x4c>
	__asm volatile
 810690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810690e:	f383 8811 	msr	BASEPRI, r3
 8106912:	f3bf 8f6f 	isb	sy
 8106916:	f3bf 8f4f 	dsb	sy
 810691a:	603b      	str	r3, [r7, #0]
}
 810691c:	bf00      	nop
 810691e:	e7fe      	b.n	810691e <vPortEnterCritical+0x4a>
	}
}
 8106920:	bf00      	nop
 8106922:	370c      	adds	r7, #12
 8106924:	46bd      	mov	sp, r7
 8106926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810692a:	4770      	bx	lr
 810692c:	10000028 	.word	0x10000028
 8106930:	e000ed04 	.word	0xe000ed04

08106934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8106934:	b480      	push	{r7}
 8106936:	b083      	sub	sp, #12
 8106938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810693a:	4b12      	ldr	r3, [pc, #72]	; (8106984 <vPortExitCritical+0x50>)
 810693c:	681b      	ldr	r3, [r3, #0]
 810693e:	2b00      	cmp	r3, #0
 8106940:	d10a      	bne.n	8106958 <vPortExitCritical+0x24>
	__asm volatile
 8106942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106946:	f383 8811 	msr	BASEPRI, r3
 810694a:	f3bf 8f6f 	isb	sy
 810694e:	f3bf 8f4f 	dsb	sy
 8106952:	607b      	str	r3, [r7, #4]
}
 8106954:	bf00      	nop
 8106956:	e7fe      	b.n	8106956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8106958:	4b0a      	ldr	r3, [pc, #40]	; (8106984 <vPortExitCritical+0x50>)
 810695a:	681b      	ldr	r3, [r3, #0]
 810695c:	3b01      	subs	r3, #1
 810695e:	4a09      	ldr	r2, [pc, #36]	; (8106984 <vPortExitCritical+0x50>)
 8106960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8106962:	4b08      	ldr	r3, [pc, #32]	; (8106984 <vPortExitCritical+0x50>)
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	2b00      	cmp	r3, #0
 8106968:	d105      	bne.n	8106976 <vPortExitCritical+0x42>
 810696a:	2300      	movs	r3, #0
 810696c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810696e:	683b      	ldr	r3, [r7, #0]
 8106970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8106974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8106976:	bf00      	nop
 8106978:	370c      	adds	r7, #12
 810697a:	46bd      	mov	sp, r7
 810697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106980:	4770      	bx	lr
 8106982:	bf00      	nop
 8106984:	10000028 	.word	0x10000028
	...

08106990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8106990:	f3ef 8009 	mrs	r0, PSP
 8106994:	f3bf 8f6f 	isb	sy
 8106998:	4b15      	ldr	r3, [pc, #84]	; (81069f0 <pxCurrentTCBConst>)
 810699a:	681a      	ldr	r2, [r3, #0]
 810699c:	f01e 0f10 	tst.w	lr, #16
 81069a0:	bf08      	it	eq
 81069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81069aa:	6010      	str	r0, [r2, #0]
 81069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 81069b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81069b4:	f380 8811 	msr	BASEPRI, r0
 81069b8:	f3bf 8f4f 	dsb	sy
 81069bc:	f3bf 8f6f 	isb	sy
 81069c0:	f001 f968 	bl	8107c94 <vTaskSwitchContext>
 81069c4:	f04f 0000 	mov.w	r0, #0
 81069c8:	f380 8811 	msr	BASEPRI, r0
 81069cc:	bc09      	pop	{r0, r3}
 81069ce:	6819      	ldr	r1, [r3, #0]
 81069d0:	6808      	ldr	r0, [r1, #0]
 81069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81069d6:	f01e 0f10 	tst.w	lr, #16
 81069da:	bf08      	it	eq
 81069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81069e0:	f380 8809 	msr	PSP, r0
 81069e4:	f3bf 8f6f 	isb	sy
 81069e8:	4770      	bx	lr
 81069ea:	bf00      	nop
 81069ec:	f3af 8000 	nop.w

081069f0 <pxCurrentTCBConst>:
 81069f0:	10004760 	.word	0x10004760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81069f4:	bf00      	nop
 81069f6:	bf00      	nop

081069f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81069f8:	b580      	push	{r7, lr}
 81069fa:	b082      	sub	sp, #8
 81069fc:	af00      	add	r7, sp, #0
	__asm volatile
 81069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106a02:	f383 8811 	msr	BASEPRI, r3
 8106a06:	f3bf 8f6f 	isb	sy
 8106a0a:	f3bf 8f4f 	dsb	sy
 8106a0e:	607b      	str	r3, [r7, #4]
}
 8106a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8106a12:	f001 f885 	bl	8107b20 <xTaskIncrementTick>
 8106a16:	4603      	mov	r3, r0
 8106a18:	2b00      	cmp	r3, #0
 8106a1a:	d003      	beq.n	8106a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8106a1c:	4b06      	ldr	r3, [pc, #24]	; (8106a38 <xPortSysTickHandler+0x40>)
 8106a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106a22:	601a      	str	r2, [r3, #0]
 8106a24:	2300      	movs	r3, #0
 8106a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8106a28:	683b      	ldr	r3, [r7, #0]
 8106a2a:	f383 8811 	msr	BASEPRI, r3
}
 8106a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8106a30:	bf00      	nop
 8106a32:	3708      	adds	r7, #8
 8106a34:	46bd      	mov	sp, r7
 8106a36:	bd80      	pop	{r7, pc}
 8106a38:	e000ed04 	.word	0xe000ed04

08106a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8106a3c:	b480      	push	{r7}
 8106a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8106a40:	4b0b      	ldr	r3, [pc, #44]	; (8106a70 <vPortSetupTimerInterrupt+0x34>)
 8106a42:	2200      	movs	r2, #0
 8106a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8106a46:	4b0b      	ldr	r3, [pc, #44]	; (8106a74 <vPortSetupTimerInterrupt+0x38>)
 8106a48:	2200      	movs	r2, #0
 8106a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8106a4c:	4b0a      	ldr	r3, [pc, #40]	; (8106a78 <vPortSetupTimerInterrupt+0x3c>)
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	4a0a      	ldr	r2, [pc, #40]	; (8106a7c <vPortSetupTimerInterrupt+0x40>)
 8106a52:	fba2 2303 	umull	r2, r3, r2, r3
 8106a56:	099b      	lsrs	r3, r3, #6
 8106a58:	4a09      	ldr	r2, [pc, #36]	; (8106a80 <vPortSetupTimerInterrupt+0x44>)
 8106a5a:	3b01      	subs	r3, #1
 8106a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8106a5e:	4b04      	ldr	r3, [pc, #16]	; (8106a70 <vPortSetupTimerInterrupt+0x34>)
 8106a60:	2207      	movs	r2, #7
 8106a62:	601a      	str	r2, [r3, #0]
}
 8106a64:	bf00      	nop
 8106a66:	46bd      	mov	sp, r7
 8106a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a6c:	4770      	bx	lr
 8106a6e:	bf00      	nop
 8106a70:	e000e010 	.word	0xe000e010
 8106a74:	e000e018 	.word	0xe000e018
 8106a78:	10000004 	.word	0x10000004
 8106a7c:	10624dd3 	.word	0x10624dd3
 8106a80:	e000e014 	.word	0xe000e014

08106a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8106a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8106a94 <vPortEnableVFP+0x10>
 8106a88:	6801      	ldr	r1, [r0, #0]
 8106a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8106a8e:	6001      	str	r1, [r0, #0]
 8106a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8106a92:	bf00      	nop
 8106a94:	e000ed88 	.word	0xe000ed88

08106a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8106a98:	b480      	push	{r7}
 8106a9a:	b085      	sub	sp, #20
 8106a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8106a9e:	f3ef 8305 	mrs	r3, IPSR
 8106aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	2b0f      	cmp	r3, #15
 8106aa8:	d914      	bls.n	8106ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8106aaa:	4a17      	ldr	r2, [pc, #92]	; (8106b08 <vPortValidateInterruptPriority+0x70>)
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	4413      	add	r3, r2
 8106ab0:	781b      	ldrb	r3, [r3, #0]
 8106ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8106ab4:	4b15      	ldr	r3, [pc, #84]	; (8106b0c <vPortValidateInterruptPriority+0x74>)
 8106ab6:	781b      	ldrb	r3, [r3, #0]
 8106ab8:	7afa      	ldrb	r2, [r7, #11]
 8106aba:	429a      	cmp	r2, r3
 8106abc:	d20a      	bcs.n	8106ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8106abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ac2:	f383 8811 	msr	BASEPRI, r3
 8106ac6:	f3bf 8f6f 	isb	sy
 8106aca:	f3bf 8f4f 	dsb	sy
 8106ace:	607b      	str	r3, [r7, #4]
}
 8106ad0:	bf00      	nop
 8106ad2:	e7fe      	b.n	8106ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8106ad4:	4b0e      	ldr	r3, [pc, #56]	; (8106b10 <vPortValidateInterruptPriority+0x78>)
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106adc:	4b0d      	ldr	r3, [pc, #52]	; (8106b14 <vPortValidateInterruptPriority+0x7c>)
 8106ade:	681b      	ldr	r3, [r3, #0]
 8106ae0:	429a      	cmp	r2, r3
 8106ae2:	d90a      	bls.n	8106afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8106ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ae8:	f383 8811 	msr	BASEPRI, r3
 8106aec:	f3bf 8f6f 	isb	sy
 8106af0:	f3bf 8f4f 	dsb	sy
 8106af4:	603b      	str	r3, [r7, #0]
}
 8106af6:	bf00      	nop
 8106af8:	e7fe      	b.n	8106af8 <vPortValidateInterruptPriority+0x60>
	}
 8106afa:	bf00      	nop
 8106afc:	3714      	adds	r7, #20
 8106afe:	46bd      	mov	sp, r7
 8106b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b04:	4770      	bx	lr
 8106b06:	bf00      	nop
 8106b08:	e000e3f0 	.word	0xe000e3f0
 8106b0c:	10004718 	.word	0x10004718
 8106b10:	e000ed0c 	.word	0xe000ed0c
 8106b14:	1000471c 	.word	0x1000471c

08106b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8106b18:	b580      	push	{r7, lr}
 8106b1a:	b084      	sub	sp, #16
 8106b1c:	af00      	add	r7, sp, #0
 8106b1e:	6078      	str	r0, [r7, #4]
 8106b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	2b00      	cmp	r3, #0
 8106b2a:	d10a      	bne.n	8106b42 <xQueueGenericReset+0x2a>
	__asm volatile
 8106b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106b30:	f383 8811 	msr	BASEPRI, r3
 8106b34:	f3bf 8f6f 	isb	sy
 8106b38:	f3bf 8f4f 	dsb	sy
 8106b3c:	60bb      	str	r3, [r7, #8]
}
 8106b3e:	bf00      	nop
 8106b40:	e7fe      	b.n	8106b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8106b42:	f7ff fec7 	bl	81068d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106b46:	68fb      	ldr	r3, [r7, #12]
 8106b48:	681a      	ldr	r2, [r3, #0]
 8106b4a:	68fb      	ldr	r3, [r7, #12]
 8106b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b4e:	68f9      	ldr	r1, [r7, #12]
 8106b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106b52:	fb01 f303 	mul.w	r3, r1, r3
 8106b56:	441a      	add	r2, r3
 8106b58:	68fb      	ldr	r3, [r7, #12]
 8106b5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	2200      	movs	r2, #0
 8106b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8106b62:	68fb      	ldr	r3, [r7, #12]
 8106b64:	681a      	ldr	r2, [r3, #0]
 8106b66:	68fb      	ldr	r3, [r7, #12]
 8106b68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106b6a:	68fb      	ldr	r3, [r7, #12]
 8106b6c:	681a      	ldr	r2, [r3, #0]
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b72:	3b01      	subs	r3, #1
 8106b74:	68f9      	ldr	r1, [r7, #12]
 8106b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106b78:	fb01 f303 	mul.w	r3, r1, r3
 8106b7c:	441a      	add	r2, r3
 8106b7e:	68fb      	ldr	r3, [r7, #12]
 8106b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8106b82:	68fb      	ldr	r3, [r7, #12]
 8106b84:	22ff      	movs	r2, #255	; 0xff
 8106b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8106b8a:	68fb      	ldr	r3, [r7, #12]
 8106b8c:	22ff      	movs	r2, #255	; 0xff
 8106b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8106b92:	683b      	ldr	r3, [r7, #0]
 8106b94:	2b00      	cmp	r3, #0
 8106b96:	d114      	bne.n	8106bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106b98:	68fb      	ldr	r3, [r7, #12]
 8106b9a:	691b      	ldr	r3, [r3, #16]
 8106b9c:	2b00      	cmp	r3, #0
 8106b9e:	d01a      	beq.n	8106bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	3310      	adds	r3, #16
 8106ba4:	4618      	mov	r0, r3
 8106ba6:	f001 f929 	bl	8107dfc <xTaskRemoveFromEventList>
 8106baa:	4603      	mov	r3, r0
 8106bac:	2b00      	cmp	r3, #0
 8106bae:	d012      	beq.n	8106bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106bb0:	4b0c      	ldr	r3, [pc, #48]	; (8106be4 <xQueueGenericReset+0xcc>)
 8106bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106bb6:	601a      	str	r2, [r3, #0]
 8106bb8:	f3bf 8f4f 	dsb	sy
 8106bbc:	f3bf 8f6f 	isb	sy
 8106bc0:	e009      	b.n	8106bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	3310      	adds	r3, #16
 8106bc6:	4618      	mov	r0, r3
 8106bc8:	f7ff fca4 	bl	8106514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106bcc:	68fb      	ldr	r3, [r7, #12]
 8106bce:	3324      	adds	r3, #36	; 0x24
 8106bd0:	4618      	mov	r0, r3
 8106bd2:	f7ff fc9f 	bl	8106514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8106bd6:	f7ff fead 	bl	8106934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106bda:	2301      	movs	r3, #1
}
 8106bdc:	4618      	mov	r0, r3
 8106bde:	3710      	adds	r7, #16
 8106be0:	46bd      	mov	sp, r7
 8106be2:	bd80      	pop	{r7, pc}
 8106be4:	e000ed04 	.word	0xe000ed04

08106be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106be8:	b580      	push	{r7, lr}
 8106bea:	b08e      	sub	sp, #56	; 0x38
 8106bec:	af02      	add	r7, sp, #8
 8106bee:	60f8      	str	r0, [r7, #12]
 8106bf0:	60b9      	str	r1, [r7, #8]
 8106bf2:	607a      	str	r2, [r7, #4]
 8106bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8106bf6:	68fb      	ldr	r3, [r7, #12]
 8106bf8:	2b00      	cmp	r3, #0
 8106bfa:	d10a      	bne.n	8106c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8106bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c00:	f383 8811 	msr	BASEPRI, r3
 8106c04:	f3bf 8f6f 	isb	sy
 8106c08:	f3bf 8f4f 	dsb	sy
 8106c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8106c0e:	bf00      	nop
 8106c10:	e7fe      	b.n	8106c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8106c12:	683b      	ldr	r3, [r7, #0]
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d10a      	bne.n	8106c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8106c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c1c:	f383 8811 	msr	BASEPRI, r3
 8106c20:	f3bf 8f6f 	isb	sy
 8106c24:	f3bf 8f4f 	dsb	sy
 8106c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8106c2a:	bf00      	nop
 8106c2c:	e7fe      	b.n	8106c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	2b00      	cmp	r3, #0
 8106c32:	d002      	beq.n	8106c3a <xQueueGenericCreateStatic+0x52>
 8106c34:	68bb      	ldr	r3, [r7, #8]
 8106c36:	2b00      	cmp	r3, #0
 8106c38:	d001      	beq.n	8106c3e <xQueueGenericCreateStatic+0x56>
 8106c3a:	2301      	movs	r3, #1
 8106c3c:	e000      	b.n	8106c40 <xQueueGenericCreateStatic+0x58>
 8106c3e:	2300      	movs	r3, #0
 8106c40:	2b00      	cmp	r3, #0
 8106c42:	d10a      	bne.n	8106c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8106c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c48:	f383 8811 	msr	BASEPRI, r3
 8106c4c:	f3bf 8f6f 	isb	sy
 8106c50:	f3bf 8f4f 	dsb	sy
 8106c54:	623b      	str	r3, [r7, #32]
}
 8106c56:	bf00      	nop
 8106c58:	e7fe      	b.n	8106c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d102      	bne.n	8106c66 <xQueueGenericCreateStatic+0x7e>
 8106c60:	68bb      	ldr	r3, [r7, #8]
 8106c62:	2b00      	cmp	r3, #0
 8106c64:	d101      	bne.n	8106c6a <xQueueGenericCreateStatic+0x82>
 8106c66:	2301      	movs	r3, #1
 8106c68:	e000      	b.n	8106c6c <xQueueGenericCreateStatic+0x84>
 8106c6a:	2300      	movs	r3, #0
 8106c6c:	2b00      	cmp	r3, #0
 8106c6e:	d10a      	bne.n	8106c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8106c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c74:	f383 8811 	msr	BASEPRI, r3
 8106c78:	f3bf 8f6f 	isb	sy
 8106c7c:	f3bf 8f4f 	dsb	sy
 8106c80:	61fb      	str	r3, [r7, #28]
}
 8106c82:	bf00      	nop
 8106c84:	e7fe      	b.n	8106c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106c86:	2350      	movs	r3, #80	; 0x50
 8106c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8106c8a:	697b      	ldr	r3, [r7, #20]
 8106c8c:	2b50      	cmp	r3, #80	; 0x50
 8106c8e:	d00a      	beq.n	8106ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8106c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c94:	f383 8811 	msr	BASEPRI, r3
 8106c98:	f3bf 8f6f 	isb	sy
 8106c9c:	f3bf 8f4f 	dsb	sy
 8106ca0:	61bb      	str	r3, [r7, #24]
}
 8106ca2:	bf00      	nop
 8106ca4:	e7fe      	b.n	8106ca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106ca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106ca8:	683b      	ldr	r3, [r7, #0]
 8106caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8106cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d00d      	beq.n	8106cce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106cb4:	2201      	movs	r2, #1
 8106cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8106cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106cc0:	9300      	str	r3, [sp, #0]
 8106cc2:	4613      	mov	r3, r2
 8106cc4:	687a      	ldr	r2, [r7, #4]
 8106cc6:	68b9      	ldr	r1, [r7, #8]
 8106cc8:	68f8      	ldr	r0, [r7, #12]
 8106cca:	f000 f805 	bl	8106cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8106cd0:	4618      	mov	r0, r3
 8106cd2:	3730      	adds	r7, #48	; 0x30
 8106cd4:	46bd      	mov	sp, r7
 8106cd6:	bd80      	pop	{r7, pc}

08106cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106cd8:	b580      	push	{r7, lr}
 8106cda:	b084      	sub	sp, #16
 8106cdc:	af00      	add	r7, sp, #0
 8106cde:	60f8      	str	r0, [r7, #12]
 8106ce0:	60b9      	str	r1, [r7, #8]
 8106ce2:	607a      	str	r2, [r7, #4]
 8106ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8106ce6:	68bb      	ldr	r3, [r7, #8]
 8106ce8:	2b00      	cmp	r3, #0
 8106cea:	d103      	bne.n	8106cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8106cec:	69bb      	ldr	r3, [r7, #24]
 8106cee:	69ba      	ldr	r2, [r7, #24]
 8106cf0:	601a      	str	r2, [r3, #0]
 8106cf2:	e002      	b.n	8106cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8106cf4:	69bb      	ldr	r3, [r7, #24]
 8106cf6:	687a      	ldr	r2, [r7, #4]
 8106cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106cfa:	69bb      	ldr	r3, [r7, #24]
 8106cfc:	68fa      	ldr	r2, [r7, #12]
 8106cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8106d00:	69bb      	ldr	r3, [r7, #24]
 8106d02:	68ba      	ldr	r2, [r7, #8]
 8106d04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8106d06:	2101      	movs	r1, #1
 8106d08:	69b8      	ldr	r0, [r7, #24]
 8106d0a:	f7ff ff05 	bl	8106b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8106d0e:	69bb      	ldr	r3, [r7, #24]
 8106d10:	78fa      	ldrb	r2, [r7, #3]
 8106d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8106d16:	bf00      	nop
 8106d18:	3710      	adds	r7, #16
 8106d1a:	46bd      	mov	sp, r7
 8106d1c:	bd80      	pop	{r7, pc}
	...

08106d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8106d20:	b580      	push	{r7, lr}
 8106d22:	b08e      	sub	sp, #56	; 0x38
 8106d24:	af00      	add	r7, sp, #0
 8106d26:	60f8      	str	r0, [r7, #12]
 8106d28:	60b9      	str	r1, [r7, #8]
 8106d2a:	607a      	str	r2, [r7, #4]
 8106d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106d2e:	2300      	movs	r3, #0
 8106d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106d32:	68fb      	ldr	r3, [r7, #12]
 8106d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8106d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d38:	2b00      	cmp	r3, #0
 8106d3a:	d10a      	bne.n	8106d52 <xQueueGenericSend+0x32>
	__asm volatile
 8106d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d40:	f383 8811 	msr	BASEPRI, r3
 8106d44:	f3bf 8f6f 	isb	sy
 8106d48:	f3bf 8f4f 	dsb	sy
 8106d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8106d4e:	bf00      	nop
 8106d50:	e7fe      	b.n	8106d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106d52:	68bb      	ldr	r3, [r7, #8]
 8106d54:	2b00      	cmp	r3, #0
 8106d56:	d103      	bne.n	8106d60 <xQueueGenericSend+0x40>
 8106d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d5c:	2b00      	cmp	r3, #0
 8106d5e:	d101      	bne.n	8106d64 <xQueueGenericSend+0x44>
 8106d60:	2301      	movs	r3, #1
 8106d62:	e000      	b.n	8106d66 <xQueueGenericSend+0x46>
 8106d64:	2300      	movs	r3, #0
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d10a      	bne.n	8106d80 <xQueueGenericSend+0x60>
	__asm volatile
 8106d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d6e:	f383 8811 	msr	BASEPRI, r3
 8106d72:	f3bf 8f6f 	isb	sy
 8106d76:	f3bf 8f4f 	dsb	sy
 8106d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8106d7c:	bf00      	nop
 8106d7e:	e7fe      	b.n	8106d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106d80:	683b      	ldr	r3, [r7, #0]
 8106d82:	2b02      	cmp	r3, #2
 8106d84:	d103      	bne.n	8106d8e <xQueueGenericSend+0x6e>
 8106d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d8a:	2b01      	cmp	r3, #1
 8106d8c:	d101      	bne.n	8106d92 <xQueueGenericSend+0x72>
 8106d8e:	2301      	movs	r3, #1
 8106d90:	e000      	b.n	8106d94 <xQueueGenericSend+0x74>
 8106d92:	2300      	movs	r3, #0
 8106d94:	2b00      	cmp	r3, #0
 8106d96:	d10a      	bne.n	8106dae <xQueueGenericSend+0x8e>
	__asm volatile
 8106d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d9c:	f383 8811 	msr	BASEPRI, r3
 8106da0:	f3bf 8f6f 	isb	sy
 8106da4:	f3bf 8f4f 	dsb	sy
 8106da8:	623b      	str	r3, [r7, #32]
}
 8106daa:	bf00      	nop
 8106dac:	e7fe      	b.n	8106dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106dae:	f001 f9e7 	bl	8108180 <xTaskGetSchedulerState>
 8106db2:	4603      	mov	r3, r0
 8106db4:	2b00      	cmp	r3, #0
 8106db6:	d102      	bne.n	8106dbe <xQueueGenericSend+0x9e>
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	2b00      	cmp	r3, #0
 8106dbc:	d101      	bne.n	8106dc2 <xQueueGenericSend+0xa2>
 8106dbe:	2301      	movs	r3, #1
 8106dc0:	e000      	b.n	8106dc4 <xQueueGenericSend+0xa4>
 8106dc2:	2300      	movs	r3, #0
 8106dc4:	2b00      	cmp	r3, #0
 8106dc6:	d10a      	bne.n	8106dde <xQueueGenericSend+0xbe>
	__asm volatile
 8106dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106dcc:	f383 8811 	msr	BASEPRI, r3
 8106dd0:	f3bf 8f6f 	isb	sy
 8106dd4:	f3bf 8f4f 	dsb	sy
 8106dd8:	61fb      	str	r3, [r7, #28]
}
 8106dda:	bf00      	nop
 8106ddc:	e7fe      	b.n	8106ddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106dde:	f7ff fd79 	bl	81068d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106dea:	429a      	cmp	r2, r3
 8106dec:	d302      	bcc.n	8106df4 <xQueueGenericSend+0xd4>
 8106dee:	683b      	ldr	r3, [r7, #0]
 8106df0:	2b02      	cmp	r3, #2
 8106df2:	d129      	bne.n	8106e48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106df4:	683a      	ldr	r2, [r7, #0]
 8106df6:	68b9      	ldr	r1, [r7, #8]
 8106df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106dfa:	f000 fa0b 	bl	8107214 <prvCopyDataToQueue>
 8106dfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e04:	2b00      	cmp	r3, #0
 8106e06:	d010      	beq.n	8106e2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e0a:	3324      	adds	r3, #36	; 0x24
 8106e0c:	4618      	mov	r0, r3
 8106e0e:	f000 fff5 	bl	8107dfc <xTaskRemoveFromEventList>
 8106e12:	4603      	mov	r3, r0
 8106e14:	2b00      	cmp	r3, #0
 8106e16:	d013      	beq.n	8106e40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8106e18:	4b3f      	ldr	r3, [pc, #252]	; (8106f18 <xQueueGenericSend+0x1f8>)
 8106e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106e1e:	601a      	str	r2, [r3, #0]
 8106e20:	f3bf 8f4f 	dsb	sy
 8106e24:	f3bf 8f6f 	isb	sy
 8106e28:	e00a      	b.n	8106e40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8106e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e2c:	2b00      	cmp	r3, #0
 8106e2e:	d007      	beq.n	8106e40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8106e30:	4b39      	ldr	r3, [pc, #228]	; (8106f18 <xQueueGenericSend+0x1f8>)
 8106e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106e36:	601a      	str	r2, [r3, #0]
 8106e38:	f3bf 8f4f 	dsb	sy
 8106e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8106e40:	f7ff fd78 	bl	8106934 <vPortExitCritical>
				return pdPASS;
 8106e44:	2301      	movs	r3, #1
 8106e46:	e063      	b.n	8106f10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d103      	bne.n	8106e56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8106e4e:	f7ff fd71 	bl	8106934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8106e52:	2300      	movs	r3, #0
 8106e54:	e05c      	b.n	8106f10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e58:	2b00      	cmp	r3, #0
 8106e5a:	d106      	bne.n	8106e6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106e5c:	f107 0314 	add.w	r3, r7, #20
 8106e60:	4618      	mov	r0, r3
 8106e62:	f001 f82f 	bl	8107ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106e66:	2301      	movs	r3, #1
 8106e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106e6a:	f7ff fd63 	bl	8106934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8106e6e:	f000 fd9b 	bl	81079a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106e72:	f7ff fd2f 	bl	81068d4 <vPortEnterCritical>
 8106e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106e7c:	b25b      	sxtb	r3, r3
 8106e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e82:	d103      	bne.n	8106e8c <xQueueGenericSend+0x16c>
 8106e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e86:	2200      	movs	r2, #0
 8106e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106e92:	b25b      	sxtb	r3, r3
 8106e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e98:	d103      	bne.n	8106ea2 <xQueueGenericSend+0x182>
 8106e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e9c:	2200      	movs	r2, #0
 8106e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106ea2:	f7ff fd47 	bl	8106934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106ea6:	1d3a      	adds	r2, r7, #4
 8106ea8:	f107 0314 	add.w	r3, r7, #20
 8106eac:	4611      	mov	r1, r2
 8106eae:	4618      	mov	r0, r3
 8106eb0:	f001 f81e 	bl	8107ef0 <xTaskCheckForTimeOut>
 8106eb4:	4603      	mov	r3, r0
 8106eb6:	2b00      	cmp	r3, #0
 8106eb8:	d124      	bne.n	8106f04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106ebc:	f000 faa2 	bl	8107404 <prvIsQueueFull>
 8106ec0:	4603      	mov	r3, r0
 8106ec2:	2b00      	cmp	r3, #0
 8106ec4:	d018      	beq.n	8106ef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ec8:	3310      	adds	r3, #16
 8106eca:	687a      	ldr	r2, [r7, #4]
 8106ecc:	4611      	mov	r1, r2
 8106ece:	4618      	mov	r0, r3
 8106ed0:	f000 ff44 	bl	8107d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106ed6:	f000 fa2d 	bl	8107334 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8106eda:	f000 fd73 	bl	81079c4 <xTaskResumeAll>
 8106ede:	4603      	mov	r3, r0
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	f47f af7c 	bne.w	8106dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8106ee6:	4b0c      	ldr	r3, [pc, #48]	; (8106f18 <xQueueGenericSend+0x1f8>)
 8106ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106eec:	601a      	str	r2, [r3, #0]
 8106eee:	f3bf 8f4f 	dsb	sy
 8106ef2:	f3bf 8f6f 	isb	sy
 8106ef6:	e772      	b.n	8106dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8106ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106efa:	f000 fa1b 	bl	8107334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106efe:	f000 fd61 	bl	81079c4 <xTaskResumeAll>
 8106f02:	e76c      	b.n	8106dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8106f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106f06:	f000 fa15 	bl	8107334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106f0a:	f000 fd5b 	bl	81079c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8106f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8106f10:	4618      	mov	r0, r3
 8106f12:	3738      	adds	r7, #56	; 0x38
 8106f14:	46bd      	mov	sp, r7
 8106f16:	bd80      	pop	{r7, pc}
 8106f18:	e000ed04 	.word	0xe000ed04

08106f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8106f1c:	b580      	push	{r7, lr}
 8106f1e:	b090      	sub	sp, #64	; 0x40
 8106f20:	af00      	add	r7, sp, #0
 8106f22:	60f8      	str	r0, [r7, #12]
 8106f24:	60b9      	str	r1, [r7, #8]
 8106f26:	607a      	str	r2, [r7, #4]
 8106f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106f2a:	68fb      	ldr	r3, [r7, #12]
 8106f2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8106f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f30:	2b00      	cmp	r3, #0
 8106f32:	d10a      	bne.n	8106f4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8106f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f38:	f383 8811 	msr	BASEPRI, r3
 8106f3c:	f3bf 8f6f 	isb	sy
 8106f40:	f3bf 8f4f 	dsb	sy
 8106f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8106f46:	bf00      	nop
 8106f48:	e7fe      	b.n	8106f48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106f4a:	68bb      	ldr	r3, [r7, #8]
 8106f4c:	2b00      	cmp	r3, #0
 8106f4e:	d103      	bne.n	8106f58 <xQueueGenericSendFromISR+0x3c>
 8106f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f54:	2b00      	cmp	r3, #0
 8106f56:	d101      	bne.n	8106f5c <xQueueGenericSendFromISR+0x40>
 8106f58:	2301      	movs	r3, #1
 8106f5a:	e000      	b.n	8106f5e <xQueueGenericSendFromISR+0x42>
 8106f5c:	2300      	movs	r3, #0
 8106f5e:	2b00      	cmp	r3, #0
 8106f60:	d10a      	bne.n	8106f78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8106f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f66:	f383 8811 	msr	BASEPRI, r3
 8106f6a:	f3bf 8f6f 	isb	sy
 8106f6e:	f3bf 8f4f 	dsb	sy
 8106f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8106f74:	bf00      	nop
 8106f76:	e7fe      	b.n	8106f76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106f78:	683b      	ldr	r3, [r7, #0]
 8106f7a:	2b02      	cmp	r3, #2
 8106f7c:	d103      	bne.n	8106f86 <xQueueGenericSendFromISR+0x6a>
 8106f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f82:	2b01      	cmp	r3, #1
 8106f84:	d101      	bne.n	8106f8a <xQueueGenericSendFromISR+0x6e>
 8106f86:	2301      	movs	r3, #1
 8106f88:	e000      	b.n	8106f8c <xQueueGenericSendFromISR+0x70>
 8106f8a:	2300      	movs	r3, #0
 8106f8c:	2b00      	cmp	r3, #0
 8106f8e:	d10a      	bne.n	8106fa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8106f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f94:	f383 8811 	msr	BASEPRI, r3
 8106f98:	f3bf 8f6f 	isb	sy
 8106f9c:	f3bf 8f4f 	dsb	sy
 8106fa0:	623b      	str	r3, [r7, #32]
}
 8106fa2:	bf00      	nop
 8106fa4:	e7fe      	b.n	8106fa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106fa6:	f7ff fd77 	bl	8106a98 <vPortValidateInterruptPriority>
	__asm volatile
 8106faa:	f3ef 8211 	mrs	r2, BASEPRI
 8106fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106fb2:	f383 8811 	msr	BASEPRI, r3
 8106fb6:	f3bf 8f6f 	isb	sy
 8106fba:	f3bf 8f4f 	dsb	sy
 8106fbe:	61fa      	str	r2, [r7, #28]
 8106fc0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8106fc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106fc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106fce:	429a      	cmp	r2, r3
 8106fd0:	d302      	bcc.n	8106fd8 <xQueueGenericSendFromISR+0xbc>
 8106fd2:	683b      	ldr	r3, [r7, #0]
 8106fd4:	2b02      	cmp	r3, #2
 8106fd6:	d12f      	bne.n	8107038 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8106fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106fe8:	683a      	ldr	r2, [r7, #0]
 8106fea:	68b9      	ldr	r1, [r7, #8]
 8106fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8106fee:	f000 f911 	bl	8107214 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8106ff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8106ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106ffa:	d112      	bne.n	8107022 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107000:	2b00      	cmp	r3, #0
 8107002:	d016      	beq.n	8107032 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8107004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107006:	3324      	adds	r3, #36	; 0x24
 8107008:	4618      	mov	r0, r3
 810700a:	f000 fef7 	bl	8107dfc <xTaskRemoveFromEventList>
 810700e:	4603      	mov	r3, r0
 8107010:	2b00      	cmp	r3, #0
 8107012:	d00e      	beq.n	8107032 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	2b00      	cmp	r3, #0
 8107018:	d00b      	beq.n	8107032 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	2201      	movs	r2, #1
 810701e:	601a      	str	r2, [r3, #0]
 8107020:	e007      	b.n	8107032 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8107022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107026:	3301      	adds	r3, #1
 8107028:	b2db      	uxtb	r3, r3
 810702a:	b25a      	sxtb	r2, r3
 810702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810702e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8107032:	2301      	movs	r3, #1
 8107034:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8107036:	e001      	b.n	810703c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8107038:	2300      	movs	r3, #0
 810703a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810703e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8107040:	697b      	ldr	r3, [r7, #20]
 8107042:	f383 8811 	msr	BASEPRI, r3
}
 8107046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8107048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810704a:	4618      	mov	r0, r3
 810704c:	3740      	adds	r7, #64	; 0x40
 810704e:	46bd      	mov	sp, r7
 8107050:	bd80      	pop	{r7, pc}
	...

08107054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8107054:	b580      	push	{r7, lr}
 8107056:	b08c      	sub	sp, #48	; 0x30
 8107058:	af00      	add	r7, sp, #0
 810705a:	60f8      	str	r0, [r7, #12]
 810705c:	60b9      	str	r1, [r7, #8]
 810705e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8107060:	2300      	movs	r3, #0
 8107062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8107064:	68fb      	ldr	r3, [r7, #12]
 8107066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8107068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810706a:	2b00      	cmp	r3, #0
 810706c:	d10a      	bne.n	8107084 <xQueueReceive+0x30>
	__asm volatile
 810706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107072:	f383 8811 	msr	BASEPRI, r3
 8107076:	f3bf 8f6f 	isb	sy
 810707a:	f3bf 8f4f 	dsb	sy
 810707e:	623b      	str	r3, [r7, #32]
}
 8107080:	bf00      	nop
 8107082:	e7fe      	b.n	8107082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107084:	68bb      	ldr	r3, [r7, #8]
 8107086:	2b00      	cmp	r3, #0
 8107088:	d103      	bne.n	8107092 <xQueueReceive+0x3e>
 810708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810708e:	2b00      	cmp	r3, #0
 8107090:	d101      	bne.n	8107096 <xQueueReceive+0x42>
 8107092:	2301      	movs	r3, #1
 8107094:	e000      	b.n	8107098 <xQueueReceive+0x44>
 8107096:	2300      	movs	r3, #0
 8107098:	2b00      	cmp	r3, #0
 810709a:	d10a      	bne.n	81070b2 <xQueueReceive+0x5e>
	__asm volatile
 810709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81070a0:	f383 8811 	msr	BASEPRI, r3
 81070a4:	f3bf 8f6f 	isb	sy
 81070a8:	f3bf 8f4f 	dsb	sy
 81070ac:	61fb      	str	r3, [r7, #28]
}
 81070ae:	bf00      	nop
 81070b0:	e7fe      	b.n	81070b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81070b2:	f001 f865 	bl	8108180 <xTaskGetSchedulerState>
 81070b6:	4603      	mov	r3, r0
 81070b8:	2b00      	cmp	r3, #0
 81070ba:	d102      	bne.n	81070c2 <xQueueReceive+0x6e>
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	2b00      	cmp	r3, #0
 81070c0:	d101      	bne.n	81070c6 <xQueueReceive+0x72>
 81070c2:	2301      	movs	r3, #1
 81070c4:	e000      	b.n	81070c8 <xQueueReceive+0x74>
 81070c6:	2300      	movs	r3, #0
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	d10a      	bne.n	81070e2 <xQueueReceive+0x8e>
	__asm volatile
 81070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81070d0:	f383 8811 	msr	BASEPRI, r3
 81070d4:	f3bf 8f6f 	isb	sy
 81070d8:	f3bf 8f4f 	dsb	sy
 81070dc:	61bb      	str	r3, [r7, #24]
}
 81070de:	bf00      	nop
 81070e0:	e7fe      	b.n	81070e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81070e2:	f7ff fbf7 	bl	81068d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81070ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81070ee:	2b00      	cmp	r3, #0
 81070f0:	d01f      	beq.n	8107132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81070f2:	68b9      	ldr	r1, [r7, #8]
 81070f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81070f6:	f000 f8f7 	bl	81072e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81070fc:	1e5a      	subs	r2, r3, #1
 81070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107104:	691b      	ldr	r3, [r3, #16]
 8107106:	2b00      	cmp	r3, #0
 8107108:	d00f      	beq.n	810712a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810710c:	3310      	adds	r3, #16
 810710e:	4618      	mov	r0, r3
 8107110:	f000 fe74 	bl	8107dfc <xTaskRemoveFromEventList>
 8107114:	4603      	mov	r3, r0
 8107116:	2b00      	cmp	r3, #0
 8107118:	d007      	beq.n	810712a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810711a:	4b3d      	ldr	r3, [pc, #244]	; (8107210 <xQueueReceive+0x1bc>)
 810711c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107120:	601a      	str	r2, [r3, #0]
 8107122:	f3bf 8f4f 	dsb	sy
 8107126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810712a:	f7ff fc03 	bl	8106934 <vPortExitCritical>
				return pdPASS;
 810712e:	2301      	movs	r3, #1
 8107130:	e069      	b.n	8107206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	2b00      	cmp	r3, #0
 8107136:	d103      	bne.n	8107140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8107138:	f7ff fbfc 	bl	8106934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810713c:	2300      	movs	r3, #0
 810713e:	e062      	b.n	8107206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8107140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107142:	2b00      	cmp	r3, #0
 8107144:	d106      	bne.n	8107154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8107146:	f107 0310 	add.w	r3, r7, #16
 810714a:	4618      	mov	r0, r3
 810714c:	f000 feba 	bl	8107ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8107150:	2301      	movs	r3, #1
 8107152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8107154:	f7ff fbee 	bl	8106934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8107158:	f000 fc26 	bl	81079a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810715c:	f7ff fbba 	bl	81068d4 <vPortEnterCritical>
 8107160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107166:	b25b      	sxtb	r3, r3
 8107168:	f1b3 3fff 	cmp.w	r3, #4294967295
 810716c:	d103      	bne.n	8107176 <xQueueReceive+0x122>
 810716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107170:	2200      	movs	r2, #0
 8107172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810717c:	b25b      	sxtb	r3, r3
 810717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107182:	d103      	bne.n	810718c <xQueueReceive+0x138>
 8107184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107186:	2200      	movs	r2, #0
 8107188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810718c:	f7ff fbd2 	bl	8106934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8107190:	1d3a      	adds	r2, r7, #4
 8107192:	f107 0310 	add.w	r3, r7, #16
 8107196:	4611      	mov	r1, r2
 8107198:	4618      	mov	r0, r3
 810719a:	f000 fea9 	bl	8107ef0 <xTaskCheckForTimeOut>
 810719e:	4603      	mov	r3, r0
 81071a0:	2b00      	cmp	r3, #0
 81071a2:	d123      	bne.n	81071ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81071a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81071a6:	f000 f917 	bl	81073d8 <prvIsQueueEmpty>
 81071aa:	4603      	mov	r3, r0
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d017      	beq.n	81071e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81071b2:	3324      	adds	r3, #36	; 0x24
 81071b4:	687a      	ldr	r2, [r7, #4]
 81071b6:	4611      	mov	r1, r2
 81071b8:	4618      	mov	r0, r3
 81071ba:	f000 fdcf 	bl	8107d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81071be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81071c0:	f000 f8b8 	bl	8107334 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81071c4:	f000 fbfe 	bl	81079c4 <xTaskResumeAll>
 81071c8:	4603      	mov	r3, r0
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d189      	bne.n	81070e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 81071ce:	4b10      	ldr	r3, [pc, #64]	; (8107210 <xQueueReceive+0x1bc>)
 81071d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81071d4:	601a      	str	r2, [r3, #0]
 81071d6:	f3bf 8f4f 	dsb	sy
 81071da:	f3bf 8f6f 	isb	sy
 81071de:	e780      	b.n	81070e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81071e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81071e2:	f000 f8a7 	bl	8107334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81071e6:	f000 fbed 	bl	81079c4 <xTaskResumeAll>
 81071ea:	e77a      	b.n	81070e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81071ee:	f000 f8a1 	bl	8107334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81071f2:	f000 fbe7 	bl	81079c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81071f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81071f8:	f000 f8ee 	bl	81073d8 <prvIsQueueEmpty>
 81071fc:	4603      	mov	r3, r0
 81071fe:	2b00      	cmp	r3, #0
 8107200:	f43f af6f 	beq.w	81070e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8107204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8107206:	4618      	mov	r0, r3
 8107208:	3730      	adds	r7, #48	; 0x30
 810720a:	46bd      	mov	sp, r7
 810720c:	bd80      	pop	{r7, pc}
 810720e:	bf00      	nop
 8107210:	e000ed04 	.word	0xe000ed04

08107214 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8107214:	b580      	push	{r7, lr}
 8107216:	b086      	sub	sp, #24
 8107218:	af00      	add	r7, sp, #0
 810721a:	60f8      	str	r0, [r7, #12]
 810721c:	60b9      	str	r1, [r7, #8]
 810721e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8107220:	2300      	movs	r3, #0
 8107222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810722a:	68fb      	ldr	r3, [r7, #12]
 810722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810722e:	2b00      	cmp	r3, #0
 8107230:	d10d      	bne.n	810724e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8107232:	68fb      	ldr	r3, [r7, #12]
 8107234:	681b      	ldr	r3, [r3, #0]
 8107236:	2b00      	cmp	r3, #0
 8107238:	d14d      	bne.n	81072d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810723a:	68fb      	ldr	r3, [r7, #12]
 810723c:	689b      	ldr	r3, [r3, #8]
 810723e:	4618      	mov	r0, r3
 8107240:	f000 ffbc 	bl	81081bc <xTaskPriorityDisinherit>
 8107244:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	2200      	movs	r2, #0
 810724a:	609a      	str	r2, [r3, #8]
 810724c:	e043      	b.n	81072d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	2b00      	cmp	r3, #0
 8107252:	d119      	bne.n	8107288 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8107254:	68fb      	ldr	r3, [r7, #12]
 8107256:	6858      	ldr	r0, [r3, #4]
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810725c:	461a      	mov	r2, r3
 810725e:	68b9      	ldr	r1, [r7, #8]
 8107260:	f001 fd99 	bl	8108d96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	685a      	ldr	r2, [r3, #4]
 8107268:	68fb      	ldr	r3, [r7, #12]
 810726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810726c:	441a      	add	r2, r3
 810726e:	68fb      	ldr	r3, [r7, #12]
 8107270:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8107272:	68fb      	ldr	r3, [r7, #12]
 8107274:	685a      	ldr	r2, [r3, #4]
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	689b      	ldr	r3, [r3, #8]
 810727a:	429a      	cmp	r2, r3
 810727c:	d32b      	bcc.n	81072d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810727e:	68fb      	ldr	r3, [r7, #12]
 8107280:	681a      	ldr	r2, [r3, #0]
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	605a      	str	r2, [r3, #4]
 8107286:	e026      	b.n	81072d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8107288:	68fb      	ldr	r3, [r7, #12]
 810728a:	68d8      	ldr	r0, [r3, #12]
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107290:	461a      	mov	r2, r3
 8107292:	68b9      	ldr	r1, [r7, #8]
 8107294:	f001 fd7f 	bl	8108d96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	68da      	ldr	r2, [r3, #12]
 810729c:	68fb      	ldr	r3, [r7, #12]
 810729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072a0:	425b      	negs	r3, r3
 81072a2:	441a      	add	r2, r3
 81072a4:	68fb      	ldr	r3, [r7, #12]
 81072a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81072a8:	68fb      	ldr	r3, [r7, #12]
 81072aa:	68da      	ldr	r2, [r3, #12]
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	429a      	cmp	r2, r3
 81072b2:	d207      	bcs.n	81072c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81072b4:	68fb      	ldr	r3, [r7, #12]
 81072b6:	689a      	ldr	r2, [r3, #8]
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072bc:	425b      	negs	r3, r3
 81072be:	441a      	add	r2, r3
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	2b02      	cmp	r3, #2
 81072c8:	d105      	bne.n	81072d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81072ca:	693b      	ldr	r3, [r7, #16]
 81072cc:	2b00      	cmp	r3, #0
 81072ce:	d002      	beq.n	81072d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81072d0:	693b      	ldr	r3, [r7, #16]
 81072d2:	3b01      	subs	r3, #1
 81072d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81072d6:	693b      	ldr	r3, [r7, #16]
 81072d8:	1c5a      	adds	r2, r3, #1
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 81072de:	697b      	ldr	r3, [r7, #20]
}
 81072e0:	4618      	mov	r0, r3
 81072e2:	3718      	adds	r7, #24
 81072e4:	46bd      	mov	sp, r7
 81072e6:	bd80      	pop	{r7, pc}

081072e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81072e8:	b580      	push	{r7, lr}
 81072ea:	b082      	sub	sp, #8
 81072ec:	af00      	add	r7, sp, #0
 81072ee:	6078      	str	r0, [r7, #4]
 81072f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072f6:	2b00      	cmp	r3, #0
 81072f8:	d018      	beq.n	810732c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	68da      	ldr	r2, [r3, #12]
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107302:	441a      	add	r2, r3
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	68da      	ldr	r2, [r3, #12]
 810730c:	687b      	ldr	r3, [r7, #4]
 810730e:	689b      	ldr	r3, [r3, #8]
 8107310:	429a      	cmp	r2, r3
 8107312:	d303      	bcc.n	810731c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	681a      	ldr	r2, [r3, #0]
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	68d9      	ldr	r1, [r3, #12]
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107324:	461a      	mov	r2, r3
 8107326:	6838      	ldr	r0, [r7, #0]
 8107328:	f001 fd35 	bl	8108d96 <memcpy>
	}
}
 810732c:	bf00      	nop
 810732e:	3708      	adds	r7, #8
 8107330:	46bd      	mov	sp, r7
 8107332:	bd80      	pop	{r7, pc}

08107334 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8107334:	b580      	push	{r7, lr}
 8107336:	b084      	sub	sp, #16
 8107338:	af00      	add	r7, sp, #0
 810733a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810733c:	f7ff faca 	bl	81068d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107346:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8107348:	e011      	b.n	810736e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810734e:	2b00      	cmp	r3, #0
 8107350:	d012      	beq.n	8107378 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	3324      	adds	r3, #36	; 0x24
 8107356:	4618      	mov	r0, r3
 8107358:	f000 fd50 	bl	8107dfc <xTaskRemoveFromEventList>
 810735c:	4603      	mov	r3, r0
 810735e:	2b00      	cmp	r3, #0
 8107360:	d001      	beq.n	8107366 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8107362:	f000 fe27 	bl	8107fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8107366:	7bfb      	ldrb	r3, [r7, #15]
 8107368:	3b01      	subs	r3, #1
 810736a:	b2db      	uxtb	r3, r3
 810736c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810736e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8107372:	2b00      	cmp	r3, #0
 8107374:	dce9      	bgt.n	810734a <prvUnlockQueue+0x16>
 8107376:	e000      	b.n	810737a <prvUnlockQueue+0x46>
					break;
 8107378:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	22ff      	movs	r2, #255	; 0xff
 810737e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8107382:	f7ff fad7 	bl	8106934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8107386:	f7ff faa5 	bl	81068d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810738a:	687b      	ldr	r3, [r7, #4]
 810738c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107390:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8107392:	e011      	b.n	81073b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107394:	687b      	ldr	r3, [r7, #4]
 8107396:	691b      	ldr	r3, [r3, #16]
 8107398:	2b00      	cmp	r3, #0
 810739a:	d012      	beq.n	81073c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	3310      	adds	r3, #16
 81073a0:	4618      	mov	r0, r3
 81073a2:	f000 fd2b 	bl	8107dfc <xTaskRemoveFromEventList>
 81073a6:	4603      	mov	r3, r0
 81073a8:	2b00      	cmp	r3, #0
 81073aa:	d001      	beq.n	81073b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81073ac:	f000 fe02 	bl	8107fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81073b0:	7bbb      	ldrb	r3, [r7, #14]
 81073b2:	3b01      	subs	r3, #1
 81073b4:	b2db      	uxtb	r3, r3
 81073b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81073b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81073bc:	2b00      	cmp	r3, #0
 81073be:	dce9      	bgt.n	8107394 <prvUnlockQueue+0x60>
 81073c0:	e000      	b.n	81073c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81073c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	22ff      	movs	r2, #255	; 0xff
 81073c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 81073cc:	f7ff fab2 	bl	8106934 <vPortExitCritical>
}
 81073d0:	bf00      	nop
 81073d2:	3710      	adds	r7, #16
 81073d4:	46bd      	mov	sp, r7
 81073d6:	bd80      	pop	{r7, pc}

081073d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81073d8:	b580      	push	{r7, lr}
 81073da:	b084      	sub	sp, #16
 81073dc:	af00      	add	r7, sp, #0
 81073de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81073e0:	f7ff fa78 	bl	81068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81073e4:	687b      	ldr	r3, [r7, #4]
 81073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d102      	bne.n	81073f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81073ec:	2301      	movs	r3, #1
 81073ee:	60fb      	str	r3, [r7, #12]
 81073f0:	e001      	b.n	81073f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81073f2:	2300      	movs	r3, #0
 81073f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81073f6:	f7ff fa9d 	bl	8106934 <vPortExitCritical>

	return xReturn;
 81073fa:	68fb      	ldr	r3, [r7, #12]
}
 81073fc:	4618      	mov	r0, r3
 81073fe:	3710      	adds	r7, #16
 8107400:	46bd      	mov	sp, r7
 8107402:	bd80      	pop	{r7, pc}

08107404 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8107404:	b580      	push	{r7, lr}
 8107406:	b084      	sub	sp, #16
 8107408:	af00      	add	r7, sp, #0
 810740a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810740c:	f7ff fa62 	bl	81068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107414:	687b      	ldr	r3, [r7, #4]
 8107416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107418:	429a      	cmp	r2, r3
 810741a:	d102      	bne.n	8107422 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810741c:	2301      	movs	r3, #1
 810741e:	60fb      	str	r3, [r7, #12]
 8107420:	e001      	b.n	8107426 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8107422:	2300      	movs	r3, #0
 8107424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8107426:	f7ff fa85 	bl	8106934 <vPortExitCritical>

	return xReturn;
 810742a:	68fb      	ldr	r3, [r7, #12]
}
 810742c:	4618      	mov	r0, r3
 810742e:	3710      	adds	r7, #16
 8107430:	46bd      	mov	sp, r7
 8107432:	bd80      	pop	{r7, pc}

08107434 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8107434:	b480      	push	{r7}
 8107436:	b085      	sub	sp, #20
 8107438:	af00      	add	r7, sp, #0
 810743a:	6078      	str	r0, [r7, #4]
 810743c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810743e:	2300      	movs	r3, #0
 8107440:	60fb      	str	r3, [r7, #12]
 8107442:	e014      	b.n	810746e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8107444:	4a0f      	ldr	r2, [pc, #60]	; (8107484 <vQueueAddToRegistry+0x50>)
 8107446:	68fb      	ldr	r3, [r7, #12]
 8107448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810744c:	2b00      	cmp	r3, #0
 810744e:	d10b      	bne.n	8107468 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8107450:	490c      	ldr	r1, [pc, #48]	; (8107484 <vQueueAddToRegistry+0x50>)
 8107452:	68fb      	ldr	r3, [r7, #12]
 8107454:	683a      	ldr	r2, [r7, #0]
 8107456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810745a:	4a0a      	ldr	r2, [pc, #40]	; (8107484 <vQueueAddToRegistry+0x50>)
 810745c:	68fb      	ldr	r3, [r7, #12]
 810745e:	00db      	lsls	r3, r3, #3
 8107460:	4413      	add	r3, r2
 8107462:	687a      	ldr	r2, [r7, #4]
 8107464:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8107466:	e006      	b.n	8107476 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	3301      	adds	r3, #1
 810746c:	60fb      	str	r3, [r7, #12]
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	2b07      	cmp	r3, #7
 8107472:	d9e7      	bls.n	8107444 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8107474:	bf00      	nop
 8107476:	bf00      	nop
 8107478:	3714      	adds	r7, #20
 810747a:	46bd      	mov	sp, r7
 810747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107480:	4770      	bx	lr
 8107482:	bf00      	nop
 8107484:	10004720 	.word	0x10004720

08107488 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107488:	b580      	push	{r7, lr}
 810748a:	b086      	sub	sp, #24
 810748c:	af00      	add	r7, sp, #0
 810748e:	60f8      	str	r0, [r7, #12]
 8107490:	60b9      	str	r1, [r7, #8]
 8107492:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8107494:	68fb      	ldr	r3, [r7, #12]
 8107496:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8107498:	f7ff fa1c 	bl	81068d4 <vPortEnterCritical>
 810749c:	697b      	ldr	r3, [r7, #20]
 810749e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81074a2:	b25b      	sxtb	r3, r3
 81074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81074a8:	d103      	bne.n	81074b2 <vQueueWaitForMessageRestricted+0x2a>
 81074aa:	697b      	ldr	r3, [r7, #20]
 81074ac:	2200      	movs	r2, #0
 81074ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81074b2:	697b      	ldr	r3, [r7, #20]
 81074b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81074b8:	b25b      	sxtb	r3, r3
 81074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81074be:	d103      	bne.n	81074c8 <vQueueWaitForMessageRestricted+0x40>
 81074c0:	697b      	ldr	r3, [r7, #20]
 81074c2:	2200      	movs	r2, #0
 81074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81074c8:	f7ff fa34 	bl	8106934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81074cc:	697b      	ldr	r3, [r7, #20]
 81074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074d0:	2b00      	cmp	r3, #0
 81074d2:	d106      	bne.n	81074e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81074d4:	697b      	ldr	r3, [r7, #20]
 81074d6:	3324      	adds	r3, #36	; 0x24
 81074d8:	687a      	ldr	r2, [r7, #4]
 81074da:	68b9      	ldr	r1, [r7, #8]
 81074dc:	4618      	mov	r0, r3
 81074de:	f000 fc61 	bl	8107da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 81074e2:	6978      	ldr	r0, [r7, #20]
 81074e4:	f7ff ff26 	bl	8107334 <prvUnlockQueue>
	}
 81074e8:	bf00      	nop
 81074ea:	3718      	adds	r7, #24
 81074ec:	46bd      	mov	sp, r7
 81074ee:	bd80      	pop	{r7, pc}

081074f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81074f0:	b580      	push	{r7, lr}
 81074f2:	b08e      	sub	sp, #56	; 0x38
 81074f4:	af04      	add	r7, sp, #16
 81074f6:	60f8      	str	r0, [r7, #12]
 81074f8:	60b9      	str	r1, [r7, #8]
 81074fa:	607a      	str	r2, [r7, #4]
 81074fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81074fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107500:	2b00      	cmp	r3, #0
 8107502:	d10a      	bne.n	810751a <xTaskCreateStatic+0x2a>
	__asm volatile
 8107504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107508:	f383 8811 	msr	BASEPRI, r3
 810750c:	f3bf 8f6f 	isb	sy
 8107510:	f3bf 8f4f 	dsb	sy
 8107514:	623b      	str	r3, [r7, #32]
}
 8107516:	bf00      	nop
 8107518:	e7fe      	b.n	8107518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810751c:	2b00      	cmp	r3, #0
 810751e:	d10a      	bne.n	8107536 <xTaskCreateStatic+0x46>
	__asm volatile
 8107520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107524:	f383 8811 	msr	BASEPRI, r3
 8107528:	f3bf 8f6f 	isb	sy
 810752c:	f3bf 8f4f 	dsb	sy
 8107530:	61fb      	str	r3, [r7, #28]
}
 8107532:	bf00      	nop
 8107534:	e7fe      	b.n	8107534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8107536:	23bc      	movs	r3, #188	; 0xbc
 8107538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810753a:	693b      	ldr	r3, [r7, #16]
 810753c:	2bbc      	cmp	r3, #188	; 0xbc
 810753e:	d00a      	beq.n	8107556 <xTaskCreateStatic+0x66>
	__asm volatile
 8107540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107544:	f383 8811 	msr	BASEPRI, r3
 8107548:	f3bf 8f6f 	isb	sy
 810754c:	f3bf 8f4f 	dsb	sy
 8107550:	61bb      	str	r3, [r7, #24]
}
 8107552:	bf00      	nop
 8107554:	e7fe      	b.n	8107554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8107556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8107558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810755a:	2b00      	cmp	r3, #0
 810755c:	d01e      	beq.n	810759c <xTaskCreateStatic+0xac>
 810755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107560:	2b00      	cmp	r3, #0
 8107562:	d01b      	beq.n	810759c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8107564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8107568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810756a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810756c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107570:	2202      	movs	r2, #2
 8107572:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8107576:	2300      	movs	r3, #0
 8107578:	9303      	str	r3, [sp, #12]
 810757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810757c:	9302      	str	r3, [sp, #8]
 810757e:	f107 0314 	add.w	r3, r7, #20
 8107582:	9301      	str	r3, [sp, #4]
 8107584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107586:	9300      	str	r3, [sp, #0]
 8107588:	683b      	ldr	r3, [r7, #0]
 810758a:	687a      	ldr	r2, [r7, #4]
 810758c:	68b9      	ldr	r1, [r7, #8]
 810758e:	68f8      	ldr	r0, [r7, #12]
 8107590:	f000 f850 	bl	8107634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8107594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8107596:	f000 f8f3 	bl	8107780 <prvAddNewTaskToReadyList>
 810759a:	e001      	b.n	81075a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810759c:	2300      	movs	r3, #0
 810759e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81075a0:	697b      	ldr	r3, [r7, #20]
	}
 81075a2:	4618      	mov	r0, r3
 81075a4:	3728      	adds	r7, #40	; 0x28
 81075a6:	46bd      	mov	sp, r7
 81075a8:	bd80      	pop	{r7, pc}

081075aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81075aa:	b580      	push	{r7, lr}
 81075ac:	b08c      	sub	sp, #48	; 0x30
 81075ae:	af04      	add	r7, sp, #16
 81075b0:	60f8      	str	r0, [r7, #12]
 81075b2:	60b9      	str	r1, [r7, #8]
 81075b4:	603b      	str	r3, [r7, #0]
 81075b6:	4613      	mov	r3, r2
 81075b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81075ba:	88fb      	ldrh	r3, [r7, #6]
 81075bc:	009b      	lsls	r3, r3, #2
 81075be:	4618      	mov	r0, r3
 81075c0:	f7fe fdbe 	bl	8106140 <pvPortMalloc>
 81075c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81075c6:	697b      	ldr	r3, [r7, #20]
 81075c8:	2b00      	cmp	r3, #0
 81075ca:	d00e      	beq.n	81075ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81075cc:	20bc      	movs	r0, #188	; 0xbc
 81075ce:	f7fe fdb7 	bl	8106140 <pvPortMalloc>
 81075d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81075d4:	69fb      	ldr	r3, [r7, #28]
 81075d6:	2b00      	cmp	r3, #0
 81075d8:	d003      	beq.n	81075e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81075da:	69fb      	ldr	r3, [r7, #28]
 81075dc:	697a      	ldr	r2, [r7, #20]
 81075de:	631a      	str	r2, [r3, #48]	; 0x30
 81075e0:	e005      	b.n	81075ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81075e2:	6978      	ldr	r0, [r7, #20]
 81075e4:	f7fe fe78 	bl	81062d8 <vPortFree>
 81075e8:	e001      	b.n	81075ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81075ea:	2300      	movs	r3, #0
 81075ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81075ee:	69fb      	ldr	r3, [r7, #28]
 81075f0:	2b00      	cmp	r3, #0
 81075f2:	d017      	beq.n	8107624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81075f4:	69fb      	ldr	r3, [r7, #28]
 81075f6:	2200      	movs	r2, #0
 81075f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81075fc:	88fa      	ldrh	r2, [r7, #6]
 81075fe:	2300      	movs	r3, #0
 8107600:	9303      	str	r3, [sp, #12]
 8107602:	69fb      	ldr	r3, [r7, #28]
 8107604:	9302      	str	r3, [sp, #8]
 8107606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107608:	9301      	str	r3, [sp, #4]
 810760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810760c:	9300      	str	r3, [sp, #0]
 810760e:	683b      	ldr	r3, [r7, #0]
 8107610:	68b9      	ldr	r1, [r7, #8]
 8107612:	68f8      	ldr	r0, [r7, #12]
 8107614:	f000 f80e 	bl	8107634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8107618:	69f8      	ldr	r0, [r7, #28]
 810761a:	f000 f8b1 	bl	8107780 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810761e:	2301      	movs	r3, #1
 8107620:	61bb      	str	r3, [r7, #24]
 8107622:	e002      	b.n	810762a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8107624:	f04f 33ff 	mov.w	r3, #4294967295
 8107628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810762a:	69bb      	ldr	r3, [r7, #24]
	}
 810762c:	4618      	mov	r0, r3
 810762e:	3720      	adds	r7, #32
 8107630:	46bd      	mov	sp, r7
 8107632:	bd80      	pop	{r7, pc}

08107634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8107634:	b580      	push	{r7, lr}
 8107636:	b088      	sub	sp, #32
 8107638:	af00      	add	r7, sp, #0
 810763a:	60f8      	str	r0, [r7, #12]
 810763c:	60b9      	str	r1, [r7, #8]
 810763e:	607a      	str	r2, [r7, #4]
 8107640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8107642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	009b      	lsls	r3, r3, #2
 810764a:	461a      	mov	r2, r3
 810764c:	21a5      	movs	r1, #165	; 0xa5
 810764e:	f001 fbb0 	bl	8108db2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8107652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810765c:	3b01      	subs	r3, #1
 810765e:	009b      	lsls	r3, r3, #2
 8107660:	4413      	add	r3, r2
 8107662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8107664:	69bb      	ldr	r3, [r7, #24]
 8107666:	f023 0307 	bic.w	r3, r3, #7
 810766a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810766c:	69bb      	ldr	r3, [r7, #24]
 810766e:	f003 0307 	and.w	r3, r3, #7
 8107672:	2b00      	cmp	r3, #0
 8107674:	d00a      	beq.n	810768c <prvInitialiseNewTask+0x58>
	__asm volatile
 8107676:	f04f 0350 	mov.w	r3, #80	; 0x50
 810767a:	f383 8811 	msr	BASEPRI, r3
 810767e:	f3bf 8f6f 	isb	sy
 8107682:	f3bf 8f4f 	dsb	sy
 8107686:	617b      	str	r3, [r7, #20]
}
 8107688:	bf00      	nop
 810768a:	e7fe      	b.n	810768a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810768c:	68bb      	ldr	r3, [r7, #8]
 810768e:	2b00      	cmp	r3, #0
 8107690:	d01f      	beq.n	81076d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107692:	2300      	movs	r3, #0
 8107694:	61fb      	str	r3, [r7, #28]
 8107696:	e012      	b.n	81076be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8107698:	68ba      	ldr	r2, [r7, #8]
 810769a:	69fb      	ldr	r3, [r7, #28]
 810769c:	4413      	add	r3, r2
 810769e:	7819      	ldrb	r1, [r3, #0]
 81076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81076a2:	69fb      	ldr	r3, [r7, #28]
 81076a4:	4413      	add	r3, r2
 81076a6:	3334      	adds	r3, #52	; 0x34
 81076a8:	460a      	mov	r2, r1
 81076aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81076ac:	68ba      	ldr	r2, [r7, #8]
 81076ae:	69fb      	ldr	r3, [r7, #28]
 81076b0:	4413      	add	r3, r2
 81076b2:	781b      	ldrb	r3, [r3, #0]
 81076b4:	2b00      	cmp	r3, #0
 81076b6:	d006      	beq.n	81076c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81076b8:	69fb      	ldr	r3, [r7, #28]
 81076ba:	3301      	adds	r3, #1
 81076bc:	61fb      	str	r3, [r7, #28]
 81076be:	69fb      	ldr	r3, [r7, #28]
 81076c0:	2b0f      	cmp	r3, #15
 81076c2:	d9e9      	bls.n	8107698 <prvInitialiseNewTask+0x64>
 81076c4:	e000      	b.n	81076c8 <prvInitialiseNewTask+0x94>
			{
				break;
 81076c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076ca:	2200      	movs	r2, #0
 81076cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 81076d0:	e003      	b.n	81076da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076d4:	2200      	movs	r2, #0
 81076d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81076dc:	2b37      	cmp	r3, #55	; 0x37
 81076de:	d901      	bls.n	81076e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81076e0:	2337      	movs	r3, #55	; 0x37
 81076e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81076e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81076ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076f2:	2200      	movs	r2, #0
 81076f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076f8:	3304      	adds	r3, #4
 81076fa:	4618      	mov	r0, r3
 81076fc:	f7fe ff2a 	bl	8106554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8107700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107702:	3318      	adds	r3, #24
 8107704:	4618      	mov	r0, r3
 8107706:	f7fe ff25 	bl	8106554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810770e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8107716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107718:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810771e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8107720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107722:	2200      	movs	r2, #0
 8107724:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8107728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810772a:	2200      	movs	r2, #0
 810772c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8107730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107732:	3354      	adds	r3, #84	; 0x54
 8107734:	2260      	movs	r2, #96	; 0x60
 8107736:	2100      	movs	r1, #0
 8107738:	4618      	mov	r0, r3
 810773a:	f001 fb3a 	bl	8108db2 <memset>
 810773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107740:	4a0c      	ldr	r2, [pc, #48]	; (8107774 <prvInitialiseNewTask+0x140>)
 8107742:	659a      	str	r2, [r3, #88]	; 0x58
 8107744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107746:	4a0c      	ldr	r2, [pc, #48]	; (8107778 <prvInitialiseNewTask+0x144>)
 8107748:	65da      	str	r2, [r3, #92]	; 0x5c
 810774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810774c:	4a0b      	ldr	r2, [pc, #44]	; (810777c <prvInitialiseNewTask+0x148>)
 810774e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8107750:	683a      	ldr	r2, [r7, #0]
 8107752:	68f9      	ldr	r1, [r7, #12]
 8107754:	69b8      	ldr	r0, [r7, #24]
 8107756:	f7fe ff91 	bl	810667c <pxPortInitialiseStack>
 810775a:	4602      	mov	r2, r0
 810775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810775e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8107760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107762:	2b00      	cmp	r3, #0
 8107764:	d002      	beq.n	810776c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8107766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810776a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810776c:	bf00      	nop
 810776e:	3720      	adds	r7, #32
 8107770:	46bd      	mov	sp, r7
 8107772:	bd80      	pop	{r7, pc}
 8107774:	0810d618 	.word	0x0810d618
 8107778:	0810d638 	.word	0x0810d638
 810777c:	0810d5f8 	.word	0x0810d5f8

08107780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8107780:	b580      	push	{r7, lr}
 8107782:	b082      	sub	sp, #8
 8107784:	af00      	add	r7, sp, #0
 8107786:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8107788:	f7ff f8a4 	bl	81068d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810778c:	4b2d      	ldr	r3, [pc, #180]	; (8107844 <prvAddNewTaskToReadyList+0xc4>)
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	3301      	adds	r3, #1
 8107792:	4a2c      	ldr	r2, [pc, #176]	; (8107844 <prvAddNewTaskToReadyList+0xc4>)
 8107794:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8107796:	4b2c      	ldr	r3, [pc, #176]	; (8107848 <prvAddNewTaskToReadyList+0xc8>)
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	2b00      	cmp	r3, #0
 810779c:	d109      	bne.n	81077b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810779e:	4a2a      	ldr	r2, [pc, #168]	; (8107848 <prvAddNewTaskToReadyList+0xc8>)
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81077a4:	4b27      	ldr	r3, [pc, #156]	; (8107844 <prvAddNewTaskToReadyList+0xc4>)
 81077a6:	681b      	ldr	r3, [r3, #0]
 81077a8:	2b01      	cmp	r3, #1
 81077aa:	d110      	bne.n	81077ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81077ac:	f000 fc26 	bl	8107ffc <prvInitialiseTaskLists>
 81077b0:	e00d      	b.n	81077ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81077b2:	4b26      	ldr	r3, [pc, #152]	; (810784c <prvAddNewTaskToReadyList+0xcc>)
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	2b00      	cmp	r3, #0
 81077b8:	d109      	bne.n	81077ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81077ba:	4b23      	ldr	r3, [pc, #140]	; (8107848 <prvAddNewTaskToReadyList+0xc8>)
 81077bc:	681b      	ldr	r3, [r3, #0]
 81077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077c4:	429a      	cmp	r2, r3
 81077c6:	d802      	bhi.n	81077ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81077c8:	4a1f      	ldr	r2, [pc, #124]	; (8107848 <prvAddNewTaskToReadyList+0xc8>)
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81077ce:	4b20      	ldr	r3, [pc, #128]	; (8107850 <prvAddNewTaskToReadyList+0xd0>)
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	3301      	adds	r3, #1
 81077d4:	4a1e      	ldr	r2, [pc, #120]	; (8107850 <prvAddNewTaskToReadyList+0xd0>)
 81077d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81077d8:	4b1d      	ldr	r3, [pc, #116]	; (8107850 <prvAddNewTaskToReadyList+0xd0>)
 81077da:	681a      	ldr	r2, [r3, #0]
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81077e4:	4b1b      	ldr	r3, [pc, #108]	; (8107854 <prvAddNewTaskToReadyList+0xd4>)
 81077e6:	681b      	ldr	r3, [r3, #0]
 81077e8:	429a      	cmp	r2, r3
 81077ea:	d903      	bls.n	81077f4 <prvAddNewTaskToReadyList+0x74>
 81077ec:	687b      	ldr	r3, [r7, #4]
 81077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077f0:	4a18      	ldr	r2, [pc, #96]	; (8107854 <prvAddNewTaskToReadyList+0xd4>)
 81077f2:	6013      	str	r3, [r2, #0]
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81077f8:	4613      	mov	r3, r2
 81077fa:	009b      	lsls	r3, r3, #2
 81077fc:	4413      	add	r3, r2
 81077fe:	009b      	lsls	r3, r3, #2
 8107800:	4a15      	ldr	r2, [pc, #84]	; (8107858 <prvAddNewTaskToReadyList+0xd8>)
 8107802:	441a      	add	r2, r3
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	3304      	adds	r3, #4
 8107808:	4619      	mov	r1, r3
 810780a:	4610      	mov	r0, r2
 810780c:	f7fe feaf 	bl	810656e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8107810:	f7ff f890 	bl	8106934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107814:	4b0d      	ldr	r3, [pc, #52]	; (810784c <prvAddNewTaskToReadyList+0xcc>)
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	2b00      	cmp	r3, #0
 810781a:	d00e      	beq.n	810783a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810781c:	4b0a      	ldr	r3, [pc, #40]	; (8107848 <prvAddNewTaskToReadyList+0xc8>)
 810781e:	681b      	ldr	r3, [r3, #0]
 8107820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107822:	687b      	ldr	r3, [r7, #4]
 8107824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107826:	429a      	cmp	r2, r3
 8107828:	d207      	bcs.n	810783a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810782a:	4b0c      	ldr	r3, [pc, #48]	; (810785c <prvAddNewTaskToReadyList+0xdc>)
 810782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107830:	601a      	str	r2, [r3, #0]
 8107832:	f3bf 8f4f 	dsb	sy
 8107836:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810783a:	bf00      	nop
 810783c:	3708      	adds	r7, #8
 810783e:	46bd      	mov	sp, r7
 8107840:	bd80      	pop	{r7, pc}
 8107842:	bf00      	nop
 8107844:	10004c34 	.word	0x10004c34
 8107848:	10004760 	.word	0x10004760
 810784c:	10004c40 	.word	0x10004c40
 8107850:	10004c50 	.word	0x10004c50
 8107854:	10004c3c 	.word	0x10004c3c
 8107858:	10004764 	.word	0x10004764
 810785c:	e000ed04 	.word	0xe000ed04

08107860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8107860:	b580      	push	{r7, lr}
 8107862:	b084      	sub	sp, #16
 8107864:	af00      	add	r7, sp, #0
 8107866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8107868:	2300      	movs	r3, #0
 810786a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	2b00      	cmp	r3, #0
 8107870:	d017      	beq.n	81078a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8107872:	4b13      	ldr	r3, [pc, #76]	; (81078c0 <vTaskDelay+0x60>)
 8107874:	681b      	ldr	r3, [r3, #0]
 8107876:	2b00      	cmp	r3, #0
 8107878:	d00a      	beq.n	8107890 <vTaskDelay+0x30>
	__asm volatile
 810787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810787e:	f383 8811 	msr	BASEPRI, r3
 8107882:	f3bf 8f6f 	isb	sy
 8107886:	f3bf 8f4f 	dsb	sy
 810788a:	60bb      	str	r3, [r7, #8]
}
 810788c:	bf00      	nop
 810788e:	e7fe      	b.n	810788e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8107890:	f000 f88a 	bl	81079a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8107894:	2100      	movs	r1, #0
 8107896:	6878      	ldr	r0, [r7, #4]
 8107898:	f000 fcfe 	bl	8108298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810789c:	f000 f892 	bl	81079c4 <xTaskResumeAll>
 81078a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81078a2:	68fb      	ldr	r3, [r7, #12]
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d107      	bne.n	81078b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 81078a8:	4b06      	ldr	r3, [pc, #24]	; (81078c4 <vTaskDelay+0x64>)
 81078aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81078ae:	601a      	str	r2, [r3, #0]
 81078b0:	f3bf 8f4f 	dsb	sy
 81078b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81078b8:	bf00      	nop
 81078ba:	3710      	adds	r7, #16
 81078bc:	46bd      	mov	sp, r7
 81078be:	bd80      	pop	{r7, pc}
 81078c0:	10004c5c 	.word	0x10004c5c
 81078c4:	e000ed04 	.word	0xe000ed04

081078c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81078c8:	b580      	push	{r7, lr}
 81078ca:	b08a      	sub	sp, #40	; 0x28
 81078cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81078ce:	2300      	movs	r3, #0
 81078d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81078d2:	2300      	movs	r3, #0
 81078d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81078d6:	463a      	mov	r2, r7
 81078d8:	1d39      	adds	r1, r7, #4
 81078da:	f107 0308 	add.w	r3, r7, #8
 81078de:	4618      	mov	r0, r3
 81078e0:	f7fe fbfa 	bl	81060d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81078e4:	6839      	ldr	r1, [r7, #0]
 81078e6:	687b      	ldr	r3, [r7, #4]
 81078e8:	68ba      	ldr	r2, [r7, #8]
 81078ea:	9202      	str	r2, [sp, #8]
 81078ec:	9301      	str	r3, [sp, #4]
 81078ee:	2300      	movs	r3, #0
 81078f0:	9300      	str	r3, [sp, #0]
 81078f2:	2300      	movs	r3, #0
 81078f4:	460a      	mov	r2, r1
 81078f6:	4924      	ldr	r1, [pc, #144]	; (8107988 <vTaskStartScheduler+0xc0>)
 81078f8:	4824      	ldr	r0, [pc, #144]	; (810798c <vTaskStartScheduler+0xc4>)
 81078fa:	f7ff fdf9 	bl	81074f0 <xTaskCreateStatic>
 81078fe:	4603      	mov	r3, r0
 8107900:	4a23      	ldr	r2, [pc, #140]	; (8107990 <vTaskStartScheduler+0xc8>)
 8107902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107904:	4b22      	ldr	r3, [pc, #136]	; (8107990 <vTaskStartScheduler+0xc8>)
 8107906:	681b      	ldr	r3, [r3, #0]
 8107908:	2b00      	cmp	r3, #0
 810790a:	d002      	beq.n	8107912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810790c:	2301      	movs	r3, #1
 810790e:	617b      	str	r3, [r7, #20]
 8107910:	e001      	b.n	8107916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107912:	2300      	movs	r3, #0
 8107914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8107916:	697b      	ldr	r3, [r7, #20]
 8107918:	2b01      	cmp	r3, #1
 810791a:	d102      	bne.n	8107922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810791c:	f000 fd10 	bl	8108340 <xTimerCreateTimerTask>
 8107920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107922:	697b      	ldr	r3, [r7, #20]
 8107924:	2b01      	cmp	r3, #1
 8107926:	d11b      	bne.n	8107960 <vTaskStartScheduler+0x98>
	__asm volatile
 8107928:	f04f 0350 	mov.w	r3, #80	; 0x50
 810792c:	f383 8811 	msr	BASEPRI, r3
 8107930:	f3bf 8f6f 	isb	sy
 8107934:	f3bf 8f4f 	dsb	sy
 8107938:	613b      	str	r3, [r7, #16]
}
 810793a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810793c:	4b15      	ldr	r3, [pc, #84]	; (8107994 <vTaskStartScheduler+0xcc>)
 810793e:	681b      	ldr	r3, [r3, #0]
 8107940:	3354      	adds	r3, #84	; 0x54
 8107942:	4a15      	ldr	r2, [pc, #84]	; (8107998 <vTaskStartScheduler+0xd0>)
 8107944:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8107946:	4b15      	ldr	r3, [pc, #84]	; (810799c <vTaskStartScheduler+0xd4>)
 8107948:	f04f 32ff 	mov.w	r2, #4294967295
 810794c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810794e:	4b14      	ldr	r3, [pc, #80]	; (81079a0 <vTaskStartScheduler+0xd8>)
 8107950:	2201      	movs	r2, #1
 8107952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8107954:	4b13      	ldr	r3, [pc, #76]	; (81079a4 <vTaskStartScheduler+0xdc>)
 8107956:	2200      	movs	r2, #0
 8107958:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810795a:	f7fe ff19 	bl	8106790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810795e:	e00e      	b.n	810797e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8107960:	697b      	ldr	r3, [r7, #20]
 8107962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107966:	d10a      	bne.n	810797e <vTaskStartScheduler+0xb6>
	__asm volatile
 8107968:	f04f 0350 	mov.w	r3, #80	; 0x50
 810796c:	f383 8811 	msr	BASEPRI, r3
 8107970:	f3bf 8f6f 	isb	sy
 8107974:	f3bf 8f4f 	dsb	sy
 8107978:	60fb      	str	r3, [r7, #12]
}
 810797a:	bf00      	nop
 810797c:	e7fe      	b.n	810797c <vTaskStartScheduler+0xb4>
}
 810797e:	bf00      	nop
 8107980:	3718      	adds	r7, #24
 8107982:	46bd      	mov	sp, r7
 8107984:	bd80      	pop	{r7, pc}
 8107986:	bf00      	nop
 8107988:	0810d59c 	.word	0x0810d59c
 810798c:	08107fcd 	.word	0x08107fcd
 8107990:	10004c58 	.word	0x10004c58
 8107994:	10004760 	.word	0x10004760
 8107998:	1000002c 	.word	0x1000002c
 810799c:	10004c54 	.word	0x10004c54
 81079a0:	10004c40 	.word	0x10004c40
 81079a4:	10004c38 	.word	0x10004c38

081079a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81079a8:	b480      	push	{r7}
 81079aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81079ac:	4b04      	ldr	r3, [pc, #16]	; (81079c0 <vTaskSuspendAll+0x18>)
 81079ae:	681b      	ldr	r3, [r3, #0]
 81079b0:	3301      	adds	r3, #1
 81079b2:	4a03      	ldr	r2, [pc, #12]	; (81079c0 <vTaskSuspendAll+0x18>)
 81079b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81079b6:	bf00      	nop
 81079b8:	46bd      	mov	sp, r7
 81079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079be:	4770      	bx	lr
 81079c0:	10004c5c 	.word	0x10004c5c

081079c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81079c4:	b580      	push	{r7, lr}
 81079c6:	b084      	sub	sp, #16
 81079c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81079ca:	2300      	movs	r3, #0
 81079cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81079ce:	2300      	movs	r3, #0
 81079d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81079d2:	4b42      	ldr	r3, [pc, #264]	; (8107adc <xTaskResumeAll+0x118>)
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	2b00      	cmp	r3, #0
 81079d8:	d10a      	bne.n	81079f0 <xTaskResumeAll+0x2c>
	__asm volatile
 81079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81079de:	f383 8811 	msr	BASEPRI, r3
 81079e2:	f3bf 8f6f 	isb	sy
 81079e6:	f3bf 8f4f 	dsb	sy
 81079ea:	603b      	str	r3, [r7, #0]
}
 81079ec:	bf00      	nop
 81079ee:	e7fe      	b.n	81079ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81079f0:	f7fe ff70 	bl	81068d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81079f4:	4b39      	ldr	r3, [pc, #228]	; (8107adc <xTaskResumeAll+0x118>)
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	3b01      	subs	r3, #1
 81079fa:	4a38      	ldr	r2, [pc, #224]	; (8107adc <xTaskResumeAll+0x118>)
 81079fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81079fe:	4b37      	ldr	r3, [pc, #220]	; (8107adc <xTaskResumeAll+0x118>)
 8107a00:	681b      	ldr	r3, [r3, #0]
 8107a02:	2b00      	cmp	r3, #0
 8107a04:	d162      	bne.n	8107acc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8107a06:	4b36      	ldr	r3, [pc, #216]	; (8107ae0 <xTaskResumeAll+0x11c>)
 8107a08:	681b      	ldr	r3, [r3, #0]
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	d05e      	beq.n	8107acc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107a0e:	e02f      	b.n	8107a70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107a10:	4b34      	ldr	r3, [pc, #208]	; (8107ae4 <xTaskResumeAll+0x120>)
 8107a12:	68db      	ldr	r3, [r3, #12]
 8107a14:	68db      	ldr	r3, [r3, #12]
 8107a16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107a18:	68fb      	ldr	r3, [r7, #12]
 8107a1a:	3318      	adds	r3, #24
 8107a1c:	4618      	mov	r0, r3
 8107a1e:	f7fe fe03 	bl	8106628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107a22:	68fb      	ldr	r3, [r7, #12]
 8107a24:	3304      	adds	r3, #4
 8107a26:	4618      	mov	r0, r3
 8107a28:	f7fe fdfe 	bl	8106628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a30:	4b2d      	ldr	r3, [pc, #180]	; (8107ae8 <xTaskResumeAll+0x124>)
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	429a      	cmp	r2, r3
 8107a36:	d903      	bls.n	8107a40 <xTaskResumeAll+0x7c>
 8107a38:	68fb      	ldr	r3, [r7, #12]
 8107a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a3c:	4a2a      	ldr	r2, [pc, #168]	; (8107ae8 <xTaskResumeAll+0x124>)
 8107a3e:	6013      	str	r3, [r2, #0]
 8107a40:	68fb      	ldr	r3, [r7, #12]
 8107a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a44:	4613      	mov	r3, r2
 8107a46:	009b      	lsls	r3, r3, #2
 8107a48:	4413      	add	r3, r2
 8107a4a:	009b      	lsls	r3, r3, #2
 8107a4c:	4a27      	ldr	r2, [pc, #156]	; (8107aec <xTaskResumeAll+0x128>)
 8107a4e:	441a      	add	r2, r3
 8107a50:	68fb      	ldr	r3, [r7, #12]
 8107a52:	3304      	adds	r3, #4
 8107a54:	4619      	mov	r1, r3
 8107a56:	4610      	mov	r0, r2
 8107a58:	f7fe fd89 	bl	810656e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107a5c:	68fb      	ldr	r3, [r7, #12]
 8107a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a60:	4b23      	ldr	r3, [pc, #140]	; (8107af0 <xTaskResumeAll+0x12c>)
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a66:	429a      	cmp	r2, r3
 8107a68:	d302      	bcc.n	8107a70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8107a6a:	4b22      	ldr	r3, [pc, #136]	; (8107af4 <xTaskResumeAll+0x130>)
 8107a6c:	2201      	movs	r2, #1
 8107a6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107a70:	4b1c      	ldr	r3, [pc, #112]	; (8107ae4 <xTaskResumeAll+0x120>)
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	2b00      	cmp	r3, #0
 8107a76:	d1cb      	bne.n	8107a10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8107a78:	68fb      	ldr	r3, [r7, #12]
 8107a7a:	2b00      	cmp	r3, #0
 8107a7c:	d001      	beq.n	8107a82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8107a7e:	f000 fb5f 	bl	8108140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8107a82:	4b1d      	ldr	r3, [pc, #116]	; (8107af8 <xTaskResumeAll+0x134>)
 8107a84:	681b      	ldr	r3, [r3, #0]
 8107a86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	2b00      	cmp	r3, #0
 8107a8c:	d010      	beq.n	8107ab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8107a8e:	f000 f847 	bl	8107b20 <xTaskIncrementTick>
 8107a92:	4603      	mov	r3, r0
 8107a94:	2b00      	cmp	r3, #0
 8107a96:	d002      	beq.n	8107a9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8107a98:	4b16      	ldr	r3, [pc, #88]	; (8107af4 <xTaskResumeAll+0x130>)
 8107a9a:	2201      	movs	r2, #1
 8107a9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	3b01      	subs	r3, #1
 8107aa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	2b00      	cmp	r3, #0
 8107aa8:	d1f1      	bne.n	8107a8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8107aaa:	4b13      	ldr	r3, [pc, #76]	; (8107af8 <xTaskResumeAll+0x134>)
 8107aac:	2200      	movs	r2, #0
 8107aae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8107ab0:	4b10      	ldr	r3, [pc, #64]	; (8107af4 <xTaskResumeAll+0x130>)
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	2b00      	cmp	r3, #0
 8107ab6:	d009      	beq.n	8107acc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8107ab8:	2301      	movs	r3, #1
 8107aba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8107abc:	4b0f      	ldr	r3, [pc, #60]	; (8107afc <xTaskResumeAll+0x138>)
 8107abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107ac2:	601a      	str	r2, [r3, #0]
 8107ac4:	f3bf 8f4f 	dsb	sy
 8107ac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107acc:	f7fe ff32 	bl	8106934 <vPortExitCritical>

	return xAlreadyYielded;
 8107ad0:	68bb      	ldr	r3, [r7, #8]
}
 8107ad2:	4618      	mov	r0, r3
 8107ad4:	3710      	adds	r7, #16
 8107ad6:	46bd      	mov	sp, r7
 8107ad8:	bd80      	pop	{r7, pc}
 8107ada:	bf00      	nop
 8107adc:	10004c5c 	.word	0x10004c5c
 8107ae0:	10004c34 	.word	0x10004c34
 8107ae4:	10004bf4 	.word	0x10004bf4
 8107ae8:	10004c3c 	.word	0x10004c3c
 8107aec:	10004764 	.word	0x10004764
 8107af0:	10004760 	.word	0x10004760
 8107af4:	10004c48 	.word	0x10004c48
 8107af8:	10004c44 	.word	0x10004c44
 8107afc:	e000ed04 	.word	0xe000ed04

08107b00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8107b00:	b480      	push	{r7}
 8107b02:	b083      	sub	sp, #12
 8107b04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8107b06:	4b05      	ldr	r3, [pc, #20]	; (8107b1c <xTaskGetTickCount+0x1c>)
 8107b08:	681b      	ldr	r3, [r3, #0]
 8107b0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8107b0c:	687b      	ldr	r3, [r7, #4]
}
 8107b0e:	4618      	mov	r0, r3
 8107b10:	370c      	adds	r7, #12
 8107b12:	46bd      	mov	sp, r7
 8107b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b18:	4770      	bx	lr
 8107b1a:	bf00      	nop
 8107b1c:	10004c38 	.word	0x10004c38

08107b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107b20:	b580      	push	{r7, lr}
 8107b22:	b086      	sub	sp, #24
 8107b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107b26:	2300      	movs	r3, #0
 8107b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107b2a:	4b4f      	ldr	r3, [pc, #316]	; (8107c68 <xTaskIncrementTick+0x148>)
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	2b00      	cmp	r3, #0
 8107b30:	f040 808f 	bne.w	8107c52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107b34:	4b4d      	ldr	r3, [pc, #308]	; (8107c6c <xTaskIncrementTick+0x14c>)
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	3301      	adds	r3, #1
 8107b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107b3c:	4a4b      	ldr	r2, [pc, #300]	; (8107c6c <xTaskIncrementTick+0x14c>)
 8107b3e:	693b      	ldr	r3, [r7, #16]
 8107b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107b42:	693b      	ldr	r3, [r7, #16]
 8107b44:	2b00      	cmp	r3, #0
 8107b46:	d120      	bne.n	8107b8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8107b48:	4b49      	ldr	r3, [pc, #292]	; (8107c70 <xTaskIncrementTick+0x150>)
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d00a      	beq.n	8107b68 <xTaskIncrementTick+0x48>
	__asm volatile
 8107b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b56:	f383 8811 	msr	BASEPRI, r3
 8107b5a:	f3bf 8f6f 	isb	sy
 8107b5e:	f3bf 8f4f 	dsb	sy
 8107b62:	603b      	str	r3, [r7, #0]
}
 8107b64:	bf00      	nop
 8107b66:	e7fe      	b.n	8107b66 <xTaskIncrementTick+0x46>
 8107b68:	4b41      	ldr	r3, [pc, #260]	; (8107c70 <xTaskIncrementTick+0x150>)
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	60fb      	str	r3, [r7, #12]
 8107b6e:	4b41      	ldr	r3, [pc, #260]	; (8107c74 <xTaskIncrementTick+0x154>)
 8107b70:	681b      	ldr	r3, [r3, #0]
 8107b72:	4a3f      	ldr	r2, [pc, #252]	; (8107c70 <xTaskIncrementTick+0x150>)
 8107b74:	6013      	str	r3, [r2, #0]
 8107b76:	4a3f      	ldr	r2, [pc, #252]	; (8107c74 <xTaskIncrementTick+0x154>)
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	6013      	str	r3, [r2, #0]
 8107b7c:	4b3e      	ldr	r3, [pc, #248]	; (8107c78 <xTaskIncrementTick+0x158>)
 8107b7e:	681b      	ldr	r3, [r3, #0]
 8107b80:	3301      	adds	r3, #1
 8107b82:	4a3d      	ldr	r2, [pc, #244]	; (8107c78 <xTaskIncrementTick+0x158>)
 8107b84:	6013      	str	r3, [r2, #0]
 8107b86:	f000 fadb 	bl	8108140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107b8a:	4b3c      	ldr	r3, [pc, #240]	; (8107c7c <xTaskIncrementTick+0x15c>)
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	693a      	ldr	r2, [r7, #16]
 8107b90:	429a      	cmp	r2, r3
 8107b92:	d349      	bcc.n	8107c28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107b94:	4b36      	ldr	r3, [pc, #216]	; (8107c70 <xTaskIncrementTick+0x150>)
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	681b      	ldr	r3, [r3, #0]
 8107b9a:	2b00      	cmp	r3, #0
 8107b9c:	d104      	bne.n	8107ba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107b9e:	4b37      	ldr	r3, [pc, #220]	; (8107c7c <xTaskIncrementTick+0x15c>)
 8107ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8107ba4:	601a      	str	r2, [r3, #0]
					break;
 8107ba6:	e03f      	b.n	8107c28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ba8:	4b31      	ldr	r3, [pc, #196]	; (8107c70 <xTaskIncrementTick+0x150>)
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	68db      	ldr	r3, [r3, #12]
 8107bae:	68db      	ldr	r3, [r3, #12]
 8107bb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107bb2:	68bb      	ldr	r3, [r7, #8]
 8107bb4:	685b      	ldr	r3, [r3, #4]
 8107bb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107bb8:	693a      	ldr	r2, [r7, #16]
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	429a      	cmp	r2, r3
 8107bbe:	d203      	bcs.n	8107bc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8107bc0:	4a2e      	ldr	r2, [pc, #184]	; (8107c7c <xTaskIncrementTick+0x15c>)
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107bc6:	e02f      	b.n	8107c28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107bc8:	68bb      	ldr	r3, [r7, #8]
 8107bca:	3304      	adds	r3, #4
 8107bcc:	4618      	mov	r0, r3
 8107bce:	f7fe fd2b 	bl	8106628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107bd2:	68bb      	ldr	r3, [r7, #8]
 8107bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	d004      	beq.n	8107be4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107bda:	68bb      	ldr	r3, [r7, #8]
 8107bdc:	3318      	adds	r3, #24
 8107bde:	4618      	mov	r0, r3
 8107be0:	f7fe fd22 	bl	8106628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107be4:	68bb      	ldr	r3, [r7, #8]
 8107be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107be8:	4b25      	ldr	r3, [pc, #148]	; (8107c80 <xTaskIncrementTick+0x160>)
 8107bea:	681b      	ldr	r3, [r3, #0]
 8107bec:	429a      	cmp	r2, r3
 8107bee:	d903      	bls.n	8107bf8 <xTaskIncrementTick+0xd8>
 8107bf0:	68bb      	ldr	r3, [r7, #8]
 8107bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bf4:	4a22      	ldr	r2, [pc, #136]	; (8107c80 <xTaskIncrementTick+0x160>)
 8107bf6:	6013      	str	r3, [r2, #0]
 8107bf8:	68bb      	ldr	r3, [r7, #8]
 8107bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107bfc:	4613      	mov	r3, r2
 8107bfe:	009b      	lsls	r3, r3, #2
 8107c00:	4413      	add	r3, r2
 8107c02:	009b      	lsls	r3, r3, #2
 8107c04:	4a1f      	ldr	r2, [pc, #124]	; (8107c84 <xTaskIncrementTick+0x164>)
 8107c06:	441a      	add	r2, r3
 8107c08:	68bb      	ldr	r3, [r7, #8]
 8107c0a:	3304      	adds	r3, #4
 8107c0c:	4619      	mov	r1, r3
 8107c0e:	4610      	mov	r0, r2
 8107c10:	f7fe fcad 	bl	810656e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107c14:	68bb      	ldr	r3, [r7, #8]
 8107c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107c18:	4b1b      	ldr	r3, [pc, #108]	; (8107c88 <xTaskIncrementTick+0x168>)
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c1e:	429a      	cmp	r2, r3
 8107c20:	d3b8      	bcc.n	8107b94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8107c22:	2301      	movs	r3, #1
 8107c24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107c26:	e7b5      	b.n	8107b94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107c28:	4b17      	ldr	r3, [pc, #92]	; (8107c88 <xTaskIncrementTick+0x168>)
 8107c2a:	681b      	ldr	r3, [r3, #0]
 8107c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107c2e:	4915      	ldr	r1, [pc, #84]	; (8107c84 <xTaskIncrementTick+0x164>)
 8107c30:	4613      	mov	r3, r2
 8107c32:	009b      	lsls	r3, r3, #2
 8107c34:	4413      	add	r3, r2
 8107c36:	009b      	lsls	r3, r3, #2
 8107c38:	440b      	add	r3, r1
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	2b01      	cmp	r3, #1
 8107c3e:	d901      	bls.n	8107c44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8107c40:	2301      	movs	r3, #1
 8107c42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8107c44:	4b11      	ldr	r3, [pc, #68]	; (8107c8c <xTaskIncrementTick+0x16c>)
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	2b00      	cmp	r3, #0
 8107c4a:	d007      	beq.n	8107c5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8107c4c:	2301      	movs	r3, #1
 8107c4e:	617b      	str	r3, [r7, #20]
 8107c50:	e004      	b.n	8107c5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8107c52:	4b0f      	ldr	r3, [pc, #60]	; (8107c90 <xTaskIncrementTick+0x170>)
 8107c54:	681b      	ldr	r3, [r3, #0]
 8107c56:	3301      	adds	r3, #1
 8107c58:	4a0d      	ldr	r2, [pc, #52]	; (8107c90 <xTaskIncrementTick+0x170>)
 8107c5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8107c5c:	697b      	ldr	r3, [r7, #20]
}
 8107c5e:	4618      	mov	r0, r3
 8107c60:	3718      	adds	r7, #24
 8107c62:	46bd      	mov	sp, r7
 8107c64:	bd80      	pop	{r7, pc}
 8107c66:	bf00      	nop
 8107c68:	10004c5c 	.word	0x10004c5c
 8107c6c:	10004c38 	.word	0x10004c38
 8107c70:	10004bec 	.word	0x10004bec
 8107c74:	10004bf0 	.word	0x10004bf0
 8107c78:	10004c4c 	.word	0x10004c4c
 8107c7c:	10004c54 	.word	0x10004c54
 8107c80:	10004c3c 	.word	0x10004c3c
 8107c84:	10004764 	.word	0x10004764
 8107c88:	10004760 	.word	0x10004760
 8107c8c:	10004c48 	.word	0x10004c48
 8107c90:	10004c44 	.word	0x10004c44

08107c94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107c94:	b480      	push	{r7}
 8107c96:	b085      	sub	sp, #20
 8107c98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107c9a:	4b2a      	ldr	r3, [pc, #168]	; (8107d44 <vTaskSwitchContext+0xb0>)
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	2b00      	cmp	r3, #0
 8107ca0:	d003      	beq.n	8107caa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8107ca2:	4b29      	ldr	r3, [pc, #164]	; (8107d48 <vTaskSwitchContext+0xb4>)
 8107ca4:	2201      	movs	r2, #1
 8107ca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107ca8:	e046      	b.n	8107d38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8107caa:	4b27      	ldr	r3, [pc, #156]	; (8107d48 <vTaskSwitchContext+0xb4>)
 8107cac:	2200      	movs	r2, #0
 8107cae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107cb0:	4b26      	ldr	r3, [pc, #152]	; (8107d4c <vTaskSwitchContext+0xb8>)
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	60fb      	str	r3, [r7, #12]
 8107cb6:	e010      	b.n	8107cda <vTaskSwitchContext+0x46>
 8107cb8:	68fb      	ldr	r3, [r7, #12]
 8107cba:	2b00      	cmp	r3, #0
 8107cbc:	d10a      	bne.n	8107cd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8107cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107cc2:	f383 8811 	msr	BASEPRI, r3
 8107cc6:	f3bf 8f6f 	isb	sy
 8107cca:	f3bf 8f4f 	dsb	sy
 8107cce:	607b      	str	r3, [r7, #4]
}
 8107cd0:	bf00      	nop
 8107cd2:	e7fe      	b.n	8107cd2 <vTaskSwitchContext+0x3e>
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	3b01      	subs	r3, #1
 8107cd8:	60fb      	str	r3, [r7, #12]
 8107cda:	491d      	ldr	r1, [pc, #116]	; (8107d50 <vTaskSwitchContext+0xbc>)
 8107cdc:	68fa      	ldr	r2, [r7, #12]
 8107cde:	4613      	mov	r3, r2
 8107ce0:	009b      	lsls	r3, r3, #2
 8107ce2:	4413      	add	r3, r2
 8107ce4:	009b      	lsls	r3, r3, #2
 8107ce6:	440b      	add	r3, r1
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	2b00      	cmp	r3, #0
 8107cec:	d0e4      	beq.n	8107cb8 <vTaskSwitchContext+0x24>
 8107cee:	68fa      	ldr	r2, [r7, #12]
 8107cf0:	4613      	mov	r3, r2
 8107cf2:	009b      	lsls	r3, r3, #2
 8107cf4:	4413      	add	r3, r2
 8107cf6:	009b      	lsls	r3, r3, #2
 8107cf8:	4a15      	ldr	r2, [pc, #84]	; (8107d50 <vTaskSwitchContext+0xbc>)
 8107cfa:	4413      	add	r3, r2
 8107cfc:	60bb      	str	r3, [r7, #8]
 8107cfe:	68bb      	ldr	r3, [r7, #8]
 8107d00:	685b      	ldr	r3, [r3, #4]
 8107d02:	685a      	ldr	r2, [r3, #4]
 8107d04:	68bb      	ldr	r3, [r7, #8]
 8107d06:	605a      	str	r2, [r3, #4]
 8107d08:	68bb      	ldr	r3, [r7, #8]
 8107d0a:	685a      	ldr	r2, [r3, #4]
 8107d0c:	68bb      	ldr	r3, [r7, #8]
 8107d0e:	3308      	adds	r3, #8
 8107d10:	429a      	cmp	r2, r3
 8107d12:	d104      	bne.n	8107d1e <vTaskSwitchContext+0x8a>
 8107d14:	68bb      	ldr	r3, [r7, #8]
 8107d16:	685b      	ldr	r3, [r3, #4]
 8107d18:	685a      	ldr	r2, [r3, #4]
 8107d1a:	68bb      	ldr	r3, [r7, #8]
 8107d1c:	605a      	str	r2, [r3, #4]
 8107d1e:	68bb      	ldr	r3, [r7, #8]
 8107d20:	685b      	ldr	r3, [r3, #4]
 8107d22:	68db      	ldr	r3, [r3, #12]
 8107d24:	4a0b      	ldr	r2, [pc, #44]	; (8107d54 <vTaskSwitchContext+0xc0>)
 8107d26:	6013      	str	r3, [r2, #0]
 8107d28:	4a08      	ldr	r2, [pc, #32]	; (8107d4c <vTaskSwitchContext+0xb8>)
 8107d2a:	68fb      	ldr	r3, [r7, #12]
 8107d2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8107d2e:	4b09      	ldr	r3, [pc, #36]	; (8107d54 <vTaskSwitchContext+0xc0>)
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	3354      	adds	r3, #84	; 0x54
 8107d34:	4a08      	ldr	r2, [pc, #32]	; (8107d58 <vTaskSwitchContext+0xc4>)
 8107d36:	6013      	str	r3, [r2, #0]
}
 8107d38:	bf00      	nop
 8107d3a:	3714      	adds	r7, #20
 8107d3c:	46bd      	mov	sp, r7
 8107d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d42:	4770      	bx	lr
 8107d44:	10004c5c 	.word	0x10004c5c
 8107d48:	10004c48 	.word	0x10004c48
 8107d4c:	10004c3c 	.word	0x10004c3c
 8107d50:	10004764 	.word	0x10004764
 8107d54:	10004760 	.word	0x10004760
 8107d58:	1000002c 	.word	0x1000002c

08107d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8107d5c:	b580      	push	{r7, lr}
 8107d5e:	b084      	sub	sp, #16
 8107d60:	af00      	add	r7, sp, #0
 8107d62:	6078      	str	r0, [r7, #4]
 8107d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	2b00      	cmp	r3, #0
 8107d6a:	d10a      	bne.n	8107d82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8107d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107d70:	f383 8811 	msr	BASEPRI, r3
 8107d74:	f3bf 8f6f 	isb	sy
 8107d78:	f3bf 8f4f 	dsb	sy
 8107d7c:	60fb      	str	r3, [r7, #12]
}
 8107d7e:	bf00      	nop
 8107d80:	e7fe      	b.n	8107d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107d82:	4b07      	ldr	r3, [pc, #28]	; (8107da0 <vTaskPlaceOnEventList+0x44>)
 8107d84:	681b      	ldr	r3, [r3, #0]
 8107d86:	3318      	adds	r3, #24
 8107d88:	4619      	mov	r1, r3
 8107d8a:	6878      	ldr	r0, [r7, #4]
 8107d8c:	f7fe fc13 	bl	81065b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8107d90:	2101      	movs	r1, #1
 8107d92:	6838      	ldr	r0, [r7, #0]
 8107d94:	f000 fa80 	bl	8108298 <prvAddCurrentTaskToDelayedList>
}
 8107d98:	bf00      	nop
 8107d9a:	3710      	adds	r7, #16
 8107d9c:	46bd      	mov	sp, r7
 8107d9e:	bd80      	pop	{r7, pc}
 8107da0:	10004760 	.word	0x10004760

08107da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107da4:	b580      	push	{r7, lr}
 8107da6:	b086      	sub	sp, #24
 8107da8:	af00      	add	r7, sp, #0
 8107daa:	60f8      	str	r0, [r7, #12]
 8107dac:	60b9      	str	r1, [r7, #8]
 8107dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8107db0:	68fb      	ldr	r3, [r7, #12]
 8107db2:	2b00      	cmp	r3, #0
 8107db4:	d10a      	bne.n	8107dcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8107db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107dba:	f383 8811 	msr	BASEPRI, r3
 8107dbe:	f3bf 8f6f 	isb	sy
 8107dc2:	f3bf 8f4f 	dsb	sy
 8107dc6:	617b      	str	r3, [r7, #20]
}
 8107dc8:	bf00      	nop
 8107dca:	e7fe      	b.n	8107dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107dcc:	4b0a      	ldr	r3, [pc, #40]	; (8107df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	3318      	adds	r3, #24
 8107dd2:	4619      	mov	r1, r3
 8107dd4:	68f8      	ldr	r0, [r7, #12]
 8107dd6:	f7fe fbca 	bl	810656e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	2b00      	cmp	r3, #0
 8107dde:	d002      	beq.n	8107de6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8107de0:	f04f 33ff 	mov.w	r3, #4294967295
 8107de4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107de6:	6879      	ldr	r1, [r7, #4]
 8107de8:	68b8      	ldr	r0, [r7, #8]
 8107dea:	f000 fa55 	bl	8108298 <prvAddCurrentTaskToDelayedList>
	}
 8107dee:	bf00      	nop
 8107df0:	3718      	adds	r7, #24
 8107df2:	46bd      	mov	sp, r7
 8107df4:	bd80      	pop	{r7, pc}
 8107df6:	bf00      	nop
 8107df8:	10004760 	.word	0x10004760

08107dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107dfc:	b580      	push	{r7, lr}
 8107dfe:	b086      	sub	sp, #24
 8107e00:	af00      	add	r7, sp, #0
 8107e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	68db      	ldr	r3, [r3, #12]
 8107e08:	68db      	ldr	r3, [r3, #12]
 8107e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107e0c:	693b      	ldr	r3, [r7, #16]
 8107e0e:	2b00      	cmp	r3, #0
 8107e10:	d10a      	bne.n	8107e28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8107e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e16:	f383 8811 	msr	BASEPRI, r3
 8107e1a:	f3bf 8f6f 	isb	sy
 8107e1e:	f3bf 8f4f 	dsb	sy
 8107e22:	60fb      	str	r3, [r7, #12]
}
 8107e24:	bf00      	nop
 8107e26:	e7fe      	b.n	8107e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107e28:	693b      	ldr	r3, [r7, #16]
 8107e2a:	3318      	adds	r3, #24
 8107e2c:	4618      	mov	r0, r3
 8107e2e:	f7fe fbfb 	bl	8106628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107e32:	4b1e      	ldr	r3, [pc, #120]	; (8107eac <xTaskRemoveFromEventList+0xb0>)
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	2b00      	cmp	r3, #0
 8107e38:	d11d      	bne.n	8107e76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107e3a:	693b      	ldr	r3, [r7, #16]
 8107e3c:	3304      	adds	r3, #4
 8107e3e:	4618      	mov	r0, r3
 8107e40:	f7fe fbf2 	bl	8106628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107e44:	693b      	ldr	r3, [r7, #16]
 8107e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107e48:	4b19      	ldr	r3, [pc, #100]	; (8107eb0 <xTaskRemoveFromEventList+0xb4>)
 8107e4a:	681b      	ldr	r3, [r3, #0]
 8107e4c:	429a      	cmp	r2, r3
 8107e4e:	d903      	bls.n	8107e58 <xTaskRemoveFromEventList+0x5c>
 8107e50:	693b      	ldr	r3, [r7, #16]
 8107e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e54:	4a16      	ldr	r2, [pc, #88]	; (8107eb0 <xTaskRemoveFromEventList+0xb4>)
 8107e56:	6013      	str	r3, [r2, #0]
 8107e58:	693b      	ldr	r3, [r7, #16]
 8107e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107e5c:	4613      	mov	r3, r2
 8107e5e:	009b      	lsls	r3, r3, #2
 8107e60:	4413      	add	r3, r2
 8107e62:	009b      	lsls	r3, r3, #2
 8107e64:	4a13      	ldr	r2, [pc, #76]	; (8107eb4 <xTaskRemoveFromEventList+0xb8>)
 8107e66:	441a      	add	r2, r3
 8107e68:	693b      	ldr	r3, [r7, #16]
 8107e6a:	3304      	adds	r3, #4
 8107e6c:	4619      	mov	r1, r3
 8107e6e:	4610      	mov	r0, r2
 8107e70:	f7fe fb7d 	bl	810656e <vListInsertEnd>
 8107e74:	e005      	b.n	8107e82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107e76:	693b      	ldr	r3, [r7, #16]
 8107e78:	3318      	adds	r3, #24
 8107e7a:	4619      	mov	r1, r3
 8107e7c:	480e      	ldr	r0, [pc, #56]	; (8107eb8 <xTaskRemoveFromEventList+0xbc>)
 8107e7e:	f7fe fb76 	bl	810656e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107e82:	693b      	ldr	r3, [r7, #16]
 8107e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107e86:	4b0d      	ldr	r3, [pc, #52]	; (8107ebc <xTaskRemoveFromEventList+0xc0>)
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e8c:	429a      	cmp	r2, r3
 8107e8e:	d905      	bls.n	8107e9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8107e90:	2301      	movs	r3, #1
 8107e92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8107e94:	4b0a      	ldr	r3, [pc, #40]	; (8107ec0 <xTaskRemoveFromEventList+0xc4>)
 8107e96:	2201      	movs	r2, #1
 8107e98:	601a      	str	r2, [r3, #0]
 8107e9a:	e001      	b.n	8107ea0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8107e9c:	2300      	movs	r3, #0
 8107e9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8107ea0:	697b      	ldr	r3, [r7, #20]
}
 8107ea2:	4618      	mov	r0, r3
 8107ea4:	3718      	adds	r7, #24
 8107ea6:	46bd      	mov	sp, r7
 8107ea8:	bd80      	pop	{r7, pc}
 8107eaa:	bf00      	nop
 8107eac:	10004c5c 	.word	0x10004c5c
 8107eb0:	10004c3c 	.word	0x10004c3c
 8107eb4:	10004764 	.word	0x10004764
 8107eb8:	10004bf4 	.word	0x10004bf4
 8107ebc:	10004760 	.word	0x10004760
 8107ec0:	10004c48 	.word	0x10004c48

08107ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107ec4:	b480      	push	{r7}
 8107ec6:	b083      	sub	sp, #12
 8107ec8:	af00      	add	r7, sp, #0
 8107eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107ecc:	4b06      	ldr	r3, [pc, #24]	; (8107ee8 <vTaskInternalSetTimeOutState+0x24>)
 8107ece:	681a      	ldr	r2, [r3, #0]
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107ed4:	4b05      	ldr	r3, [pc, #20]	; (8107eec <vTaskInternalSetTimeOutState+0x28>)
 8107ed6:	681a      	ldr	r2, [r3, #0]
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	605a      	str	r2, [r3, #4]
}
 8107edc:	bf00      	nop
 8107ede:	370c      	adds	r7, #12
 8107ee0:	46bd      	mov	sp, r7
 8107ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ee6:	4770      	bx	lr
 8107ee8:	10004c4c 	.word	0x10004c4c
 8107eec:	10004c38 	.word	0x10004c38

08107ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8107ef0:	b580      	push	{r7, lr}
 8107ef2:	b088      	sub	sp, #32
 8107ef4:	af00      	add	r7, sp, #0
 8107ef6:	6078      	str	r0, [r7, #4]
 8107ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	2b00      	cmp	r3, #0
 8107efe:	d10a      	bne.n	8107f16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8107f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f04:	f383 8811 	msr	BASEPRI, r3
 8107f08:	f3bf 8f6f 	isb	sy
 8107f0c:	f3bf 8f4f 	dsb	sy
 8107f10:	613b      	str	r3, [r7, #16]
}
 8107f12:	bf00      	nop
 8107f14:	e7fe      	b.n	8107f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8107f16:	683b      	ldr	r3, [r7, #0]
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	d10a      	bne.n	8107f32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8107f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f20:	f383 8811 	msr	BASEPRI, r3
 8107f24:	f3bf 8f6f 	isb	sy
 8107f28:	f3bf 8f4f 	dsb	sy
 8107f2c:	60fb      	str	r3, [r7, #12]
}
 8107f2e:	bf00      	nop
 8107f30:	e7fe      	b.n	8107f30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8107f32:	f7fe fccf 	bl	81068d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107f36:	4b1d      	ldr	r3, [pc, #116]	; (8107fac <xTaskCheckForTimeOut+0xbc>)
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	685b      	ldr	r3, [r3, #4]
 8107f40:	69ba      	ldr	r2, [r7, #24]
 8107f42:	1ad3      	subs	r3, r2, r3
 8107f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107f46:	683b      	ldr	r3, [r7, #0]
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107f4e:	d102      	bne.n	8107f56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107f50:	2300      	movs	r3, #0
 8107f52:	61fb      	str	r3, [r7, #28]
 8107f54:	e023      	b.n	8107f9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	681a      	ldr	r2, [r3, #0]
 8107f5a:	4b15      	ldr	r3, [pc, #84]	; (8107fb0 <xTaskCheckForTimeOut+0xc0>)
 8107f5c:	681b      	ldr	r3, [r3, #0]
 8107f5e:	429a      	cmp	r2, r3
 8107f60:	d007      	beq.n	8107f72 <xTaskCheckForTimeOut+0x82>
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	685b      	ldr	r3, [r3, #4]
 8107f66:	69ba      	ldr	r2, [r7, #24]
 8107f68:	429a      	cmp	r2, r3
 8107f6a:	d302      	bcc.n	8107f72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8107f6c:	2301      	movs	r3, #1
 8107f6e:	61fb      	str	r3, [r7, #28]
 8107f70:	e015      	b.n	8107f9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8107f72:	683b      	ldr	r3, [r7, #0]
 8107f74:	681b      	ldr	r3, [r3, #0]
 8107f76:	697a      	ldr	r2, [r7, #20]
 8107f78:	429a      	cmp	r2, r3
 8107f7a:	d20b      	bcs.n	8107f94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8107f7c:	683b      	ldr	r3, [r7, #0]
 8107f7e:	681a      	ldr	r2, [r3, #0]
 8107f80:	697b      	ldr	r3, [r7, #20]
 8107f82:	1ad2      	subs	r2, r2, r3
 8107f84:	683b      	ldr	r3, [r7, #0]
 8107f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8107f88:	6878      	ldr	r0, [r7, #4]
 8107f8a:	f7ff ff9b 	bl	8107ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8107f8e:	2300      	movs	r3, #0
 8107f90:	61fb      	str	r3, [r7, #28]
 8107f92:	e004      	b.n	8107f9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8107f94:	683b      	ldr	r3, [r7, #0]
 8107f96:	2200      	movs	r2, #0
 8107f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8107f9a:	2301      	movs	r3, #1
 8107f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8107f9e:	f7fe fcc9 	bl	8106934 <vPortExitCritical>

	return xReturn;
 8107fa2:	69fb      	ldr	r3, [r7, #28]
}
 8107fa4:	4618      	mov	r0, r3
 8107fa6:	3720      	adds	r7, #32
 8107fa8:	46bd      	mov	sp, r7
 8107faa:	bd80      	pop	{r7, pc}
 8107fac:	10004c38 	.word	0x10004c38
 8107fb0:	10004c4c 	.word	0x10004c4c

08107fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8107fb4:	b480      	push	{r7}
 8107fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8107fb8:	4b03      	ldr	r3, [pc, #12]	; (8107fc8 <vTaskMissedYield+0x14>)
 8107fba:	2201      	movs	r2, #1
 8107fbc:	601a      	str	r2, [r3, #0]
}
 8107fbe:	bf00      	nop
 8107fc0:	46bd      	mov	sp, r7
 8107fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fc6:	4770      	bx	lr
 8107fc8:	10004c48 	.word	0x10004c48

08107fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8107fcc:	b580      	push	{r7, lr}
 8107fce:	b082      	sub	sp, #8
 8107fd0:	af00      	add	r7, sp, #0
 8107fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107fd4:	f000 f852 	bl	810807c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107fd8:	4b06      	ldr	r3, [pc, #24]	; (8107ff4 <prvIdleTask+0x28>)
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	2b01      	cmp	r3, #1
 8107fde:	d9f9      	bls.n	8107fd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8107fe0:	4b05      	ldr	r3, [pc, #20]	; (8107ff8 <prvIdleTask+0x2c>)
 8107fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107fe6:	601a      	str	r2, [r3, #0]
 8107fe8:	f3bf 8f4f 	dsb	sy
 8107fec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107ff0:	e7f0      	b.n	8107fd4 <prvIdleTask+0x8>
 8107ff2:	bf00      	nop
 8107ff4:	10004764 	.word	0x10004764
 8107ff8:	e000ed04 	.word	0xe000ed04

08107ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107ffc:	b580      	push	{r7, lr}
 8107ffe:	b082      	sub	sp, #8
 8108000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8108002:	2300      	movs	r3, #0
 8108004:	607b      	str	r3, [r7, #4]
 8108006:	e00c      	b.n	8108022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8108008:	687a      	ldr	r2, [r7, #4]
 810800a:	4613      	mov	r3, r2
 810800c:	009b      	lsls	r3, r3, #2
 810800e:	4413      	add	r3, r2
 8108010:	009b      	lsls	r3, r3, #2
 8108012:	4a12      	ldr	r2, [pc, #72]	; (810805c <prvInitialiseTaskLists+0x60>)
 8108014:	4413      	add	r3, r2
 8108016:	4618      	mov	r0, r3
 8108018:	f7fe fa7c 	bl	8106514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	3301      	adds	r3, #1
 8108020:	607b      	str	r3, [r7, #4]
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	2b37      	cmp	r3, #55	; 0x37
 8108026:	d9ef      	bls.n	8108008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8108028:	480d      	ldr	r0, [pc, #52]	; (8108060 <prvInitialiseTaskLists+0x64>)
 810802a:	f7fe fa73 	bl	8106514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810802e:	480d      	ldr	r0, [pc, #52]	; (8108064 <prvInitialiseTaskLists+0x68>)
 8108030:	f7fe fa70 	bl	8106514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8108034:	480c      	ldr	r0, [pc, #48]	; (8108068 <prvInitialiseTaskLists+0x6c>)
 8108036:	f7fe fa6d 	bl	8106514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810803a:	480c      	ldr	r0, [pc, #48]	; (810806c <prvInitialiseTaskLists+0x70>)
 810803c:	f7fe fa6a 	bl	8106514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8108040:	480b      	ldr	r0, [pc, #44]	; (8108070 <prvInitialiseTaskLists+0x74>)
 8108042:	f7fe fa67 	bl	8106514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8108046:	4b0b      	ldr	r3, [pc, #44]	; (8108074 <prvInitialiseTaskLists+0x78>)
 8108048:	4a05      	ldr	r2, [pc, #20]	; (8108060 <prvInitialiseTaskLists+0x64>)
 810804a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810804c:	4b0a      	ldr	r3, [pc, #40]	; (8108078 <prvInitialiseTaskLists+0x7c>)
 810804e:	4a05      	ldr	r2, [pc, #20]	; (8108064 <prvInitialiseTaskLists+0x68>)
 8108050:	601a      	str	r2, [r3, #0]
}
 8108052:	bf00      	nop
 8108054:	3708      	adds	r7, #8
 8108056:	46bd      	mov	sp, r7
 8108058:	bd80      	pop	{r7, pc}
 810805a:	bf00      	nop
 810805c:	10004764 	.word	0x10004764
 8108060:	10004bc4 	.word	0x10004bc4
 8108064:	10004bd8 	.word	0x10004bd8
 8108068:	10004bf4 	.word	0x10004bf4
 810806c:	10004c08 	.word	0x10004c08
 8108070:	10004c20 	.word	0x10004c20
 8108074:	10004bec 	.word	0x10004bec
 8108078:	10004bf0 	.word	0x10004bf0

0810807c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810807c:	b580      	push	{r7, lr}
 810807e:	b082      	sub	sp, #8
 8108080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8108082:	e019      	b.n	81080b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8108084:	f7fe fc26 	bl	81068d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108088:	4b10      	ldr	r3, [pc, #64]	; (81080cc <prvCheckTasksWaitingTermination+0x50>)
 810808a:	68db      	ldr	r3, [r3, #12]
 810808c:	68db      	ldr	r3, [r3, #12]
 810808e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	3304      	adds	r3, #4
 8108094:	4618      	mov	r0, r3
 8108096:	f7fe fac7 	bl	8106628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810809a:	4b0d      	ldr	r3, [pc, #52]	; (81080d0 <prvCheckTasksWaitingTermination+0x54>)
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	3b01      	subs	r3, #1
 81080a0:	4a0b      	ldr	r2, [pc, #44]	; (81080d0 <prvCheckTasksWaitingTermination+0x54>)
 81080a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81080a4:	4b0b      	ldr	r3, [pc, #44]	; (81080d4 <prvCheckTasksWaitingTermination+0x58>)
 81080a6:	681b      	ldr	r3, [r3, #0]
 81080a8:	3b01      	subs	r3, #1
 81080aa:	4a0a      	ldr	r2, [pc, #40]	; (81080d4 <prvCheckTasksWaitingTermination+0x58>)
 81080ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81080ae:	f7fe fc41 	bl	8106934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81080b2:	6878      	ldr	r0, [r7, #4]
 81080b4:	f000 f810 	bl	81080d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81080b8:	4b06      	ldr	r3, [pc, #24]	; (81080d4 <prvCheckTasksWaitingTermination+0x58>)
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	2b00      	cmp	r3, #0
 81080be:	d1e1      	bne.n	8108084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81080c0:	bf00      	nop
 81080c2:	bf00      	nop
 81080c4:	3708      	adds	r7, #8
 81080c6:	46bd      	mov	sp, r7
 81080c8:	bd80      	pop	{r7, pc}
 81080ca:	bf00      	nop
 81080cc:	10004c08 	.word	0x10004c08
 81080d0:	10004c34 	.word	0x10004c34
 81080d4:	10004c1c 	.word	0x10004c1c

081080d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81080d8:	b580      	push	{r7, lr}
 81080da:	b084      	sub	sp, #16
 81080dc:	af00      	add	r7, sp, #0
 81080de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	3354      	adds	r3, #84	; 0x54
 81080e4:	4618      	mov	r0, r3
 81080e6:	f001 fd89 	bl	8109bfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d108      	bne.n	8108106 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080f8:	4618      	mov	r0, r3
 81080fa:	f7fe f8ed 	bl	81062d8 <vPortFree>
				vPortFree( pxTCB );
 81080fe:	6878      	ldr	r0, [r7, #4]
 8108100:	f7fe f8ea 	bl	81062d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8108104:	e018      	b.n	8108138 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810810c:	2b01      	cmp	r3, #1
 810810e:	d103      	bne.n	8108118 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8108110:	6878      	ldr	r0, [r7, #4]
 8108112:	f7fe f8e1 	bl	81062d8 <vPortFree>
	}
 8108116:	e00f      	b.n	8108138 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810811e:	2b02      	cmp	r3, #2
 8108120:	d00a      	beq.n	8108138 <prvDeleteTCB+0x60>
	__asm volatile
 8108122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108126:	f383 8811 	msr	BASEPRI, r3
 810812a:	f3bf 8f6f 	isb	sy
 810812e:	f3bf 8f4f 	dsb	sy
 8108132:	60fb      	str	r3, [r7, #12]
}
 8108134:	bf00      	nop
 8108136:	e7fe      	b.n	8108136 <prvDeleteTCB+0x5e>
	}
 8108138:	bf00      	nop
 810813a:	3710      	adds	r7, #16
 810813c:	46bd      	mov	sp, r7
 810813e:	bd80      	pop	{r7, pc}

08108140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8108140:	b480      	push	{r7}
 8108142:	b083      	sub	sp, #12
 8108144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8108146:	4b0c      	ldr	r3, [pc, #48]	; (8108178 <prvResetNextTaskUnblockTime+0x38>)
 8108148:	681b      	ldr	r3, [r3, #0]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	2b00      	cmp	r3, #0
 810814e:	d104      	bne.n	810815a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8108150:	4b0a      	ldr	r3, [pc, #40]	; (810817c <prvResetNextTaskUnblockTime+0x3c>)
 8108152:	f04f 32ff 	mov.w	r2, #4294967295
 8108156:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8108158:	e008      	b.n	810816c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810815a:	4b07      	ldr	r3, [pc, #28]	; (8108178 <prvResetNextTaskUnblockTime+0x38>)
 810815c:	681b      	ldr	r3, [r3, #0]
 810815e:	68db      	ldr	r3, [r3, #12]
 8108160:	68db      	ldr	r3, [r3, #12]
 8108162:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	685b      	ldr	r3, [r3, #4]
 8108168:	4a04      	ldr	r2, [pc, #16]	; (810817c <prvResetNextTaskUnblockTime+0x3c>)
 810816a:	6013      	str	r3, [r2, #0]
}
 810816c:	bf00      	nop
 810816e:	370c      	adds	r7, #12
 8108170:	46bd      	mov	sp, r7
 8108172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108176:	4770      	bx	lr
 8108178:	10004bec 	.word	0x10004bec
 810817c:	10004c54 	.word	0x10004c54

08108180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8108180:	b480      	push	{r7}
 8108182:	b083      	sub	sp, #12
 8108184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8108186:	4b0b      	ldr	r3, [pc, #44]	; (81081b4 <xTaskGetSchedulerState+0x34>)
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	2b00      	cmp	r3, #0
 810818c:	d102      	bne.n	8108194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810818e:	2301      	movs	r3, #1
 8108190:	607b      	str	r3, [r7, #4]
 8108192:	e008      	b.n	81081a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8108194:	4b08      	ldr	r3, [pc, #32]	; (81081b8 <xTaskGetSchedulerState+0x38>)
 8108196:	681b      	ldr	r3, [r3, #0]
 8108198:	2b00      	cmp	r3, #0
 810819a:	d102      	bne.n	81081a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810819c:	2302      	movs	r3, #2
 810819e:	607b      	str	r3, [r7, #4]
 81081a0:	e001      	b.n	81081a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81081a2:	2300      	movs	r3, #0
 81081a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81081a6:	687b      	ldr	r3, [r7, #4]
	}
 81081a8:	4618      	mov	r0, r3
 81081aa:	370c      	adds	r7, #12
 81081ac:	46bd      	mov	sp, r7
 81081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081b2:	4770      	bx	lr
 81081b4:	10004c40 	.word	0x10004c40
 81081b8:	10004c5c 	.word	0x10004c5c

081081bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81081bc:	b580      	push	{r7, lr}
 81081be:	b086      	sub	sp, #24
 81081c0:	af00      	add	r7, sp, #0
 81081c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81081c4:	687b      	ldr	r3, [r7, #4]
 81081c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81081c8:	2300      	movs	r3, #0
 81081ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	2b00      	cmp	r3, #0
 81081d0:	d056      	beq.n	8108280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81081d2:	4b2e      	ldr	r3, [pc, #184]	; (810828c <xTaskPriorityDisinherit+0xd0>)
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	693a      	ldr	r2, [r7, #16]
 81081d8:	429a      	cmp	r2, r3
 81081da:	d00a      	beq.n	81081f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 81081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81081e0:	f383 8811 	msr	BASEPRI, r3
 81081e4:	f3bf 8f6f 	isb	sy
 81081e8:	f3bf 8f4f 	dsb	sy
 81081ec:	60fb      	str	r3, [r7, #12]
}
 81081ee:	bf00      	nop
 81081f0:	e7fe      	b.n	81081f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81081f2:	693b      	ldr	r3, [r7, #16]
 81081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081f6:	2b00      	cmp	r3, #0
 81081f8:	d10a      	bne.n	8108210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 81081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81081fe:	f383 8811 	msr	BASEPRI, r3
 8108202:	f3bf 8f6f 	isb	sy
 8108206:	f3bf 8f4f 	dsb	sy
 810820a:	60bb      	str	r3, [r7, #8]
}
 810820c:	bf00      	nop
 810820e:	e7fe      	b.n	810820e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8108210:	693b      	ldr	r3, [r7, #16]
 8108212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108214:	1e5a      	subs	r2, r3, #1
 8108216:	693b      	ldr	r3, [r7, #16]
 8108218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810821a:	693b      	ldr	r3, [r7, #16]
 810821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810821e:	693b      	ldr	r3, [r7, #16]
 8108220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108222:	429a      	cmp	r2, r3
 8108224:	d02c      	beq.n	8108280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8108226:	693b      	ldr	r3, [r7, #16]
 8108228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810822a:	2b00      	cmp	r3, #0
 810822c:	d128      	bne.n	8108280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810822e:	693b      	ldr	r3, [r7, #16]
 8108230:	3304      	adds	r3, #4
 8108232:	4618      	mov	r0, r3
 8108234:	f7fe f9f8 	bl	8106628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8108238:	693b      	ldr	r3, [r7, #16]
 810823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810823c:	693b      	ldr	r3, [r7, #16]
 810823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108240:	693b      	ldr	r3, [r7, #16]
 8108242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8108248:	693b      	ldr	r3, [r7, #16]
 810824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810824c:	693b      	ldr	r3, [r7, #16]
 810824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108250:	4b0f      	ldr	r3, [pc, #60]	; (8108290 <xTaskPriorityDisinherit+0xd4>)
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	429a      	cmp	r2, r3
 8108256:	d903      	bls.n	8108260 <xTaskPriorityDisinherit+0xa4>
 8108258:	693b      	ldr	r3, [r7, #16]
 810825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810825c:	4a0c      	ldr	r2, [pc, #48]	; (8108290 <xTaskPriorityDisinherit+0xd4>)
 810825e:	6013      	str	r3, [r2, #0]
 8108260:	693b      	ldr	r3, [r7, #16]
 8108262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108264:	4613      	mov	r3, r2
 8108266:	009b      	lsls	r3, r3, #2
 8108268:	4413      	add	r3, r2
 810826a:	009b      	lsls	r3, r3, #2
 810826c:	4a09      	ldr	r2, [pc, #36]	; (8108294 <xTaskPriorityDisinherit+0xd8>)
 810826e:	441a      	add	r2, r3
 8108270:	693b      	ldr	r3, [r7, #16]
 8108272:	3304      	adds	r3, #4
 8108274:	4619      	mov	r1, r3
 8108276:	4610      	mov	r0, r2
 8108278:	f7fe f979 	bl	810656e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810827c:	2301      	movs	r3, #1
 810827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8108280:	697b      	ldr	r3, [r7, #20]
	}
 8108282:	4618      	mov	r0, r3
 8108284:	3718      	adds	r7, #24
 8108286:	46bd      	mov	sp, r7
 8108288:	bd80      	pop	{r7, pc}
 810828a:	bf00      	nop
 810828c:	10004760 	.word	0x10004760
 8108290:	10004c3c 	.word	0x10004c3c
 8108294:	10004764 	.word	0x10004764

08108298 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8108298:	b580      	push	{r7, lr}
 810829a:	b084      	sub	sp, #16
 810829c:	af00      	add	r7, sp, #0
 810829e:	6078      	str	r0, [r7, #4]
 81082a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81082a2:	4b21      	ldr	r3, [pc, #132]	; (8108328 <prvAddCurrentTaskToDelayedList+0x90>)
 81082a4:	681b      	ldr	r3, [r3, #0]
 81082a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81082a8:	4b20      	ldr	r3, [pc, #128]	; (810832c <prvAddCurrentTaskToDelayedList+0x94>)
 81082aa:	681b      	ldr	r3, [r3, #0]
 81082ac:	3304      	adds	r3, #4
 81082ae:	4618      	mov	r0, r3
 81082b0:	f7fe f9ba 	bl	8106628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81082ba:	d10a      	bne.n	81082d2 <prvAddCurrentTaskToDelayedList+0x3a>
 81082bc:	683b      	ldr	r3, [r7, #0]
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d007      	beq.n	81082d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81082c2:	4b1a      	ldr	r3, [pc, #104]	; (810832c <prvAddCurrentTaskToDelayedList+0x94>)
 81082c4:	681b      	ldr	r3, [r3, #0]
 81082c6:	3304      	adds	r3, #4
 81082c8:	4619      	mov	r1, r3
 81082ca:	4819      	ldr	r0, [pc, #100]	; (8108330 <prvAddCurrentTaskToDelayedList+0x98>)
 81082cc:	f7fe f94f 	bl	810656e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81082d0:	e026      	b.n	8108320 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81082d2:	68fa      	ldr	r2, [r7, #12]
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	4413      	add	r3, r2
 81082d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81082da:	4b14      	ldr	r3, [pc, #80]	; (810832c <prvAddCurrentTaskToDelayedList+0x94>)
 81082dc:	681b      	ldr	r3, [r3, #0]
 81082de:	68ba      	ldr	r2, [r7, #8]
 81082e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81082e2:	68ba      	ldr	r2, [r7, #8]
 81082e4:	68fb      	ldr	r3, [r7, #12]
 81082e6:	429a      	cmp	r2, r3
 81082e8:	d209      	bcs.n	81082fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81082ea:	4b12      	ldr	r3, [pc, #72]	; (8108334 <prvAddCurrentTaskToDelayedList+0x9c>)
 81082ec:	681a      	ldr	r2, [r3, #0]
 81082ee:	4b0f      	ldr	r3, [pc, #60]	; (810832c <prvAddCurrentTaskToDelayedList+0x94>)
 81082f0:	681b      	ldr	r3, [r3, #0]
 81082f2:	3304      	adds	r3, #4
 81082f4:	4619      	mov	r1, r3
 81082f6:	4610      	mov	r0, r2
 81082f8:	f7fe f95d 	bl	81065b6 <vListInsert>
}
 81082fc:	e010      	b.n	8108320 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81082fe:	4b0e      	ldr	r3, [pc, #56]	; (8108338 <prvAddCurrentTaskToDelayedList+0xa0>)
 8108300:	681a      	ldr	r2, [r3, #0]
 8108302:	4b0a      	ldr	r3, [pc, #40]	; (810832c <prvAddCurrentTaskToDelayedList+0x94>)
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	3304      	adds	r3, #4
 8108308:	4619      	mov	r1, r3
 810830a:	4610      	mov	r0, r2
 810830c:	f7fe f953 	bl	81065b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8108310:	4b0a      	ldr	r3, [pc, #40]	; (810833c <prvAddCurrentTaskToDelayedList+0xa4>)
 8108312:	681b      	ldr	r3, [r3, #0]
 8108314:	68ba      	ldr	r2, [r7, #8]
 8108316:	429a      	cmp	r2, r3
 8108318:	d202      	bcs.n	8108320 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810831a:	4a08      	ldr	r2, [pc, #32]	; (810833c <prvAddCurrentTaskToDelayedList+0xa4>)
 810831c:	68bb      	ldr	r3, [r7, #8]
 810831e:	6013      	str	r3, [r2, #0]
}
 8108320:	bf00      	nop
 8108322:	3710      	adds	r7, #16
 8108324:	46bd      	mov	sp, r7
 8108326:	bd80      	pop	{r7, pc}
 8108328:	10004c38 	.word	0x10004c38
 810832c:	10004760 	.word	0x10004760
 8108330:	10004c20 	.word	0x10004c20
 8108334:	10004bf0 	.word	0x10004bf0
 8108338:	10004bec 	.word	0x10004bec
 810833c:	10004c54 	.word	0x10004c54

08108340 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8108340:	b580      	push	{r7, lr}
 8108342:	b08a      	sub	sp, #40	; 0x28
 8108344:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8108346:	2300      	movs	r3, #0
 8108348:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810834a:	f000 fba1 	bl	8108a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810834e:	4b1c      	ldr	r3, [pc, #112]	; (81083c0 <xTimerCreateTimerTask+0x80>)
 8108350:	681b      	ldr	r3, [r3, #0]
 8108352:	2b00      	cmp	r3, #0
 8108354:	d021      	beq.n	810839a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8108356:	2300      	movs	r3, #0
 8108358:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810835a:	2300      	movs	r3, #0
 810835c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810835e:	1d3a      	adds	r2, r7, #4
 8108360:	f107 0108 	add.w	r1, r7, #8
 8108364:	f107 030c 	add.w	r3, r7, #12
 8108368:	4618      	mov	r0, r3
 810836a:	f7fd fecf 	bl	810610c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810836e:	6879      	ldr	r1, [r7, #4]
 8108370:	68bb      	ldr	r3, [r7, #8]
 8108372:	68fa      	ldr	r2, [r7, #12]
 8108374:	9202      	str	r2, [sp, #8]
 8108376:	9301      	str	r3, [sp, #4]
 8108378:	2302      	movs	r3, #2
 810837a:	9300      	str	r3, [sp, #0]
 810837c:	2300      	movs	r3, #0
 810837e:	460a      	mov	r2, r1
 8108380:	4910      	ldr	r1, [pc, #64]	; (81083c4 <xTimerCreateTimerTask+0x84>)
 8108382:	4811      	ldr	r0, [pc, #68]	; (81083c8 <xTimerCreateTimerTask+0x88>)
 8108384:	f7ff f8b4 	bl	81074f0 <xTaskCreateStatic>
 8108388:	4603      	mov	r3, r0
 810838a:	4a10      	ldr	r2, [pc, #64]	; (81083cc <xTimerCreateTimerTask+0x8c>)
 810838c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810838e:	4b0f      	ldr	r3, [pc, #60]	; (81083cc <xTimerCreateTimerTask+0x8c>)
 8108390:	681b      	ldr	r3, [r3, #0]
 8108392:	2b00      	cmp	r3, #0
 8108394:	d001      	beq.n	810839a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8108396:	2301      	movs	r3, #1
 8108398:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810839a:	697b      	ldr	r3, [r7, #20]
 810839c:	2b00      	cmp	r3, #0
 810839e:	d10a      	bne.n	81083b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 81083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81083a4:	f383 8811 	msr	BASEPRI, r3
 81083a8:	f3bf 8f6f 	isb	sy
 81083ac:	f3bf 8f4f 	dsb	sy
 81083b0:	613b      	str	r3, [r7, #16]
}
 81083b2:	bf00      	nop
 81083b4:	e7fe      	b.n	81083b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 81083b6:	697b      	ldr	r3, [r7, #20]
}
 81083b8:	4618      	mov	r0, r3
 81083ba:	3718      	adds	r7, #24
 81083bc:	46bd      	mov	sp, r7
 81083be:	bd80      	pop	{r7, pc}
 81083c0:	10004c90 	.word	0x10004c90
 81083c4:	0810d5a4 	.word	0x0810d5a4
 81083c8:	08108639 	.word	0x08108639
 81083cc:	10004c94 	.word	0x10004c94

081083d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 81083d0:	b580      	push	{r7, lr}
 81083d2:	b088      	sub	sp, #32
 81083d4:	af02      	add	r7, sp, #8
 81083d6:	60f8      	str	r0, [r7, #12]
 81083d8:	60b9      	str	r1, [r7, #8]
 81083da:	607a      	str	r2, [r7, #4]
 81083dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 81083de:	202c      	movs	r0, #44	; 0x2c
 81083e0:	f7fd feae 	bl	8106140 <pvPortMalloc>
 81083e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 81083e6:	697b      	ldr	r3, [r7, #20]
 81083e8:	2b00      	cmp	r3, #0
 81083ea:	d00d      	beq.n	8108408 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 81083ec:	697b      	ldr	r3, [r7, #20]
 81083ee:	2200      	movs	r2, #0
 81083f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 81083f4:	697b      	ldr	r3, [r7, #20]
 81083f6:	9301      	str	r3, [sp, #4]
 81083f8:	6a3b      	ldr	r3, [r7, #32]
 81083fa:	9300      	str	r3, [sp, #0]
 81083fc:	683b      	ldr	r3, [r7, #0]
 81083fe:	687a      	ldr	r2, [r7, #4]
 8108400:	68b9      	ldr	r1, [r7, #8]
 8108402:	68f8      	ldr	r0, [r7, #12]
 8108404:	f000 f843 	bl	810848e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8108408:	697b      	ldr	r3, [r7, #20]
	}
 810840a:	4618      	mov	r0, r3
 810840c:	3718      	adds	r7, #24
 810840e:	46bd      	mov	sp, r7
 8108410:	bd80      	pop	{r7, pc}

08108412 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8108412:	b580      	push	{r7, lr}
 8108414:	b08a      	sub	sp, #40	; 0x28
 8108416:	af02      	add	r7, sp, #8
 8108418:	60f8      	str	r0, [r7, #12]
 810841a:	60b9      	str	r1, [r7, #8]
 810841c:	607a      	str	r2, [r7, #4]
 810841e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8108420:	232c      	movs	r3, #44	; 0x2c
 8108422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8108424:	693b      	ldr	r3, [r7, #16]
 8108426:	2b2c      	cmp	r3, #44	; 0x2c
 8108428:	d00a      	beq.n	8108440 <xTimerCreateStatic+0x2e>
	__asm volatile
 810842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810842e:	f383 8811 	msr	BASEPRI, r3
 8108432:	f3bf 8f6f 	isb	sy
 8108436:	f3bf 8f4f 	dsb	sy
 810843a:	61bb      	str	r3, [r7, #24]
}
 810843c:	bf00      	nop
 810843e:	e7fe      	b.n	810843e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8108440:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8108442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108444:	2b00      	cmp	r3, #0
 8108446:	d10a      	bne.n	810845e <xTimerCreateStatic+0x4c>
	__asm volatile
 8108448:	f04f 0350 	mov.w	r3, #80	; 0x50
 810844c:	f383 8811 	msr	BASEPRI, r3
 8108450:	f3bf 8f6f 	isb	sy
 8108454:	f3bf 8f4f 	dsb	sy
 8108458:	617b      	str	r3, [r7, #20]
}
 810845a:	bf00      	nop
 810845c:	e7fe      	b.n	810845c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 810845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108460:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8108462:	69fb      	ldr	r3, [r7, #28]
 8108464:	2b00      	cmp	r3, #0
 8108466:	d00d      	beq.n	8108484 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8108468:	69fb      	ldr	r3, [r7, #28]
 810846a:	2202      	movs	r2, #2
 810846c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8108470:	69fb      	ldr	r3, [r7, #28]
 8108472:	9301      	str	r3, [sp, #4]
 8108474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108476:	9300      	str	r3, [sp, #0]
 8108478:	683b      	ldr	r3, [r7, #0]
 810847a:	687a      	ldr	r2, [r7, #4]
 810847c:	68b9      	ldr	r1, [r7, #8]
 810847e:	68f8      	ldr	r0, [r7, #12]
 8108480:	f000 f805 	bl	810848e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8108484:	69fb      	ldr	r3, [r7, #28]
	}
 8108486:	4618      	mov	r0, r3
 8108488:	3720      	adds	r7, #32
 810848a:	46bd      	mov	sp, r7
 810848c:	bd80      	pop	{r7, pc}

0810848e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 810848e:	b580      	push	{r7, lr}
 8108490:	b086      	sub	sp, #24
 8108492:	af00      	add	r7, sp, #0
 8108494:	60f8      	str	r0, [r7, #12]
 8108496:	60b9      	str	r1, [r7, #8]
 8108498:	607a      	str	r2, [r7, #4]
 810849a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 810849c:	68bb      	ldr	r3, [r7, #8]
 810849e:	2b00      	cmp	r3, #0
 81084a0:	d10a      	bne.n	81084b8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 81084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81084a6:	f383 8811 	msr	BASEPRI, r3
 81084aa:	f3bf 8f6f 	isb	sy
 81084ae:	f3bf 8f4f 	dsb	sy
 81084b2:	617b      	str	r3, [r7, #20]
}
 81084b4:	bf00      	nop
 81084b6:	e7fe      	b.n	81084b6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 81084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084ba:	2b00      	cmp	r3, #0
 81084bc:	d01e      	beq.n	81084fc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 81084be:	f000 fae7 	bl	8108a90 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 81084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084c4:	68fa      	ldr	r2, [r7, #12]
 81084c6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 81084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084ca:	68ba      	ldr	r2, [r7, #8]
 81084cc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 81084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084d0:	683a      	ldr	r2, [r7, #0]
 81084d2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 81084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084d6:	6a3a      	ldr	r2, [r7, #32]
 81084d8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 81084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084dc:	3304      	adds	r3, #4
 81084de:	4618      	mov	r0, r3
 81084e0:	f7fe f838 	bl	8106554 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	2b00      	cmp	r3, #0
 81084e8:	d008      	beq.n	81084fc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 81084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81084f0:	f043 0304 	orr.w	r3, r3, #4
 81084f4:	b2da      	uxtb	r2, r3
 81084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81084f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 81084fc:	bf00      	nop
 81084fe:	3718      	adds	r7, #24
 8108500:	46bd      	mov	sp, r7
 8108502:	bd80      	pop	{r7, pc}

08108504 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8108504:	b580      	push	{r7, lr}
 8108506:	b08a      	sub	sp, #40	; 0x28
 8108508:	af00      	add	r7, sp, #0
 810850a:	60f8      	str	r0, [r7, #12]
 810850c:	60b9      	str	r1, [r7, #8]
 810850e:	607a      	str	r2, [r7, #4]
 8108510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8108512:	2300      	movs	r3, #0
 8108514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8108516:	68fb      	ldr	r3, [r7, #12]
 8108518:	2b00      	cmp	r3, #0
 810851a:	d10a      	bne.n	8108532 <xTimerGenericCommand+0x2e>
	__asm volatile
 810851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108520:	f383 8811 	msr	BASEPRI, r3
 8108524:	f3bf 8f6f 	isb	sy
 8108528:	f3bf 8f4f 	dsb	sy
 810852c:	623b      	str	r3, [r7, #32]
}
 810852e:	bf00      	nop
 8108530:	e7fe      	b.n	8108530 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8108532:	4b1a      	ldr	r3, [pc, #104]	; (810859c <xTimerGenericCommand+0x98>)
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	2b00      	cmp	r3, #0
 8108538:	d02a      	beq.n	8108590 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810853a:	68bb      	ldr	r3, [r7, #8]
 810853c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8108542:	68fb      	ldr	r3, [r7, #12]
 8108544:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8108546:	68bb      	ldr	r3, [r7, #8]
 8108548:	2b05      	cmp	r3, #5
 810854a:	dc18      	bgt.n	810857e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810854c:	f7ff fe18 	bl	8108180 <xTaskGetSchedulerState>
 8108550:	4603      	mov	r3, r0
 8108552:	2b02      	cmp	r3, #2
 8108554:	d109      	bne.n	810856a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8108556:	4b11      	ldr	r3, [pc, #68]	; (810859c <xTimerGenericCommand+0x98>)
 8108558:	6818      	ldr	r0, [r3, #0]
 810855a:	f107 0110 	add.w	r1, r7, #16
 810855e:	2300      	movs	r3, #0
 8108560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108562:	f7fe fbdd 	bl	8106d20 <xQueueGenericSend>
 8108566:	6278      	str	r0, [r7, #36]	; 0x24
 8108568:	e012      	b.n	8108590 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810856a:	4b0c      	ldr	r3, [pc, #48]	; (810859c <xTimerGenericCommand+0x98>)
 810856c:	6818      	ldr	r0, [r3, #0]
 810856e:	f107 0110 	add.w	r1, r7, #16
 8108572:	2300      	movs	r3, #0
 8108574:	2200      	movs	r2, #0
 8108576:	f7fe fbd3 	bl	8106d20 <xQueueGenericSend>
 810857a:	6278      	str	r0, [r7, #36]	; 0x24
 810857c:	e008      	b.n	8108590 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810857e:	4b07      	ldr	r3, [pc, #28]	; (810859c <xTimerGenericCommand+0x98>)
 8108580:	6818      	ldr	r0, [r3, #0]
 8108582:	f107 0110 	add.w	r1, r7, #16
 8108586:	2300      	movs	r3, #0
 8108588:	683a      	ldr	r2, [r7, #0]
 810858a:	f7fe fcc7 	bl	8106f1c <xQueueGenericSendFromISR>
 810858e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8108590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8108592:	4618      	mov	r0, r3
 8108594:	3728      	adds	r7, #40	; 0x28
 8108596:	46bd      	mov	sp, r7
 8108598:	bd80      	pop	{r7, pc}
 810859a:	bf00      	nop
 810859c:	10004c90 	.word	0x10004c90

081085a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81085a0:	b580      	push	{r7, lr}
 81085a2:	b088      	sub	sp, #32
 81085a4:	af02      	add	r7, sp, #8
 81085a6:	6078      	str	r0, [r7, #4]
 81085a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81085aa:	4b22      	ldr	r3, [pc, #136]	; (8108634 <prvProcessExpiredTimer+0x94>)
 81085ac:	681b      	ldr	r3, [r3, #0]
 81085ae:	68db      	ldr	r3, [r3, #12]
 81085b0:	68db      	ldr	r3, [r3, #12]
 81085b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81085b4:	697b      	ldr	r3, [r7, #20]
 81085b6:	3304      	adds	r3, #4
 81085b8:	4618      	mov	r0, r3
 81085ba:	f7fe f835 	bl	8106628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81085be:	697b      	ldr	r3, [r7, #20]
 81085c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81085c4:	f003 0304 	and.w	r3, r3, #4
 81085c8:	2b00      	cmp	r3, #0
 81085ca:	d022      	beq.n	8108612 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81085cc:	697b      	ldr	r3, [r7, #20]
 81085ce:	699a      	ldr	r2, [r3, #24]
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	18d1      	adds	r1, r2, r3
 81085d4:	687b      	ldr	r3, [r7, #4]
 81085d6:	683a      	ldr	r2, [r7, #0]
 81085d8:	6978      	ldr	r0, [r7, #20]
 81085da:	f000 f8d1 	bl	8108780 <prvInsertTimerInActiveList>
 81085de:	4603      	mov	r3, r0
 81085e0:	2b00      	cmp	r3, #0
 81085e2:	d01f      	beq.n	8108624 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81085e4:	2300      	movs	r3, #0
 81085e6:	9300      	str	r3, [sp, #0]
 81085e8:	2300      	movs	r3, #0
 81085ea:	687a      	ldr	r2, [r7, #4]
 81085ec:	2100      	movs	r1, #0
 81085ee:	6978      	ldr	r0, [r7, #20]
 81085f0:	f7ff ff88 	bl	8108504 <xTimerGenericCommand>
 81085f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81085f6:	693b      	ldr	r3, [r7, #16]
 81085f8:	2b00      	cmp	r3, #0
 81085fa:	d113      	bne.n	8108624 <prvProcessExpiredTimer+0x84>
	__asm volatile
 81085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108600:	f383 8811 	msr	BASEPRI, r3
 8108604:	f3bf 8f6f 	isb	sy
 8108608:	f3bf 8f4f 	dsb	sy
 810860c:	60fb      	str	r3, [r7, #12]
}
 810860e:	bf00      	nop
 8108610:	e7fe      	b.n	8108610 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108612:	697b      	ldr	r3, [r7, #20]
 8108614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108618:	f023 0301 	bic.w	r3, r3, #1
 810861c:	b2da      	uxtb	r2, r3
 810861e:	697b      	ldr	r3, [r7, #20]
 8108620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8108624:	697b      	ldr	r3, [r7, #20]
 8108626:	6a1b      	ldr	r3, [r3, #32]
 8108628:	6978      	ldr	r0, [r7, #20]
 810862a:	4798      	blx	r3
}
 810862c:	bf00      	nop
 810862e:	3718      	adds	r7, #24
 8108630:	46bd      	mov	sp, r7
 8108632:	bd80      	pop	{r7, pc}
 8108634:	10004c88 	.word	0x10004c88

08108638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8108638:	b580      	push	{r7, lr}
 810863a:	b084      	sub	sp, #16
 810863c:	af00      	add	r7, sp, #0
 810863e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8108640:	f107 0308 	add.w	r3, r7, #8
 8108644:	4618      	mov	r0, r3
 8108646:	f000 f857 	bl	81086f8 <prvGetNextExpireTime>
 810864a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810864c:	68bb      	ldr	r3, [r7, #8]
 810864e:	4619      	mov	r1, r3
 8108650:	68f8      	ldr	r0, [r7, #12]
 8108652:	f000 f803 	bl	810865c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8108656:	f000 f8d5 	bl	8108804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810865a:	e7f1      	b.n	8108640 <prvTimerTask+0x8>

0810865c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810865c:	b580      	push	{r7, lr}
 810865e:	b084      	sub	sp, #16
 8108660:	af00      	add	r7, sp, #0
 8108662:	6078      	str	r0, [r7, #4]
 8108664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8108666:	f7ff f99f 	bl	81079a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810866a:	f107 0308 	add.w	r3, r7, #8
 810866e:	4618      	mov	r0, r3
 8108670:	f000 f866 	bl	8108740 <prvSampleTimeNow>
 8108674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8108676:	68bb      	ldr	r3, [r7, #8]
 8108678:	2b00      	cmp	r3, #0
 810867a:	d130      	bne.n	81086de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810867c:	683b      	ldr	r3, [r7, #0]
 810867e:	2b00      	cmp	r3, #0
 8108680:	d10a      	bne.n	8108698 <prvProcessTimerOrBlockTask+0x3c>
 8108682:	687a      	ldr	r2, [r7, #4]
 8108684:	68fb      	ldr	r3, [r7, #12]
 8108686:	429a      	cmp	r2, r3
 8108688:	d806      	bhi.n	8108698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810868a:	f7ff f99b 	bl	81079c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810868e:	68f9      	ldr	r1, [r7, #12]
 8108690:	6878      	ldr	r0, [r7, #4]
 8108692:	f7ff ff85 	bl	81085a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8108696:	e024      	b.n	81086e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8108698:	683b      	ldr	r3, [r7, #0]
 810869a:	2b00      	cmp	r3, #0
 810869c:	d008      	beq.n	81086b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810869e:	4b13      	ldr	r3, [pc, #76]	; (81086ec <prvProcessTimerOrBlockTask+0x90>)
 81086a0:	681b      	ldr	r3, [r3, #0]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	2b00      	cmp	r3, #0
 81086a6:	d101      	bne.n	81086ac <prvProcessTimerOrBlockTask+0x50>
 81086a8:	2301      	movs	r3, #1
 81086aa:	e000      	b.n	81086ae <prvProcessTimerOrBlockTask+0x52>
 81086ac:	2300      	movs	r3, #0
 81086ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81086b0:	4b0f      	ldr	r3, [pc, #60]	; (81086f0 <prvProcessTimerOrBlockTask+0x94>)
 81086b2:	6818      	ldr	r0, [r3, #0]
 81086b4:	687a      	ldr	r2, [r7, #4]
 81086b6:	68fb      	ldr	r3, [r7, #12]
 81086b8:	1ad3      	subs	r3, r2, r3
 81086ba:	683a      	ldr	r2, [r7, #0]
 81086bc:	4619      	mov	r1, r3
 81086be:	f7fe fee3 	bl	8107488 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81086c2:	f7ff f97f 	bl	81079c4 <xTaskResumeAll>
 81086c6:	4603      	mov	r3, r0
 81086c8:	2b00      	cmp	r3, #0
 81086ca:	d10a      	bne.n	81086e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81086cc:	4b09      	ldr	r3, [pc, #36]	; (81086f4 <prvProcessTimerOrBlockTask+0x98>)
 81086ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81086d2:	601a      	str	r2, [r3, #0]
 81086d4:	f3bf 8f4f 	dsb	sy
 81086d8:	f3bf 8f6f 	isb	sy
}
 81086dc:	e001      	b.n	81086e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81086de:	f7ff f971 	bl	81079c4 <xTaskResumeAll>
}
 81086e2:	bf00      	nop
 81086e4:	3710      	adds	r7, #16
 81086e6:	46bd      	mov	sp, r7
 81086e8:	bd80      	pop	{r7, pc}
 81086ea:	bf00      	nop
 81086ec:	10004c8c 	.word	0x10004c8c
 81086f0:	10004c90 	.word	0x10004c90
 81086f4:	e000ed04 	.word	0xe000ed04

081086f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81086f8:	b480      	push	{r7}
 81086fa:	b085      	sub	sp, #20
 81086fc:	af00      	add	r7, sp, #0
 81086fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8108700:	4b0e      	ldr	r3, [pc, #56]	; (810873c <prvGetNextExpireTime+0x44>)
 8108702:	681b      	ldr	r3, [r3, #0]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	2b00      	cmp	r3, #0
 8108708:	d101      	bne.n	810870e <prvGetNextExpireTime+0x16>
 810870a:	2201      	movs	r2, #1
 810870c:	e000      	b.n	8108710 <prvGetNextExpireTime+0x18>
 810870e:	2200      	movs	r2, #0
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8108714:	687b      	ldr	r3, [r7, #4]
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	2b00      	cmp	r3, #0
 810871a:	d105      	bne.n	8108728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810871c:	4b07      	ldr	r3, [pc, #28]	; (810873c <prvGetNextExpireTime+0x44>)
 810871e:	681b      	ldr	r3, [r3, #0]
 8108720:	68db      	ldr	r3, [r3, #12]
 8108722:	681b      	ldr	r3, [r3, #0]
 8108724:	60fb      	str	r3, [r7, #12]
 8108726:	e001      	b.n	810872c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8108728:	2300      	movs	r3, #0
 810872a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810872c:	68fb      	ldr	r3, [r7, #12]
}
 810872e:	4618      	mov	r0, r3
 8108730:	3714      	adds	r7, #20
 8108732:	46bd      	mov	sp, r7
 8108734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108738:	4770      	bx	lr
 810873a:	bf00      	nop
 810873c:	10004c88 	.word	0x10004c88

08108740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8108740:	b580      	push	{r7, lr}
 8108742:	b084      	sub	sp, #16
 8108744:	af00      	add	r7, sp, #0
 8108746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8108748:	f7ff f9da 	bl	8107b00 <xTaskGetTickCount>
 810874c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810874e:	4b0b      	ldr	r3, [pc, #44]	; (810877c <prvSampleTimeNow+0x3c>)
 8108750:	681b      	ldr	r3, [r3, #0]
 8108752:	68fa      	ldr	r2, [r7, #12]
 8108754:	429a      	cmp	r2, r3
 8108756:	d205      	bcs.n	8108764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8108758:	f000 f936 	bl	81089c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810875c:	687b      	ldr	r3, [r7, #4]
 810875e:	2201      	movs	r2, #1
 8108760:	601a      	str	r2, [r3, #0]
 8108762:	e002      	b.n	810876a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	2200      	movs	r2, #0
 8108768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810876a:	4a04      	ldr	r2, [pc, #16]	; (810877c <prvSampleTimeNow+0x3c>)
 810876c:	68fb      	ldr	r3, [r7, #12]
 810876e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8108770:	68fb      	ldr	r3, [r7, #12]
}
 8108772:	4618      	mov	r0, r3
 8108774:	3710      	adds	r7, #16
 8108776:	46bd      	mov	sp, r7
 8108778:	bd80      	pop	{r7, pc}
 810877a:	bf00      	nop
 810877c:	10004c98 	.word	0x10004c98

08108780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8108780:	b580      	push	{r7, lr}
 8108782:	b086      	sub	sp, #24
 8108784:	af00      	add	r7, sp, #0
 8108786:	60f8      	str	r0, [r7, #12]
 8108788:	60b9      	str	r1, [r7, #8]
 810878a:	607a      	str	r2, [r7, #4]
 810878c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810878e:	2300      	movs	r3, #0
 8108790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8108792:	68fb      	ldr	r3, [r7, #12]
 8108794:	68ba      	ldr	r2, [r7, #8]
 8108796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108798:	68fb      	ldr	r3, [r7, #12]
 810879a:	68fa      	ldr	r2, [r7, #12]
 810879c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810879e:	68ba      	ldr	r2, [r7, #8]
 81087a0:	687b      	ldr	r3, [r7, #4]
 81087a2:	429a      	cmp	r2, r3
 81087a4:	d812      	bhi.n	81087cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81087a6:	687a      	ldr	r2, [r7, #4]
 81087a8:	683b      	ldr	r3, [r7, #0]
 81087aa:	1ad2      	subs	r2, r2, r3
 81087ac:	68fb      	ldr	r3, [r7, #12]
 81087ae:	699b      	ldr	r3, [r3, #24]
 81087b0:	429a      	cmp	r2, r3
 81087b2:	d302      	bcc.n	81087ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81087b4:	2301      	movs	r3, #1
 81087b6:	617b      	str	r3, [r7, #20]
 81087b8:	e01b      	b.n	81087f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81087ba:	4b10      	ldr	r3, [pc, #64]	; (81087fc <prvInsertTimerInActiveList+0x7c>)
 81087bc:	681a      	ldr	r2, [r3, #0]
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	3304      	adds	r3, #4
 81087c2:	4619      	mov	r1, r3
 81087c4:	4610      	mov	r0, r2
 81087c6:	f7fd fef6 	bl	81065b6 <vListInsert>
 81087ca:	e012      	b.n	81087f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81087cc:	687a      	ldr	r2, [r7, #4]
 81087ce:	683b      	ldr	r3, [r7, #0]
 81087d0:	429a      	cmp	r2, r3
 81087d2:	d206      	bcs.n	81087e2 <prvInsertTimerInActiveList+0x62>
 81087d4:	68ba      	ldr	r2, [r7, #8]
 81087d6:	683b      	ldr	r3, [r7, #0]
 81087d8:	429a      	cmp	r2, r3
 81087da:	d302      	bcc.n	81087e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81087dc:	2301      	movs	r3, #1
 81087de:	617b      	str	r3, [r7, #20]
 81087e0:	e007      	b.n	81087f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81087e2:	4b07      	ldr	r3, [pc, #28]	; (8108800 <prvInsertTimerInActiveList+0x80>)
 81087e4:	681a      	ldr	r2, [r3, #0]
 81087e6:	68fb      	ldr	r3, [r7, #12]
 81087e8:	3304      	adds	r3, #4
 81087ea:	4619      	mov	r1, r3
 81087ec:	4610      	mov	r0, r2
 81087ee:	f7fd fee2 	bl	81065b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 81087f2:	697b      	ldr	r3, [r7, #20]
}
 81087f4:	4618      	mov	r0, r3
 81087f6:	3718      	adds	r7, #24
 81087f8:	46bd      	mov	sp, r7
 81087fa:	bd80      	pop	{r7, pc}
 81087fc:	10004c8c 	.word	0x10004c8c
 8108800:	10004c88 	.word	0x10004c88

08108804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8108804:	b580      	push	{r7, lr}
 8108806:	b08e      	sub	sp, #56	; 0x38
 8108808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810880a:	e0ca      	b.n	81089a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	2b00      	cmp	r3, #0
 8108810:	da18      	bge.n	8108844 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8108812:	1d3b      	adds	r3, r7, #4
 8108814:	3304      	adds	r3, #4
 8108816:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8108818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810881a:	2b00      	cmp	r3, #0
 810881c:	d10a      	bne.n	8108834 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108822:	f383 8811 	msr	BASEPRI, r3
 8108826:	f3bf 8f6f 	isb	sy
 810882a:	f3bf 8f4f 	dsb	sy
 810882e:	61fb      	str	r3, [r7, #28]
}
 8108830:	bf00      	nop
 8108832:	e7fe      	b.n	8108832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8108834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810883a:	6850      	ldr	r0, [r2, #4]
 810883c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810883e:	6892      	ldr	r2, [r2, #8]
 8108840:	4611      	mov	r1, r2
 8108842:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	2b00      	cmp	r3, #0
 8108848:	f2c0 80aa 	blt.w	81089a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810884c:	68fb      	ldr	r3, [r7, #12]
 810884e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8108850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108852:	695b      	ldr	r3, [r3, #20]
 8108854:	2b00      	cmp	r3, #0
 8108856:	d004      	beq.n	8108862 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810885a:	3304      	adds	r3, #4
 810885c:	4618      	mov	r0, r3
 810885e:	f7fd fee3 	bl	8106628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8108862:	463b      	mov	r3, r7
 8108864:	4618      	mov	r0, r3
 8108866:	f7ff ff6b 	bl	8108740 <prvSampleTimeNow>
 810886a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	2b09      	cmp	r3, #9
 8108870:	f200 8097 	bhi.w	81089a2 <prvProcessReceivedCommands+0x19e>
 8108874:	a201      	add	r2, pc, #4	; (adr r2, 810887c <prvProcessReceivedCommands+0x78>)
 8108876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810887a:	bf00      	nop
 810887c:	081088a5 	.word	0x081088a5
 8108880:	081088a5 	.word	0x081088a5
 8108884:	081088a5 	.word	0x081088a5
 8108888:	08108919 	.word	0x08108919
 810888c:	0810892d 	.word	0x0810892d
 8108890:	08108977 	.word	0x08108977
 8108894:	081088a5 	.word	0x081088a5
 8108898:	081088a5 	.word	0x081088a5
 810889c:	08108919 	.word	0x08108919
 81088a0:	0810892d 	.word	0x0810892d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81088aa:	f043 0301 	orr.w	r3, r3, #1
 81088ae:	b2da      	uxtb	r2, r3
 81088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81088b6:	68ba      	ldr	r2, [r7, #8]
 81088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088ba:	699b      	ldr	r3, [r3, #24]
 81088bc:	18d1      	adds	r1, r2, r3
 81088be:	68bb      	ldr	r3, [r7, #8]
 81088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81088c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81088c4:	f7ff ff5c 	bl	8108780 <prvInsertTimerInActiveList>
 81088c8:	4603      	mov	r3, r0
 81088ca:	2b00      	cmp	r3, #0
 81088cc:	d069      	beq.n	81089a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088d0:	6a1b      	ldr	r3, [r3, #32]
 81088d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81088d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81088dc:	f003 0304 	and.w	r3, r3, #4
 81088e0:	2b00      	cmp	r3, #0
 81088e2:	d05e      	beq.n	81089a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81088e4:	68ba      	ldr	r2, [r7, #8]
 81088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088e8:	699b      	ldr	r3, [r3, #24]
 81088ea:	441a      	add	r2, r3
 81088ec:	2300      	movs	r3, #0
 81088ee:	9300      	str	r3, [sp, #0]
 81088f0:	2300      	movs	r3, #0
 81088f2:	2100      	movs	r1, #0
 81088f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81088f6:	f7ff fe05 	bl	8108504 <xTimerGenericCommand>
 81088fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81088fc:	6a3b      	ldr	r3, [r7, #32]
 81088fe:	2b00      	cmp	r3, #0
 8108900:	d14f      	bne.n	81089a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8108902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108906:	f383 8811 	msr	BASEPRI, r3
 810890a:	f3bf 8f6f 	isb	sy
 810890e:	f3bf 8f4f 	dsb	sy
 8108912:	61bb      	str	r3, [r7, #24]
}
 8108914:	bf00      	nop
 8108916:	e7fe      	b.n	8108916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810891a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810891e:	f023 0301 	bic.w	r3, r3, #1
 8108922:	b2da      	uxtb	r2, r3
 8108924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810892a:	e03a      	b.n	81089a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810892e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108932:	f043 0301 	orr.w	r3, r3, #1
 8108936:	b2da      	uxtb	r2, r3
 8108938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810893a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810893e:	68ba      	ldr	r2, [r7, #8]
 8108940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108942:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8108944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108946:	699b      	ldr	r3, [r3, #24]
 8108948:	2b00      	cmp	r3, #0
 810894a:	d10a      	bne.n	8108962 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 810894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108950:	f383 8811 	msr	BASEPRI, r3
 8108954:	f3bf 8f6f 	isb	sy
 8108958:	f3bf 8f4f 	dsb	sy
 810895c:	617b      	str	r3, [r7, #20]
}
 810895e:	bf00      	nop
 8108960:	e7fe      	b.n	8108960 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8108962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108964:	699a      	ldr	r2, [r3, #24]
 8108966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108968:	18d1      	adds	r1, r2, r3
 810896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810896e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108970:	f7ff ff06 	bl	8108780 <prvInsertTimerInActiveList>
					break;
 8108974:	e015      	b.n	81089a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8108976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810897c:	f003 0302 	and.w	r3, r3, #2
 8108980:	2b00      	cmp	r3, #0
 8108982:	d103      	bne.n	810898c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8108984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108986:	f7fd fca7 	bl	81062d8 <vPortFree>
 810898a:	e00a      	b.n	81089a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810898e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108992:	f023 0301 	bic.w	r3, r3, #1
 8108996:	b2da      	uxtb	r2, r3
 8108998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810899a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810899e:	e000      	b.n	81089a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 81089a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81089a2:	4b08      	ldr	r3, [pc, #32]	; (81089c4 <prvProcessReceivedCommands+0x1c0>)
 81089a4:	681b      	ldr	r3, [r3, #0]
 81089a6:	1d39      	adds	r1, r7, #4
 81089a8:	2200      	movs	r2, #0
 81089aa:	4618      	mov	r0, r3
 81089ac:	f7fe fb52 	bl	8107054 <xQueueReceive>
 81089b0:	4603      	mov	r3, r0
 81089b2:	2b00      	cmp	r3, #0
 81089b4:	f47f af2a 	bne.w	810880c <prvProcessReceivedCommands+0x8>
	}
}
 81089b8:	bf00      	nop
 81089ba:	bf00      	nop
 81089bc:	3730      	adds	r7, #48	; 0x30
 81089be:	46bd      	mov	sp, r7
 81089c0:	bd80      	pop	{r7, pc}
 81089c2:	bf00      	nop
 81089c4:	10004c90 	.word	0x10004c90

081089c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81089c8:	b580      	push	{r7, lr}
 81089ca:	b088      	sub	sp, #32
 81089cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81089ce:	e048      	b.n	8108a62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81089d0:	4b2d      	ldr	r3, [pc, #180]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 81089d2:	681b      	ldr	r3, [r3, #0]
 81089d4:	68db      	ldr	r3, [r3, #12]
 81089d6:	681b      	ldr	r3, [r3, #0]
 81089d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81089da:	4b2b      	ldr	r3, [pc, #172]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 81089dc:	681b      	ldr	r3, [r3, #0]
 81089de:	68db      	ldr	r3, [r3, #12]
 81089e0:	68db      	ldr	r3, [r3, #12]
 81089e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81089e4:	68fb      	ldr	r3, [r7, #12]
 81089e6:	3304      	adds	r3, #4
 81089e8:	4618      	mov	r0, r3
 81089ea:	f7fd fe1d 	bl	8106628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81089ee:	68fb      	ldr	r3, [r7, #12]
 81089f0:	6a1b      	ldr	r3, [r3, #32]
 81089f2:	68f8      	ldr	r0, [r7, #12]
 81089f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81089f6:	68fb      	ldr	r3, [r7, #12]
 81089f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81089fc:	f003 0304 	and.w	r3, r3, #4
 8108a00:	2b00      	cmp	r3, #0
 8108a02:	d02e      	beq.n	8108a62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8108a04:	68fb      	ldr	r3, [r7, #12]
 8108a06:	699b      	ldr	r3, [r3, #24]
 8108a08:	693a      	ldr	r2, [r7, #16]
 8108a0a:	4413      	add	r3, r2
 8108a0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8108a0e:	68ba      	ldr	r2, [r7, #8]
 8108a10:	693b      	ldr	r3, [r7, #16]
 8108a12:	429a      	cmp	r2, r3
 8108a14:	d90e      	bls.n	8108a34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8108a16:	68fb      	ldr	r3, [r7, #12]
 8108a18:	68ba      	ldr	r2, [r7, #8]
 8108a1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108a1c:	68fb      	ldr	r3, [r7, #12]
 8108a1e:	68fa      	ldr	r2, [r7, #12]
 8108a20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8108a22:	4b19      	ldr	r3, [pc, #100]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 8108a24:	681a      	ldr	r2, [r3, #0]
 8108a26:	68fb      	ldr	r3, [r7, #12]
 8108a28:	3304      	adds	r3, #4
 8108a2a:	4619      	mov	r1, r3
 8108a2c:	4610      	mov	r0, r2
 8108a2e:	f7fd fdc2 	bl	81065b6 <vListInsert>
 8108a32:	e016      	b.n	8108a62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8108a34:	2300      	movs	r3, #0
 8108a36:	9300      	str	r3, [sp, #0]
 8108a38:	2300      	movs	r3, #0
 8108a3a:	693a      	ldr	r2, [r7, #16]
 8108a3c:	2100      	movs	r1, #0
 8108a3e:	68f8      	ldr	r0, [r7, #12]
 8108a40:	f7ff fd60 	bl	8108504 <xTimerGenericCommand>
 8108a44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	2b00      	cmp	r3, #0
 8108a4a:	d10a      	bne.n	8108a62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8108a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a50:	f383 8811 	msr	BASEPRI, r3
 8108a54:	f3bf 8f6f 	isb	sy
 8108a58:	f3bf 8f4f 	dsb	sy
 8108a5c:	603b      	str	r3, [r7, #0]
}
 8108a5e:	bf00      	nop
 8108a60:	e7fe      	b.n	8108a60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108a62:	4b09      	ldr	r3, [pc, #36]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 8108a64:	681b      	ldr	r3, [r3, #0]
 8108a66:	681b      	ldr	r3, [r3, #0]
 8108a68:	2b00      	cmp	r3, #0
 8108a6a:	d1b1      	bne.n	81089d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8108a6c:	4b06      	ldr	r3, [pc, #24]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 8108a6e:	681b      	ldr	r3, [r3, #0]
 8108a70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8108a72:	4b06      	ldr	r3, [pc, #24]	; (8108a8c <prvSwitchTimerLists+0xc4>)
 8108a74:	681b      	ldr	r3, [r3, #0]
 8108a76:	4a04      	ldr	r2, [pc, #16]	; (8108a88 <prvSwitchTimerLists+0xc0>)
 8108a78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8108a7a:	4a04      	ldr	r2, [pc, #16]	; (8108a8c <prvSwitchTimerLists+0xc4>)
 8108a7c:	697b      	ldr	r3, [r7, #20]
 8108a7e:	6013      	str	r3, [r2, #0]
}
 8108a80:	bf00      	nop
 8108a82:	3718      	adds	r7, #24
 8108a84:	46bd      	mov	sp, r7
 8108a86:	bd80      	pop	{r7, pc}
 8108a88:	10004c88 	.word	0x10004c88
 8108a8c:	10004c8c 	.word	0x10004c8c

08108a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8108a90:	b580      	push	{r7, lr}
 8108a92:	b082      	sub	sp, #8
 8108a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8108a96:	f7fd ff1d 	bl	81068d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8108a9a:	4b15      	ldr	r3, [pc, #84]	; (8108af0 <prvCheckForValidListAndQueue+0x60>)
 8108a9c:	681b      	ldr	r3, [r3, #0]
 8108a9e:	2b00      	cmp	r3, #0
 8108aa0:	d120      	bne.n	8108ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8108aa2:	4814      	ldr	r0, [pc, #80]	; (8108af4 <prvCheckForValidListAndQueue+0x64>)
 8108aa4:	f7fd fd36 	bl	8106514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8108aa8:	4813      	ldr	r0, [pc, #76]	; (8108af8 <prvCheckForValidListAndQueue+0x68>)
 8108aaa:	f7fd fd33 	bl	8106514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8108aae:	4b13      	ldr	r3, [pc, #76]	; (8108afc <prvCheckForValidListAndQueue+0x6c>)
 8108ab0:	4a10      	ldr	r2, [pc, #64]	; (8108af4 <prvCheckForValidListAndQueue+0x64>)
 8108ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108ab4:	4b12      	ldr	r3, [pc, #72]	; (8108b00 <prvCheckForValidListAndQueue+0x70>)
 8108ab6:	4a10      	ldr	r2, [pc, #64]	; (8108af8 <prvCheckForValidListAndQueue+0x68>)
 8108ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8108aba:	2300      	movs	r3, #0
 8108abc:	9300      	str	r3, [sp, #0]
 8108abe:	4b11      	ldr	r3, [pc, #68]	; (8108b04 <prvCheckForValidListAndQueue+0x74>)
 8108ac0:	4a11      	ldr	r2, [pc, #68]	; (8108b08 <prvCheckForValidListAndQueue+0x78>)
 8108ac2:	2110      	movs	r1, #16
 8108ac4:	200a      	movs	r0, #10
 8108ac6:	f7fe f88f 	bl	8106be8 <xQueueGenericCreateStatic>
 8108aca:	4603      	mov	r3, r0
 8108acc:	4a08      	ldr	r2, [pc, #32]	; (8108af0 <prvCheckForValidListAndQueue+0x60>)
 8108ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108ad0:	4b07      	ldr	r3, [pc, #28]	; (8108af0 <prvCheckForValidListAndQueue+0x60>)
 8108ad2:	681b      	ldr	r3, [r3, #0]
 8108ad4:	2b00      	cmp	r3, #0
 8108ad6:	d005      	beq.n	8108ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8108ad8:	4b05      	ldr	r3, [pc, #20]	; (8108af0 <prvCheckForValidListAndQueue+0x60>)
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	490b      	ldr	r1, [pc, #44]	; (8108b0c <prvCheckForValidListAndQueue+0x7c>)
 8108ade:	4618      	mov	r0, r3
 8108ae0:	f7fe fca8 	bl	8107434 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108ae4:	f7fd ff26 	bl	8106934 <vPortExitCritical>
}
 8108ae8:	bf00      	nop
 8108aea:	46bd      	mov	sp, r7
 8108aec:	bd80      	pop	{r7, pc}
 8108aee:	bf00      	nop
 8108af0:	10004c90 	.word	0x10004c90
 8108af4:	10004c60 	.word	0x10004c60
 8108af8:	10004c74 	.word	0x10004c74
 8108afc:	10004c88 	.word	0x10004c88
 8108b00:	10004c8c 	.word	0x10004c8c
 8108b04:	10004d3c 	.word	0x10004d3c
 8108b08:	10004c9c 	.word	0x10004c9c
 8108b0c:	0810d5ac 	.word	0x0810d5ac

08108b10 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8108b10:	b580      	push	{r7, lr}
 8108b12:	b086      	sub	sp, #24
 8108b14:	af00      	add	r7, sp, #0
 8108b16:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	2b00      	cmp	r3, #0
 8108b20:	d10a      	bne.n	8108b38 <pvTimerGetTimerID+0x28>
	__asm volatile
 8108b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108b26:	f383 8811 	msr	BASEPRI, r3
 8108b2a:	f3bf 8f6f 	isb	sy
 8108b2e:	f3bf 8f4f 	dsb	sy
 8108b32:	60fb      	str	r3, [r7, #12]
}
 8108b34:	bf00      	nop
 8108b36:	e7fe      	b.n	8108b36 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8108b38:	f7fd fecc 	bl	81068d4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8108b3c:	697b      	ldr	r3, [r7, #20]
 8108b3e:	69db      	ldr	r3, [r3, #28]
 8108b40:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8108b42:	f7fd fef7 	bl	8106934 <vPortExitCritical>

	return pvReturn;
 8108b46:	693b      	ldr	r3, [r7, #16]
}
 8108b48:	4618      	mov	r0, r3
 8108b4a:	3718      	adds	r7, #24
 8108b4c:	46bd      	mov	sp, r7
 8108b4e:	bd80      	pop	{r7, pc}

08108b50 <__errno>:
 8108b50:	4b01      	ldr	r3, [pc, #4]	; (8108b58 <__errno+0x8>)
 8108b52:	6818      	ldr	r0, [r3, #0]
 8108b54:	4770      	bx	lr
 8108b56:	bf00      	nop
 8108b58:	1000002c 	.word	0x1000002c

08108b5c <std>:
 8108b5c:	2300      	movs	r3, #0
 8108b5e:	b510      	push	{r4, lr}
 8108b60:	4604      	mov	r4, r0
 8108b62:	e9c0 3300 	strd	r3, r3, [r0]
 8108b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108b6a:	6083      	str	r3, [r0, #8]
 8108b6c:	8181      	strh	r1, [r0, #12]
 8108b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8108b70:	81c2      	strh	r2, [r0, #14]
 8108b72:	6183      	str	r3, [r0, #24]
 8108b74:	4619      	mov	r1, r3
 8108b76:	2208      	movs	r2, #8
 8108b78:	305c      	adds	r0, #92	; 0x5c
 8108b7a:	f000 f91a 	bl	8108db2 <memset>
 8108b7e:	4b05      	ldr	r3, [pc, #20]	; (8108b94 <std+0x38>)
 8108b80:	6263      	str	r3, [r4, #36]	; 0x24
 8108b82:	4b05      	ldr	r3, [pc, #20]	; (8108b98 <std+0x3c>)
 8108b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8108b86:	4b05      	ldr	r3, [pc, #20]	; (8108b9c <std+0x40>)
 8108b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8108b8a:	4b05      	ldr	r3, [pc, #20]	; (8108ba0 <std+0x44>)
 8108b8c:	6224      	str	r4, [r4, #32]
 8108b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8108b90:	bd10      	pop	{r4, pc}
 8108b92:	bf00      	nop
 8108b94:	08109d21 	.word	0x08109d21
 8108b98:	08109d43 	.word	0x08109d43
 8108b9c:	08109d7b 	.word	0x08109d7b
 8108ba0:	08109d9f 	.word	0x08109d9f

08108ba4 <_cleanup_r>:
 8108ba4:	4901      	ldr	r1, [pc, #4]	; (8108bac <_cleanup_r+0x8>)
 8108ba6:	f000 b8af 	b.w	8108d08 <_fwalk_reent>
 8108baa:	bf00      	nop
 8108bac:	0810b949 	.word	0x0810b949

08108bb0 <__sfmoreglue>:
 8108bb0:	b570      	push	{r4, r5, r6, lr}
 8108bb2:	2268      	movs	r2, #104	; 0x68
 8108bb4:	1e4d      	subs	r5, r1, #1
 8108bb6:	4355      	muls	r5, r2
 8108bb8:	460e      	mov	r6, r1
 8108bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8108bbe:	f000 f921 	bl	8108e04 <_malloc_r>
 8108bc2:	4604      	mov	r4, r0
 8108bc4:	b140      	cbz	r0, 8108bd8 <__sfmoreglue+0x28>
 8108bc6:	2100      	movs	r1, #0
 8108bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8108bcc:	300c      	adds	r0, #12
 8108bce:	60a0      	str	r0, [r4, #8]
 8108bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8108bd4:	f000 f8ed 	bl	8108db2 <memset>
 8108bd8:	4620      	mov	r0, r4
 8108bda:	bd70      	pop	{r4, r5, r6, pc}

08108bdc <__sfp_lock_acquire>:
 8108bdc:	4801      	ldr	r0, [pc, #4]	; (8108be4 <__sfp_lock_acquire+0x8>)
 8108bde:	f000 b8d8 	b.w	8108d92 <__retarget_lock_acquire_recursive>
 8108be2:	bf00      	nop
 8108be4:	10004d8d 	.word	0x10004d8d

08108be8 <__sfp_lock_release>:
 8108be8:	4801      	ldr	r0, [pc, #4]	; (8108bf0 <__sfp_lock_release+0x8>)
 8108bea:	f000 b8d3 	b.w	8108d94 <__retarget_lock_release_recursive>
 8108bee:	bf00      	nop
 8108bf0:	10004d8d 	.word	0x10004d8d

08108bf4 <__sinit_lock_acquire>:
 8108bf4:	4801      	ldr	r0, [pc, #4]	; (8108bfc <__sinit_lock_acquire+0x8>)
 8108bf6:	f000 b8cc 	b.w	8108d92 <__retarget_lock_acquire_recursive>
 8108bfa:	bf00      	nop
 8108bfc:	10004d8e 	.word	0x10004d8e

08108c00 <__sinit_lock_release>:
 8108c00:	4801      	ldr	r0, [pc, #4]	; (8108c08 <__sinit_lock_release+0x8>)
 8108c02:	f000 b8c7 	b.w	8108d94 <__retarget_lock_release_recursive>
 8108c06:	bf00      	nop
 8108c08:	10004d8e 	.word	0x10004d8e

08108c0c <__sinit>:
 8108c0c:	b510      	push	{r4, lr}
 8108c0e:	4604      	mov	r4, r0
 8108c10:	f7ff fff0 	bl	8108bf4 <__sinit_lock_acquire>
 8108c14:	69a3      	ldr	r3, [r4, #24]
 8108c16:	b11b      	cbz	r3, 8108c20 <__sinit+0x14>
 8108c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108c1c:	f7ff bff0 	b.w	8108c00 <__sinit_lock_release>
 8108c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8108c24:	6523      	str	r3, [r4, #80]	; 0x50
 8108c26:	4b13      	ldr	r3, [pc, #76]	; (8108c74 <__sinit+0x68>)
 8108c28:	4a13      	ldr	r2, [pc, #76]	; (8108c78 <__sinit+0x6c>)
 8108c2a:	681b      	ldr	r3, [r3, #0]
 8108c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8108c2e:	42a3      	cmp	r3, r4
 8108c30:	bf04      	itt	eq
 8108c32:	2301      	moveq	r3, #1
 8108c34:	61a3      	streq	r3, [r4, #24]
 8108c36:	4620      	mov	r0, r4
 8108c38:	f000 f820 	bl	8108c7c <__sfp>
 8108c3c:	6060      	str	r0, [r4, #4]
 8108c3e:	4620      	mov	r0, r4
 8108c40:	f000 f81c 	bl	8108c7c <__sfp>
 8108c44:	60a0      	str	r0, [r4, #8]
 8108c46:	4620      	mov	r0, r4
 8108c48:	f000 f818 	bl	8108c7c <__sfp>
 8108c4c:	2200      	movs	r2, #0
 8108c4e:	60e0      	str	r0, [r4, #12]
 8108c50:	2104      	movs	r1, #4
 8108c52:	6860      	ldr	r0, [r4, #4]
 8108c54:	f7ff ff82 	bl	8108b5c <std>
 8108c58:	68a0      	ldr	r0, [r4, #8]
 8108c5a:	2201      	movs	r2, #1
 8108c5c:	2109      	movs	r1, #9
 8108c5e:	f7ff ff7d 	bl	8108b5c <std>
 8108c62:	68e0      	ldr	r0, [r4, #12]
 8108c64:	2202      	movs	r2, #2
 8108c66:	2112      	movs	r1, #18
 8108c68:	f7ff ff78 	bl	8108b5c <std>
 8108c6c:	2301      	movs	r3, #1
 8108c6e:	61a3      	str	r3, [r4, #24]
 8108c70:	e7d2      	b.n	8108c18 <__sinit+0xc>
 8108c72:	bf00      	nop
 8108c74:	0810d658 	.word	0x0810d658
 8108c78:	08108ba5 	.word	0x08108ba5

08108c7c <__sfp>:
 8108c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108c7e:	4607      	mov	r7, r0
 8108c80:	f7ff ffac 	bl	8108bdc <__sfp_lock_acquire>
 8108c84:	4b1e      	ldr	r3, [pc, #120]	; (8108d00 <__sfp+0x84>)
 8108c86:	681e      	ldr	r6, [r3, #0]
 8108c88:	69b3      	ldr	r3, [r6, #24]
 8108c8a:	b913      	cbnz	r3, 8108c92 <__sfp+0x16>
 8108c8c:	4630      	mov	r0, r6
 8108c8e:	f7ff ffbd 	bl	8108c0c <__sinit>
 8108c92:	3648      	adds	r6, #72	; 0x48
 8108c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8108c98:	3b01      	subs	r3, #1
 8108c9a:	d503      	bpl.n	8108ca4 <__sfp+0x28>
 8108c9c:	6833      	ldr	r3, [r6, #0]
 8108c9e:	b30b      	cbz	r3, 8108ce4 <__sfp+0x68>
 8108ca0:	6836      	ldr	r6, [r6, #0]
 8108ca2:	e7f7      	b.n	8108c94 <__sfp+0x18>
 8108ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8108ca8:	b9d5      	cbnz	r5, 8108ce0 <__sfp+0x64>
 8108caa:	4b16      	ldr	r3, [pc, #88]	; (8108d04 <__sfp+0x88>)
 8108cac:	60e3      	str	r3, [r4, #12]
 8108cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8108cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8108cb4:	f000 f86c 	bl	8108d90 <__retarget_lock_init_recursive>
 8108cb8:	f7ff ff96 	bl	8108be8 <__sfp_lock_release>
 8108cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8108cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8108cc4:	6025      	str	r5, [r4, #0]
 8108cc6:	61a5      	str	r5, [r4, #24]
 8108cc8:	2208      	movs	r2, #8
 8108cca:	4629      	mov	r1, r5
 8108ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8108cd0:	f000 f86f 	bl	8108db2 <memset>
 8108cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8108cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8108cdc:	4620      	mov	r0, r4
 8108cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108ce0:	3468      	adds	r4, #104	; 0x68
 8108ce2:	e7d9      	b.n	8108c98 <__sfp+0x1c>
 8108ce4:	2104      	movs	r1, #4
 8108ce6:	4638      	mov	r0, r7
 8108ce8:	f7ff ff62 	bl	8108bb0 <__sfmoreglue>
 8108cec:	4604      	mov	r4, r0
 8108cee:	6030      	str	r0, [r6, #0]
 8108cf0:	2800      	cmp	r0, #0
 8108cf2:	d1d5      	bne.n	8108ca0 <__sfp+0x24>
 8108cf4:	f7ff ff78 	bl	8108be8 <__sfp_lock_release>
 8108cf8:	230c      	movs	r3, #12
 8108cfa:	603b      	str	r3, [r7, #0]
 8108cfc:	e7ee      	b.n	8108cdc <__sfp+0x60>
 8108cfe:	bf00      	nop
 8108d00:	0810d658 	.word	0x0810d658
 8108d04:	ffff0001 	.word	0xffff0001

08108d08 <_fwalk_reent>:
 8108d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108d0c:	4606      	mov	r6, r0
 8108d0e:	4688      	mov	r8, r1
 8108d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8108d14:	2700      	movs	r7, #0
 8108d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8108d1e:	d505      	bpl.n	8108d2c <_fwalk_reent+0x24>
 8108d20:	6824      	ldr	r4, [r4, #0]
 8108d22:	2c00      	cmp	r4, #0
 8108d24:	d1f7      	bne.n	8108d16 <_fwalk_reent+0xe>
 8108d26:	4638      	mov	r0, r7
 8108d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108d2c:	89ab      	ldrh	r3, [r5, #12]
 8108d2e:	2b01      	cmp	r3, #1
 8108d30:	d907      	bls.n	8108d42 <_fwalk_reent+0x3a>
 8108d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108d36:	3301      	adds	r3, #1
 8108d38:	d003      	beq.n	8108d42 <_fwalk_reent+0x3a>
 8108d3a:	4629      	mov	r1, r5
 8108d3c:	4630      	mov	r0, r6
 8108d3e:	47c0      	blx	r8
 8108d40:	4307      	orrs	r7, r0
 8108d42:	3568      	adds	r5, #104	; 0x68
 8108d44:	e7e9      	b.n	8108d1a <_fwalk_reent+0x12>
	...

08108d48 <__libc_init_array>:
 8108d48:	b570      	push	{r4, r5, r6, lr}
 8108d4a:	4d0d      	ldr	r5, [pc, #52]	; (8108d80 <__libc_init_array+0x38>)
 8108d4c:	4c0d      	ldr	r4, [pc, #52]	; (8108d84 <__libc_init_array+0x3c>)
 8108d4e:	1b64      	subs	r4, r4, r5
 8108d50:	10a4      	asrs	r4, r4, #2
 8108d52:	2600      	movs	r6, #0
 8108d54:	42a6      	cmp	r6, r4
 8108d56:	d109      	bne.n	8108d6c <__libc_init_array+0x24>
 8108d58:	4d0b      	ldr	r5, [pc, #44]	; (8108d88 <__libc_init_array+0x40>)
 8108d5a:	4c0c      	ldr	r4, [pc, #48]	; (8108d8c <__libc_init_array+0x44>)
 8108d5c:	f004 fc06 	bl	810d56c <_init>
 8108d60:	1b64      	subs	r4, r4, r5
 8108d62:	10a4      	asrs	r4, r4, #2
 8108d64:	2600      	movs	r6, #0
 8108d66:	42a6      	cmp	r6, r4
 8108d68:	d105      	bne.n	8108d76 <__libc_init_array+0x2e>
 8108d6a:	bd70      	pop	{r4, r5, r6, pc}
 8108d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8108d70:	4798      	blx	r3
 8108d72:	3601      	adds	r6, #1
 8108d74:	e7ee      	b.n	8108d54 <__libc_init_array+0xc>
 8108d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8108d7a:	4798      	blx	r3
 8108d7c:	3601      	adds	r6, #1
 8108d7e:	e7f2      	b.n	8108d66 <__libc_init_array+0x1e>
 8108d80:	0810da9c 	.word	0x0810da9c
 8108d84:	0810da9c 	.word	0x0810da9c
 8108d88:	0810da9c 	.word	0x0810da9c
 8108d8c:	0810daa0 	.word	0x0810daa0

08108d90 <__retarget_lock_init_recursive>:
 8108d90:	4770      	bx	lr

08108d92 <__retarget_lock_acquire_recursive>:
 8108d92:	4770      	bx	lr

08108d94 <__retarget_lock_release_recursive>:
 8108d94:	4770      	bx	lr

08108d96 <memcpy>:
 8108d96:	440a      	add	r2, r1
 8108d98:	4291      	cmp	r1, r2
 8108d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8108d9e:	d100      	bne.n	8108da2 <memcpy+0xc>
 8108da0:	4770      	bx	lr
 8108da2:	b510      	push	{r4, lr}
 8108da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108dac:	4291      	cmp	r1, r2
 8108dae:	d1f9      	bne.n	8108da4 <memcpy+0xe>
 8108db0:	bd10      	pop	{r4, pc}

08108db2 <memset>:
 8108db2:	4402      	add	r2, r0
 8108db4:	4603      	mov	r3, r0
 8108db6:	4293      	cmp	r3, r2
 8108db8:	d100      	bne.n	8108dbc <memset+0xa>
 8108dba:	4770      	bx	lr
 8108dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8108dc0:	e7f9      	b.n	8108db6 <memset+0x4>
	...

08108dc4 <sbrk_aligned>:
 8108dc4:	b570      	push	{r4, r5, r6, lr}
 8108dc6:	4e0e      	ldr	r6, [pc, #56]	; (8108e00 <sbrk_aligned+0x3c>)
 8108dc8:	460c      	mov	r4, r1
 8108dca:	6831      	ldr	r1, [r6, #0]
 8108dcc:	4605      	mov	r5, r0
 8108dce:	b911      	cbnz	r1, 8108dd6 <sbrk_aligned+0x12>
 8108dd0:	f000 ff70 	bl	8109cb4 <_sbrk_r>
 8108dd4:	6030      	str	r0, [r6, #0]
 8108dd6:	4621      	mov	r1, r4
 8108dd8:	4628      	mov	r0, r5
 8108dda:	f000 ff6b 	bl	8109cb4 <_sbrk_r>
 8108dde:	1c43      	adds	r3, r0, #1
 8108de0:	d00a      	beq.n	8108df8 <sbrk_aligned+0x34>
 8108de2:	1cc4      	adds	r4, r0, #3
 8108de4:	f024 0403 	bic.w	r4, r4, #3
 8108de8:	42a0      	cmp	r0, r4
 8108dea:	d007      	beq.n	8108dfc <sbrk_aligned+0x38>
 8108dec:	1a21      	subs	r1, r4, r0
 8108dee:	4628      	mov	r0, r5
 8108df0:	f000 ff60 	bl	8109cb4 <_sbrk_r>
 8108df4:	3001      	adds	r0, #1
 8108df6:	d101      	bne.n	8108dfc <sbrk_aligned+0x38>
 8108df8:	f04f 34ff 	mov.w	r4, #4294967295
 8108dfc:	4620      	mov	r0, r4
 8108dfe:	bd70      	pop	{r4, r5, r6, pc}
 8108e00:	10004d94 	.word	0x10004d94

08108e04 <_malloc_r>:
 8108e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108e08:	1ccd      	adds	r5, r1, #3
 8108e0a:	f025 0503 	bic.w	r5, r5, #3
 8108e0e:	3508      	adds	r5, #8
 8108e10:	2d0c      	cmp	r5, #12
 8108e12:	bf38      	it	cc
 8108e14:	250c      	movcc	r5, #12
 8108e16:	2d00      	cmp	r5, #0
 8108e18:	4607      	mov	r7, r0
 8108e1a:	db01      	blt.n	8108e20 <_malloc_r+0x1c>
 8108e1c:	42a9      	cmp	r1, r5
 8108e1e:	d905      	bls.n	8108e2c <_malloc_r+0x28>
 8108e20:	230c      	movs	r3, #12
 8108e22:	603b      	str	r3, [r7, #0]
 8108e24:	2600      	movs	r6, #0
 8108e26:	4630      	mov	r0, r6
 8108e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108e2c:	4e2e      	ldr	r6, [pc, #184]	; (8108ee8 <_malloc_r+0xe4>)
 8108e2e:	f003 f967 	bl	810c100 <__malloc_lock>
 8108e32:	6833      	ldr	r3, [r6, #0]
 8108e34:	461c      	mov	r4, r3
 8108e36:	bb34      	cbnz	r4, 8108e86 <_malloc_r+0x82>
 8108e38:	4629      	mov	r1, r5
 8108e3a:	4638      	mov	r0, r7
 8108e3c:	f7ff ffc2 	bl	8108dc4 <sbrk_aligned>
 8108e40:	1c43      	adds	r3, r0, #1
 8108e42:	4604      	mov	r4, r0
 8108e44:	d14d      	bne.n	8108ee2 <_malloc_r+0xde>
 8108e46:	6834      	ldr	r4, [r6, #0]
 8108e48:	4626      	mov	r6, r4
 8108e4a:	2e00      	cmp	r6, #0
 8108e4c:	d140      	bne.n	8108ed0 <_malloc_r+0xcc>
 8108e4e:	6823      	ldr	r3, [r4, #0]
 8108e50:	4631      	mov	r1, r6
 8108e52:	4638      	mov	r0, r7
 8108e54:	eb04 0803 	add.w	r8, r4, r3
 8108e58:	f000 ff2c 	bl	8109cb4 <_sbrk_r>
 8108e5c:	4580      	cmp	r8, r0
 8108e5e:	d13a      	bne.n	8108ed6 <_malloc_r+0xd2>
 8108e60:	6821      	ldr	r1, [r4, #0]
 8108e62:	3503      	adds	r5, #3
 8108e64:	1a6d      	subs	r5, r5, r1
 8108e66:	f025 0503 	bic.w	r5, r5, #3
 8108e6a:	3508      	adds	r5, #8
 8108e6c:	2d0c      	cmp	r5, #12
 8108e6e:	bf38      	it	cc
 8108e70:	250c      	movcc	r5, #12
 8108e72:	4629      	mov	r1, r5
 8108e74:	4638      	mov	r0, r7
 8108e76:	f7ff ffa5 	bl	8108dc4 <sbrk_aligned>
 8108e7a:	3001      	adds	r0, #1
 8108e7c:	d02b      	beq.n	8108ed6 <_malloc_r+0xd2>
 8108e7e:	6823      	ldr	r3, [r4, #0]
 8108e80:	442b      	add	r3, r5
 8108e82:	6023      	str	r3, [r4, #0]
 8108e84:	e00e      	b.n	8108ea4 <_malloc_r+0xa0>
 8108e86:	6822      	ldr	r2, [r4, #0]
 8108e88:	1b52      	subs	r2, r2, r5
 8108e8a:	d41e      	bmi.n	8108eca <_malloc_r+0xc6>
 8108e8c:	2a0b      	cmp	r2, #11
 8108e8e:	d916      	bls.n	8108ebe <_malloc_r+0xba>
 8108e90:	1961      	adds	r1, r4, r5
 8108e92:	42a3      	cmp	r3, r4
 8108e94:	6025      	str	r5, [r4, #0]
 8108e96:	bf18      	it	ne
 8108e98:	6059      	strne	r1, [r3, #4]
 8108e9a:	6863      	ldr	r3, [r4, #4]
 8108e9c:	bf08      	it	eq
 8108e9e:	6031      	streq	r1, [r6, #0]
 8108ea0:	5162      	str	r2, [r4, r5]
 8108ea2:	604b      	str	r3, [r1, #4]
 8108ea4:	4638      	mov	r0, r7
 8108ea6:	f104 060b 	add.w	r6, r4, #11
 8108eaa:	f003 f92f 	bl	810c10c <__malloc_unlock>
 8108eae:	f026 0607 	bic.w	r6, r6, #7
 8108eb2:	1d23      	adds	r3, r4, #4
 8108eb4:	1af2      	subs	r2, r6, r3
 8108eb6:	d0b6      	beq.n	8108e26 <_malloc_r+0x22>
 8108eb8:	1b9b      	subs	r3, r3, r6
 8108eba:	50a3      	str	r3, [r4, r2]
 8108ebc:	e7b3      	b.n	8108e26 <_malloc_r+0x22>
 8108ebe:	6862      	ldr	r2, [r4, #4]
 8108ec0:	42a3      	cmp	r3, r4
 8108ec2:	bf0c      	ite	eq
 8108ec4:	6032      	streq	r2, [r6, #0]
 8108ec6:	605a      	strne	r2, [r3, #4]
 8108ec8:	e7ec      	b.n	8108ea4 <_malloc_r+0xa0>
 8108eca:	4623      	mov	r3, r4
 8108ecc:	6864      	ldr	r4, [r4, #4]
 8108ece:	e7b2      	b.n	8108e36 <_malloc_r+0x32>
 8108ed0:	4634      	mov	r4, r6
 8108ed2:	6876      	ldr	r6, [r6, #4]
 8108ed4:	e7b9      	b.n	8108e4a <_malloc_r+0x46>
 8108ed6:	230c      	movs	r3, #12
 8108ed8:	603b      	str	r3, [r7, #0]
 8108eda:	4638      	mov	r0, r7
 8108edc:	f003 f916 	bl	810c10c <__malloc_unlock>
 8108ee0:	e7a1      	b.n	8108e26 <_malloc_r+0x22>
 8108ee2:	6025      	str	r5, [r4, #0]
 8108ee4:	e7de      	b.n	8108ea4 <_malloc_r+0xa0>
 8108ee6:	bf00      	nop
 8108ee8:	10004d90 	.word	0x10004d90

08108eec <__cvt>:
 8108eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108ef0:	ec55 4b10 	vmov	r4, r5, d0
 8108ef4:	2d00      	cmp	r5, #0
 8108ef6:	460e      	mov	r6, r1
 8108ef8:	4619      	mov	r1, r3
 8108efa:	462b      	mov	r3, r5
 8108efc:	bfbb      	ittet	lt
 8108efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108f02:	461d      	movlt	r5, r3
 8108f04:	2300      	movge	r3, #0
 8108f06:	232d      	movlt	r3, #45	; 0x2d
 8108f08:	700b      	strb	r3, [r1, #0]
 8108f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108f10:	4691      	mov	r9, r2
 8108f12:	f023 0820 	bic.w	r8, r3, #32
 8108f16:	bfbc      	itt	lt
 8108f18:	4622      	movlt	r2, r4
 8108f1a:	4614      	movlt	r4, r2
 8108f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108f20:	d005      	beq.n	8108f2e <__cvt+0x42>
 8108f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108f26:	d100      	bne.n	8108f2a <__cvt+0x3e>
 8108f28:	3601      	adds	r6, #1
 8108f2a:	2102      	movs	r1, #2
 8108f2c:	e000      	b.n	8108f30 <__cvt+0x44>
 8108f2e:	2103      	movs	r1, #3
 8108f30:	ab03      	add	r3, sp, #12
 8108f32:	9301      	str	r3, [sp, #4]
 8108f34:	ab02      	add	r3, sp, #8
 8108f36:	9300      	str	r3, [sp, #0]
 8108f38:	ec45 4b10 	vmov	d0, r4, r5
 8108f3c:	4653      	mov	r3, sl
 8108f3e:	4632      	mov	r2, r6
 8108f40:	f001 fe8e 	bl	810ac60 <_dtoa_r>
 8108f44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108f48:	4607      	mov	r7, r0
 8108f4a:	d102      	bne.n	8108f52 <__cvt+0x66>
 8108f4c:	f019 0f01 	tst.w	r9, #1
 8108f50:	d022      	beq.n	8108f98 <__cvt+0xac>
 8108f52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108f56:	eb07 0906 	add.w	r9, r7, r6
 8108f5a:	d110      	bne.n	8108f7e <__cvt+0x92>
 8108f5c:	783b      	ldrb	r3, [r7, #0]
 8108f5e:	2b30      	cmp	r3, #48	; 0x30
 8108f60:	d10a      	bne.n	8108f78 <__cvt+0x8c>
 8108f62:	2200      	movs	r2, #0
 8108f64:	2300      	movs	r3, #0
 8108f66:	4620      	mov	r0, r4
 8108f68:	4629      	mov	r1, r5
 8108f6a:	f7f7 fe35 	bl	8100bd8 <__aeabi_dcmpeq>
 8108f6e:	b918      	cbnz	r0, 8108f78 <__cvt+0x8c>
 8108f70:	f1c6 0601 	rsb	r6, r6, #1
 8108f74:	f8ca 6000 	str.w	r6, [sl]
 8108f78:	f8da 3000 	ldr.w	r3, [sl]
 8108f7c:	4499      	add	r9, r3
 8108f7e:	2200      	movs	r2, #0
 8108f80:	2300      	movs	r3, #0
 8108f82:	4620      	mov	r0, r4
 8108f84:	4629      	mov	r1, r5
 8108f86:	f7f7 fe27 	bl	8100bd8 <__aeabi_dcmpeq>
 8108f8a:	b108      	cbz	r0, 8108f90 <__cvt+0xa4>
 8108f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8108f90:	2230      	movs	r2, #48	; 0x30
 8108f92:	9b03      	ldr	r3, [sp, #12]
 8108f94:	454b      	cmp	r3, r9
 8108f96:	d307      	bcc.n	8108fa8 <__cvt+0xbc>
 8108f98:	9b03      	ldr	r3, [sp, #12]
 8108f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108f9c:	1bdb      	subs	r3, r3, r7
 8108f9e:	4638      	mov	r0, r7
 8108fa0:	6013      	str	r3, [r2, #0]
 8108fa2:	b004      	add	sp, #16
 8108fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108fa8:	1c59      	adds	r1, r3, #1
 8108faa:	9103      	str	r1, [sp, #12]
 8108fac:	701a      	strb	r2, [r3, #0]
 8108fae:	e7f0      	b.n	8108f92 <__cvt+0xa6>

08108fb0 <__exponent>:
 8108fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108fb2:	4603      	mov	r3, r0
 8108fb4:	2900      	cmp	r1, #0
 8108fb6:	bfb8      	it	lt
 8108fb8:	4249      	neglt	r1, r1
 8108fba:	f803 2b02 	strb.w	r2, [r3], #2
 8108fbe:	bfb4      	ite	lt
 8108fc0:	222d      	movlt	r2, #45	; 0x2d
 8108fc2:	222b      	movge	r2, #43	; 0x2b
 8108fc4:	2909      	cmp	r1, #9
 8108fc6:	7042      	strb	r2, [r0, #1]
 8108fc8:	dd2a      	ble.n	8109020 <__exponent+0x70>
 8108fca:	f10d 0407 	add.w	r4, sp, #7
 8108fce:	46a4      	mov	ip, r4
 8108fd0:	270a      	movs	r7, #10
 8108fd2:	46a6      	mov	lr, r4
 8108fd4:	460a      	mov	r2, r1
 8108fd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8108fda:	fb07 1516 	mls	r5, r7, r6, r1
 8108fde:	3530      	adds	r5, #48	; 0x30
 8108fe0:	2a63      	cmp	r2, #99	; 0x63
 8108fe2:	f104 34ff 	add.w	r4, r4, #4294967295
 8108fe6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8108fea:	4631      	mov	r1, r6
 8108fec:	dcf1      	bgt.n	8108fd2 <__exponent+0x22>
 8108fee:	3130      	adds	r1, #48	; 0x30
 8108ff0:	f1ae 0502 	sub.w	r5, lr, #2
 8108ff4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8108ff8:	1c44      	adds	r4, r0, #1
 8108ffa:	4629      	mov	r1, r5
 8108ffc:	4561      	cmp	r1, ip
 8108ffe:	d30a      	bcc.n	8109016 <__exponent+0x66>
 8109000:	f10d 0209 	add.w	r2, sp, #9
 8109004:	eba2 020e 	sub.w	r2, r2, lr
 8109008:	4565      	cmp	r5, ip
 810900a:	bf88      	it	hi
 810900c:	2200      	movhi	r2, #0
 810900e:	4413      	add	r3, r2
 8109010:	1a18      	subs	r0, r3, r0
 8109012:	b003      	add	sp, #12
 8109014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109016:	f811 2b01 	ldrb.w	r2, [r1], #1
 810901a:	f804 2f01 	strb.w	r2, [r4, #1]!
 810901e:	e7ed      	b.n	8108ffc <__exponent+0x4c>
 8109020:	2330      	movs	r3, #48	; 0x30
 8109022:	3130      	adds	r1, #48	; 0x30
 8109024:	7083      	strb	r3, [r0, #2]
 8109026:	70c1      	strb	r1, [r0, #3]
 8109028:	1d03      	adds	r3, r0, #4
 810902a:	e7f1      	b.n	8109010 <__exponent+0x60>

0810902c <_printf_float>:
 810902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109030:	ed2d 8b02 	vpush	{d8}
 8109034:	b08d      	sub	sp, #52	; 0x34
 8109036:	460c      	mov	r4, r1
 8109038:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810903c:	4616      	mov	r6, r2
 810903e:	461f      	mov	r7, r3
 8109040:	4605      	mov	r5, r0
 8109042:	f003 f82d 	bl	810c0a0 <_localeconv_r>
 8109046:	f8d0 a000 	ldr.w	sl, [r0]
 810904a:	4650      	mov	r0, sl
 810904c:	f7f7 f948 	bl	81002e0 <strlen>
 8109050:	2300      	movs	r3, #0
 8109052:	930a      	str	r3, [sp, #40]	; 0x28
 8109054:	6823      	ldr	r3, [r4, #0]
 8109056:	9305      	str	r3, [sp, #20]
 8109058:	f8d8 3000 	ldr.w	r3, [r8]
 810905c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109060:	3307      	adds	r3, #7
 8109062:	f023 0307 	bic.w	r3, r3, #7
 8109066:	f103 0208 	add.w	r2, r3, #8
 810906a:	f8c8 2000 	str.w	r2, [r8]
 810906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109072:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8109076:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810907a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810907e:	9307      	str	r3, [sp, #28]
 8109080:	f8cd 8018 	str.w	r8, [sp, #24]
 8109084:	ee08 0a10 	vmov	s16, r0
 8109088:	4b9f      	ldr	r3, [pc, #636]	; (8109308 <_printf_float+0x2dc>)
 810908a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810908e:	f04f 32ff 	mov.w	r2, #4294967295
 8109092:	f7f7 fdd3 	bl	8100c3c <__aeabi_dcmpun>
 8109096:	bb88      	cbnz	r0, 81090fc <_printf_float+0xd0>
 8109098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810909c:	4b9a      	ldr	r3, [pc, #616]	; (8109308 <_printf_float+0x2dc>)
 810909e:	f04f 32ff 	mov.w	r2, #4294967295
 81090a2:	f7f7 fdad 	bl	8100c00 <__aeabi_dcmple>
 81090a6:	bb48      	cbnz	r0, 81090fc <_printf_float+0xd0>
 81090a8:	2200      	movs	r2, #0
 81090aa:	2300      	movs	r3, #0
 81090ac:	4640      	mov	r0, r8
 81090ae:	4649      	mov	r1, r9
 81090b0:	f7f7 fd9c 	bl	8100bec <__aeabi_dcmplt>
 81090b4:	b110      	cbz	r0, 81090bc <_printf_float+0x90>
 81090b6:	232d      	movs	r3, #45	; 0x2d
 81090b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81090bc:	4b93      	ldr	r3, [pc, #588]	; (810930c <_printf_float+0x2e0>)
 81090be:	4894      	ldr	r0, [pc, #592]	; (8109310 <_printf_float+0x2e4>)
 81090c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81090c4:	bf94      	ite	ls
 81090c6:	4698      	movls	r8, r3
 81090c8:	4680      	movhi	r8, r0
 81090ca:	2303      	movs	r3, #3
 81090cc:	6123      	str	r3, [r4, #16]
 81090ce:	9b05      	ldr	r3, [sp, #20]
 81090d0:	f023 0204 	bic.w	r2, r3, #4
 81090d4:	6022      	str	r2, [r4, #0]
 81090d6:	f04f 0900 	mov.w	r9, #0
 81090da:	9700      	str	r7, [sp, #0]
 81090dc:	4633      	mov	r3, r6
 81090de:	aa0b      	add	r2, sp, #44	; 0x2c
 81090e0:	4621      	mov	r1, r4
 81090e2:	4628      	mov	r0, r5
 81090e4:	f000 f9d8 	bl	8109498 <_printf_common>
 81090e8:	3001      	adds	r0, #1
 81090ea:	f040 8090 	bne.w	810920e <_printf_float+0x1e2>
 81090ee:	f04f 30ff 	mov.w	r0, #4294967295
 81090f2:	b00d      	add	sp, #52	; 0x34
 81090f4:	ecbd 8b02 	vpop	{d8}
 81090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81090fc:	4642      	mov	r2, r8
 81090fe:	464b      	mov	r3, r9
 8109100:	4640      	mov	r0, r8
 8109102:	4649      	mov	r1, r9
 8109104:	f7f7 fd9a 	bl	8100c3c <__aeabi_dcmpun>
 8109108:	b140      	cbz	r0, 810911c <_printf_float+0xf0>
 810910a:	464b      	mov	r3, r9
 810910c:	2b00      	cmp	r3, #0
 810910e:	bfbc      	itt	lt
 8109110:	232d      	movlt	r3, #45	; 0x2d
 8109112:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109116:	487f      	ldr	r0, [pc, #508]	; (8109314 <_printf_float+0x2e8>)
 8109118:	4b7f      	ldr	r3, [pc, #508]	; (8109318 <_printf_float+0x2ec>)
 810911a:	e7d1      	b.n	81090c0 <_printf_float+0x94>
 810911c:	6863      	ldr	r3, [r4, #4]
 810911e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109122:	9206      	str	r2, [sp, #24]
 8109124:	1c5a      	adds	r2, r3, #1
 8109126:	d13f      	bne.n	81091a8 <_printf_float+0x17c>
 8109128:	2306      	movs	r3, #6
 810912a:	6063      	str	r3, [r4, #4]
 810912c:	9b05      	ldr	r3, [sp, #20]
 810912e:	6861      	ldr	r1, [r4, #4]
 8109130:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109134:	2300      	movs	r3, #0
 8109136:	9303      	str	r3, [sp, #12]
 8109138:	ab0a      	add	r3, sp, #40	; 0x28
 810913a:	e9cd b301 	strd	fp, r3, [sp, #4]
 810913e:	ab09      	add	r3, sp, #36	; 0x24
 8109140:	ec49 8b10 	vmov	d0, r8, r9
 8109144:	9300      	str	r3, [sp, #0]
 8109146:	6022      	str	r2, [r4, #0]
 8109148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810914c:	4628      	mov	r0, r5
 810914e:	f7ff fecd 	bl	8108eec <__cvt>
 8109152:	9b06      	ldr	r3, [sp, #24]
 8109154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109156:	2b47      	cmp	r3, #71	; 0x47
 8109158:	4680      	mov	r8, r0
 810915a:	d108      	bne.n	810916e <_printf_float+0x142>
 810915c:	1cc8      	adds	r0, r1, #3
 810915e:	db02      	blt.n	8109166 <_printf_float+0x13a>
 8109160:	6863      	ldr	r3, [r4, #4]
 8109162:	4299      	cmp	r1, r3
 8109164:	dd41      	ble.n	81091ea <_printf_float+0x1be>
 8109166:	f1ab 0b02 	sub.w	fp, fp, #2
 810916a:	fa5f fb8b 	uxtb.w	fp, fp
 810916e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109172:	d820      	bhi.n	81091b6 <_printf_float+0x18a>
 8109174:	3901      	subs	r1, #1
 8109176:	465a      	mov	r2, fp
 8109178:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810917c:	9109      	str	r1, [sp, #36]	; 0x24
 810917e:	f7ff ff17 	bl	8108fb0 <__exponent>
 8109182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109184:	1813      	adds	r3, r2, r0
 8109186:	2a01      	cmp	r2, #1
 8109188:	4681      	mov	r9, r0
 810918a:	6123      	str	r3, [r4, #16]
 810918c:	dc02      	bgt.n	8109194 <_printf_float+0x168>
 810918e:	6822      	ldr	r2, [r4, #0]
 8109190:	07d2      	lsls	r2, r2, #31
 8109192:	d501      	bpl.n	8109198 <_printf_float+0x16c>
 8109194:	3301      	adds	r3, #1
 8109196:	6123      	str	r3, [r4, #16]
 8109198:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810919c:	2b00      	cmp	r3, #0
 810919e:	d09c      	beq.n	81090da <_printf_float+0xae>
 81091a0:	232d      	movs	r3, #45	; 0x2d
 81091a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81091a6:	e798      	b.n	81090da <_printf_float+0xae>
 81091a8:	9a06      	ldr	r2, [sp, #24]
 81091aa:	2a47      	cmp	r2, #71	; 0x47
 81091ac:	d1be      	bne.n	810912c <_printf_float+0x100>
 81091ae:	2b00      	cmp	r3, #0
 81091b0:	d1bc      	bne.n	810912c <_printf_float+0x100>
 81091b2:	2301      	movs	r3, #1
 81091b4:	e7b9      	b.n	810912a <_printf_float+0xfe>
 81091b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81091ba:	d118      	bne.n	81091ee <_printf_float+0x1c2>
 81091bc:	2900      	cmp	r1, #0
 81091be:	6863      	ldr	r3, [r4, #4]
 81091c0:	dd0b      	ble.n	81091da <_printf_float+0x1ae>
 81091c2:	6121      	str	r1, [r4, #16]
 81091c4:	b913      	cbnz	r3, 81091cc <_printf_float+0x1a0>
 81091c6:	6822      	ldr	r2, [r4, #0]
 81091c8:	07d0      	lsls	r0, r2, #31
 81091ca:	d502      	bpl.n	81091d2 <_printf_float+0x1a6>
 81091cc:	3301      	adds	r3, #1
 81091ce:	440b      	add	r3, r1
 81091d0:	6123      	str	r3, [r4, #16]
 81091d2:	65a1      	str	r1, [r4, #88]	; 0x58
 81091d4:	f04f 0900 	mov.w	r9, #0
 81091d8:	e7de      	b.n	8109198 <_printf_float+0x16c>
 81091da:	b913      	cbnz	r3, 81091e2 <_printf_float+0x1b6>
 81091dc:	6822      	ldr	r2, [r4, #0]
 81091de:	07d2      	lsls	r2, r2, #31
 81091e0:	d501      	bpl.n	81091e6 <_printf_float+0x1ba>
 81091e2:	3302      	adds	r3, #2
 81091e4:	e7f4      	b.n	81091d0 <_printf_float+0x1a4>
 81091e6:	2301      	movs	r3, #1
 81091e8:	e7f2      	b.n	81091d0 <_printf_float+0x1a4>
 81091ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81091ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81091f0:	4299      	cmp	r1, r3
 81091f2:	db05      	blt.n	8109200 <_printf_float+0x1d4>
 81091f4:	6823      	ldr	r3, [r4, #0]
 81091f6:	6121      	str	r1, [r4, #16]
 81091f8:	07d8      	lsls	r0, r3, #31
 81091fa:	d5ea      	bpl.n	81091d2 <_printf_float+0x1a6>
 81091fc:	1c4b      	adds	r3, r1, #1
 81091fe:	e7e7      	b.n	81091d0 <_printf_float+0x1a4>
 8109200:	2900      	cmp	r1, #0
 8109202:	bfd4      	ite	le
 8109204:	f1c1 0202 	rsble	r2, r1, #2
 8109208:	2201      	movgt	r2, #1
 810920a:	4413      	add	r3, r2
 810920c:	e7e0      	b.n	81091d0 <_printf_float+0x1a4>
 810920e:	6823      	ldr	r3, [r4, #0]
 8109210:	055a      	lsls	r2, r3, #21
 8109212:	d407      	bmi.n	8109224 <_printf_float+0x1f8>
 8109214:	6923      	ldr	r3, [r4, #16]
 8109216:	4642      	mov	r2, r8
 8109218:	4631      	mov	r1, r6
 810921a:	4628      	mov	r0, r5
 810921c:	47b8      	blx	r7
 810921e:	3001      	adds	r0, #1
 8109220:	d12c      	bne.n	810927c <_printf_float+0x250>
 8109222:	e764      	b.n	81090ee <_printf_float+0xc2>
 8109224:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109228:	f240 80e0 	bls.w	81093ec <_printf_float+0x3c0>
 810922c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109230:	2200      	movs	r2, #0
 8109232:	2300      	movs	r3, #0
 8109234:	f7f7 fcd0 	bl	8100bd8 <__aeabi_dcmpeq>
 8109238:	2800      	cmp	r0, #0
 810923a:	d034      	beq.n	81092a6 <_printf_float+0x27a>
 810923c:	4a37      	ldr	r2, [pc, #220]	; (810931c <_printf_float+0x2f0>)
 810923e:	2301      	movs	r3, #1
 8109240:	4631      	mov	r1, r6
 8109242:	4628      	mov	r0, r5
 8109244:	47b8      	blx	r7
 8109246:	3001      	adds	r0, #1
 8109248:	f43f af51 	beq.w	81090ee <_printf_float+0xc2>
 810924c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109250:	429a      	cmp	r2, r3
 8109252:	db02      	blt.n	810925a <_printf_float+0x22e>
 8109254:	6823      	ldr	r3, [r4, #0]
 8109256:	07d8      	lsls	r0, r3, #31
 8109258:	d510      	bpl.n	810927c <_printf_float+0x250>
 810925a:	ee18 3a10 	vmov	r3, s16
 810925e:	4652      	mov	r2, sl
 8109260:	4631      	mov	r1, r6
 8109262:	4628      	mov	r0, r5
 8109264:	47b8      	blx	r7
 8109266:	3001      	adds	r0, #1
 8109268:	f43f af41 	beq.w	81090ee <_printf_float+0xc2>
 810926c:	f04f 0800 	mov.w	r8, #0
 8109270:	f104 091a 	add.w	r9, r4, #26
 8109274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109276:	3b01      	subs	r3, #1
 8109278:	4543      	cmp	r3, r8
 810927a:	dc09      	bgt.n	8109290 <_printf_float+0x264>
 810927c:	6823      	ldr	r3, [r4, #0]
 810927e:	079b      	lsls	r3, r3, #30
 8109280:	f100 8105 	bmi.w	810948e <_printf_float+0x462>
 8109284:	68e0      	ldr	r0, [r4, #12]
 8109286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109288:	4298      	cmp	r0, r3
 810928a:	bfb8      	it	lt
 810928c:	4618      	movlt	r0, r3
 810928e:	e730      	b.n	81090f2 <_printf_float+0xc6>
 8109290:	2301      	movs	r3, #1
 8109292:	464a      	mov	r2, r9
 8109294:	4631      	mov	r1, r6
 8109296:	4628      	mov	r0, r5
 8109298:	47b8      	blx	r7
 810929a:	3001      	adds	r0, #1
 810929c:	f43f af27 	beq.w	81090ee <_printf_float+0xc2>
 81092a0:	f108 0801 	add.w	r8, r8, #1
 81092a4:	e7e6      	b.n	8109274 <_printf_float+0x248>
 81092a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81092a8:	2b00      	cmp	r3, #0
 81092aa:	dc39      	bgt.n	8109320 <_printf_float+0x2f4>
 81092ac:	4a1b      	ldr	r2, [pc, #108]	; (810931c <_printf_float+0x2f0>)
 81092ae:	2301      	movs	r3, #1
 81092b0:	4631      	mov	r1, r6
 81092b2:	4628      	mov	r0, r5
 81092b4:	47b8      	blx	r7
 81092b6:	3001      	adds	r0, #1
 81092b8:	f43f af19 	beq.w	81090ee <_printf_float+0xc2>
 81092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81092c0:	4313      	orrs	r3, r2
 81092c2:	d102      	bne.n	81092ca <_printf_float+0x29e>
 81092c4:	6823      	ldr	r3, [r4, #0]
 81092c6:	07d9      	lsls	r1, r3, #31
 81092c8:	d5d8      	bpl.n	810927c <_printf_float+0x250>
 81092ca:	ee18 3a10 	vmov	r3, s16
 81092ce:	4652      	mov	r2, sl
 81092d0:	4631      	mov	r1, r6
 81092d2:	4628      	mov	r0, r5
 81092d4:	47b8      	blx	r7
 81092d6:	3001      	adds	r0, #1
 81092d8:	f43f af09 	beq.w	81090ee <_printf_float+0xc2>
 81092dc:	f04f 0900 	mov.w	r9, #0
 81092e0:	f104 0a1a 	add.w	sl, r4, #26
 81092e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81092e6:	425b      	negs	r3, r3
 81092e8:	454b      	cmp	r3, r9
 81092ea:	dc01      	bgt.n	81092f0 <_printf_float+0x2c4>
 81092ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81092ee:	e792      	b.n	8109216 <_printf_float+0x1ea>
 81092f0:	2301      	movs	r3, #1
 81092f2:	4652      	mov	r2, sl
 81092f4:	4631      	mov	r1, r6
 81092f6:	4628      	mov	r0, r5
 81092f8:	47b8      	blx	r7
 81092fa:	3001      	adds	r0, #1
 81092fc:	f43f aef7 	beq.w	81090ee <_printf_float+0xc2>
 8109300:	f109 0901 	add.w	r9, r9, #1
 8109304:	e7ee      	b.n	81092e4 <_printf_float+0x2b8>
 8109306:	bf00      	nop
 8109308:	7fefffff 	.word	0x7fefffff
 810930c:	0810d65c 	.word	0x0810d65c
 8109310:	0810d660 	.word	0x0810d660
 8109314:	0810d668 	.word	0x0810d668
 8109318:	0810d664 	.word	0x0810d664
 810931c:	0810d66c 	.word	0x0810d66c
 8109320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109324:	429a      	cmp	r2, r3
 8109326:	bfa8      	it	ge
 8109328:	461a      	movge	r2, r3
 810932a:	2a00      	cmp	r2, #0
 810932c:	4691      	mov	r9, r2
 810932e:	dc37      	bgt.n	81093a0 <_printf_float+0x374>
 8109330:	f04f 0b00 	mov.w	fp, #0
 8109334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109338:	f104 021a 	add.w	r2, r4, #26
 810933c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810933e:	9305      	str	r3, [sp, #20]
 8109340:	eba3 0309 	sub.w	r3, r3, r9
 8109344:	455b      	cmp	r3, fp
 8109346:	dc33      	bgt.n	81093b0 <_printf_float+0x384>
 8109348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810934c:	429a      	cmp	r2, r3
 810934e:	db3b      	blt.n	81093c8 <_printf_float+0x39c>
 8109350:	6823      	ldr	r3, [r4, #0]
 8109352:	07da      	lsls	r2, r3, #31
 8109354:	d438      	bmi.n	81093c8 <_printf_float+0x39c>
 8109356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109358:	9a05      	ldr	r2, [sp, #20]
 810935a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810935c:	1a9a      	subs	r2, r3, r2
 810935e:	eba3 0901 	sub.w	r9, r3, r1
 8109362:	4591      	cmp	r9, r2
 8109364:	bfa8      	it	ge
 8109366:	4691      	movge	r9, r2
 8109368:	f1b9 0f00 	cmp.w	r9, #0
 810936c:	dc35      	bgt.n	81093da <_printf_float+0x3ae>
 810936e:	f04f 0800 	mov.w	r8, #0
 8109372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109376:	f104 0a1a 	add.w	sl, r4, #26
 810937a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810937e:	1a9b      	subs	r3, r3, r2
 8109380:	eba3 0309 	sub.w	r3, r3, r9
 8109384:	4543      	cmp	r3, r8
 8109386:	f77f af79 	ble.w	810927c <_printf_float+0x250>
 810938a:	2301      	movs	r3, #1
 810938c:	4652      	mov	r2, sl
 810938e:	4631      	mov	r1, r6
 8109390:	4628      	mov	r0, r5
 8109392:	47b8      	blx	r7
 8109394:	3001      	adds	r0, #1
 8109396:	f43f aeaa 	beq.w	81090ee <_printf_float+0xc2>
 810939a:	f108 0801 	add.w	r8, r8, #1
 810939e:	e7ec      	b.n	810937a <_printf_float+0x34e>
 81093a0:	4613      	mov	r3, r2
 81093a2:	4631      	mov	r1, r6
 81093a4:	4642      	mov	r2, r8
 81093a6:	4628      	mov	r0, r5
 81093a8:	47b8      	blx	r7
 81093aa:	3001      	adds	r0, #1
 81093ac:	d1c0      	bne.n	8109330 <_printf_float+0x304>
 81093ae:	e69e      	b.n	81090ee <_printf_float+0xc2>
 81093b0:	2301      	movs	r3, #1
 81093b2:	4631      	mov	r1, r6
 81093b4:	4628      	mov	r0, r5
 81093b6:	9205      	str	r2, [sp, #20]
 81093b8:	47b8      	blx	r7
 81093ba:	3001      	adds	r0, #1
 81093bc:	f43f ae97 	beq.w	81090ee <_printf_float+0xc2>
 81093c0:	9a05      	ldr	r2, [sp, #20]
 81093c2:	f10b 0b01 	add.w	fp, fp, #1
 81093c6:	e7b9      	b.n	810933c <_printf_float+0x310>
 81093c8:	ee18 3a10 	vmov	r3, s16
 81093cc:	4652      	mov	r2, sl
 81093ce:	4631      	mov	r1, r6
 81093d0:	4628      	mov	r0, r5
 81093d2:	47b8      	blx	r7
 81093d4:	3001      	adds	r0, #1
 81093d6:	d1be      	bne.n	8109356 <_printf_float+0x32a>
 81093d8:	e689      	b.n	81090ee <_printf_float+0xc2>
 81093da:	9a05      	ldr	r2, [sp, #20]
 81093dc:	464b      	mov	r3, r9
 81093de:	4442      	add	r2, r8
 81093e0:	4631      	mov	r1, r6
 81093e2:	4628      	mov	r0, r5
 81093e4:	47b8      	blx	r7
 81093e6:	3001      	adds	r0, #1
 81093e8:	d1c1      	bne.n	810936e <_printf_float+0x342>
 81093ea:	e680      	b.n	81090ee <_printf_float+0xc2>
 81093ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81093ee:	2a01      	cmp	r2, #1
 81093f0:	dc01      	bgt.n	81093f6 <_printf_float+0x3ca>
 81093f2:	07db      	lsls	r3, r3, #31
 81093f4:	d538      	bpl.n	8109468 <_printf_float+0x43c>
 81093f6:	2301      	movs	r3, #1
 81093f8:	4642      	mov	r2, r8
 81093fa:	4631      	mov	r1, r6
 81093fc:	4628      	mov	r0, r5
 81093fe:	47b8      	blx	r7
 8109400:	3001      	adds	r0, #1
 8109402:	f43f ae74 	beq.w	81090ee <_printf_float+0xc2>
 8109406:	ee18 3a10 	vmov	r3, s16
 810940a:	4652      	mov	r2, sl
 810940c:	4631      	mov	r1, r6
 810940e:	4628      	mov	r0, r5
 8109410:	47b8      	blx	r7
 8109412:	3001      	adds	r0, #1
 8109414:	f43f ae6b 	beq.w	81090ee <_printf_float+0xc2>
 8109418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810941c:	2200      	movs	r2, #0
 810941e:	2300      	movs	r3, #0
 8109420:	f7f7 fbda 	bl	8100bd8 <__aeabi_dcmpeq>
 8109424:	b9d8      	cbnz	r0, 810945e <_printf_float+0x432>
 8109426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109428:	f108 0201 	add.w	r2, r8, #1
 810942c:	3b01      	subs	r3, #1
 810942e:	4631      	mov	r1, r6
 8109430:	4628      	mov	r0, r5
 8109432:	47b8      	blx	r7
 8109434:	3001      	adds	r0, #1
 8109436:	d10e      	bne.n	8109456 <_printf_float+0x42a>
 8109438:	e659      	b.n	81090ee <_printf_float+0xc2>
 810943a:	2301      	movs	r3, #1
 810943c:	4652      	mov	r2, sl
 810943e:	4631      	mov	r1, r6
 8109440:	4628      	mov	r0, r5
 8109442:	47b8      	blx	r7
 8109444:	3001      	adds	r0, #1
 8109446:	f43f ae52 	beq.w	81090ee <_printf_float+0xc2>
 810944a:	f108 0801 	add.w	r8, r8, #1
 810944e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109450:	3b01      	subs	r3, #1
 8109452:	4543      	cmp	r3, r8
 8109454:	dcf1      	bgt.n	810943a <_printf_float+0x40e>
 8109456:	464b      	mov	r3, r9
 8109458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810945c:	e6dc      	b.n	8109218 <_printf_float+0x1ec>
 810945e:	f04f 0800 	mov.w	r8, #0
 8109462:	f104 0a1a 	add.w	sl, r4, #26
 8109466:	e7f2      	b.n	810944e <_printf_float+0x422>
 8109468:	2301      	movs	r3, #1
 810946a:	4642      	mov	r2, r8
 810946c:	e7df      	b.n	810942e <_printf_float+0x402>
 810946e:	2301      	movs	r3, #1
 8109470:	464a      	mov	r2, r9
 8109472:	4631      	mov	r1, r6
 8109474:	4628      	mov	r0, r5
 8109476:	47b8      	blx	r7
 8109478:	3001      	adds	r0, #1
 810947a:	f43f ae38 	beq.w	81090ee <_printf_float+0xc2>
 810947e:	f108 0801 	add.w	r8, r8, #1
 8109482:	68e3      	ldr	r3, [r4, #12]
 8109484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8109486:	1a5b      	subs	r3, r3, r1
 8109488:	4543      	cmp	r3, r8
 810948a:	dcf0      	bgt.n	810946e <_printf_float+0x442>
 810948c:	e6fa      	b.n	8109284 <_printf_float+0x258>
 810948e:	f04f 0800 	mov.w	r8, #0
 8109492:	f104 0919 	add.w	r9, r4, #25
 8109496:	e7f4      	b.n	8109482 <_printf_float+0x456>

08109498 <_printf_common>:
 8109498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810949c:	4616      	mov	r6, r2
 810949e:	4699      	mov	r9, r3
 81094a0:	688a      	ldr	r2, [r1, #8]
 81094a2:	690b      	ldr	r3, [r1, #16]
 81094a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81094a8:	4293      	cmp	r3, r2
 81094aa:	bfb8      	it	lt
 81094ac:	4613      	movlt	r3, r2
 81094ae:	6033      	str	r3, [r6, #0]
 81094b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81094b4:	4607      	mov	r7, r0
 81094b6:	460c      	mov	r4, r1
 81094b8:	b10a      	cbz	r2, 81094be <_printf_common+0x26>
 81094ba:	3301      	adds	r3, #1
 81094bc:	6033      	str	r3, [r6, #0]
 81094be:	6823      	ldr	r3, [r4, #0]
 81094c0:	0699      	lsls	r1, r3, #26
 81094c2:	bf42      	ittt	mi
 81094c4:	6833      	ldrmi	r3, [r6, #0]
 81094c6:	3302      	addmi	r3, #2
 81094c8:	6033      	strmi	r3, [r6, #0]
 81094ca:	6825      	ldr	r5, [r4, #0]
 81094cc:	f015 0506 	ands.w	r5, r5, #6
 81094d0:	d106      	bne.n	81094e0 <_printf_common+0x48>
 81094d2:	f104 0a19 	add.w	sl, r4, #25
 81094d6:	68e3      	ldr	r3, [r4, #12]
 81094d8:	6832      	ldr	r2, [r6, #0]
 81094da:	1a9b      	subs	r3, r3, r2
 81094dc:	42ab      	cmp	r3, r5
 81094de:	dc26      	bgt.n	810952e <_printf_common+0x96>
 81094e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81094e4:	1e13      	subs	r3, r2, #0
 81094e6:	6822      	ldr	r2, [r4, #0]
 81094e8:	bf18      	it	ne
 81094ea:	2301      	movne	r3, #1
 81094ec:	0692      	lsls	r2, r2, #26
 81094ee:	d42b      	bmi.n	8109548 <_printf_common+0xb0>
 81094f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81094f4:	4649      	mov	r1, r9
 81094f6:	4638      	mov	r0, r7
 81094f8:	47c0      	blx	r8
 81094fa:	3001      	adds	r0, #1
 81094fc:	d01e      	beq.n	810953c <_printf_common+0xa4>
 81094fe:	6823      	ldr	r3, [r4, #0]
 8109500:	68e5      	ldr	r5, [r4, #12]
 8109502:	6832      	ldr	r2, [r6, #0]
 8109504:	f003 0306 	and.w	r3, r3, #6
 8109508:	2b04      	cmp	r3, #4
 810950a:	bf08      	it	eq
 810950c:	1aad      	subeq	r5, r5, r2
 810950e:	68a3      	ldr	r3, [r4, #8]
 8109510:	6922      	ldr	r2, [r4, #16]
 8109512:	bf0c      	ite	eq
 8109514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109518:	2500      	movne	r5, #0
 810951a:	4293      	cmp	r3, r2
 810951c:	bfc4      	itt	gt
 810951e:	1a9b      	subgt	r3, r3, r2
 8109520:	18ed      	addgt	r5, r5, r3
 8109522:	2600      	movs	r6, #0
 8109524:	341a      	adds	r4, #26
 8109526:	42b5      	cmp	r5, r6
 8109528:	d11a      	bne.n	8109560 <_printf_common+0xc8>
 810952a:	2000      	movs	r0, #0
 810952c:	e008      	b.n	8109540 <_printf_common+0xa8>
 810952e:	2301      	movs	r3, #1
 8109530:	4652      	mov	r2, sl
 8109532:	4649      	mov	r1, r9
 8109534:	4638      	mov	r0, r7
 8109536:	47c0      	blx	r8
 8109538:	3001      	adds	r0, #1
 810953a:	d103      	bne.n	8109544 <_printf_common+0xac>
 810953c:	f04f 30ff 	mov.w	r0, #4294967295
 8109540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109544:	3501      	adds	r5, #1
 8109546:	e7c6      	b.n	81094d6 <_printf_common+0x3e>
 8109548:	18e1      	adds	r1, r4, r3
 810954a:	1c5a      	adds	r2, r3, #1
 810954c:	2030      	movs	r0, #48	; 0x30
 810954e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109552:	4422      	add	r2, r4
 8109554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810955c:	3302      	adds	r3, #2
 810955e:	e7c7      	b.n	81094f0 <_printf_common+0x58>
 8109560:	2301      	movs	r3, #1
 8109562:	4622      	mov	r2, r4
 8109564:	4649      	mov	r1, r9
 8109566:	4638      	mov	r0, r7
 8109568:	47c0      	blx	r8
 810956a:	3001      	adds	r0, #1
 810956c:	d0e6      	beq.n	810953c <_printf_common+0xa4>
 810956e:	3601      	adds	r6, #1
 8109570:	e7d9      	b.n	8109526 <_printf_common+0x8e>
	...

08109574 <_printf_i>:
 8109574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109578:	7e0f      	ldrb	r7, [r1, #24]
 810957a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810957c:	2f78      	cmp	r7, #120	; 0x78
 810957e:	4691      	mov	r9, r2
 8109580:	4680      	mov	r8, r0
 8109582:	460c      	mov	r4, r1
 8109584:	469a      	mov	sl, r3
 8109586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810958a:	d807      	bhi.n	810959c <_printf_i+0x28>
 810958c:	2f62      	cmp	r7, #98	; 0x62
 810958e:	d80a      	bhi.n	81095a6 <_printf_i+0x32>
 8109590:	2f00      	cmp	r7, #0
 8109592:	f000 80d8 	beq.w	8109746 <_printf_i+0x1d2>
 8109596:	2f58      	cmp	r7, #88	; 0x58
 8109598:	f000 80a3 	beq.w	81096e2 <_printf_i+0x16e>
 810959c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81095a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81095a4:	e03a      	b.n	810961c <_printf_i+0xa8>
 81095a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81095aa:	2b15      	cmp	r3, #21
 81095ac:	d8f6      	bhi.n	810959c <_printf_i+0x28>
 81095ae:	a101      	add	r1, pc, #4	; (adr r1, 81095b4 <_printf_i+0x40>)
 81095b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81095b4:	0810960d 	.word	0x0810960d
 81095b8:	08109621 	.word	0x08109621
 81095bc:	0810959d 	.word	0x0810959d
 81095c0:	0810959d 	.word	0x0810959d
 81095c4:	0810959d 	.word	0x0810959d
 81095c8:	0810959d 	.word	0x0810959d
 81095cc:	08109621 	.word	0x08109621
 81095d0:	0810959d 	.word	0x0810959d
 81095d4:	0810959d 	.word	0x0810959d
 81095d8:	0810959d 	.word	0x0810959d
 81095dc:	0810959d 	.word	0x0810959d
 81095e0:	0810972d 	.word	0x0810972d
 81095e4:	08109651 	.word	0x08109651
 81095e8:	0810970f 	.word	0x0810970f
 81095ec:	0810959d 	.word	0x0810959d
 81095f0:	0810959d 	.word	0x0810959d
 81095f4:	0810974f 	.word	0x0810974f
 81095f8:	0810959d 	.word	0x0810959d
 81095fc:	08109651 	.word	0x08109651
 8109600:	0810959d 	.word	0x0810959d
 8109604:	0810959d 	.word	0x0810959d
 8109608:	08109717 	.word	0x08109717
 810960c:	682b      	ldr	r3, [r5, #0]
 810960e:	1d1a      	adds	r2, r3, #4
 8109610:	681b      	ldr	r3, [r3, #0]
 8109612:	602a      	str	r2, [r5, #0]
 8109614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810961c:	2301      	movs	r3, #1
 810961e:	e0a3      	b.n	8109768 <_printf_i+0x1f4>
 8109620:	6820      	ldr	r0, [r4, #0]
 8109622:	6829      	ldr	r1, [r5, #0]
 8109624:	0606      	lsls	r6, r0, #24
 8109626:	f101 0304 	add.w	r3, r1, #4
 810962a:	d50a      	bpl.n	8109642 <_printf_i+0xce>
 810962c:	680e      	ldr	r6, [r1, #0]
 810962e:	602b      	str	r3, [r5, #0]
 8109630:	2e00      	cmp	r6, #0
 8109632:	da03      	bge.n	810963c <_printf_i+0xc8>
 8109634:	232d      	movs	r3, #45	; 0x2d
 8109636:	4276      	negs	r6, r6
 8109638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810963c:	485e      	ldr	r0, [pc, #376]	; (81097b8 <_printf_i+0x244>)
 810963e:	230a      	movs	r3, #10
 8109640:	e019      	b.n	8109676 <_printf_i+0x102>
 8109642:	680e      	ldr	r6, [r1, #0]
 8109644:	602b      	str	r3, [r5, #0]
 8109646:	f010 0f40 	tst.w	r0, #64	; 0x40
 810964a:	bf18      	it	ne
 810964c:	b236      	sxthne	r6, r6
 810964e:	e7ef      	b.n	8109630 <_printf_i+0xbc>
 8109650:	682b      	ldr	r3, [r5, #0]
 8109652:	6820      	ldr	r0, [r4, #0]
 8109654:	1d19      	adds	r1, r3, #4
 8109656:	6029      	str	r1, [r5, #0]
 8109658:	0601      	lsls	r1, r0, #24
 810965a:	d501      	bpl.n	8109660 <_printf_i+0xec>
 810965c:	681e      	ldr	r6, [r3, #0]
 810965e:	e002      	b.n	8109666 <_printf_i+0xf2>
 8109660:	0646      	lsls	r6, r0, #25
 8109662:	d5fb      	bpl.n	810965c <_printf_i+0xe8>
 8109664:	881e      	ldrh	r6, [r3, #0]
 8109666:	4854      	ldr	r0, [pc, #336]	; (81097b8 <_printf_i+0x244>)
 8109668:	2f6f      	cmp	r7, #111	; 0x6f
 810966a:	bf0c      	ite	eq
 810966c:	2308      	moveq	r3, #8
 810966e:	230a      	movne	r3, #10
 8109670:	2100      	movs	r1, #0
 8109672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109676:	6865      	ldr	r5, [r4, #4]
 8109678:	60a5      	str	r5, [r4, #8]
 810967a:	2d00      	cmp	r5, #0
 810967c:	bfa2      	ittt	ge
 810967e:	6821      	ldrge	r1, [r4, #0]
 8109680:	f021 0104 	bicge.w	r1, r1, #4
 8109684:	6021      	strge	r1, [r4, #0]
 8109686:	b90e      	cbnz	r6, 810968c <_printf_i+0x118>
 8109688:	2d00      	cmp	r5, #0
 810968a:	d04d      	beq.n	8109728 <_printf_i+0x1b4>
 810968c:	4615      	mov	r5, r2
 810968e:	fbb6 f1f3 	udiv	r1, r6, r3
 8109692:	fb03 6711 	mls	r7, r3, r1, r6
 8109696:	5dc7      	ldrb	r7, [r0, r7]
 8109698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810969c:	4637      	mov	r7, r6
 810969e:	42bb      	cmp	r3, r7
 81096a0:	460e      	mov	r6, r1
 81096a2:	d9f4      	bls.n	810968e <_printf_i+0x11a>
 81096a4:	2b08      	cmp	r3, #8
 81096a6:	d10b      	bne.n	81096c0 <_printf_i+0x14c>
 81096a8:	6823      	ldr	r3, [r4, #0]
 81096aa:	07de      	lsls	r6, r3, #31
 81096ac:	d508      	bpl.n	81096c0 <_printf_i+0x14c>
 81096ae:	6923      	ldr	r3, [r4, #16]
 81096b0:	6861      	ldr	r1, [r4, #4]
 81096b2:	4299      	cmp	r1, r3
 81096b4:	bfde      	ittt	le
 81096b6:	2330      	movle	r3, #48	; 0x30
 81096b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 81096bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 81096c0:	1b52      	subs	r2, r2, r5
 81096c2:	6122      	str	r2, [r4, #16]
 81096c4:	f8cd a000 	str.w	sl, [sp]
 81096c8:	464b      	mov	r3, r9
 81096ca:	aa03      	add	r2, sp, #12
 81096cc:	4621      	mov	r1, r4
 81096ce:	4640      	mov	r0, r8
 81096d0:	f7ff fee2 	bl	8109498 <_printf_common>
 81096d4:	3001      	adds	r0, #1
 81096d6:	d14c      	bne.n	8109772 <_printf_i+0x1fe>
 81096d8:	f04f 30ff 	mov.w	r0, #4294967295
 81096dc:	b004      	add	sp, #16
 81096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81096e2:	4835      	ldr	r0, [pc, #212]	; (81097b8 <_printf_i+0x244>)
 81096e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 81096e8:	6829      	ldr	r1, [r5, #0]
 81096ea:	6823      	ldr	r3, [r4, #0]
 81096ec:	f851 6b04 	ldr.w	r6, [r1], #4
 81096f0:	6029      	str	r1, [r5, #0]
 81096f2:	061d      	lsls	r5, r3, #24
 81096f4:	d514      	bpl.n	8109720 <_printf_i+0x1ac>
 81096f6:	07df      	lsls	r7, r3, #31
 81096f8:	bf44      	itt	mi
 81096fa:	f043 0320 	orrmi.w	r3, r3, #32
 81096fe:	6023      	strmi	r3, [r4, #0]
 8109700:	b91e      	cbnz	r6, 810970a <_printf_i+0x196>
 8109702:	6823      	ldr	r3, [r4, #0]
 8109704:	f023 0320 	bic.w	r3, r3, #32
 8109708:	6023      	str	r3, [r4, #0]
 810970a:	2310      	movs	r3, #16
 810970c:	e7b0      	b.n	8109670 <_printf_i+0xfc>
 810970e:	6823      	ldr	r3, [r4, #0]
 8109710:	f043 0320 	orr.w	r3, r3, #32
 8109714:	6023      	str	r3, [r4, #0]
 8109716:	2378      	movs	r3, #120	; 0x78
 8109718:	4828      	ldr	r0, [pc, #160]	; (81097bc <_printf_i+0x248>)
 810971a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810971e:	e7e3      	b.n	81096e8 <_printf_i+0x174>
 8109720:	0659      	lsls	r1, r3, #25
 8109722:	bf48      	it	mi
 8109724:	b2b6      	uxthmi	r6, r6
 8109726:	e7e6      	b.n	81096f6 <_printf_i+0x182>
 8109728:	4615      	mov	r5, r2
 810972a:	e7bb      	b.n	81096a4 <_printf_i+0x130>
 810972c:	682b      	ldr	r3, [r5, #0]
 810972e:	6826      	ldr	r6, [r4, #0]
 8109730:	6961      	ldr	r1, [r4, #20]
 8109732:	1d18      	adds	r0, r3, #4
 8109734:	6028      	str	r0, [r5, #0]
 8109736:	0635      	lsls	r5, r6, #24
 8109738:	681b      	ldr	r3, [r3, #0]
 810973a:	d501      	bpl.n	8109740 <_printf_i+0x1cc>
 810973c:	6019      	str	r1, [r3, #0]
 810973e:	e002      	b.n	8109746 <_printf_i+0x1d2>
 8109740:	0670      	lsls	r0, r6, #25
 8109742:	d5fb      	bpl.n	810973c <_printf_i+0x1c8>
 8109744:	8019      	strh	r1, [r3, #0]
 8109746:	2300      	movs	r3, #0
 8109748:	6123      	str	r3, [r4, #16]
 810974a:	4615      	mov	r5, r2
 810974c:	e7ba      	b.n	81096c4 <_printf_i+0x150>
 810974e:	682b      	ldr	r3, [r5, #0]
 8109750:	1d1a      	adds	r2, r3, #4
 8109752:	602a      	str	r2, [r5, #0]
 8109754:	681d      	ldr	r5, [r3, #0]
 8109756:	6862      	ldr	r2, [r4, #4]
 8109758:	2100      	movs	r1, #0
 810975a:	4628      	mov	r0, r5
 810975c:	f7f6 fdc8 	bl	81002f0 <memchr>
 8109760:	b108      	cbz	r0, 8109766 <_printf_i+0x1f2>
 8109762:	1b40      	subs	r0, r0, r5
 8109764:	6060      	str	r0, [r4, #4]
 8109766:	6863      	ldr	r3, [r4, #4]
 8109768:	6123      	str	r3, [r4, #16]
 810976a:	2300      	movs	r3, #0
 810976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109770:	e7a8      	b.n	81096c4 <_printf_i+0x150>
 8109772:	6923      	ldr	r3, [r4, #16]
 8109774:	462a      	mov	r2, r5
 8109776:	4649      	mov	r1, r9
 8109778:	4640      	mov	r0, r8
 810977a:	47d0      	blx	sl
 810977c:	3001      	adds	r0, #1
 810977e:	d0ab      	beq.n	81096d8 <_printf_i+0x164>
 8109780:	6823      	ldr	r3, [r4, #0]
 8109782:	079b      	lsls	r3, r3, #30
 8109784:	d413      	bmi.n	81097ae <_printf_i+0x23a>
 8109786:	68e0      	ldr	r0, [r4, #12]
 8109788:	9b03      	ldr	r3, [sp, #12]
 810978a:	4298      	cmp	r0, r3
 810978c:	bfb8      	it	lt
 810978e:	4618      	movlt	r0, r3
 8109790:	e7a4      	b.n	81096dc <_printf_i+0x168>
 8109792:	2301      	movs	r3, #1
 8109794:	4632      	mov	r2, r6
 8109796:	4649      	mov	r1, r9
 8109798:	4640      	mov	r0, r8
 810979a:	47d0      	blx	sl
 810979c:	3001      	adds	r0, #1
 810979e:	d09b      	beq.n	81096d8 <_printf_i+0x164>
 81097a0:	3501      	adds	r5, #1
 81097a2:	68e3      	ldr	r3, [r4, #12]
 81097a4:	9903      	ldr	r1, [sp, #12]
 81097a6:	1a5b      	subs	r3, r3, r1
 81097a8:	42ab      	cmp	r3, r5
 81097aa:	dcf2      	bgt.n	8109792 <_printf_i+0x21e>
 81097ac:	e7eb      	b.n	8109786 <_printf_i+0x212>
 81097ae:	2500      	movs	r5, #0
 81097b0:	f104 0619 	add.w	r6, r4, #25
 81097b4:	e7f5      	b.n	81097a2 <_printf_i+0x22e>
 81097b6:	bf00      	nop
 81097b8:	0810d66e 	.word	0x0810d66e
 81097bc:	0810d67f 	.word	0x0810d67f

081097c0 <_scanf_float>:
 81097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81097c4:	b087      	sub	sp, #28
 81097c6:	4617      	mov	r7, r2
 81097c8:	9303      	str	r3, [sp, #12]
 81097ca:	688b      	ldr	r3, [r1, #8]
 81097cc:	1e5a      	subs	r2, r3, #1
 81097ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81097d2:	bf83      	ittte	hi
 81097d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81097d8:	195b      	addhi	r3, r3, r5
 81097da:	9302      	strhi	r3, [sp, #8]
 81097dc:	2300      	movls	r3, #0
 81097de:	bf86      	itte	hi
 81097e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 81097e4:	608b      	strhi	r3, [r1, #8]
 81097e6:	9302      	strls	r3, [sp, #8]
 81097e8:	680b      	ldr	r3, [r1, #0]
 81097ea:	468b      	mov	fp, r1
 81097ec:	2500      	movs	r5, #0
 81097ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81097f2:	f84b 3b1c 	str.w	r3, [fp], #28
 81097f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81097fa:	4680      	mov	r8, r0
 81097fc:	460c      	mov	r4, r1
 81097fe:	465e      	mov	r6, fp
 8109800:	46aa      	mov	sl, r5
 8109802:	46a9      	mov	r9, r5
 8109804:	9501      	str	r5, [sp, #4]
 8109806:	68a2      	ldr	r2, [r4, #8]
 8109808:	b152      	cbz	r2, 8109820 <_scanf_float+0x60>
 810980a:	683b      	ldr	r3, [r7, #0]
 810980c:	781b      	ldrb	r3, [r3, #0]
 810980e:	2b4e      	cmp	r3, #78	; 0x4e
 8109810:	d864      	bhi.n	81098dc <_scanf_float+0x11c>
 8109812:	2b40      	cmp	r3, #64	; 0x40
 8109814:	d83c      	bhi.n	8109890 <_scanf_float+0xd0>
 8109816:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810981a:	b2c8      	uxtb	r0, r1
 810981c:	280e      	cmp	r0, #14
 810981e:	d93a      	bls.n	8109896 <_scanf_float+0xd6>
 8109820:	f1b9 0f00 	cmp.w	r9, #0
 8109824:	d003      	beq.n	810982e <_scanf_float+0x6e>
 8109826:	6823      	ldr	r3, [r4, #0]
 8109828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810982c:	6023      	str	r3, [r4, #0]
 810982e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109832:	f1ba 0f01 	cmp.w	sl, #1
 8109836:	f200 8113 	bhi.w	8109a60 <_scanf_float+0x2a0>
 810983a:	455e      	cmp	r6, fp
 810983c:	f200 8105 	bhi.w	8109a4a <_scanf_float+0x28a>
 8109840:	2501      	movs	r5, #1
 8109842:	4628      	mov	r0, r5
 8109844:	b007      	add	sp, #28
 8109846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810984a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810984e:	2a0d      	cmp	r2, #13
 8109850:	d8e6      	bhi.n	8109820 <_scanf_float+0x60>
 8109852:	a101      	add	r1, pc, #4	; (adr r1, 8109858 <_scanf_float+0x98>)
 8109854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109858:	08109997 	.word	0x08109997
 810985c:	08109821 	.word	0x08109821
 8109860:	08109821 	.word	0x08109821
 8109864:	08109821 	.word	0x08109821
 8109868:	081099f7 	.word	0x081099f7
 810986c:	081099cf 	.word	0x081099cf
 8109870:	08109821 	.word	0x08109821
 8109874:	08109821 	.word	0x08109821
 8109878:	081099a5 	.word	0x081099a5
 810987c:	08109821 	.word	0x08109821
 8109880:	08109821 	.word	0x08109821
 8109884:	08109821 	.word	0x08109821
 8109888:	08109821 	.word	0x08109821
 810988c:	0810995d 	.word	0x0810995d
 8109890:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109894:	e7db      	b.n	810984e <_scanf_float+0x8e>
 8109896:	290e      	cmp	r1, #14
 8109898:	d8c2      	bhi.n	8109820 <_scanf_float+0x60>
 810989a:	a001      	add	r0, pc, #4	; (adr r0, 81098a0 <_scanf_float+0xe0>)
 810989c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 81098a0:	0810994f 	.word	0x0810994f
 81098a4:	08109821 	.word	0x08109821
 81098a8:	0810994f 	.word	0x0810994f
 81098ac:	081099e3 	.word	0x081099e3
 81098b0:	08109821 	.word	0x08109821
 81098b4:	081098fd 	.word	0x081098fd
 81098b8:	08109939 	.word	0x08109939
 81098bc:	08109939 	.word	0x08109939
 81098c0:	08109939 	.word	0x08109939
 81098c4:	08109939 	.word	0x08109939
 81098c8:	08109939 	.word	0x08109939
 81098cc:	08109939 	.word	0x08109939
 81098d0:	08109939 	.word	0x08109939
 81098d4:	08109939 	.word	0x08109939
 81098d8:	08109939 	.word	0x08109939
 81098dc:	2b6e      	cmp	r3, #110	; 0x6e
 81098de:	d809      	bhi.n	81098f4 <_scanf_float+0x134>
 81098e0:	2b60      	cmp	r3, #96	; 0x60
 81098e2:	d8b2      	bhi.n	810984a <_scanf_float+0x8a>
 81098e4:	2b54      	cmp	r3, #84	; 0x54
 81098e6:	d077      	beq.n	81099d8 <_scanf_float+0x218>
 81098e8:	2b59      	cmp	r3, #89	; 0x59
 81098ea:	d199      	bne.n	8109820 <_scanf_float+0x60>
 81098ec:	2d07      	cmp	r5, #7
 81098ee:	d197      	bne.n	8109820 <_scanf_float+0x60>
 81098f0:	2508      	movs	r5, #8
 81098f2:	e029      	b.n	8109948 <_scanf_float+0x188>
 81098f4:	2b74      	cmp	r3, #116	; 0x74
 81098f6:	d06f      	beq.n	81099d8 <_scanf_float+0x218>
 81098f8:	2b79      	cmp	r3, #121	; 0x79
 81098fa:	e7f6      	b.n	81098ea <_scanf_float+0x12a>
 81098fc:	6821      	ldr	r1, [r4, #0]
 81098fe:	05c8      	lsls	r0, r1, #23
 8109900:	d51a      	bpl.n	8109938 <_scanf_float+0x178>
 8109902:	9b02      	ldr	r3, [sp, #8]
 8109904:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109908:	6021      	str	r1, [r4, #0]
 810990a:	f109 0901 	add.w	r9, r9, #1
 810990e:	b11b      	cbz	r3, 8109918 <_scanf_float+0x158>
 8109910:	3b01      	subs	r3, #1
 8109912:	3201      	adds	r2, #1
 8109914:	9302      	str	r3, [sp, #8]
 8109916:	60a2      	str	r2, [r4, #8]
 8109918:	68a3      	ldr	r3, [r4, #8]
 810991a:	3b01      	subs	r3, #1
 810991c:	60a3      	str	r3, [r4, #8]
 810991e:	6923      	ldr	r3, [r4, #16]
 8109920:	3301      	adds	r3, #1
 8109922:	6123      	str	r3, [r4, #16]
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	3b01      	subs	r3, #1
 8109928:	2b00      	cmp	r3, #0
 810992a:	607b      	str	r3, [r7, #4]
 810992c:	f340 8084 	ble.w	8109a38 <_scanf_float+0x278>
 8109930:	683b      	ldr	r3, [r7, #0]
 8109932:	3301      	adds	r3, #1
 8109934:	603b      	str	r3, [r7, #0]
 8109936:	e766      	b.n	8109806 <_scanf_float+0x46>
 8109938:	eb1a 0f05 	cmn.w	sl, r5
 810993c:	f47f af70 	bne.w	8109820 <_scanf_float+0x60>
 8109940:	6822      	ldr	r2, [r4, #0]
 8109942:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109946:	6022      	str	r2, [r4, #0]
 8109948:	f806 3b01 	strb.w	r3, [r6], #1
 810994c:	e7e4      	b.n	8109918 <_scanf_float+0x158>
 810994e:	6822      	ldr	r2, [r4, #0]
 8109950:	0610      	lsls	r0, r2, #24
 8109952:	f57f af65 	bpl.w	8109820 <_scanf_float+0x60>
 8109956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810995a:	e7f4      	b.n	8109946 <_scanf_float+0x186>
 810995c:	f1ba 0f00 	cmp.w	sl, #0
 8109960:	d10e      	bne.n	8109980 <_scanf_float+0x1c0>
 8109962:	f1b9 0f00 	cmp.w	r9, #0
 8109966:	d10e      	bne.n	8109986 <_scanf_float+0x1c6>
 8109968:	6822      	ldr	r2, [r4, #0]
 810996a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810996e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109972:	d108      	bne.n	8109986 <_scanf_float+0x1c6>
 8109974:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109978:	6022      	str	r2, [r4, #0]
 810997a:	f04f 0a01 	mov.w	sl, #1
 810997e:	e7e3      	b.n	8109948 <_scanf_float+0x188>
 8109980:	f1ba 0f02 	cmp.w	sl, #2
 8109984:	d055      	beq.n	8109a32 <_scanf_float+0x272>
 8109986:	2d01      	cmp	r5, #1
 8109988:	d002      	beq.n	8109990 <_scanf_float+0x1d0>
 810998a:	2d04      	cmp	r5, #4
 810998c:	f47f af48 	bne.w	8109820 <_scanf_float+0x60>
 8109990:	3501      	adds	r5, #1
 8109992:	b2ed      	uxtb	r5, r5
 8109994:	e7d8      	b.n	8109948 <_scanf_float+0x188>
 8109996:	f1ba 0f01 	cmp.w	sl, #1
 810999a:	f47f af41 	bne.w	8109820 <_scanf_float+0x60>
 810999e:	f04f 0a02 	mov.w	sl, #2
 81099a2:	e7d1      	b.n	8109948 <_scanf_float+0x188>
 81099a4:	b97d      	cbnz	r5, 81099c6 <_scanf_float+0x206>
 81099a6:	f1b9 0f00 	cmp.w	r9, #0
 81099aa:	f47f af3c 	bne.w	8109826 <_scanf_float+0x66>
 81099ae:	6822      	ldr	r2, [r4, #0]
 81099b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81099b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81099b8:	f47f af39 	bne.w	810982e <_scanf_float+0x6e>
 81099bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81099c0:	6022      	str	r2, [r4, #0]
 81099c2:	2501      	movs	r5, #1
 81099c4:	e7c0      	b.n	8109948 <_scanf_float+0x188>
 81099c6:	2d03      	cmp	r5, #3
 81099c8:	d0e2      	beq.n	8109990 <_scanf_float+0x1d0>
 81099ca:	2d05      	cmp	r5, #5
 81099cc:	e7de      	b.n	810998c <_scanf_float+0x1cc>
 81099ce:	2d02      	cmp	r5, #2
 81099d0:	f47f af26 	bne.w	8109820 <_scanf_float+0x60>
 81099d4:	2503      	movs	r5, #3
 81099d6:	e7b7      	b.n	8109948 <_scanf_float+0x188>
 81099d8:	2d06      	cmp	r5, #6
 81099da:	f47f af21 	bne.w	8109820 <_scanf_float+0x60>
 81099de:	2507      	movs	r5, #7
 81099e0:	e7b2      	b.n	8109948 <_scanf_float+0x188>
 81099e2:	6822      	ldr	r2, [r4, #0]
 81099e4:	0591      	lsls	r1, r2, #22
 81099e6:	f57f af1b 	bpl.w	8109820 <_scanf_float+0x60>
 81099ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81099ee:	6022      	str	r2, [r4, #0]
 81099f0:	f8cd 9004 	str.w	r9, [sp, #4]
 81099f4:	e7a8      	b.n	8109948 <_scanf_float+0x188>
 81099f6:	6822      	ldr	r2, [r4, #0]
 81099f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81099fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109a00:	d006      	beq.n	8109a10 <_scanf_float+0x250>
 8109a02:	0550      	lsls	r0, r2, #21
 8109a04:	f57f af0c 	bpl.w	8109820 <_scanf_float+0x60>
 8109a08:	f1b9 0f00 	cmp.w	r9, #0
 8109a0c:	f43f af0f 	beq.w	810982e <_scanf_float+0x6e>
 8109a10:	0591      	lsls	r1, r2, #22
 8109a12:	bf58      	it	pl
 8109a14:	9901      	ldrpl	r1, [sp, #4]
 8109a16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a1a:	bf58      	it	pl
 8109a1c:	eba9 0101 	subpl.w	r1, r9, r1
 8109a20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109a24:	bf58      	it	pl
 8109a26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109a2a:	6022      	str	r2, [r4, #0]
 8109a2c:	f04f 0900 	mov.w	r9, #0
 8109a30:	e78a      	b.n	8109948 <_scanf_float+0x188>
 8109a32:	f04f 0a03 	mov.w	sl, #3
 8109a36:	e787      	b.n	8109948 <_scanf_float+0x188>
 8109a38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109a3c:	4639      	mov	r1, r7
 8109a3e:	4640      	mov	r0, r8
 8109a40:	4798      	blx	r3
 8109a42:	2800      	cmp	r0, #0
 8109a44:	f43f aedf 	beq.w	8109806 <_scanf_float+0x46>
 8109a48:	e6ea      	b.n	8109820 <_scanf_float+0x60>
 8109a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109a52:	463a      	mov	r2, r7
 8109a54:	4640      	mov	r0, r8
 8109a56:	4798      	blx	r3
 8109a58:	6923      	ldr	r3, [r4, #16]
 8109a5a:	3b01      	subs	r3, #1
 8109a5c:	6123      	str	r3, [r4, #16]
 8109a5e:	e6ec      	b.n	810983a <_scanf_float+0x7a>
 8109a60:	1e6b      	subs	r3, r5, #1
 8109a62:	2b06      	cmp	r3, #6
 8109a64:	d825      	bhi.n	8109ab2 <_scanf_float+0x2f2>
 8109a66:	2d02      	cmp	r5, #2
 8109a68:	d836      	bhi.n	8109ad8 <_scanf_float+0x318>
 8109a6a:	455e      	cmp	r6, fp
 8109a6c:	f67f aee8 	bls.w	8109840 <_scanf_float+0x80>
 8109a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109a74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109a78:	463a      	mov	r2, r7
 8109a7a:	4640      	mov	r0, r8
 8109a7c:	4798      	blx	r3
 8109a7e:	6923      	ldr	r3, [r4, #16]
 8109a80:	3b01      	subs	r3, #1
 8109a82:	6123      	str	r3, [r4, #16]
 8109a84:	e7f1      	b.n	8109a6a <_scanf_float+0x2aa>
 8109a86:	9802      	ldr	r0, [sp, #8]
 8109a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109a8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109a90:	9002      	str	r0, [sp, #8]
 8109a92:	463a      	mov	r2, r7
 8109a94:	4640      	mov	r0, r8
 8109a96:	4798      	blx	r3
 8109a98:	6923      	ldr	r3, [r4, #16]
 8109a9a:	3b01      	subs	r3, #1
 8109a9c:	6123      	str	r3, [r4, #16]
 8109a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109aa2:	fa5f fa8a 	uxtb.w	sl, sl
 8109aa6:	f1ba 0f02 	cmp.w	sl, #2
 8109aaa:	d1ec      	bne.n	8109a86 <_scanf_float+0x2c6>
 8109aac:	3d03      	subs	r5, #3
 8109aae:	b2ed      	uxtb	r5, r5
 8109ab0:	1b76      	subs	r6, r6, r5
 8109ab2:	6823      	ldr	r3, [r4, #0]
 8109ab4:	05da      	lsls	r2, r3, #23
 8109ab6:	d52f      	bpl.n	8109b18 <_scanf_float+0x358>
 8109ab8:	055b      	lsls	r3, r3, #21
 8109aba:	d510      	bpl.n	8109ade <_scanf_float+0x31e>
 8109abc:	455e      	cmp	r6, fp
 8109abe:	f67f aebf 	bls.w	8109840 <_scanf_float+0x80>
 8109ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109aca:	463a      	mov	r2, r7
 8109acc:	4640      	mov	r0, r8
 8109ace:	4798      	blx	r3
 8109ad0:	6923      	ldr	r3, [r4, #16]
 8109ad2:	3b01      	subs	r3, #1
 8109ad4:	6123      	str	r3, [r4, #16]
 8109ad6:	e7f1      	b.n	8109abc <_scanf_float+0x2fc>
 8109ad8:	46aa      	mov	sl, r5
 8109ada:	9602      	str	r6, [sp, #8]
 8109adc:	e7df      	b.n	8109a9e <_scanf_float+0x2de>
 8109ade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109ae2:	6923      	ldr	r3, [r4, #16]
 8109ae4:	2965      	cmp	r1, #101	; 0x65
 8109ae6:	f103 33ff 	add.w	r3, r3, #4294967295
 8109aea:	f106 35ff 	add.w	r5, r6, #4294967295
 8109aee:	6123      	str	r3, [r4, #16]
 8109af0:	d00c      	beq.n	8109b0c <_scanf_float+0x34c>
 8109af2:	2945      	cmp	r1, #69	; 0x45
 8109af4:	d00a      	beq.n	8109b0c <_scanf_float+0x34c>
 8109af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109afa:	463a      	mov	r2, r7
 8109afc:	4640      	mov	r0, r8
 8109afe:	4798      	blx	r3
 8109b00:	6923      	ldr	r3, [r4, #16]
 8109b02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109b06:	3b01      	subs	r3, #1
 8109b08:	1eb5      	subs	r5, r6, #2
 8109b0a:	6123      	str	r3, [r4, #16]
 8109b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b10:	463a      	mov	r2, r7
 8109b12:	4640      	mov	r0, r8
 8109b14:	4798      	blx	r3
 8109b16:	462e      	mov	r6, r5
 8109b18:	6825      	ldr	r5, [r4, #0]
 8109b1a:	f015 0510 	ands.w	r5, r5, #16
 8109b1e:	d159      	bne.n	8109bd4 <_scanf_float+0x414>
 8109b20:	7035      	strb	r5, [r6, #0]
 8109b22:	6823      	ldr	r3, [r4, #0]
 8109b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109b2c:	d11b      	bne.n	8109b66 <_scanf_float+0x3a6>
 8109b2e:	9b01      	ldr	r3, [sp, #4]
 8109b30:	454b      	cmp	r3, r9
 8109b32:	eba3 0209 	sub.w	r2, r3, r9
 8109b36:	d123      	bne.n	8109b80 <_scanf_float+0x3c0>
 8109b38:	2200      	movs	r2, #0
 8109b3a:	4659      	mov	r1, fp
 8109b3c:	4640      	mov	r0, r8
 8109b3e:	f000 ff55 	bl	810a9ec <_strtod_r>
 8109b42:	6822      	ldr	r2, [r4, #0]
 8109b44:	9b03      	ldr	r3, [sp, #12]
 8109b46:	f012 0f02 	tst.w	r2, #2
 8109b4a:	ec57 6b10 	vmov	r6, r7, d0
 8109b4e:	681b      	ldr	r3, [r3, #0]
 8109b50:	d021      	beq.n	8109b96 <_scanf_float+0x3d6>
 8109b52:	9903      	ldr	r1, [sp, #12]
 8109b54:	1d1a      	adds	r2, r3, #4
 8109b56:	600a      	str	r2, [r1, #0]
 8109b58:	681b      	ldr	r3, [r3, #0]
 8109b5a:	e9c3 6700 	strd	r6, r7, [r3]
 8109b5e:	68e3      	ldr	r3, [r4, #12]
 8109b60:	3301      	adds	r3, #1
 8109b62:	60e3      	str	r3, [r4, #12]
 8109b64:	e66d      	b.n	8109842 <_scanf_float+0x82>
 8109b66:	9b04      	ldr	r3, [sp, #16]
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d0e5      	beq.n	8109b38 <_scanf_float+0x378>
 8109b6c:	9905      	ldr	r1, [sp, #20]
 8109b6e:	230a      	movs	r3, #10
 8109b70:	462a      	mov	r2, r5
 8109b72:	3101      	adds	r1, #1
 8109b74:	4640      	mov	r0, r8
 8109b76:	f000 ffc1 	bl	810aafc <_strtol_r>
 8109b7a:	9b04      	ldr	r3, [sp, #16]
 8109b7c:	9e05      	ldr	r6, [sp, #20]
 8109b7e:	1ac2      	subs	r2, r0, r3
 8109b80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109b84:	429e      	cmp	r6, r3
 8109b86:	bf28      	it	cs
 8109b88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109b8c:	4912      	ldr	r1, [pc, #72]	; (8109bd8 <_scanf_float+0x418>)
 8109b8e:	4630      	mov	r0, r6
 8109b90:	f000 f8a6 	bl	8109ce0 <siprintf>
 8109b94:	e7d0      	b.n	8109b38 <_scanf_float+0x378>
 8109b96:	9903      	ldr	r1, [sp, #12]
 8109b98:	f012 0f04 	tst.w	r2, #4
 8109b9c:	f103 0204 	add.w	r2, r3, #4
 8109ba0:	600a      	str	r2, [r1, #0]
 8109ba2:	d1d9      	bne.n	8109b58 <_scanf_float+0x398>
 8109ba4:	f8d3 8000 	ldr.w	r8, [r3]
 8109ba8:	ee10 2a10 	vmov	r2, s0
 8109bac:	ee10 0a10 	vmov	r0, s0
 8109bb0:	463b      	mov	r3, r7
 8109bb2:	4639      	mov	r1, r7
 8109bb4:	f7f7 f842 	bl	8100c3c <__aeabi_dcmpun>
 8109bb8:	b128      	cbz	r0, 8109bc6 <_scanf_float+0x406>
 8109bba:	4808      	ldr	r0, [pc, #32]	; (8109bdc <_scanf_float+0x41c>)
 8109bbc:	f000 f88a 	bl	8109cd4 <nanf>
 8109bc0:	ed88 0a00 	vstr	s0, [r8]
 8109bc4:	e7cb      	b.n	8109b5e <_scanf_float+0x39e>
 8109bc6:	4630      	mov	r0, r6
 8109bc8:	4639      	mov	r1, r7
 8109bca:	f7f7 f895 	bl	8100cf8 <__aeabi_d2f>
 8109bce:	f8c8 0000 	str.w	r0, [r8]
 8109bd2:	e7c4      	b.n	8109b5e <_scanf_float+0x39e>
 8109bd4:	2500      	movs	r5, #0
 8109bd6:	e634      	b.n	8109842 <_scanf_float+0x82>
 8109bd8:	0810d690 	.word	0x0810d690
 8109bdc:	0810da98 	.word	0x0810da98

08109be0 <cleanup_glue>:
 8109be0:	b538      	push	{r3, r4, r5, lr}
 8109be2:	460c      	mov	r4, r1
 8109be4:	6809      	ldr	r1, [r1, #0]
 8109be6:	4605      	mov	r5, r0
 8109be8:	b109      	cbz	r1, 8109bee <cleanup_glue+0xe>
 8109bea:	f7ff fff9 	bl	8109be0 <cleanup_glue>
 8109bee:	4621      	mov	r1, r4
 8109bf0:	4628      	mov	r0, r5
 8109bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109bf6:	f002 bf67 	b.w	810cac8 <_free_r>
	...

08109bfc <_reclaim_reent>:
 8109bfc:	4b2c      	ldr	r3, [pc, #176]	; (8109cb0 <_reclaim_reent+0xb4>)
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	4283      	cmp	r3, r0
 8109c02:	b570      	push	{r4, r5, r6, lr}
 8109c04:	4604      	mov	r4, r0
 8109c06:	d051      	beq.n	8109cac <_reclaim_reent+0xb0>
 8109c08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8109c0a:	b143      	cbz	r3, 8109c1e <_reclaim_reent+0x22>
 8109c0c:	68db      	ldr	r3, [r3, #12]
 8109c0e:	2b00      	cmp	r3, #0
 8109c10:	d14a      	bne.n	8109ca8 <_reclaim_reent+0xac>
 8109c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109c14:	6819      	ldr	r1, [r3, #0]
 8109c16:	b111      	cbz	r1, 8109c1e <_reclaim_reent+0x22>
 8109c18:	4620      	mov	r0, r4
 8109c1a:	f002 ff55 	bl	810cac8 <_free_r>
 8109c1e:	6961      	ldr	r1, [r4, #20]
 8109c20:	b111      	cbz	r1, 8109c28 <_reclaim_reent+0x2c>
 8109c22:	4620      	mov	r0, r4
 8109c24:	f002 ff50 	bl	810cac8 <_free_r>
 8109c28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8109c2a:	b111      	cbz	r1, 8109c32 <_reclaim_reent+0x36>
 8109c2c:	4620      	mov	r0, r4
 8109c2e:	f002 ff4b 	bl	810cac8 <_free_r>
 8109c32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8109c34:	b111      	cbz	r1, 8109c3c <_reclaim_reent+0x40>
 8109c36:	4620      	mov	r0, r4
 8109c38:	f002 ff46 	bl	810cac8 <_free_r>
 8109c3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8109c3e:	b111      	cbz	r1, 8109c46 <_reclaim_reent+0x4a>
 8109c40:	4620      	mov	r0, r4
 8109c42:	f002 ff41 	bl	810cac8 <_free_r>
 8109c46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8109c48:	b111      	cbz	r1, 8109c50 <_reclaim_reent+0x54>
 8109c4a:	4620      	mov	r0, r4
 8109c4c:	f002 ff3c 	bl	810cac8 <_free_r>
 8109c50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8109c52:	b111      	cbz	r1, 8109c5a <_reclaim_reent+0x5e>
 8109c54:	4620      	mov	r0, r4
 8109c56:	f002 ff37 	bl	810cac8 <_free_r>
 8109c5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8109c5c:	b111      	cbz	r1, 8109c64 <_reclaim_reent+0x68>
 8109c5e:	4620      	mov	r0, r4
 8109c60:	f002 ff32 	bl	810cac8 <_free_r>
 8109c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109c66:	b111      	cbz	r1, 8109c6e <_reclaim_reent+0x72>
 8109c68:	4620      	mov	r0, r4
 8109c6a:	f002 ff2d 	bl	810cac8 <_free_r>
 8109c6e:	69a3      	ldr	r3, [r4, #24]
 8109c70:	b1e3      	cbz	r3, 8109cac <_reclaim_reent+0xb0>
 8109c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8109c74:	4620      	mov	r0, r4
 8109c76:	4798      	blx	r3
 8109c78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8109c7a:	b1b9      	cbz	r1, 8109cac <_reclaim_reent+0xb0>
 8109c7c:	4620      	mov	r0, r4
 8109c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8109c82:	f7ff bfad 	b.w	8109be0 <cleanup_glue>
 8109c86:	5949      	ldr	r1, [r1, r5]
 8109c88:	b941      	cbnz	r1, 8109c9c <_reclaim_reent+0xa0>
 8109c8a:	3504      	adds	r5, #4
 8109c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109c8e:	2d80      	cmp	r5, #128	; 0x80
 8109c90:	68d9      	ldr	r1, [r3, #12]
 8109c92:	d1f8      	bne.n	8109c86 <_reclaim_reent+0x8a>
 8109c94:	4620      	mov	r0, r4
 8109c96:	f002 ff17 	bl	810cac8 <_free_r>
 8109c9a:	e7ba      	b.n	8109c12 <_reclaim_reent+0x16>
 8109c9c:	680e      	ldr	r6, [r1, #0]
 8109c9e:	4620      	mov	r0, r4
 8109ca0:	f002 ff12 	bl	810cac8 <_free_r>
 8109ca4:	4631      	mov	r1, r6
 8109ca6:	e7ef      	b.n	8109c88 <_reclaim_reent+0x8c>
 8109ca8:	2500      	movs	r5, #0
 8109caa:	e7ef      	b.n	8109c8c <_reclaim_reent+0x90>
 8109cac:	bd70      	pop	{r4, r5, r6, pc}
 8109cae:	bf00      	nop
 8109cb0:	1000002c 	.word	0x1000002c

08109cb4 <_sbrk_r>:
 8109cb4:	b538      	push	{r3, r4, r5, lr}
 8109cb6:	4d06      	ldr	r5, [pc, #24]	; (8109cd0 <_sbrk_r+0x1c>)
 8109cb8:	2300      	movs	r3, #0
 8109cba:	4604      	mov	r4, r0
 8109cbc:	4608      	mov	r0, r1
 8109cbe:	602b      	str	r3, [r5, #0]
 8109cc0:	f7f7 ff76 	bl	8101bb0 <_sbrk>
 8109cc4:	1c43      	adds	r3, r0, #1
 8109cc6:	d102      	bne.n	8109cce <_sbrk_r+0x1a>
 8109cc8:	682b      	ldr	r3, [r5, #0]
 8109cca:	b103      	cbz	r3, 8109cce <_sbrk_r+0x1a>
 8109ccc:	6023      	str	r3, [r4, #0]
 8109cce:	bd38      	pop	{r3, r4, r5, pc}
 8109cd0:	10004d98 	.word	0x10004d98

08109cd4 <nanf>:
 8109cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109cdc <nanf+0x8>
 8109cd8:	4770      	bx	lr
 8109cda:	bf00      	nop
 8109cdc:	7fc00000 	.word	0x7fc00000

08109ce0 <siprintf>:
 8109ce0:	b40e      	push	{r1, r2, r3}
 8109ce2:	b500      	push	{lr}
 8109ce4:	b09c      	sub	sp, #112	; 0x70
 8109ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8109ce8:	9002      	str	r0, [sp, #8]
 8109cea:	9006      	str	r0, [sp, #24]
 8109cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109cf0:	4809      	ldr	r0, [pc, #36]	; (8109d18 <siprintf+0x38>)
 8109cf2:	9107      	str	r1, [sp, #28]
 8109cf4:	9104      	str	r1, [sp, #16]
 8109cf6:	4909      	ldr	r1, [pc, #36]	; (8109d1c <siprintf+0x3c>)
 8109cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8109cfc:	9105      	str	r1, [sp, #20]
 8109cfe:	6800      	ldr	r0, [r0, #0]
 8109d00:	9301      	str	r3, [sp, #4]
 8109d02:	a902      	add	r1, sp, #8
 8109d04:	f002 ff88 	bl	810cc18 <_svfiprintf_r>
 8109d08:	9b02      	ldr	r3, [sp, #8]
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	701a      	strb	r2, [r3, #0]
 8109d0e:	b01c      	add	sp, #112	; 0x70
 8109d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8109d14:	b003      	add	sp, #12
 8109d16:	4770      	bx	lr
 8109d18:	1000002c 	.word	0x1000002c
 8109d1c:	ffff0208 	.word	0xffff0208

08109d20 <__sread>:
 8109d20:	b510      	push	{r4, lr}
 8109d22:	460c      	mov	r4, r1
 8109d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109d28:	f003 f876 	bl	810ce18 <_read_r>
 8109d2c:	2800      	cmp	r0, #0
 8109d2e:	bfab      	itete	ge
 8109d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8109d32:	89a3      	ldrhlt	r3, [r4, #12]
 8109d34:	181b      	addge	r3, r3, r0
 8109d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8109d3a:	bfac      	ite	ge
 8109d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8109d3e:	81a3      	strhlt	r3, [r4, #12]
 8109d40:	bd10      	pop	{r4, pc}

08109d42 <__swrite>:
 8109d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109d46:	461f      	mov	r7, r3
 8109d48:	898b      	ldrh	r3, [r1, #12]
 8109d4a:	05db      	lsls	r3, r3, #23
 8109d4c:	4605      	mov	r5, r0
 8109d4e:	460c      	mov	r4, r1
 8109d50:	4616      	mov	r6, r2
 8109d52:	d505      	bpl.n	8109d60 <__swrite+0x1e>
 8109d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109d58:	2302      	movs	r3, #2
 8109d5a:	2200      	movs	r2, #0
 8109d5c:	f002 f9a4 	bl	810c0a8 <_lseek_r>
 8109d60:	89a3      	ldrh	r3, [r4, #12]
 8109d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8109d6a:	81a3      	strh	r3, [r4, #12]
 8109d6c:	4632      	mov	r2, r6
 8109d6e:	463b      	mov	r3, r7
 8109d70:	4628      	mov	r0, r5
 8109d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109d76:	f000 bec3 	b.w	810ab00 <_write_r>

08109d7a <__sseek>:
 8109d7a:	b510      	push	{r4, lr}
 8109d7c:	460c      	mov	r4, r1
 8109d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109d82:	f002 f991 	bl	810c0a8 <_lseek_r>
 8109d86:	1c43      	adds	r3, r0, #1
 8109d88:	89a3      	ldrh	r3, [r4, #12]
 8109d8a:	bf15      	itete	ne
 8109d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8109d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8109d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8109d96:	81a3      	strheq	r3, [r4, #12]
 8109d98:	bf18      	it	ne
 8109d9a:	81a3      	strhne	r3, [r4, #12]
 8109d9c:	bd10      	pop	{r4, pc}

08109d9e <__sclose>:
 8109d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109da2:	f000 bebf 	b.w	810ab24 <_close_r>

08109da6 <sulp>:
 8109da6:	b570      	push	{r4, r5, r6, lr}
 8109da8:	4604      	mov	r4, r0
 8109daa:	460d      	mov	r5, r1
 8109dac:	ec45 4b10 	vmov	d0, r4, r5
 8109db0:	4616      	mov	r6, r2
 8109db2:	f002 fd23 	bl	810c7fc <__ulp>
 8109db6:	ec51 0b10 	vmov	r0, r1, d0
 8109dba:	b17e      	cbz	r6, 8109ddc <sulp+0x36>
 8109dbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109dc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109dc4:	2b00      	cmp	r3, #0
 8109dc6:	dd09      	ble.n	8109ddc <sulp+0x36>
 8109dc8:	051b      	lsls	r3, r3, #20
 8109dca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109dce:	2400      	movs	r4, #0
 8109dd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109dd4:	4622      	mov	r2, r4
 8109dd6:	462b      	mov	r3, r5
 8109dd8:	f7f6 fc96 	bl	8100708 <__aeabi_dmul>
 8109ddc:	bd70      	pop	{r4, r5, r6, pc}
	...

08109de0 <_strtod_l>:
 8109de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109de4:	ed2d 8b02 	vpush	{d8}
 8109de8:	b09d      	sub	sp, #116	; 0x74
 8109dea:	461f      	mov	r7, r3
 8109dec:	2300      	movs	r3, #0
 8109dee:	9318      	str	r3, [sp, #96]	; 0x60
 8109df0:	4ba2      	ldr	r3, [pc, #648]	; (810a07c <_strtod_l+0x29c>)
 8109df2:	9213      	str	r2, [sp, #76]	; 0x4c
 8109df4:	681b      	ldr	r3, [r3, #0]
 8109df6:	9305      	str	r3, [sp, #20]
 8109df8:	4604      	mov	r4, r0
 8109dfa:	4618      	mov	r0, r3
 8109dfc:	4688      	mov	r8, r1
 8109dfe:	f7f6 fa6f 	bl	81002e0 <strlen>
 8109e02:	f04f 0a00 	mov.w	sl, #0
 8109e06:	4605      	mov	r5, r0
 8109e08:	f04f 0b00 	mov.w	fp, #0
 8109e0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109e12:	781a      	ldrb	r2, [r3, #0]
 8109e14:	2a2b      	cmp	r2, #43	; 0x2b
 8109e16:	d04e      	beq.n	8109eb6 <_strtod_l+0xd6>
 8109e18:	d83b      	bhi.n	8109e92 <_strtod_l+0xb2>
 8109e1a:	2a0d      	cmp	r2, #13
 8109e1c:	d834      	bhi.n	8109e88 <_strtod_l+0xa8>
 8109e1e:	2a08      	cmp	r2, #8
 8109e20:	d834      	bhi.n	8109e8c <_strtod_l+0xac>
 8109e22:	2a00      	cmp	r2, #0
 8109e24:	d03e      	beq.n	8109ea4 <_strtod_l+0xc4>
 8109e26:	2300      	movs	r3, #0
 8109e28:	930a      	str	r3, [sp, #40]	; 0x28
 8109e2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8109e2c:	7833      	ldrb	r3, [r6, #0]
 8109e2e:	2b30      	cmp	r3, #48	; 0x30
 8109e30:	f040 80b0 	bne.w	8109f94 <_strtod_l+0x1b4>
 8109e34:	7873      	ldrb	r3, [r6, #1]
 8109e36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109e3a:	2b58      	cmp	r3, #88	; 0x58
 8109e3c:	d168      	bne.n	8109f10 <_strtod_l+0x130>
 8109e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109e40:	9301      	str	r3, [sp, #4]
 8109e42:	ab18      	add	r3, sp, #96	; 0x60
 8109e44:	9702      	str	r7, [sp, #8]
 8109e46:	9300      	str	r3, [sp, #0]
 8109e48:	4a8d      	ldr	r2, [pc, #564]	; (810a080 <_strtod_l+0x2a0>)
 8109e4a:	ab19      	add	r3, sp, #100	; 0x64
 8109e4c:	a917      	add	r1, sp, #92	; 0x5c
 8109e4e:	4620      	mov	r0, r4
 8109e50:	f001 fe1e 	bl	810ba90 <__gethex>
 8109e54:	f010 0707 	ands.w	r7, r0, #7
 8109e58:	4605      	mov	r5, r0
 8109e5a:	d005      	beq.n	8109e68 <_strtod_l+0x88>
 8109e5c:	2f06      	cmp	r7, #6
 8109e5e:	d12c      	bne.n	8109eba <_strtod_l+0xda>
 8109e60:	3601      	adds	r6, #1
 8109e62:	2300      	movs	r3, #0
 8109e64:	9617      	str	r6, [sp, #92]	; 0x5c
 8109e66:	930a      	str	r3, [sp, #40]	; 0x28
 8109e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109e6a:	2b00      	cmp	r3, #0
 8109e6c:	f040 8590 	bne.w	810a990 <_strtod_l+0xbb0>
 8109e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109e72:	b1eb      	cbz	r3, 8109eb0 <_strtod_l+0xd0>
 8109e74:	4652      	mov	r2, sl
 8109e76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109e7a:	ec43 2b10 	vmov	d0, r2, r3
 8109e7e:	b01d      	add	sp, #116	; 0x74
 8109e80:	ecbd 8b02 	vpop	{d8}
 8109e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109e88:	2a20      	cmp	r2, #32
 8109e8a:	d1cc      	bne.n	8109e26 <_strtod_l+0x46>
 8109e8c:	3301      	adds	r3, #1
 8109e8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8109e90:	e7be      	b.n	8109e10 <_strtod_l+0x30>
 8109e92:	2a2d      	cmp	r2, #45	; 0x2d
 8109e94:	d1c7      	bne.n	8109e26 <_strtod_l+0x46>
 8109e96:	2201      	movs	r2, #1
 8109e98:	920a      	str	r2, [sp, #40]	; 0x28
 8109e9a:	1c5a      	adds	r2, r3, #1
 8109e9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8109e9e:	785b      	ldrb	r3, [r3, #1]
 8109ea0:	2b00      	cmp	r3, #0
 8109ea2:	d1c2      	bne.n	8109e2a <_strtod_l+0x4a>
 8109ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109ea6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109eaa:	2b00      	cmp	r3, #0
 8109eac:	f040 856e 	bne.w	810a98c <_strtod_l+0xbac>
 8109eb0:	4652      	mov	r2, sl
 8109eb2:	465b      	mov	r3, fp
 8109eb4:	e7e1      	b.n	8109e7a <_strtod_l+0x9a>
 8109eb6:	2200      	movs	r2, #0
 8109eb8:	e7ee      	b.n	8109e98 <_strtod_l+0xb8>
 8109eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8109ebc:	b13a      	cbz	r2, 8109ece <_strtod_l+0xee>
 8109ebe:	2135      	movs	r1, #53	; 0x35
 8109ec0:	a81a      	add	r0, sp, #104	; 0x68
 8109ec2:	f002 fda6 	bl	810ca12 <__copybits>
 8109ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109ec8:	4620      	mov	r0, r4
 8109eca:	f002 f965 	bl	810c198 <_Bfree>
 8109ece:	3f01      	subs	r7, #1
 8109ed0:	2f04      	cmp	r7, #4
 8109ed2:	d806      	bhi.n	8109ee2 <_strtod_l+0x102>
 8109ed4:	e8df f007 	tbb	[pc, r7]
 8109ed8:	1714030a 	.word	0x1714030a
 8109edc:	0a          	.byte	0x0a
 8109edd:	00          	.byte	0x00
 8109ede:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8109ee2:	0728      	lsls	r0, r5, #28
 8109ee4:	d5c0      	bpl.n	8109e68 <_strtod_l+0x88>
 8109ee6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8109eea:	e7bd      	b.n	8109e68 <_strtod_l+0x88>
 8109eec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8109ef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8109ef2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8109ef6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8109efa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8109efe:	e7f0      	b.n	8109ee2 <_strtod_l+0x102>
 8109f00:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a084 <_strtod_l+0x2a4>
 8109f04:	e7ed      	b.n	8109ee2 <_strtod_l+0x102>
 8109f06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8109f0a:	f04f 3aff 	mov.w	sl, #4294967295
 8109f0e:	e7e8      	b.n	8109ee2 <_strtod_l+0x102>
 8109f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109f12:	1c5a      	adds	r2, r3, #1
 8109f14:	9217      	str	r2, [sp, #92]	; 0x5c
 8109f16:	785b      	ldrb	r3, [r3, #1]
 8109f18:	2b30      	cmp	r3, #48	; 0x30
 8109f1a:	d0f9      	beq.n	8109f10 <_strtod_l+0x130>
 8109f1c:	2b00      	cmp	r3, #0
 8109f1e:	d0a3      	beq.n	8109e68 <_strtod_l+0x88>
 8109f20:	2301      	movs	r3, #1
 8109f22:	f04f 0900 	mov.w	r9, #0
 8109f26:	9304      	str	r3, [sp, #16]
 8109f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109f2a:	9308      	str	r3, [sp, #32]
 8109f2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8109f30:	464f      	mov	r7, r9
 8109f32:	220a      	movs	r2, #10
 8109f34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8109f36:	7806      	ldrb	r6, [r0, #0]
 8109f38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8109f3c:	b2d9      	uxtb	r1, r3
 8109f3e:	2909      	cmp	r1, #9
 8109f40:	d92a      	bls.n	8109f98 <_strtod_l+0x1b8>
 8109f42:	9905      	ldr	r1, [sp, #20]
 8109f44:	462a      	mov	r2, r5
 8109f46:	f002 ff83 	bl	810ce50 <strncmp>
 8109f4a:	b398      	cbz	r0, 8109fb4 <_strtod_l+0x1d4>
 8109f4c:	2000      	movs	r0, #0
 8109f4e:	4632      	mov	r2, r6
 8109f50:	463d      	mov	r5, r7
 8109f52:	9005      	str	r0, [sp, #20]
 8109f54:	4603      	mov	r3, r0
 8109f56:	2a65      	cmp	r2, #101	; 0x65
 8109f58:	d001      	beq.n	8109f5e <_strtod_l+0x17e>
 8109f5a:	2a45      	cmp	r2, #69	; 0x45
 8109f5c:	d118      	bne.n	8109f90 <_strtod_l+0x1b0>
 8109f5e:	b91d      	cbnz	r5, 8109f68 <_strtod_l+0x188>
 8109f60:	9a04      	ldr	r2, [sp, #16]
 8109f62:	4302      	orrs	r2, r0
 8109f64:	d09e      	beq.n	8109ea4 <_strtod_l+0xc4>
 8109f66:	2500      	movs	r5, #0
 8109f68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8109f6c:	f108 0201 	add.w	r2, r8, #1
 8109f70:	9217      	str	r2, [sp, #92]	; 0x5c
 8109f72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8109f76:	2a2b      	cmp	r2, #43	; 0x2b
 8109f78:	d075      	beq.n	810a066 <_strtod_l+0x286>
 8109f7a:	2a2d      	cmp	r2, #45	; 0x2d
 8109f7c:	d07b      	beq.n	810a076 <_strtod_l+0x296>
 8109f7e:	f04f 0c00 	mov.w	ip, #0
 8109f82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8109f86:	2909      	cmp	r1, #9
 8109f88:	f240 8082 	bls.w	810a090 <_strtod_l+0x2b0>
 8109f8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109f90:	2600      	movs	r6, #0
 8109f92:	e09d      	b.n	810a0d0 <_strtod_l+0x2f0>
 8109f94:	2300      	movs	r3, #0
 8109f96:	e7c4      	b.n	8109f22 <_strtod_l+0x142>
 8109f98:	2f08      	cmp	r7, #8
 8109f9a:	bfd8      	it	le
 8109f9c:	9907      	ldrle	r1, [sp, #28]
 8109f9e:	f100 0001 	add.w	r0, r0, #1
 8109fa2:	bfda      	itte	le
 8109fa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8109fa8:	9307      	strle	r3, [sp, #28]
 8109faa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8109fae:	3701      	adds	r7, #1
 8109fb0:	9017      	str	r0, [sp, #92]	; 0x5c
 8109fb2:	e7bf      	b.n	8109f34 <_strtod_l+0x154>
 8109fb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109fb6:	195a      	adds	r2, r3, r5
 8109fb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8109fba:	5d5a      	ldrb	r2, [r3, r5]
 8109fbc:	2f00      	cmp	r7, #0
 8109fbe:	d037      	beq.n	810a030 <_strtod_l+0x250>
 8109fc0:	9005      	str	r0, [sp, #20]
 8109fc2:	463d      	mov	r5, r7
 8109fc4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8109fc8:	2b09      	cmp	r3, #9
 8109fca:	d912      	bls.n	8109ff2 <_strtod_l+0x212>
 8109fcc:	2301      	movs	r3, #1
 8109fce:	e7c2      	b.n	8109f56 <_strtod_l+0x176>
 8109fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109fd2:	1c5a      	adds	r2, r3, #1
 8109fd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8109fd6:	785a      	ldrb	r2, [r3, #1]
 8109fd8:	3001      	adds	r0, #1
 8109fda:	2a30      	cmp	r2, #48	; 0x30
 8109fdc:	d0f8      	beq.n	8109fd0 <_strtod_l+0x1f0>
 8109fde:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8109fe2:	2b08      	cmp	r3, #8
 8109fe4:	f200 84d9 	bhi.w	810a99a <_strtod_l+0xbba>
 8109fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109fea:	9005      	str	r0, [sp, #20]
 8109fec:	2000      	movs	r0, #0
 8109fee:	9308      	str	r3, [sp, #32]
 8109ff0:	4605      	mov	r5, r0
 8109ff2:	3a30      	subs	r2, #48	; 0x30
 8109ff4:	f100 0301 	add.w	r3, r0, #1
 8109ff8:	d014      	beq.n	810a024 <_strtod_l+0x244>
 8109ffa:	9905      	ldr	r1, [sp, #20]
 8109ffc:	4419      	add	r1, r3
 8109ffe:	9105      	str	r1, [sp, #20]
 810a000:	462b      	mov	r3, r5
 810a002:	eb00 0e05 	add.w	lr, r0, r5
 810a006:	210a      	movs	r1, #10
 810a008:	4573      	cmp	r3, lr
 810a00a:	d113      	bne.n	810a034 <_strtod_l+0x254>
 810a00c:	182b      	adds	r3, r5, r0
 810a00e:	2b08      	cmp	r3, #8
 810a010:	f105 0501 	add.w	r5, r5, #1
 810a014:	4405      	add	r5, r0
 810a016:	dc1c      	bgt.n	810a052 <_strtod_l+0x272>
 810a018:	9907      	ldr	r1, [sp, #28]
 810a01a:	230a      	movs	r3, #10
 810a01c:	fb03 2301 	mla	r3, r3, r1, r2
 810a020:	9307      	str	r3, [sp, #28]
 810a022:	2300      	movs	r3, #0
 810a024:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a026:	1c51      	adds	r1, r2, #1
 810a028:	9117      	str	r1, [sp, #92]	; 0x5c
 810a02a:	7852      	ldrb	r2, [r2, #1]
 810a02c:	4618      	mov	r0, r3
 810a02e:	e7c9      	b.n	8109fc4 <_strtod_l+0x1e4>
 810a030:	4638      	mov	r0, r7
 810a032:	e7d2      	b.n	8109fda <_strtod_l+0x1fa>
 810a034:	2b08      	cmp	r3, #8
 810a036:	dc04      	bgt.n	810a042 <_strtod_l+0x262>
 810a038:	9e07      	ldr	r6, [sp, #28]
 810a03a:	434e      	muls	r6, r1
 810a03c:	9607      	str	r6, [sp, #28]
 810a03e:	3301      	adds	r3, #1
 810a040:	e7e2      	b.n	810a008 <_strtod_l+0x228>
 810a042:	f103 0c01 	add.w	ip, r3, #1
 810a046:	f1bc 0f10 	cmp.w	ip, #16
 810a04a:	bfd8      	it	le
 810a04c:	fb01 f909 	mulle.w	r9, r1, r9
 810a050:	e7f5      	b.n	810a03e <_strtod_l+0x25e>
 810a052:	2d10      	cmp	r5, #16
 810a054:	bfdc      	itt	le
 810a056:	230a      	movle	r3, #10
 810a058:	fb03 2909 	mlale	r9, r3, r9, r2
 810a05c:	e7e1      	b.n	810a022 <_strtod_l+0x242>
 810a05e:	2300      	movs	r3, #0
 810a060:	9305      	str	r3, [sp, #20]
 810a062:	2301      	movs	r3, #1
 810a064:	e77c      	b.n	8109f60 <_strtod_l+0x180>
 810a066:	f04f 0c00 	mov.w	ip, #0
 810a06a:	f108 0202 	add.w	r2, r8, #2
 810a06e:	9217      	str	r2, [sp, #92]	; 0x5c
 810a070:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a074:	e785      	b.n	8109f82 <_strtod_l+0x1a2>
 810a076:	f04f 0c01 	mov.w	ip, #1
 810a07a:	e7f6      	b.n	810a06a <_strtod_l+0x28a>
 810a07c:	0810d8e0 	.word	0x0810d8e0
 810a080:	0810d698 	.word	0x0810d698
 810a084:	7ff00000 	.word	0x7ff00000
 810a088:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a08a:	1c51      	adds	r1, r2, #1
 810a08c:	9117      	str	r1, [sp, #92]	; 0x5c
 810a08e:	7852      	ldrb	r2, [r2, #1]
 810a090:	2a30      	cmp	r2, #48	; 0x30
 810a092:	d0f9      	beq.n	810a088 <_strtod_l+0x2a8>
 810a094:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a098:	2908      	cmp	r1, #8
 810a09a:	f63f af79 	bhi.w	8109f90 <_strtod_l+0x1b0>
 810a09e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a0a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a0a4:	9206      	str	r2, [sp, #24]
 810a0a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a0a8:	1c51      	adds	r1, r2, #1
 810a0aa:	9117      	str	r1, [sp, #92]	; 0x5c
 810a0ac:	7852      	ldrb	r2, [r2, #1]
 810a0ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810a0b2:	2e09      	cmp	r6, #9
 810a0b4:	d937      	bls.n	810a126 <_strtod_l+0x346>
 810a0b6:	9e06      	ldr	r6, [sp, #24]
 810a0b8:	1b89      	subs	r1, r1, r6
 810a0ba:	2908      	cmp	r1, #8
 810a0bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810a0c0:	dc02      	bgt.n	810a0c8 <_strtod_l+0x2e8>
 810a0c2:	4576      	cmp	r6, lr
 810a0c4:	bfa8      	it	ge
 810a0c6:	4676      	movge	r6, lr
 810a0c8:	f1bc 0f00 	cmp.w	ip, #0
 810a0cc:	d000      	beq.n	810a0d0 <_strtod_l+0x2f0>
 810a0ce:	4276      	negs	r6, r6
 810a0d0:	2d00      	cmp	r5, #0
 810a0d2:	d14d      	bne.n	810a170 <_strtod_l+0x390>
 810a0d4:	9904      	ldr	r1, [sp, #16]
 810a0d6:	4301      	orrs	r1, r0
 810a0d8:	f47f aec6 	bne.w	8109e68 <_strtod_l+0x88>
 810a0dc:	2b00      	cmp	r3, #0
 810a0de:	f47f aee1 	bne.w	8109ea4 <_strtod_l+0xc4>
 810a0e2:	2a69      	cmp	r2, #105	; 0x69
 810a0e4:	d027      	beq.n	810a136 <_strtod_l+0x356>
 810a0e6:	dc24      	bgt.n	810a132 <_strtod_l+0x352>
 810a0e8:	2a49      	cmp	r2, #73	; 0x49
 810a0ea:	d024      	beq.n	810a136 <_strtod_l+0x356>
 810a0ec:	2a4e      	cmp	r2, #78	; 0x4e
 810a0ee:	f47f aed9 	bne.w	8109ea4 <_strtod_l+0xc4>
 810a0f2:	499f      	ldr	r1, [pc, #636]	; (810a370 <_strtod_l+0x590>)
 810a0f4:	a817      	add	r0, sp, #92	; 0x5c
 810a0f6:	f001 ff23 	bl	810bf40 <__match>
 810a0fa:	2800      	cmp	r0, #0
 810a0fc:	f43f aed2 	beq.w	8109ea4 <_strtod_l+0xc4>
 810a100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a102:	781b      	ldrb	r3, [r3, #0]
 810a104:	2b28      	cmp	r3, #40	; 0x28
 810a106:	d12d      	bne.n	810a164 <_strtod_l+0x384>
 810a108:	499a      	ldr	r1, [pc, #616]	; (810a374 <_strtod_l+0x594>)
 810a10a:	aa1a      	add	r2, sp, #104	; 0x68
 810a10c:	a817      	add	r0, sp, #92	; 0x5c
 810a10e:	f001 ff2b 	bl	810bf68 <__hexnan>
 810a112:	2805      	cmp	r0, #5
 810a114:	d126      	bne.n	810a164 <_strtod_l+0x384>
 810a116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810a118:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810a11c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810a120:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810a124:	e6a0      	b.n	8109e68 <_strtod_l+0x88>
 810a126:	210a      	movs	r1, #10
 810a128:	fb01 2e0e 	mla	lr, r1, lr, r2
 810a12c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810a130:	e7b9      	b.n	810a0a6 <_strtod_l+0x2c6>
 810a132:	2a6e      	cmp	r2, #110	; 0x6e
 810a134:	e7db      	b.n	810a0ee <_strtod_l+0x30e>
 810a136:	4990      	ldr	r1, [pc, #576]	; (810a378 <_strtod_l+0x598>)
 810a138:	a817      	add	r0, sp, #92	; 0x5c
 810a13a:	f001 ff01 	bl	810bf40 <__match>
 810a13e:	2800      	cmp	r0, #0
 810a140:	f43f aeb0 	beq.w	8109ea4 <_strtod_l+0xc4>
 810a144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a146:	498d      	ldr	r1, [pc, #564]	; (810a37c <_strtod_l+0x59c>)
 810a148:	3b01      	subs	r3, #1
 810a14a:	a817      	add	r0, sp, #92	; 0x5c
 810a14c:	9317      	str	r3, [sp, #92]	; 0x5c
 810a14e:	f001 fef7 	bl	810bf40 <__match>
 810a152:	b910      	cbnz	r0, 810a15a <_strtod_l+0x37a>
 810a154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a156:	3301      	adds	r3, #1
 810a158:	9317      	str	r3, [sp, #92]	; 0x5c
 810a15a:	f8df b230 	ldr.w	fp, [pc, #560]	; 810a38c <_strtod_l+0x5ac>
 810a15e:	f04f 0a00 	mov.w	sl, #0
 810a162:	e681      	b.n	8109e68 <_strtod_l+0x88>
 810a164:	4886      	ldr	r0, [pc, #536]	; (810a380 <_strtod_l+0x5a0>)
 810a166:	f002 fe6b 	bl	810ce40 <nan>
 810a16a:	ec5b ab10 	vmov	sl, fp, d0
 810a16e:	e67b      	b.n	8109e68 <_strtod_l+0x88>
 810a170:	9b05      	ldr	r3, [sp, #20]
 810a172:	9807      	ldr	r0, [sp, #28]
 810a174:	1af3      	subs	r3, r6, r3
 810a176:	2f00      	cmp	r7, #0
 810a178:	bf08      	it	eq
 810a17a:	462f      	moveq	r7, r5
 810a17c:	2d10      	cmp	r5, #16
 810a17e:	9306      	str	r3, [sp, #24]
 810a180:	46a8      	mov	r8, r5
 810a182:	bfa8      	it	ge
 810a184:	f04f 0810 	movge.w	r8, #16
 810a188:	f7f6 fa44 	bl	8100614 <__aeabi_ui2d>
 810a18c:	2d09      	cmp	r5, #9
 810a18e:	4682      	mov	sl, r0
 810a190:	468b      	mov	fp, r1
 810a192:	dd13      	ble.n	810a1bc <_strtod_l+0x3dc>
 810a194:	4b7b      	ldr	r3, [pc, #492]	; (810a384 <_strtod_l+0x5a4>)
 810a196:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810a19a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a19e:	f7f6 fab3 	bl	8100708 <__aeabi_dmul>
 810a1a2:	4682      	mov	sl, r0
 810a1a4:	4648      	mov	r0, r9
 810a1a6:	468b      	mov	fp, r1
 810a1a8:	f7f6 fa34 	bl	8100614 <__aeabi_ui2d>
 810a1ac:	4602      	mov	r2, r0
 810a1ae:	460b      	mov	r3, r1
 810a1b0:	4650      	mov	r0, sl
 810a1b2:	4659      	mov	r1, fp
 810a1b4:	f7f6 f8f2 	bl	810039c <__adddf3>
 810a1b8:	4682      	mov	sl, r0
 810a1ba:	468b      	mov	fp, r1
 810a1bc:	2d0f      	cmp	r5, #15
 810a1be:	dc38      	bgt.n	810a232 <_strtod_l+0x452>
 810a1c0:	9b06      	ldr	r3, [sp, #24]
 810a1c2:	2b00      	cmp	r3, #0
 810a1c4:	f43f ae50 	beq.w	8109e68 <_strtod_l+0x88>
 810a1c8:	dd24      	ble.n	810a214 <_strtod_l+0x434>
 810a1ca:	2b16      	cmp	r3, #22
 810a1cc:	dc0b      	bgt.n	810a1e6 <_strtod_l+0x406>
 810a1ce:	496d      	ldr	r1, [pc, #436]	; (810a384 <_strtod_l+0x5a4>)
 810a1d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a1d8:	4652      	mov	r2, sl
 810a1da:	465b      	mov	r3, fp
 810a1dc:	f7f6 fa94 	bl	8100708 <__aeabi_dmul>
 810a1e0:	4682      	mov	sl, r0
 810a1e2:	468b      	mov	fp, r1
 810a1e4:	e640      	b.n	8109e68 <_strtod_l+0x88>
 810a1e6:	9a06      	ldr	r2, [sp, #24]
 810a1e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810a1ec:	4293      	cmp	r3, r2
 810a1ee:	db20      	blt.n	810a232 <_strtod_l+0x452>
 810a1f0:	4c64      	ldr	r4, [pc, #400]	; (810a384 <_strtod_l+0x5a4>)
 810a1f2:	f1c5 050f 	rsb	r5, r5, #15
 810a1f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810a1fa:	4652      	mov	r2, sl
 810a1fc:	465b      	mov	r3, fp
 810a1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a202:	f7f6 fa81 	bl	8100708 <__aeabi_dmul>
 810a206:	9b06      	ldr	r3, [sp, #24]
 810a208:	1b5d      	subs	r5, r3, r5
 810a20a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810a20e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a212:	e7e3      	b.n	810a1dc <_strtod_l+0x3fc>
 810a214:	9b06      	ldr	r3, [sp, #24]
 810a216:	3316      	adds	r3, #22
 810a218:	db0b      	blt.n	810a232 <_strtod_l+0x452>
 810a21a:	9b05      	ldr	r3, [sp, #20]
 810a21c:	1b9e      	subs	r6, r3, r6
 810a21e:	4b59      	ldr	r3, [pc, #356]	; (810a384 <_strtod_l+0x5a4>)
 810a220:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810a224:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a228:	4650      	mov	r0, sl
 810a22a:	4659      	mov	r1, fp
 810a22c:	f7f6 fb96 	bl	810095c <__aeabi_ddiv>
 810a230:	e7d6      	b.n	810a1e0 <_strtod_l+0x400>
 810a232:	9b06      	ldr	r3, [sp, #24]
 810a234:	eba5 0808 	sub.w	r8, r5, r8
 810a238:	4498      	add	r8, r3
 810a23a:	f1b8 0f00 	cmp.w	r8, #0
 810a23e:	dd74      	ble.n	810a32a <_strtod_l+0x54a>
 810a240:	f018 030f 	ands.w	r3, r8, #15
 810a244:	d00a      	beq.n	810a25c <_strtod_l+0x47c>
 810a246:	494f      	ldr	r1, [pc, #316]	; (810a384 <_strtod_l+0x5a4>)
 810a248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a24c:	4652      	mov	r2, sl
 810a24e:	465b      	mov	r3, fp
 810a250:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a254:	f7f6 fa58 	bl	8100708 <__aeabi_dmul>
 810a258:	4682      	mov	sl, r0
 810a25a:	468b      	mov	fp, r1
 810a25c:	f038 080f 	bics.w	r8, r8, #15
 810a260:	d04f      	beq.n	810a302 <_strtod_l+0x522>
 810a262:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810a266:	dd22      	ble.n	810a2ae <_strtod_l+0x4ce>
 810a268:	2500      	movs	r5, #0
 810a26a:	462e      	mov	r6, r5
 810a26c:	9507      	str	r5, [sp, #28]
 810a26e:	9505      	str	r5, [sp, #20]
 810a270:	2322      	movs	r3, #34	; 0x22
 810a272:	f8df b118 	ldr.w	fp, [pc, #280]	; 810a38c <_strtod_l+0x5ac>
 810a276:	6023      	str	r3, [r4, #0]
 810a278:	f04f 0a00 	mov.w	sl, #0
 810a27c:	9b07      	ldr	r3, [sp, #28]
 810a27e:	2b00      	cmp	r3, #0
 810a280:	f43f adf2 	beq.w	8109e68 <_strtod_l+0x88>
 810a284:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a286:	4620      	mov	r0, r4
 810a288:	f001 ff86 	bl	810c198 <_Bfree>
 810a28c:	9905      	ldr	r1, [sp, #20]
 810a28e:	4620      	mov	r0, r4
 810a290:	f001 ff82 	bl	810c198 <_Bfree>
 810a294:	4631      	mov	r1, r6
 810a296:	4620      	mov	r0, r4
 810a298:	f001 ff7e 	bl	810c198 <_Bfree>
 810a29c:	9907      	ldr	r1, [sp, #28]
 810a29e:	4620      	mov	r0, r4
 810a2a0:	f001 ff7a 	bl	810c198 <_Bfree>
 810a2a4:	4629      	mov	r1, r5
 810a2a6:	4620      	mov	r0, r4
 810a2a8:	f001 ff76 	bl	810c198 <_Bfree>
 810a2ac:	e5dc      	b.n	8109e68 <_strtod_l+0x88>
 810a2ae:	4b36      	ldr	r3, [pc, #216]	; (810a388 <_strtod_l+0x5a8>)
 810a2b0:	9304      	str	r3, [sp, #16]
 810a2b2:	2300      	movs	r3, #0
 810a2b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 810a2b8:	4650      	mov	r0, sl
 810a2ba:	4659      	mov	r1, fp
 810a2bc:	4699      	mov	r9, r3
 810a2be:	f1b8 0f01 	cmp.w	r8, #1
 810a2c2:	dc21      	bgt.n	810a308 <_strtod_l+0x528>
 810a2c4:	b10b      	cbz	r3, 810a2ca <_strtod_l+0x4ea>
 810a2c6:	4682      	mov	sl, r0
 810a2c8:	468b      	mov	fp, r1
 810a2ca:	4b2f      	ldr	r3, [pc, #188]	; (810a388 <_strtod_l+0x5a8>)
 810a2cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810a2d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810a2d4:	4652      	mov	r2, sl
 810a2d6:	465b      	mov	r3, fp
 810a2d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 810a2dc:	f7f6 fa14 	bl	8100708 <__aeabi_dmul>
 810a2e0:	4b2a      	ldr	r3, [pc, #168]	; (810a38c <_strtod_l+0x5ac>)
 810a2e2:	460a      	mov	r2, r1
 810a2e4:	400b      	ands	r3, r1
 810a2e6:	492a      	ldr	r1, [pc, #168]	; (810a390 <_strtod_l+0x5b0>)
 810a2e8:	428b      	cmp	r3, r1
 810a2ea:	4682      	mov	sl, r0
 810a2ec:	d8bc      	bhi.n	810a268 <_strtod_l+0x488>
 810a2ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a2f2:	428b      	cmp	r3, r1
 810a2f4:	bf86      	itte	hi
 810a2f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810a394 <_strtod_l+0x5b4>
 810a2fa:	f04f 3aff 	movhi.w	sl, #4294967295
 810a2fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810a302:	2300      	movs	r3, #0
 810a304:	9304      	str	r3, [sp, #16]
 810a306:	e084      	b.n	810a412 <_strtod_l+0x632>
 810a308:	f018 0f01 	tst.w	r8, #1
 810a30c:	d005      	beq.n	810a31a <_strtod_l+0x53a>
 810a30e:	9b04      	ldr	r3, [sp, #16]
 810a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a314:	f7f6 f9f8 	bl	8100708 <__aeabi_dmul>
 810a318:	2301      	movs	r3, #1
 810a31a:	9a04      	ldr	r2, [sp, #16]
 810a31c:	3208      	adds	r2, #8
 810a31e:	f109 0901 	add.w	r9, r9, #1
 810a322:	ea4f 0868 	mov.w	r8, r8, asr #1
 810a326:	9204      	str	r2, [sp, #16]
 810a328:	e7c9      	b.n	810a2be <_strtod_l+0x4de>
 810a32a:	d0ea      	beq.n	810a302 <_strtod_l+0x522>
 810a32c:	f1c8 0800 	rsb	r8, r8, #0
 810a330:	f018 020f 	ands.w	r2, r8, #15
 810a334:	d00a      	beq.n	810a34c <_strtod_l+0x56c>
 810a336:	4b13      	ldr	r3, [pc, #76]	; (810a384 <_strtod_l+0x5a4>)
 810a338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a33c:	4650      	mov	r0, sl
 810a33e:	4659      	mov	r1, fp
 810a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a344:	f7f6 fb0a 	bl	810095c <__aeabi_ddiv>
 810a348:	4682      	mov	sl, r0
 810a34a:	468b      	mov	fp, r1
 810a34c:	ea5f 1828 	movs.w	r8, r8, asr #4
 810a350:	d0d7      	beq.n	810a302 <_strtod_l+0x522>
 810a352:	f1b8 0f1f 	cmp.w	r8, #31
 810a356:	dd1f      	ble.n	810a398 <_strtod_l+0x5b8>
 810a358:	2500      	movs	r5, #0
 810a35a:	462e      	mov	r6, r5
 810a35c:	9507      	str	r5, [sp, #28]
 810a35e:	9505      	str	r5, [sp, #20]
 810a360:	2322      	movs	r3, #34	; 0x22
 810a362:	f04f 0a00 	mov.w	sl, #0
 810a366:	f04f 0b00 	mov.w	fp, #0
 810a36a:	6023      	str	r3, [r4, #0]
 810a36c:	e786      	b.n	810a27c <_strtod_l+0x49c>
 810a36e:	bf00      	nop
 810a370:	0810d669 	.word	0x0810d669
 810a374:	0810d6ac 	.word	0x0810d6ac
 810a378:	0810d661 	.word	0x0810d661
 810a37c:	0810d7ec 	.word	0x0810d7ec
 810a380:	0810da98 	.word	0x0810da98
 810a384:	0810d978 	.word	0x0810d978
 810a388:	0810d950 	.word	0x0810d950
 810a38c:	7ff00000 	.word	0x7ff00000
 810a390:	7ca00000 	.word	0x7ca00000
 810a394:	7fefffff 	.word	0x7fefffff
 810a398:	f018 0310 	ands.w	r3, r8, #16
 810a39c:	bf18      	it	ne
 810a39e:	236a      	movne	r3, #106	; 0x6a
 810a3a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810a750 <_strtod_l+0x970>
 810a3a4:	9304      	str	r3, [sp, #16]
 810a3a6:	4650      	mov	r0, sl
 810a3a8:	4659      	mov	r1, fp
 810a3aa:	2300      	movs	r3, #0
 810a3ac:	f018 0f01 	tst.w	r8, #1
 810a3b0:	d004      	beq.n	810a3bc <_strtod_l+0x5dc>
 810a3b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 810a3b6:	f7f6 f9a7 	bl	8100708 <__aeabi_dmul>
 810a3ba:	2301      	movs	r3, #1
 810a3bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 810a3c0:	f109 0908 	add.w	r9, r9, #8
 810a3c4:	d1f2      	bne.n	810a3ac <_strtod_l+0x5cc>
 810a3c6:	b10b      	cbz	r3, 810a3cc <_strtod_l+0x5ec>
 810a3c8:	4682      	mov	sl, r0
 810a3ca:	468b      	mov	fp, r1
 810a3cc:	9b04      	ldr	r3, [sp, #16]
 810a3ce:	b1c3      	cbz	r3, 810a402 <_strtod_l+0x622>
 810a3d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810a3d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a3d8:	2b00      	cmp	r3, #0
 810a3da:	4659      	mov	r1, fp
 810a3dc:	dd11      	ble.n	810a402 <_strtod_l+0x622>
 810a3de:	2b1f      	cmp	r3, #31
 810a3e0:	f340 8124 	ble.w	810a62c <_strtod_l+0x84c>
 810a3e4:	2b34      	cmp	r3, #52	; 0x34
 810a3e6:	bfde      	ittt	le
 810a3e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a3ec:	f04f 33ff 	movle.w	r3, #4294967295
 810a3f0:	fa03 f202 	lslle.w	r2, r3, r2
 810a3f4:	f04f 0a00 	mov.w	sl, #0
 810a3f8:	bfcc      	ite	gt
 810a3fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810a3fe:	ea02 0b01 	andle.w	fp, r2, r1
 810a402:	2200      	movs	r2, #0
 810a404:	2300      	movs	r3, #0
 810a406:	4650      	mov	r0, sl
 810a408:	4659      	mov	r1, fp
 810a40a:	f7f6 fbe5 	bl	8100bd8 <__aeabi_dcmpeq>
 810a40e:	2800      	cmp	r0, #0
 810a410:	d1a2      	bne.n	810a358 <_strtod_l+0x578>
 810a412:	9b07      	ldr	r3, [sp, #28]
 810a414:	9300      	str	r3, [sp, #0]
 810a416:	9908      	ldr	r1, [sp, #32]
 810a418:	462b      	mov	r3, r5
 810a41a:	463a      	mov	r2, r7
 810a41c:	4620      	mov	r0, r4
 810a41e:	f001 ff23 	bl	810c268 <__s2b>
 810a422:	9007      	str	r0, [sp, #28]
 810a424:	2800      	cmp	r0, #0
 810a426:	f43f af1f 	beq.w	810a268 <_strtod_l+0x488>
 810a42a:	9b05      	ldr	r3, [sp, #20]
 810a42c:	1b9e      	subs	r6, r3, r6
 810a42e:	9b06      	ldr	r3, [sp, #24]
 810a430:	2b00      	cmp	r3, #0
 810a432:	bfb4      	ite	lt
 810a434:	4633      	movlt	r3, r6
 810a436:	2300      	movge	r3, #0
 810a438:	930c      	str	r3, [sp, #48]	; 0x30
 810a43a:	9b06      	ldr	r3, [sp, #24]
 810a43c:	2500      	movs	r5, #0
 810a43e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810a442:	9312      	str	r3, [sp, #72]	; 0x48
 810a444:	462e      	mov	r6, r5
 810a446:	9b07      	ldr	r3, [sp, #28]
 810a448:	4620      	mov	r0, r4
 810a44a:	6859      	ldr	r1, [r3, #4]
 810a44c:	f001 fe64 	bl	810c118 <_Balloc>
 810a450:	9005      	str	r0, [sp, #20]
 810a452:	2800      	cmp	r0, #0
 810a454:	f43f af0c 	beq.w	810a270 <_strtod_l+0x490>
 810a458:	9b07      	ldr	r3, [sp, #28]
 810a45a:	691a      	ldr	r2, [r3, #16]
 810a45c:	3202      	adds	r2, #2
 810a45e:	f103 010c 	add.w	r1, r3, #12
 810a462:	0092      	lsls	r2, r2, #2
 810a464:	300c      	adds	r0, #12
 810a466:	f7fe fc96 	bl	8108d96 <memcpy>
 810a46a:	ec4b ab10 	vmov	d0, sl, fp
 810a46e:	aa1a      	add	r2, sp, #104	; 0x68
 810a470:	a919      	add	r1, sp, #100	; 0x64
 810a472:	4620      	mov	r0, r4
 810a474:	f002 fa3e 	bl	810c8f4 <__d2b>
 810a478:	ec4b ab18 	vmov	d8, sl, fp
 810a47c:	9018      	str	r0, [sp, #96]	; 0x60
 810a47e:	2800      	cmp	r0, #0
 810a480:	f43f aef6 	beq.w	810a270 <_strtod_l+0x490>
 810a484:	2101      	movs	r1, #1
 810a486:	4620      	mov	r0, r4
 810a488:	f001 ff88 	bl	810c39c <__i2b>
 810a48c:	4606      	mov	r6, r0
 810a48e:	2800      	cmp	r0, #0
 810a490:	f43f aeee 	beq.w	810a270 <_strtod_l+0x490>
 810a494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a496:	9904      	ldr	r1, [sp, #16]
 810a498:	2b00      	cmp	r3, #0
 810a49a:	bfab      	itete	ge
 810a49c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810a49e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810a4a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a4a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810a4a6:	bfac      	ite	ge
 810a4a8:	eb03 0902 	addge.w	r9, r3, r2
 810a4ac:	1ad7      	sublt	r7, r2, r3
 810a4ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810a4b0:	eba3 0801 	sub.w	r8, r3, r1
 810a4b4:	4490      	add	r8, r2
 810a4b6:	4ba1      	ldr	r3, [pc, #644]	; (810a73c <_strtod_l+0x95c>)
 810a4b8:	f108 38ff 	add.w	r8, r8, #4294967295
 810a4bc:	4598      	cmp	r8, r3
 810a4be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a4c2:	f280 80c7 	bge.w	810a654 <_strtod_l+0x874>
 810a4c6:	eba3 0308 	sub.w	r3, r3, r8
 810a4ca:	2b1f      	cmp	r3, #31
 810a4cc:	eba2 0203 	sub.w	r2, r2, r3
 810a4d0:	f04f 0101 	mov.w	r1, #1
 810a4d4:	f300 80b1 	bgt.w	810a63a <_strtod_l+0x85a>
 810a4d8:	fa01 f303 	lsl.w	r3, r1, r3
 810a4dc:	930d      	str	r3, [sp, #52]	; 0x34
 810a4de:	2300      	movs	r3, #0
 810a4e0:	9308      	str	r3, [sp, #32]
 810a4e2:	eb09 0802 	add.w	r8, r9, r2
 810a4e6:	9b04      	ldr	r3, [sp, #16]
 810a4e8:	45c1      	cmp	r9, r8
 810a4ea:	4417      	add	r7, r2
 810a4ec:	441f      	add	r7, r3
 810a4ee:	464b      	mov	r3, r9
 810a4f0:	bfa8      	it	ge
 810a4f2:	4643      	movge	r3, r8
 810a4f4:	42bb      	cmp	r3, r7
 810a4f6:	bfa8      	it	ge
 810a4f8:	463b      	movge	r3, r7
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	bfc2      	ittt	gt
 810a4fe:	eba8 0803 	subgt.w	r8, r8, r3
 810a502:	1aff      	subgt	r7, r7, r3
 810a504:	eba9 0903 	subgt.w	r9, r9, r3
 810a508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a50a:	2b00      	cmp	r3, #0
 810a50c:	dd17      	ble.n	810a53e <_strtod_l+0x75e>
 810a50e:	4631      	mov	r1, r6
 810a510:	461a      	mov	r2, r3
 810a512:	4620      	mov	r0, r4
 810a514:	f002 f802 	bl	810c51c <__pow5mult>
 810a518:	4606      	mov	r6, r0
 810a51a:	2800      	cmp	r0, #0
 810a51c:	f43f aea8 	beq.w	810a270 <_strtod_l+0x490>
 810a520:	4601      	mov	r1, r0
 810a522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a524:	4620      	mov	r0, r4
 810a526:	f001 ff4f 	bl	810c3c8 <__multiply>
 810a52a:	900b      	str	r0, [sp, #44]	; 0x2c
 810a52c:	2800      	cmp	r0, #0
 810a52e:	f43f ae9f 	beq.w	810a270 <_strtod_l+0x490>
 810a532:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a534:	4620      	mov	r0, r4
 810a536:	f001 fe2f 	bl	810c198 <_Bfree>
 810a53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a53c:	9318      	str	r3, [sp, #96]	; 0x60
 810a53e:	f1b8 0f00 	cmp.w	r8, #0
 810a542:	f300 808c 	bgt.w	810a65e <_strtod_l+0x87e>
 810a546:	9b06      	ldr	r3, [sp, #24]
 810a548:	2b00      	cmp	r3, #0
 810a54a:	dd08      	ble.n	810a55e <_strtod_l+0x77e>
 810a54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a54e:	9905      	ldr	r1, [sp, #20]
 810a550:	4620      	mov	r0, r4
 810a552:	f001 ffe3 	bl	810c51c <__pow5mult>
 810a556:	9005      	str	r0, [sp, #20]
 810a558:	2800      	cmp	r0, #0
 810a55a:	f43f ae89 	beq.w	810a270 <_strtod_l+0x490>
 810a55e:	2f00      	cmp	r7, #0
 810a560:	dd08      	ble.n	810a574 <_strtod_l+0x794>
 810a562:	9905      	ldr	r1, [sp, #20]
 810a564:	463a      	mov	r2, r7
 810a566:	4620      	mov	r0, r4
 810a568:	f002 f832 	bl	810c5d0 <__lshift>
 810a56c:	9005      	str	r0, [sp, #20]
 810a56e:	2800      	cmp	r0, #0
 810a570:	f43f ae7e 	beq.w	810a270 <_strtod_l+0x490>
 810a574:	f1b9 0f00 	cmp.w	r9, #0
 810a578:	dd08      	ble.n	810a58c <_strtod_l+0x7ac>
 810a57a:	4631      	mov	r1, r6
 810a57c:	464a      	mov	r2, r9
 810a57e:	4620      	mov	r0, r4
 810a580:	f002 f826 	bl	810c5d0 <__lshift>
 810a584:	4606      	mov	r6, r0
 810a586:	2800      	cmp	r0, #0
 810a588:	f43f ae72 	beq.w	810a270 <_strtod_l+0x490>
 810a58c:	9a05      	ldr	r2, [sp, #20]
 810a58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a590:	4620      	mov	r0, r4
 810a592:	f002 f8a9 	bl	810c6e8 <__mdiff>
 810a596:	4605      	mov	r5, r0
 810a598:	2800      	cmp	r0, #0
 810a59a:	f43f ae69 	beq.w	810a270 <_strtod_l+0x490>
 810a59e:	68c3      	ldr	r3, [r0, #12]
 810a5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 810a5a2:	2300      	movs	r3, #0
 810a5a4:	60c3      	str	r3, [r0, #12]
 810a5a6:	4631      	mov	r1, r6
 810a5a8:	f002 f882 	bl	810c6b0 <__mcmp>
 810a5ac:	2800      	cmp	r0, #0
 810a5ae:	da60      	bge.n	810a672 <_strtod_l+0x892>
 810a5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a5b2:	ea53 030a 	orrs.w	r3, r3, sl
 810a5b6:	f040 8082 	bne.w	810a6be <_strtod_l+0x8de>
 810a5ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a5be:	2b00      	cmp	r3, #0
 810a5c0:	d17d      	bne.n	810a6be <_strtod_l+0x8de>
 810a5c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a5c6:	0d1b      	lsrs	r3, r3, #20
 810a5c8:	051b      	lsls	r3, r3, #20
 810a5ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a5ce:	d976      	bls.n	810a6be <_strtod_l+0x8de>
 810a5d0:	696b      	ldr	r3, [r5, #20]
 810a5d2:	b913      	cbnz	r3, 810a5da <_strtod_l+0x7fa>
 810a5d4:	692b      	ldr	r3, [r5, #16]
 810a5d6:	2b01      	cmp	r3, #1
 810a5d8:	dd71      	ble.n	810a6be <_strtod_l+0x8de>
 810a5da:	4629      	mov	r1, r5
 810a5dc:	2201      	movs	r2, #1
 810a5de:	4620      	mov	r0, r4
 810a5e0:	f001 fff6 	bl	810c5d0 <__lshift>
 810a5e4:	4631      	mov	r1, r6
 810a5e6:	4605      	mov	r5, r0
 810a5e8:	f002 f862 	bl	810c6b0 <__mcmp>
 810a5ec:	2800      	cmp	r0, #0
 810a5ee:	dd66      	ble.n	810a6be <_strtod_l+0x8de>
 810a5f0:	9904      	ldr	r1, [sp, #16]
 810a5f2:	4a53      	ldr	r2, [pc, #332]	; (810a740 <_strtod_l+0x960>)
 810a5f4:	465b      	mov	r3, fp
 810a5f6:	2900      	cmp	r1, #0
 810a5f8:	f000 8081 	beq.w	810a6fe <_strtod_l+0x91e>
 810a5fc:	ea02 010b 	and.w	r1, r2, fp
 810a600:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a604:	dc7b      	bgt.n	810a6fe <_strtod_l+0x91e>
 810a606:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a60a:	f77f aea9 	ble.w	810a360 <_strtod_l+0x580>
 810a60e:	4b4d      	ldr	r3, [pc, #308]	; (810a744 <_strtod_l+0x964>)
 810a610:	4650      	mov	r0, sl
 810a612:	4659      	mov	r1, fp
 810a614:	2200      	movs	r2, #0
 810a616:	f7f6 f877 	bl	8100708 <__aeabi_dmul>
 810a61a:	460b      	mov	r3, r1
 810a61c:	4303      	orrs	r3, r0
 810a61e:	bf08      	it	eq
 810a620:	2322      	moveq	r3, #34	; 0x22
 810a622:	4682      	mov	sl, r0
 810a624:	468b      	mov	fp, r1
 810a626:	bf08      	it	eq
 810a628:	6023      	streq	r3, [r4, #0]
 810a62a:	e62b      	b.n	810a284 <_strtod_l+0x4a4>
 810a62c:	f04f 32ff 	mov.w	r2, #4294967295
 810a630:	fa02 f303 	lsl.w	r3, r2, r3
 810a634:	ea03 0a0a 	and.w	sl, r3, sl
 810a638:	e6e3      	b.n	810a402 <_strtod_l+0x622>
 810a63a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810a63e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810a642:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810a646:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810a64a:	fa01 f308 	lsl.w	r3, r1, r8
 810a64e:	9308      	str	r3, [sp, #32]
 810a650:	910d      	str	r1, [sp, #52]	; 0x34
 810a652:	e746      	b.n	810a4e2 <_strtod_l+0x702>
 810a654:	2300      	movs	r3, #0
 810a656:	9308      	str	r3, [sp, #32]
 810a658:	2301      	movs	r3, #1
 810a65a:	930d      	str	r3, [sp, #52]	; 0x34
 810a65c:	e741      	b.n	810a4e2 <_strtod_l+0x702>
 810a65e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a660:	4642      	mov	r2, r8
 810a662:	4620      	mov	r0, r4
 810a664:	f001 ffb4 	bl	810c5d0 <__lshift>
 810a668:	9018      	str	r0, [sp, #96]	; 0x60
 810a66a:	2800      	cmp	r0, #0
 810a66c:	f47f af6b 	bne.w	810a546 <_strtod_l+0x766>
 810a670:	e5fe      	b.n	810a270 <_strtod_l+0x490>
 810a672:	465f      	mov	r7, fp
 810a674:	d16e      	bne.n	810a754 <_strtod_l+0x974>
 810a676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a67c:	b342      	cbz	r2, 810a6d0 <_strtod_l+0x8f0>
 810a67e:	4a32      	ldr	r2, [pc, #200]	; (810a748 <_strtod_l+0x968>)
 810a680:	4293      	cmp	r3, r2
 810a682:	d128      	bne.n	810a6d6 <_strtod_l+0x8f6>
 810a684:	9b04      	ldr	r3, [sp, #16]
 810a686:	4651      	mov	r1, sl
 810a688:	b1eb      	cbz	r3, 810a6c6 <_strtod_l+0x8e6>
 810a68a:	4b2d      	ldr	r3, [pc, #180]	; (810a740 <_strtod_l+0x960>)
 810a68c:	403b      	ands	r3, r7
 810a68e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a692:	f04f 32ff 	mov.w	r2, #4294967295
 810a696:	d819      	bhi.n	810a6cc <_strtod_l+0x8ec>
 810a698:	0d1b      	lsrs	r3, r3, #20
 810a69a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a69e:	fa02 f303 	lsl.w	r3, r2, r3
 810a6a2:	4299      	cmp	r1, r3
 810a6a4:	d117      	bne.n	810a6d6 <_strtod_l+0x8f6>
 810a6a6:	4b29      	ldr	r3, [pc, #164]	; (810a74c <_strtod_l+0x96c>)
 810a6a8:	429f      	cmp	r7, r3
 810a6aa:	d102      	bne.n	810a6b2 <_strtod_l+0x8d2>
 810a6ac:	3101      	adds	r1, #1
 810a6ae:	f43f addf 	beq.w	810a270 <_strtod_l+0x490>
 810a6b2:	4b23      	ldr	r3, [pc, #140]	; (810a740 <_strtod_l+0x960>)
 810a6b4:	403b      	ands	r3, r7
 810a6b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810a6ba:	f04f 0a00 	mov.w	sl, #0
 810a6be:	9b04      	ldr	r3, [sp, #16]
 810a6c0:	2b00      	cmp	r3, #0
 810a6c2:	d1a4      	bne.n	810a60e <_strtod_l+0x82e>
 810a6c4:	e5de      	b.n	810a284 <_strtod_l+0x4a4>
 810a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 810a6ca:	e7ea      	b.n	810a6a2 <_strtod_l+0x8c2>
 810a6cc:	4613      	mov	r3, r2
 810a6ce:	e7e8      	b.n	810a6a2 <_strtod_l+0x8c2>
 810a6d0:	ea53 030a 	orrs.w	r3, r3, sl
 810a6d4:	d08c      	beq.n	810a5f0 <_strtod_l+0x810>
 810a6d6:	9b08      	ldr	r3, [sp, #32]
 810a6d8:	b1db      	cbz	r3, 810a712 <_strtod_l+0x932>
 810a6da:	423b      	tst	r3, r7
 810a6dc:	d0ef      	beq.n	810a6be <_strtod_l+0x8de>
 810a6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a6e0:	9a04      	ldr	r2, [sp, #16]
 810a6e2:	4650      	mov	r0, sl
 810a6e4:	4659      	mov	r1, fp
 810a6e6:	b1c3      	cbz	r3, 810a71a <_strtod_l+0x93a>
 810a6e8:	f7ff fb5d 	bl	8109da6 <sulp>
 810a6ec:	4602      	mov	r2, r0
 810a6ee:	460b      	mov	r3, r1
 810a6f0:	ec51 0b18 	vmov	r0, r1, d8
 810a6f4:	f7f5 fe52 	bl	810039c <__adddf3>
 810a6f8:	4682      	mov	sl, r0
 810a6fa:	468b      	mov	fp, r1
 810a6fc:	e7df      	b.n	810a6be <_strtod_l+0x8de>
 810a6fe:	4013      	ands	r3, r2
 810a700:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a704:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810a708:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810a70c:	f04f 3aff 	mov.w	sl, #4294967295
 810a710:	e7d5      	b.n	810a6be <_strtod_l+0x8de>
 810a712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a714:	ea13 0f0a 	tst.w	r3, sl
 810a718:	e7e0      	b.n	810a6dc <_strtod_l+0x8fc>
 810a71a:	f7ff fb44 	bl	8109da6 <sulp>
 810a71e:	4602      	mov	r2, r0
 810a720:	460b      	mov	r3, r1
 810a722:	ec51 0b18 	vmov	r0, r1, d8
 810a726:	f7f5 fe37 	bl	8100398 <__aeabi_dsub>
 810a72a:	2200      	movs	r2, #0
 810a72c:	2300      	movs	r3, #0
 810a72e:	4682      	mov	sl, r0
 810a730:	468b      	mov	fp, r1
 810a732:	f7f6 fa51 	bl	8100bd8 <__aeabi_dcmpeq>
 810a736:	2800      	cmp	r0, #0
 810a738:	d0c1      	beq.n	810a6be <_strtod_l+0x8de>
 810a73a:	e611      	b.n	810a360 <_strtod_l+0x580>
 810a73c:	fffffc02 	.word	0xfffffc02
 810a740:	7ff00000 	.word	0x7ff00000
 810a744:	39500000 	.word	0x39500000
 810a748:	000fffff 	.word	0x000fffff
 810a74c:	7fefffff 	.word	0x7fefffff
 810a750:	0810d6c0 	.word	0x0810d6c0
 810a754:	4631      	mov	r1, r6
 810a756:	4628      	mov	r0, r5
 810a758:	f002 f928 	bl	810c9ac <__ratio>
 810a75c:	ec59 8b10 	vmov	r8, r9, d0
 810a760:	ee10 0a10 	vmov	r0, s0
 810a764:	2200      	movs	r2, #0
 810a766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a76a:	4649      	mov	r1, r9
 810a76c:	f7f6 fa48 	bl	8100c00 <__aeabi_dcmple>
 810a770:	2800      	cmp	r0, #0
 810a772:	d07a      	beq.n	810a86a <_strtod_l+0xa8a>
 810a774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a776:	2b00      	cmp	r3, #0
 810a778:	d04a      	beq.n	810a810 <_strtod_l+0xa30>
 810a77a:	4b95      	ldr	r3, [pc, #596]	; (810a9d0 <_strtod_l+0xbf0>)
 810a77c:	2200      	movs	r2, #0
 810a77e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a782:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810a9d0 <_strtod_l+0xbf0>
 810a786:	f04f 0800 	mov.w	r8, #0
 810a78a:	4b92      	ldr	r3, [pc, #584]	; (810a9d4 <_strtod_l+0xbf4>)
 810a78c:	403b      	ands	r3, r7
 810a78e:	930d      	str	r3, [sp, #52]	; 0x34
 810a790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a792:	4b91      	ldr	r3, [pc, #580]	; (810a9d8 <_strtod_l+0xbf8>)
 810a794:	429a      	cmp	r2, r3
 810a796:	f040 80b0 	bne.w	810a8fa <_strtod_l+0xb1a>
 810a79a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a79e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810a7a2:	ec4b ab10 	vmov	d0, sl, fp
 810a7a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810a7aa:	f002 f827 	bl	810c7fc <__ulp>
 810a7ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a7b2:	ec53 2b10 	vmov	r2, r3, d0
 810a7b6:	f7f5 ffa7 	bl	8100708 <__aeabi_dmul>
 810a7ba:	4652      	mov	r2, sl
 810a7bc:	465b      	mov	r3, fp
 810a7be:	f7f5 fded 	bl	810039c <__adddf3>
 810a7c2:	460b      	mov	r3, r1
 810a7c4:	4983      	ldr	r1, [pc, #524]	; (810a9d4 <_strtod_l+0xbf4>)
 810a7c6:	4a85      	ldr	r2, [pc, #532]	; (810a9dc <_strtod_l+0xbfc>)
 810a7c8:	4019      	ands	r1, r3
 810a7ca:	4291      	cmp	r1, r2
 810a7cc:	4682      	mov	sl, r0
 810a7ce:	d960      	bls.n	810a892 <_strtod_l+0xab2>
 810a7d0:	ee18 3a90 	vmov	r3, s17
 810a7d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810a7d8:	4293      	cmp	r3, r2
 810a7da:	d104      	bne.n	810a7e6 <_strtod_l+0xa06>
 810a7dc:	ee18 3a10 	vmov	r3, s16
 810a7e0:	3301      	adds	r3, #1
 810a7e2:	f43f ad45 	beq.w	810a270 <_strtod_l+0x490>
 810a7e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 810a9e8 <_strtod_l+0xc08>
 810a7ea:	f04f 3aff 	mov.w	sl, #4294967295
 810a7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a7f0:	4620      	mov	r0, r4
 810a7f2:	f001 fcd1 	bl	810c198 <_Bfree>
 810a7f6:	9905      	ldr	r1, [sp, #20]
 810a7f8:	4620      	mov	r0, r4
 810a7fa:	f001 fccd 	bl	810c198 <_Bfree>
 810a7fe:	4631      	mov	r1, r6
 810a800:	4620      	mov	r0, r4
 810a802:	f001 fcc9 	bl	810c198 <_Bfree>
 810a806:	4629      	mov	r1, r5
 810a808:	4620      	mov	r0, r4
 810a80a:	f001 fcc5 	bl	810c198 <_Bfree>
 810a80e:	e61a      	b.n	810a446 <_strtod_l+0x666>
 810a810:	f1ba 0f00 	cmp.w	sl, #0
 810a814:	d11b      	bne.n	810a84e <_strtod_l+0xa6e>
 810a816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a81a:	b9f3      	cbnz	r3, 810a85a <_strtod_l+0xa7a>
 810a81c:	4b6c      	ldr	r3, [pc, #432]	; (810a9d0 <_strtod_l+0xbf0>)
 810a81e:	2200      	movs	r2, #0
 810a820:	4640      	mov	r0, r8
 810a822:	4649      	mov	r1, r9
 810a824:	f7f6 f9e2 	bl	8100bec <__aeabi_dcmplt>
 810a828:	b9d0      	cbnz	r0, 810a860 <_strtod_l+0xa80>
 810a82a:	4640      	mov	r0, r8
 810a82c:	4649      	mov	r1, r9
 810a82e:	4b6c      	ldr	r3, [pc, #432]	; (810a9e0 <_strtod_l+0xc00>)
 810a830:	2200      	movs	r2, #0
 810a832:	f7f5 ff69 	bl	8100708 <__aeabi_dmul>
 810a836:	4680      	mov	r8, r0
 810a838:	4689      	mov	r9, r1
 810a83a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810a83e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810a842:	9315      	str	r3, [sp, #84]	; 0x54
 810a844:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810a848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a84c:	e79d      	b.n	810a78a <_strtod_l+0x9aa>
 810a84e:	f1ba 0f01 	cmp.w	sl, #1
 810a852:	d102      	bne.n	810a85a <_strtod_l+0xa7a>
 810a854:	2f00      	cmp	r7, #0
 810a856:	f43f ad83 	beq.w	810a360 <_strtod_l+0x580>
 810a85a:	4b62      	ldr	r3, [pc, #392]	; (810a9e4 <_strtod_l+0xc04>)
 810a85c:	2200      	movs	r2, #0
 810a85e:	e78e      	b.n	810a77e <_strtod_l+0x99e>
 810a860:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810a9e0 <_strtod_l+0xc00>
 810a864:	f04f 0800 	mov.w	r8, #0
 810a868:	e7e7      	b.n	810a83a <_strtod_l+0xa5a>
 810a86a:	4b5d      	ldr	r3, [pc, #372]	; (810a9e0 <_strtod_l+0xc00>)
 810a86c:	4640      	mov	r0, r8
 810a86e:	4649      	mov	r1, r9
 810a870:	2200      	movs	r2, #0
 810a872:	f7f5 ff49 	bl	8100708 <__aeabi_dmul>
 810a876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a878:	4680      	mov	r8, r0
 810a87a:	4689      	mov	r9, r1
 810a87c:	b933      	cbnz	r3, 810a88c <_strtod_l+0xaac>
 810a87e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a882:	900e      	str	r0, [sp, #56]	; 0x38
 810a884:	930f      	str	r3, [sp, #60]	; 0x3c
 810a886:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810a88a:	e7dd      	b.n	810a848 <_strtod_l+0xa68>
 810a88c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810a890:	e7f9      	b.n	810a886 <_strtod_l+0xaa6>
 810a892:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810a896:	9b04      	ldr	r3, [sp, #16]
 810a898:	2b00      	cmp	r3, #0
 810a89a:	d1a8      	bne.n	810a7ee <_strtod_l+0xa0e>
 810a89c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a8a2:	0d1b      	lsrs	r3, r3, #20
 810a8a4:	051b      	lsls	r3, r3, #20
 810a8a6:	429a      	cmp	r2, r3
 810a8a8:	d1a1      	bne.n	810a7ee <_strtod_l+0xa0e>
 810a8aa:	4640      	mov	r0, r8
 810a8ac:	4649      	mov	r1, r9
 810a8ae:	f7f6 fa73 	bl	8100d98 <__aeabi_d2lz>
 810a8b2:	f7f5 fefb 	bl	81006ac <__aeabi_l2d>
 810a8b6:	4602      	mov	r2, r0
 810a8b8:	460b      	mov	r3, r1
 810a8ba:	4640      	mov	r0, r8
 810a8bc:	4649      	mov	r1, r9
 810a8be:	f7f5 fd6b 	bl	8100398 <__aeabi_dsub>
 810a8c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a8c8:	ea43 030a 	orr.w	r3, r3, sl
 810a8cc:	4313      	orrs	r3, r2
 810a8ce:	4680      	mov	r8, r0
 810a8d0:	4689      	mov	r9, r1
 810a8d2:	d055      	beq.n	810a980 <_strtod_l+0xba0>
 810a8d4:	a336      	add	r3, pc, #216	; (adr r3, 810a9b0 <_strtod_l+0xbd0>)
 810a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a8da:	f7f6 f987 	bl	8100bec <__aeabi_dcmplt>
 810a8de:	2800      	cmp	r0, #0
 810a8e0:	f47f acd0 	bne.w	810a284 <_strtod_l+0x4a4>
 810a8e4:	a334      	add	r3, pc, #208	; (adr r3, 810a9b8 <_strtod_l+0xbd8>)
 810a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a8ea:	4640      	mov	r0, r8
 810a8ec:	4649      	mov	r1, r9
 810a8ee:	f7f6 f99b 	bl	8100c28 <__aeabi_dcmpgt>
 810a8f2:	2800      	cmp	r0, #0
 810a8f4:	f43f af7b 	beq.w	810a7ee <_strtod_l+0xa0e>
 810a8f8:	e4c4      	b.n	810a284 <_strtod_l+0x4a4>
 810a8fa:	9b04      	ldr	r3, [sp, #16]
 810a8fc:	b333      	cbz	r3, 810a94c <_strtod_l+0xb6c>
 810a8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a900:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a904:	d822      	bhi.n	810a94c <_strtod_l+0xb6c>
 810a906:	a32e      	add	r3, pc, #184	; (adr r3, 810a9c0 <_strtod_l+0xbe0>)
 810a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a90c:	4640      	mov	r0, r8
 810a90e:	4649      	mov	r1, r9
 810a910:	f7f6 f976 	bl	8100c00 <__aeabi_dcmple>
 810a914:	b1a0      	cbz	r0, 810a940 <_strtod_l+0xb60>
 810a916:	4649      	mov	r1, r9
 810a918:	4640      	mov	r0, r8
 810a91a:	f7f6 f9cd 	bl	8100cb8 <__aeabi_d2uiz>
 810a91e:	2801      	cmp	r0, #1
 810a920:	bf38      	it	cc
 810a922:	2001      	movcc	r0, #1
 810a924:	f7f5 fe76 	bl	8100614 <__aeabi_ui2d>
 810a928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a92a:	4680      	mov	r8, r0
 810a92c:	4689      	mov	r9, r1
 810a92e:	bb23      	cbnz	r3, 810a97a <_strtod_l+0xb9a>
 810a930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a934:	9010      	str	r0, [sp, #64]	; 0x40
 810a936:	9311      	str	r3, [sp, #68]	; 0x44
 810a938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810a93c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a944:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810a948:	1a9b      	subs	r3, r3, r2
 810a94a:	9309      	str	r3, [sp, #36]	; 0x24
 810a94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a950:	eeb0 0a48 	vmov.f32	s0, s16
 810a954:	eef0 0a68 	vmov.f32	s1, s17
 810a958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810a95c:	f001 ff4e 	bl	810c7fc <__ulp>
 810a960:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a964:	ec53 2b10 	vmov	r2, r3, d0
 810a968:	f7f5 fece 	bl	8100708 <__aeabi_dmul>
 810a96c:	ec53 2b18 	vmov	r2, r3, d8
 810a970:	f7f5 fd14 	bl	810039c <__adddf3>
 810a974:	4682      	mov	sl, r0
 810a976:	468b      	mov	fp, r1
 810a978:	e78d      	b.n	810a896 <_strtod_l+0xab6>
 810a97a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810a97e:	e7db      	b.n	810a938 <_strtod_l+0xb58>
 810a980:	a311      	add	r3, pc, #68	; (adr r3, 810a9c8 <_strtod_l+0xbe8>)
 810a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a986:	f7f6 f931 	bl	8100bec <__aeabi_dcmplt>
 810a98a:	e7b2      	b.n	810a8f2 <_strtod_l+0xb12>
 810a98c:	2300      	movs	r3, #0
 810a98e:	930a      	str	r3, [sp, #40]	; 0x28
 810a990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810a992:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a994:	6013      	str	r3, [r2, #0]
 810a996:	f7ff ba6b 	b.w	8109e70 <_strtod_l+0x90>
 810a99a:	2a65      	cmp	r2, #101	; 0x65
 810a99c:	f43f ab5f 	beq.w	810a05e <_strtod_l+0x27e>
 810a9a0:	2a45      	cmp	r2, #69	; 0x45
 810a9a2:	f43f ab5c 	beq.w	810a05e <_strtod_l+0x27e>
 810a9a6:	2301      	movs	r3, #1
 810a9a8:	f7ff bb94 	b.w	810a0d4 <_strtod_l+0x2f4>
 810a9ac:	f3af 8000 	nop.w
 810a9b0:	94a03595 	.word	0x94a03595
 810a9b4:	3fdfffff 	.word	0x3fdfffff
 810a9b8:	35afe535 	.word	0x35afe535
 810a9bc:	3fe00000 	.word	0x3fe00000
 810a9c0:	ffc00000 	.word	0xffc00000
 810a9c4:	41dfffff 	.word	0x41dfffff
 810a9c8:	94a03595 	.word	0x94a03595
 810a9cc:	3fcfffff 	.word	0x3fcfffff
 810a9d0:	3ff00000 	.word	0x3ff00000
 810a9d4:	7ff00000 	.word	0x7ff00000
 810a9d8:	7fe00000 	.word	0x7fe00000
 810a9dc:	7c9fffff 	.word	0x7c9fffff
 810a9e0:	3fe00000 	.word	0x3fe00000
 810a9e4:	bff00000 	.word	0xbff00000
 810a9e8:	7fefffff 	.word	0x7fefffff

0810a9ec <_strtod_r>:
 810a9ec:	4b01      	ldr	r3, [pc, #4]	; (810a9f4 <_strtod_r+0x8>)
 810a9ee:	f7ff b9f7 	b.w	8109de0 <_strtod_l>
 810a9f2:	bf00      	nop
 810a9f4:	10000094 	.word	0x10000094

0810a9f8 <_strtol_l.constprop.0>:
 810a9f8:	2b01      	cmp	r3, #1
 810a9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a9fe:	d001      	beq.n	810aa04 <_strtol_l.constprop.0+0xc>
 810aa00:	2b24      	cmp	r3, #36	; 0x24
 810aa02:	d906      	bls.n	810aa12 <_strtol_l.constprop.0+0x1a>
 810aa04:	f7fe f8a4 	bl	8108b50 <__errno>
 810aa08:	2316      	movs	r3, #22
 810aa0a:	6003      	str	r3, [r0, #0]
 810aa0c:	2000      	movs	r0, #0
 810aa0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aa12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810aaf8 <_strtol_l.constprop.0+0x100>
 810aa16:	460d      	mov	r5, r1
 810aa18:	462e      	mov	r6, r5
 810aa1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 810aa1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 810aa22:	f017 0708 	ands.w	r7, r7, #8
 810aa26:	d1f7      	bne.n	810aa18 <_strtol_l.constprop.0+0x20>
 810aa28:	2c2d      	cmp	r4, #45	; 0x2d
 810aa2a:	d132      	bne.n	810aa92 <_strtol_l.constprop.0+0x9a>
 810aa2c:	782c      	ldrb	r4, [r5, #0]
 810aa2e:	2701      	movs	r7, #1
 810aa30:	1cb5      	adds	r5, r6, #2
 810aa32:	2b00      	cmp	r3, #0
 810aa34:	d05b      	beq.n	810aaee <_strtol_l.constprop.0+0xf6>
 810aa36:	2b10      	cmp	r3, #16
 810aa38:	d109      	bne.n	810aa4e <_strtol_l.constprop.0+0x56>
 810aa3a:	2c30      	cmp	r4, #48	; 0x30
 810aa3c:	d107      	bne.n	810aa4e <_strtol_l.constprop.0+0x56>
 810aa3e:	782c      	ldrb	r4, [r5, #0]
 810aa40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810aa44:	2c58      	cmp	r4, #88	; 0x58
 810aa46:	d14d      	bne.n	810aae4 <_strtol_l.constprop.0+0xec>
 810aa48:	786c      	ldrb	r4, [r5, #1]
 810aa4a:	2310      	movs	r3, #16
 810aa4c:	3502      	adds	r5, #2
 810aa4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810aa52:	f108 38ff 	add.w	r8, r8, #4294967295
 810aa56:	f04f 0c00 	mov.w	ip, #0
 810aa5a:	fbb8 f9f3 	udiv	r9, r8, r3
 810aa5e:	4666      	mov	r6, ip
 810aa60:	fb03 8a19 	mls	sl, r3, r9, r8
 810aa64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810aa68:	f1be 0f09 	cmp.w	lr, #9
 810aa6c:	d816      	bhi.n	810aa9c <_strtol_l.constprop.0+0xa4>
 810aa6e:	4674      	mov	r4, lr
 810aa70:	42a3      	cmp	r3, r4
 810aa72:	dd24      	ble.n	810aabe <_strtol_l.constprop.0+0xc6>
 810aa74:	f1bc 0f00 	cmp.w	ip, #0
 810aa78:	db1e      	blt.n	810aab8 <_strtol_l.constprop.0+0xc0>
 810aa7a:	45b1      	cmp	r9, r6
 810aa7c:	d31c      	bcc.n	810aab8 <_strtol_l.constprop.0+0xc0>
 810aa7e:	d101      	bne.n	810aa84 <_strtol_l.constprop.0+0x8c>
 810aa80:	45a2      	cmp	sl, r4
 810aa82:	db19      	blt.n	810aab8 <_strtol_l.constprop.0+0xc0>
 810aa84:	fb06 4603 	mla	r6, r6, r3, r4
 810aa88:	f04f 0c01 	mov.w	ip, #1
 810aa8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 810aa90:	e7e8      	b.n	810aa64 <_strtol_l.constprop.0+0x6c>
 810aa92:	2c2b      	cmp	r4, #43	; 0x2b
 810aa94:	bf04      	itt	eq
 810aa96:	782c      	ldrbeq	r4, [r5, #0]
 810aa98:	1cb5      	addeq	r5, r6, #2
 810aa9a:	e7ca      	b.n	810aa32 <_strtol_l.constprop.0+0x3a>
 810aa9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810aaa0:	f1be 0f19 	cmp.w	lr, #25
 810aaa4:	d801      	bhi.n	810aaaa <_strtol_l.constprop.0+0xb2>
 810aaa6:	3c37      	subs	r4, #55	; 0x37
 810aaa8:	e7e2      	b.n	810aa70 <_strtol_l.constprop.0+0x78>
 810aaaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810aaae:	f1be 0f19 	cmp.w	lr, #25
 810aab2:	d804      	bhi.n	810aabe <_strtol_l.constprop.0+0xc6>
 810aab4:	3c57      	subs	r4, #87	; 0x57
 810aab6:	e7db      	b.n	810aa70 <_strtol_l.constprop.0+0x78>
 810aab8:	f04f 3cff 	mov.w	ip, #4294967295
 810aabc:	e7e6      	b.n	810aa8c <_strtol_l.constprop.0+0x94>
 810aabe:	f1bc 0f00 	cmp.w	ip, #0
 810aac2:	da05      	bge.n	810aad0 <_strtol_l.constprop.0+0xd8>
 810aac4:	2322      	movs	r3, #34	; 0x22
 810aac6:	6003      	str	r3, [r0, #0]
 810aac8:	4646      	mov	r6, r8
 810aaca:	b942      	cbnz	r2, 810aade <_strtol_l.constprop.0+0xe6>
 810aacc:	4630      	mov	r0, r6
 810aace:	e79e      	b.n	810aa0e <_strtol_l.constprop.0+0x16>
 810aad0:	b107      	cbz	r7, 810aad4 <_strtol_l.constprop.0+0xdc>
 810aad2:	4276      	negs	r6, r6
 810aad4:	2a00      	cmp	r2, #0
 810aad6:	d0f9      	beq.n	810aacc <_strtol_l.constprop.0+0xd4>
 810aad8:	f1bc 0f00 	cmp.w	ip, #0
 810aadc:	d000      	beq.n	810aae0 <_strtol_l.constprop.0+0xe8>
 810aade:	1e69      	subs	r1, r5, #1
 810aae0:	6011      	str	r1, [r2, #0]
 810aae2:	e7f3      	b.n	810aacc <_strtol_l.constprop.0+0xd4>
 810aae4:	2430      	movs	r4, #48	; 0x30
 810aae6:	2b00      	cmp	r3, #0
 810aae8:	d1b1      	bne.n	810aa4e <_strtol_l.constprop.0+0x56>
 810aaea:	2308      	movs	r3, #8
 810aaec:	e7af      	b.n	810aa4e <_strtol_l.constprop.0+0x56>
 810aaee:	2c30      	cmp	r4, #48	; 0x30
 810aaf0:	d0a5      	beq.n	810aa3e <_strtol_l.constprop.0+0x46>
 810aaf2:	230a      	movs	r3, #10
 810aaf4:	e7ab      	b.n	810aa4e <_strtol_l.constprop.0+0x56>
 810aaf6:	bf00      	nop
 810aaf8:	0810d6e9 	.word	0x0810d6e9

0810aafc <_strtol_r>:
 810aafc:	f7ff bf7c 	b.w	810a9f8 <_strtol_l.constprop.0>

0810ab00 <_write_r>:
 810ab00:	b538      	push	{r3, r4, r5, lr}
 810ab02:	4d07      	ldr	r5, [pc, #28]	; (810ab20 <_write_r+0x20>)
 810ab04:	4604      	mov	r4, r0
 810ab06:	4608      	mov	r0, r1
 810ab08:	4611      	mov	r1, r2
 810ab0a:	2200      	movs	r2, #0
 810ab0c:	602a      	str	r2, [r5, #0]
 810ab0e:	461a      	mov	r2, r3
 810ab10:	f7f6 fffd 	bl	8101b0e <_write>
 810ab14:	1c43      	adds	r3, r0, #1
 810ab16:	d102      	bne.n	810ab1e <_write_r+0x1e>
 810ab18:	682b      	ldr	r3, [r5, #0]
 810ab1a:	b103      	cbz	r3, 810ab1e <_write_r+0x1e>
 810ab1c:	6023      	str	r3, [r4, #0]
 810ab1e:	bd38      	pop	{r3, r4, r5, pc}
 810ab20:	10004d98 	.word	0x10004d98

0810ab24 <_close_r>:
 810ab24:	b538      	push	{r3, r4, r5, lr}
 810ab26:	4d06      	ldr	r5, [pc, #24]	; (810ab40 <_close_r+0x1c>)
 810ab28:	2300      	movs	r3, #0
 810ab2a:	4604      	mov	r4, r0
 810ab2c:	4608      	mov	r0, r1
 810ab2e:	602b      	str	r3, [r5, #0]
 810ab30:	f7f7 f809 	bl	8101b46 <_close>
 810ab34:	1c43      	adds	r3, r0, #1
 810ab36:	d102      	bne.n	810ab3e <_close_r+0x1a>
 810ab38:	682b      	ldr	r3, [r5, #0]
 810ab3a:	b103      	cbz	r3, 810ab3e <_close_r+0x1a>
 810ab3c:	6023      	str	r3, [r4, #0]
 810ab3e:	bd38      	pop	{r3, r4, r5, pc}
 810ab40:	10004d98 	.word	0x10004d98

0810ab44 <quorem>:
 810ab44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ab48:	6903      	ldr	r3, [r0, #16]
 810ab4a:	690c      	ldr	r4, [r1, #16]
 810ab4c:	42a3      	cmp	r3, r4
 810ab4e:	4607      	mov	r7, r0
 810ab50:	f2c0 8081 	blt.w	810ac56 <quorem+0x112>
 810ab54:	3c01      	subs	r4, #1
 810ab56:	f101 0814 	add.w	r8, r1, #20
 810ab5a:	f100 0514 	add.w	r5, r0, #20
 810ab5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ab62:	9301      	str	r3, [sp, #4]
 810ab64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ab68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ab6c:	3301      	adds	r3, #1
 810ab6e:	429a      	cmp	r2, r3
 810ab70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ab74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ab78:	fbb2 f6f3 	udiv	r6, r2, r3
 810ab7c:	d331      	bcc.n	810abe2 <quorem+0x9e>
 810ab7e:	f04f 0e00 	mov.w	lr, #0
 810ab82:	4640      	mov	r0, r8
 810ab84:	46ac      	mov	ip, r5
 810ab86:	46f2      	mov	sl, lr
 810ab88:	f850 2b04 	ldr.w	r2, [r0], #4
 810ab8c:	b293      	uxth	r3, r2
 810ab8e:	fb06 e303 	mla	r3, r6, r3, lr
 810ab92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ab96:	b29b      	uxth	r3, r3
 810ab98:	ebaa 0303 	sub.w	r3, sl, r3
 810ab9c:	f8dc a000 	ldr.w	sl, [ip]
 810aba0:	0c12      	lsrs	r2, r2, #16
 810aba2:	fa13 f38a 	uxtah	r3, r3, sl
 810aba6:	fb06 e202 	mla	r2, r6, r2, lr
 810abaa:	9300      	str	r3, [sp, #0]
 810abac:	9b00      	ldr	r3, [sp, #0]
 810abae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810abb2:	b292      	uxth	r2, r2
 810abb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810abb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810abbc:	f8bd 3000 	ldrh.w	r3, [sp]
 810abc0:	4581      	cmp	r9, r0
 810abc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810abc6:	f84c 3b04 	str.w	r3, [ip], #4
 810abca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810abce:	d2db      	bcs.n	810ab88 <quorem+0x44>
 810abd0:	f855 300b 	ldr.w	r3, [r5, fp]
 810abd4:	b92b      	cbnz	r3, 810abe2 <quorem+0x9e>
 810abd6:	9b01      	ldr	r3, [sp, #4]
 810abd8:	3b04      	subs	r3, #4
 810abda:	429d      	cmp	r5, r3
 810abdc:	461a      	mov	r2, r3
 810abde:	d32e      	bcc.n	810ac3e <quorem+0xfa>
 810abe0:	613c      	str	r4, [r7, #16]
 810abe2:	4638      	mov	r0, r7
 810abe4:	f001 fd64 	bl	810c6b0 <__mcmp>
 810abe8:	2800      	cmp	r0, #0
 810abea:	db24      	blt.n	810ac36 <quorem+0xf2>
 810abec:	3601      	adds	r6, #1
 810abee:	4628      	mov	r0, r5
 810abf0:	f04f 0c00 	mov.w	ip, #0
 810abf4:	f858 2b04 	ldr.w	r2, [r8], #4
 810abf8:	f8d0 e000 	ldr.w	lr, [r0]
 810abfc:	b293      	uxth	r3, r2
 810abfe:	ebac 0303 	sub.w	r3, ip, r3
 810ac02:	0c12      	lsrs	r2, r2, #16
 810ac04:	fa13 f38e 	uxtah	r3, r3, lr
 810ac08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ac0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ac10:	b29b      	uxth	r3, r3
 810ac12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ac16:	45c1      	cmp	r9, r8
 810ac18:	f840 3b04 	str.w	r3, [r0], #4
 810ac1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ac20:	d2e8      	bcs.n	810abf4 <quorem+0xb0>
 810ac22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ac26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ac2a:	b922      	cbnz	r2, 810ac36 <quorem+0xf2>
 810ac2c:	3b04      	subs	r3, #4
 810ac2e:	429d      	cmp	r5, r3
 810ac30:	461a      	mov	r2, r3
 810ac32:	d30a      	bcc.n	810ac4a <quorem+0x106>
 810ac34:	613c      	str	r4, [r7, #16]
 810ac36:	4630      	mov	r0, r6
 810ac38:	b003      	add	sp, #12
 810ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ac3e:	6812      	ldr	r2, [r2, #0]
 810ac40:	3b04      	subs	r3, #4
 810ac42:	2a00      	cmp	r2, #0
 810ac44:	d1cc      	bne.n	810abe0 <quorem+0x9c>
 810ac46:	3c01      	subs	r4, #1
 810ac48:	e7c7      	b.n	810abda <quorem+0x96>
 810ac4a:	6812      	ldr	r2, [r2, #0]
 810ac4c:	3b04      	subs	r3, #4
 810ac4e:	2a00      	cmp	r2, #0
 810ac50:	d1f0      	bne.n	810ac34 <quorem+0xf0>
 810ac52:	3c01      	subs	r4, #1
 810ac54:	e7eb      	b.n	810ac2e <quorem+0xea>
 810ac56:	2000      	movs	r0, #0
 810ac58:	e7ee      	b.n	810ac38 <quorem+0xf4>
 810ac5a:	0000      	movs	r0, r0
 810ac5c:	0000      	movs	r0, r0
	...

0810ac60 <_dtoa_r>:
 810ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac64:	ed2d 8b04 	vpush	{d8-d9}
 810ac68:	ec57 6b10 	vmov	r6, r7, d0
 810ac6c:	b093      	sub	sp, #76	; 0x4c
 810ac6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810ac70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ac74:	9106      	str	r1, [sp, #24]
 810ac76:	ee10 aa10 	vmov	sl, s0
 810ac7a:	4604      	mov	r4, r0
 810ac7c:	9209      	str	r2, [sp, #36]	; 0x24
 810ac7e:	930c      	str	r3, [sp, #48]	; 0x30
 810ac80:	46bb      	mov	fp, r7
 810ac82:	b975      	cbnz	r5, 810aca2 <_dtoa_r+0x42>
 810ac84:	2010      	movs	r0, #16
 810ac86:	f001 fa21 	bl	810c0cc <malloc>
 810ac8a:	4602      	mov	r2, r0
 810ac8c:	6260      	str	r0, [r4, #36]	; 0x24
 810ac8e:	b920      	cbnz	r0, 810ac9a <_dtoa_r+0x3a>
 810ac90:	4ba7      	ldr	r3, [pc, #668]	; (810af30 <_dtoa_r+0x2d0>)
 810ac92:	21ea      	movs	r1, #234	; 0xea
 810ac94:	48a7      	ldr	r0, [pc, #668]	; (810af34 <_dtoa_r+0x2d4>)
 810ac96:	f002 f8fd 	bl	810ce94 <__assert_func>
 810ac9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ac9e:	6005      	str	r5, [r0, #0]
 810aca0:	60c5      	str	r5, [r0, #12]
 810aca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aca4:	6819      	ldr	r1, [r3, #0]
 810aca6:	b151      	cbz	r1, 810acbe <_dtoa_r+0x5e>
 810aca8:	685a      	ldr	r2, [r3, #4]
 810acaa:	604a      	str	r2, [r1, #4]
 810acac:	2301      	movs	r3, #1
 810acae:	4093      	lsls	r3, r2
 810acb0:	608b      	str	r3, [r1, #8]
 810acb2:	4620      	mov	r0, r4
 810acb4:	f001 fa70 	bl	810c198 <_Bfree>
 810acb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810acba:	2200      	movs	r2, #0
 810acbc:	601a      	str	r2, [r3, #0]
 810acbe:	1e3b      	subs	r3, r7, #0
 810acc0:	bfaa      	itet	ge
 810acc2:	2300      	movge	r3, #0
 810acc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810acc8:	f8c8 3000 	strge.w	r3, [r8]
 810accc:	4b9a      	ldr	r3, [pc, #616]	; (810af38 <_dtoa_r+0x2d8>)
 810acce:	bfbc      	itt	lt
 810acd0:	2201      	movlt	r2, #1
 810acd2:	f8c8 2000 	strlt.w	r2, [r8]
 810acd6:	ea33 030b 	bics.w	r3, r3, fp
 810acda:	d11b      	bne.n	810ad14 <_dtoa_r+0xb4>
 810acdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810acde:	f242 730f 	movw	r3, #9999	; 0x270f
 810ace2:	6013      	str	r3, [r2, #0]
 810ace4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ace8:	4333      	orrs	r3, r6
 810acea:	f000 8592 	beq.w	810b812 <_dtoa_r+0xbb2>
 810acee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810acf0:	b963      	cbnz	r3, 810ad0c <_dtoa_r+0xac>
 810acf2:	4b92      	ldr	r3, [pc, #584]	; (810af3c <_dtoa_r+0x2dc>)
 810acf4:	e022      	b.n	810ad3c <_dtoa_r+0xdc>
 810acf6:	4b92      	ldr	r3, [pc, #584]	; (810af40 <_dtoa_r+0x2e0>)
 810acf8:	9301      	str	r3, [sp, #4]
 810acfa:	3308      	adds	r3, #8
 810acfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810acfe:	6013      	str	r3, [r2, #0]
 810ad00:	9801      	ldr	r0, [sp, #4]
 810ad02:	b013      	add	sp, #76	; 0x4c
 810ad04:	ecbd 8b04 	vpop	{d8-d9}
 810ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ad0c:	4b8b      	ldr	r3, [pc, #556]	; (810af3c <_dtoa_r+0x2dc>)
 810ad0e:	9301      	str	r3, [sp, #4]
 810ad10:	3303      	adds	r3, #3
 810ad12:	e7f3      	b.n	810acfc <_dtoa_r+0x9c>
 810ad14:	2200      	movs	r2, #0
 810ad16:	2300      	movs	r3, #0
 810ad18:	4650      	mov	r0, sl
 810ad1a:	4659      	mov	r1, fp
 810ad1c:	f7f5 ff5c 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad20:	ec4b ab19 	vmov	d9, sl, fp
 810ad24:	4680      	mov	r8, r0
 810ad26:	b158      	cbz	r0, 810ad40 <_dtoa_r+0xe0>
 810ad28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810ad2a:	2301      	movs	r3, #1
 810ad2c:	6013      	str	r3, [r2, #0]
 810ad2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ad30:	2b00      	cmp	r3, #0
 810ad32:	f000 856b 	beq.w	810b80c <_dtoa_r+0xbac>
 810ad36:	4883      	ldr	r0, [pc, #524]	; (810af44 <_dtoa_r+0x2e4>)
 810ad38:	6018      	str	r0, [r3, #0]
 810ad3a:	1e43      	subs	r3, r0, #1
 810ad3c:	9301      	str	r3, [sp, #4]
 810ad3e:	e7df      	b.n	810ad00 <_dtoa_r+0xa0>
 810ad40:	ec4b ab10 	vmov	d0, sl, fp
 810ad44:	aa10      	add	r2, sp, #64	; 0x40
 810ad46:	a911      	add	r1, sp, #68	; 0x44
 810ad48:	4620      	mov	r0, r4
 810ad4a:	f001 fdd3 	bl	810c8f4 <__d2b>
 810ad4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810ad52:	ee08 0a10 	vmov	s16, r0
 810ad56:	2d00      	cmp	r5, #0
 810ad58:	f000 8084 	beq.w	810ae64 <_dtoa_r+0x204>
 810ad5c:	ee19 3a90 	vmov	r3, s19
 810ad60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ad64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810ad68:	4656      	mov	r6, sl
 810ad6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810ad6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810ad72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810ad76:	4b74      	ldr	r3, [pc, #464]	; (810af48 <_dtoa_r+0x2e8>)
 810ad78:	2200      	movs	r2, #0
 810ad7a:	4630      	mov	r0, r6
 810ad7c:	4639      	mov	r1, r7
 810ad7e:	f7f5 fb0b 	bl	8100398 <__aeabi_dsub>
 810ad82:	a365      	add	r3, pc, #404	; (adr r3, 810af18 <_dtoa_r+0x2b8>)
 810ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad88:	f7f5 fcbe 	bl	8100708 <__aeabi_dmul>
 810ad8c:	a364      	add	r3, pc, #400	; (adr r3, 810af20 <_dtoa_r+0x2c0>)
 810ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad92:	f7f5 fb03 	bl	810039c <__adddf3>
 810ad96:	4606      	mov	r6, r0
 810ad98:	4628      	mov	r0, r5
 810ad9a:	460f      	mov	r7, r1
 810ad9c:	f7f5 fc4a 	bl	8100634 <__aeabi_i2d>
 810ada0:	a361      	add	r3, pc, #388	; (adr r3, 810af28 <_dtoa_r+0x2c8>)
 810ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ada6:	f7f5 fcaf 	bl	8100708 <__aeabi_dmul>
 810adaa:	4602      	mov	r2, r0
 810adac:	460b      	mov	r3, r1
 810adae:	4630      	mov	r0, r6
 810adb0:	4639      	mov	r1, r7
 810adb2:	f7f5 faf3 	bl	810039c <__adddf3>
 810adb6:	4606      	mov	r6, r0
 810adb8:	460f      	mov	r7, r1
 810adba:	f7f5 ff55 	bl	8100c68 <__aeabi_d2iz>
 810adbe:	2200      	movs	r2, #0
 810adc0:	9000      	str	r0, [sp, #0]
 810adc2:	2300      	movs	r3, #0
 810adc4:	4630      	mov	r0, r6
 810adc6:	4639      	mov	r1, r7
 810adc8:	f7f5 ff10 	bl	8100bec <__aeabi_dcmplt>
 810adcc:	b150      	cbz	r0, 810ade4 <_dtoa_r+0x184>
 810adce:	9800      	ldr	r0, [sp, #0]
 810add0:	f7f5 fc30 	bl	8100634 <__aeabi_i2d>
 810add4:	4632      	mov	r2, r6
 810add6:	463b      	mov	r3, r7
 810add8:	f7f5 fefe 	bl	8100bd8 <__aeabi_dcmpeq>
 810addc:	b910      	cbnz	r0, 810ade4 <_dtoa_r+0x184>
 810adde:	9b00      	ldr	r3, [sp, #0]
 810ade0:	3b01      	subs	r3, #1
 810ade2:	9300      	str	r3, [sp, #0]
 810ade4:	9b00      	ldr	r3, [sp, #0]
 810ade6:	2b16      	cmp	r3, #22
 810ade8:	d85a      	bhi.n	810aea0 <_dtoa_r+0x240>
 810adea:	9a00      	ldr	r2, [sp, #0]
 810adec:	4b57      	ldr	r3, [pc, #348]	; (810af4c <_dtoa_r+0x2ec>)
 810adee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810adf6:	ec51 0b19 	vmov	r0, r1, d9
 810adfa:	f7f5 fef7 	bl	8100bec <__aeabi_dcmplt>
 810adfe:	2800      	cmp	r0, #0
 810ae00:	d050      	beq.n	810aea4 <_dtoa_r+0x244>
 810ae02:	9b00      	ldr	r3, [sp, #0]
 810ae04:	3b01      	subs	r3, #1
 810ae06:	9300      	str	r3, [sp, #0]
 810ae08:	2300      	movs	r3, #0
 810ae0a:	930b      	str	r3, [sp, #44]	; 0x2c
 810ae0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810ae0e:	1b5d      	subs	r5, r3, r5
 810ae10:	1e6b      	subs	r3, r5, #1
 810ae12:	9305      	str	r3, [sp, #20]
 810ae14:	bf45      	ittet	mi
 810ae16:	f1c5 0301 	rsbmi	r3, r5, #1
 810ae1a:	9304      	strmi	r3, [sp, #16]
 810ae1c:	2300      	movpl	r3, #0
 810ae1e:	2300      	movmi	r3, #0
 810ae20:	bf4c      	ite	mi
 810ae22:	9305      	strmi	r3, [sp, #20]
 810ae24:	9304      	strpl	r3, [sp, #16]
 810ae26:	9b00      	ldr	r3, [sp, #0]
 810ae28:	2b00      	cmp	r3, #0
 810ae2a:	db3d      	blt.n	810aea8 <_dtoa_r+0x248>
 810ae2c:	9b05      	ldr	r3, [sp, #20]
 810ae2e:	9a00      	ldr	r2, [sp, #0]
 810ae30:	920a      	str	r2, [sp, #40]	; 0x28
 810ae32:	4413      	add	r3, r2
 810ae34:	9305      	str	r3, [sp, #20]
 810ae36:	2300      	movs	r3, #0
 810ae38:	9307      	str	r3, [sp, #28]
 810ae3a:	9b06      	ldr	r3, [sp, #24]
 810ae3c:	2b09      	cmp	r3, #9
 810ae3e:	f200 8089 	bhi.w	810af54 <_dtoa_r+0x2f4>
 810ae42:	2b05      	cmp	r3, #5
 810ae44:	bfc4      	itt	gt
 810ae46:	3b04      	subgt	r3, #4
 810ae48:	9306      	strgt	r3, [sp, #24]
 810ae4a:	9b06      	ldr	r3, [sp, #24]
 810ae4c:	f1a3 0302 	sub.w	r3, r3, #2
 810ae50:	bfcc      	ite	gt
 810ae52:	2500      	movgt	r5, #0
 810ae54:	2501      	movle	r5, #1
 810ae56:	2b03      	cmp	r3, #3
 810ae58:	f200 8087 	bhi.w	810af6a <_dtoa_r+0x30a>
 810ae5c:	e8df f003 	tbb	[pc, r3]
 810ae60:	59383a2d 	.word	0x59383a2d
 810ae64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810ae68:	441d      	add	r5, r3
 810ae6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810ae6e:	2b20      	cmp	r3, #32
 810ae70:	bfc1      	itttt	gt
 810ae72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810ae76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810ae7a:	fa0b f303 	lslgt.w	r3, fp, r3
 810ae7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 810ae82:	bfda      	itte	le
 810ae84:	f1c3 0320 	rsble	r3, r3, #32
 810ae88:	fa06 f003 	lslle.w	r0, r6, r3
 810ae8c:	4318      	orrgt	r0, r3
 810ae8e:	f7f5 fbc1 	bl	8100614 <__aeabi_ui2d>
 810ae92:	2301      	movs	r3, #1
 810ae94:	4606      	mov	r6, r0
 810ae96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810ae9a:	3d01      	subs	r5, #1
 810ae9c:	930e      	str	r3, [sp, #56]	; 0x38
 810ae9e:	e76a      	b.n	810ad76 <_dtoa_r+0x116>
 810aea0:	2301      	movs	r3, #1
 810aea2:	e7b2      	b.n	810ae0a <_dtoa_r+0x1aa>
 810aea4:	900b      	str	r0, [sp, #44]	; 0x2c
 810aea6:	e7b1      	b.n	810ae0c <_dtoa_r+0x1ac>
 810aea8:	9b04      	ldr	r3, [sp, #16]
 810aeaa:	9a00      	ldr	r2, [sp, #0]
 810aeac:	1a9b      	subs	r3, r3, r2
 810aeae:	9304      	str	r3, [sp, #16]
 810aeb0:	4253      	negs	r3, r2
 810aeb2:	9307      	str	r3, [sp, #28]
 810aeb4:	2300      	movs	r3, #0
 810aeb6:	930a      	str	r3, [sp, #40]	; 0x28
 810aeb8:	e7bf      	b.n	810ae3a <_dtoa_r+0x1da>
 810aeba:	2300      	movs	r3, #0
 810aebc:	9308      	str	r3, [sp, #32]
 810aebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aec0:	2b00      	cmp	r3, #0
 810aec2:	dc55      	bgt.n	810af70 <_dtoa_r+0x310>
 810aec4:	2301      	movs	r3, #1
 810aec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810aeca:	461a      	mov	r2, r3
 810aecc:	9209      	str	r2, [sp, #36]	; 0x24
 810aece:	e00c      	b.n	810aeea <_dtoa_r+0x28a>
 810aed0:	2301      	movs	r3, #1
 810aed2:	e7f3      	b.n	810aebc <_dtoa_r+0x25c>
 810aed4:	2300      	movs	r3, #0
 810aed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810aed8:	9308      	str	r3, [sp, #32]
 810aeda:	9b00      	ldr	r3, [sp, #0]
 810aedc:	4413      	add	r3, r2
 810aede:	9302      	str	r3, [sp, #8]
 810aee0:	3301      	adds	r3, #1
 810aee2:	2b01      	cmp	r3, #1
 810aee4:	9303      	str	r3, [sp, #12]
 810aee6:	bfb8      	it	lt
 810aee8:	2301      	movlt	r3, #1
 810aeea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810aeec:	2200      	movs	r2, #0
 810aeee:	6042      	str	r2, [r0, #4]
 810aef0:	2204      	movs	r2, #4
 810aef2:	f102 0614 	add.w	r6, r2, #20
 810aef6:	429e      	cmp	r6, r3
 810aef8:	6841      	ldr	r1, [r0, #4]
 810aefa:	d93d      	bls.n	810af78 <_dtoa_r+0x318>
 810aefc:	4620      	mov	r0, r4
 810aefe:	f001 f90b 	bl	810c118 <_Balloc>
 810af02:	9001      	str	r0, [sp, #4]
 810af04:	2800      	cmp	r0, #0
 810af06:	d13b      	bne.n	810af80 <_dtoa_r+0x320>
 810af08:	4b11      	ldr	r3, [pc, #68]	; (810af50 <_dtoa_r+0x2f0>)
 810af0a:	4602      	mov	r2, r0
 810af0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810af10:	e6c0      	b.n	810ac94 <_dtoa_r+0x34>
 810af12:	2301      	movs	r3, #1
 810af14:	e7df      	b.n	810aed6 <_dtoa_r+0x276>
 810af16:	bf00      	nop
 810af18:	636f4361 	.word	0x636f4361
 810af1c:	3fd287a7 	.word	0x3fd287a7
 810af20:	8b60c8b3 	.word	0x8b60c8b3
 810af24:	3fc68a28 	.word	0x3fc68a28
 810af28:	509f79fb 	.word	0x509f79fb
 810af2c:	3fd34413 	.word	0x3fd34413
 810af30:	0810d7f6 	.word	0x0810d7f6
 810af34:	0810d80d 	.word	0x0810d80d
 810af38:	7ff00000 	.word	0x7ff00000
 810af3c:	0810d7f2 	.word	0x0810d7f2
 810af40:	0810d7e9 	.word	0x0810d7e9
 810af44:	0810d66d 	.word	0x0810d66d
 810af48:	3ff80000 	.word	0x3ff80000
 810af4c:	0810d978 	.word	0x0810d978
 810af50:	0810d868 	.word	0x0810d868
 810af54:	2501      	movs	r5, #1
 810af56:	2300      	movs	r3, #0
 810af58:	9306      	str	r3, [sp, #24]
 810af5a:	9508      	str	r5, [sp, #32]
 810af5c:	f04f 33ff 	mov.w	r3, #4294967295
 810af60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810af64:	2200      	movs	r2, #0
 810af66:	2312      	movs	r3, #18
 810af68:	e7b0      	b.n	810aecc <_dtoa_r+0x26c>
 810af6a:	2301      	movs	r3, #1
 810af6c:	9308      	str	r3, [sp, #32]
 810af6e:	e7f5      	b.n	810af5c <_dtoa_r+0x2fc>
 810af70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810af72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810af76:	e7b8      	b.n	810aeea <_dtoa_r+0x28a>
 810af78:	3101      	adds	r1, #1
 810af7a:	6041      	str	r1, [r0, #4]
 810af7c:	0052      	lsls	r2, r2, #1
 810af7e:	e7b8      	b.n	810aef2 <_dtoa_r+0x292>
 810af80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810af82:	9a01      	ldr	r2, [sp, #4]
 810af84:	601a      	str	r2, [r3, #0]
 810af86:	9b03      	ldr	r3, [sp, #12]
 810af88:	2b0e      	cmp	r3, #14
 810af8a:	f200 809d 	bhi.w	810b0c8 <_dtoa_r+0x468>
 810af8e:	2d00      	cmp	r5, #0
 810af90:	f000 809a 	beq.w	810b0c8 <_dtoa_r+0x468>
 810af94:	9b00      	ldr	r3, [sp, #0]
 810af96:	2b00      	cmp	r3, #0
 810af98:	dd32      	ble.n	810b000 <_dtoa_r+0x3a0>
 810af9a:	4ab7      	ldr	r2, [pc, #732]	; (810b278 <_dtoa_r+0x618>)
 810af9c:	f003 030f 	and.w	r3, r3, #15
 810afa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810afa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810afa8:	9b00      	ldr	r3, [sp, #0]
 810afaa:	05d8      	lsls	r0, r3, #23
 810afac:	ea4f 1723 	mov.w	r7, r3, asr #4
 810afb0:	d516      	bpl.n	810afe0 <_dtoa_r+0x380>
 810afb2:	4bb2      	ldr	r3, [pc, #712]	; (810b27c <_dtoa_r+0x61c>)
 810afb4:	ec51 0b19 	vmov	r0, r1, d9
 810afb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810afbc:	f7f5 fcce 	bl	810095c <__aeabi_ddiv>
 810afc0:	f007 070f 	and.w	r7, r7, #15
 810afc4:	4682      	mov	sl, r0
 810afc6:	468b      	mov	fp, r1
 810afc8:	2503      	movs	r5, #3
 810afca:	4eac      	ldr	r6, [pc, #688]	; (810b27c <_dtoa_r+0x61c>)
 810afcc:	b957      	cbnz	r7, 810afe4 <_dtoa_r+0x384>
 810afce:	4642      	mov	r2, r8
 810afd0:	464b      	mov	r3, r9
 810afd2:	4650      	mov	r0, sl
 810afd4:	4659      	mov	r1, fp
 810afd6:	f7f5 fcc1 	bl	810095c <__aeabi_ddiv>
 810afda:	4682      	mov	sl, r0
 810afdc:	468b      	mov	fp, r1
 810afde:	e028      	b.n	810b032 <_dtoa_r+0x3d2>
 810afe0:	2502      	movs	r5, #2
 810afe2:	e7f2      	b.n	810afca <_dtoa_r+0x36a>
 810afe4:	07f9      	lsls	r1, r7, #31
 810afe6:	d508      	bpl.n	810affa <_dtoa_r+0x39a>
 810afe8:	4640      	mov	r0, r8
 810afea:	4649      	mov	r1, r9
 810afec:	e9d6 2300 	ldrd	r2, r3, [r6]
 810aff0:	f7f5 fb8a 	bl	8100708 <__aeabi_dmul>
 810aff4:	3501      	adds	r5, #1
 810aff6:	4680      	mov	r8, r0
 810aff8:	4689      	mov	r9, r1
 810affa:	107f      	asrs	r7, r7, #1
 810affc:	3608      	adds	r6, #8
 810affe:	e7e5      	b.n	810afcc <_dtoa_r+0x36c>
 810b000:	f000 809b 	beq.w	810b13a <_dtoa_r+0x4da>
 810b004:	9b00      	ldr	r3, [sp, #0]
 810b006:	4f9d      	ldr	r7, [pc, #628]	; (810b27c <_dtoa_r+0x61c>)
 810b008:	425e      	negs	r6, r3
 810b00a:	4b9b      	ldr	r3, [pc, #620]	; (810b278 <_dtoa_r+0x618>)
 810b00c:	f006 020f 	and.w	r2, r6, #15
 810b010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b018:	ec51 0b19 	vmov	r0, r1, d9
 810b01c:	f7f5 fb74 	bl	8100708 <__aeabi_dmul>
 810b020:	1136      	asrs	r6, r6, #4
 810b022:	4682      	mov	sl, r0
 810b024:	468b      	mov	fp, r1
 810b026:	2300      	movs	r3, #0
 810b028:	2502      	movs	r5, #2
 810b02a:	2e00      	cmp	r6, #0
 810b02c:	d17a      	bne.n	810b124 <_dtoa_r+0x4c4>
 810b02e:	2b00      	cmp	r3, #0
 810b030:	d1d3      	bne.n	810afda <_dtoa_r+0x37a>
 810b032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b034:	2b00      	cmp	r3, #0
 810b036:	f000 8082 	beq.w	810b13e <_dtoa_r+0x4de>
 810b03a:	4b91      	ldr	r3, [pc, #580]	; (810b280 <_dtoa_r+0x620>)
 810b03c:	2200      	movs	r2, #0
 810b03e:	4650      	mov	r0, sl
 810b040:	4659      	mov	r1, fp
 810b042:	f7f5 fdd3 	bl	8100bec <__aeabi_dcmplt>
 810b046:	2800      	cmp	r0, #0
 810b048:	d079      	beq.n	810b13e <_dtoa_r+0x4de>
 810b04a:	9b03      	ldr	r3, [sp, #12]
 810b04c:	2b00      	cmp	r3, #0
 810b04e:	d076      	beq.n	810b13e <_dtoa_r+0x4de>
 810b050:	9b02      	ldr	r3, [sp, #8]
 810b052:	2b00      	cmp	r3, #0
 810b054:	dd36      	ble.n	810b0c4 <_dtoa_r+0x464>
 810b056:	9b00      	ldr	r3, [sp, #0]
 810b058:	4650      	mov	r0, sl
 810b05a:	4659      	mov	r1, fp
 810b05c:	1e5f      	subs	r7, r3, #1
 810b05e:	2200      	movs	r2, #0
 810b060:	4b88      	ldr	r3, [pc, #544]	; (810b284 <_dtoa_r+0x624>)
 810b062:	f7f5 fb51 	bl	8100708 <__aeabi_dmul>
 810b066:	9e02      	ldr	r6, [sp, #8]
 810b068:	4682      	mov	sl, r0
 810b06a:	468b      	mov	fp, r1
 810b06c:	3501      	adds	r5, #1
 810b06e:	4628      	mov	r0, r5
 810b070:	f7f5 fae0 	bl	8100634 <__aeabi_i2d>
 810b074:	4652      	mov	r2, sl
 810b076:	465b      	mov	r3, fp
 810b078:	f7f5 fb46 	bl	8100708 <__aeabi_dmul>
 810b07c:	4b82      	ldr	r3, [pc, #520]	; (810b288 <_dtoa_r+0x628>)
 810b07e:	2200      	movs	r2, #0
 810b080:	f7f5 f98c 	bl	810039c <__adddf3>
 810b084:	46d0      	mov	r8, sl
 810b086:	46d9      	mov	r9, fp
 810b088:	4682      	mov	sl, r0
 810b08a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810b08e:	2e00      	cmp	r6, #0
 810b090:	d158      	bne.n	810b144 <_dtoa_r+0x4e4>
 810b092:	4b7e      	ldr	r3, [pc, #504]	; (810b28c <_dtoa_r+0x62c>)
 810b094:	2200      	movs	r2, #0
 810b096:	4640      	mov	r0, r8
 810b098:	4649      	mov	r1, r9
 810b09a:	f7f5 f97d 	bl	8100398 <__aeabi_dsub>
 810b09e:	4652      	mov	r2, sl
 810b0a0:	465b      	mov	r3, fp
 810b0a2:	4680      	mov	r8, r0
 810b0a4:	4689      	mov	r9, r1
 810b0a6:	f7f5 fdbf 	bl	8100c28 <__aeabi_dcmpgt>
 810b0aa:	2800      	cmp	r0, #0
 810b0ac:	f040 8295 	bne.w	810b5da <_dtoa_r+0x97a>
 810b0b0:	4652      	mov	r2, sl
 810b0b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b0b6:	4640      	mov	r0, r8
 810b0b8:	4649      	mov	r1, r9
 810b0ba:	f7f5 fd97 	bl	8100bec <__aeabi_dcmplt>
 810b0be:	2800      	cmp	r0, #0
 810b0c0:	f040 8289 	bne.w	810b5d6 <_dtoa_r+0x976>
 810b0c4:	ec5b ab19 	vmov	sl, fp, d9
 810b0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b0ca:	2b00      	cmp	r3, #0
 810b0cc:	f2c0 8148 	blt.w	810b360 <_dtoa_r+0x700>
 810b0d0:	9a00      	ldr	r2, [sp, #0]
 810b0d2:	2a0e      	cmp	r2, #14
 810b0d4:	f300 8144 	bgt.w	810b360 <_dtoa_r+0x700>
 810b0d8:	4b67      	ldr	r3, [pc, #412]	; (810b278 <_dtoa_r+0x618>)
 810b0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b0de:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b0e4:	2b00      	cmp	r3, #0
 810b0e6:	f280 80d5 	bge.w	810b294 <_dtoa_r+0x634>
 810b0ea:	9b03      	ldr	r3, [sp, #12]
 810b0ec:	2b00      	cmp	r3, #0
 810b0ee:	f300 80d1 	bgt.w	810b294 <_dtoa_r+0x634>
 810b0f2:	f040 826f 	bne.w	810b5d4 <_dtoa_r+0x974>
 810b0f6:	4b65      	ldr	r3, [pc, #404]	; (810b28c <_dtoa_r+0x62c>)
 810b0f8:	2200      	movs	r2, #0
 810b0fa:	4640      	mov	r0, r8
 810b0fc:	4649      	mov	r1, r9
 810b0fe:	f7f5 fb03 	bl	8100708 <__aeabi_dmul>
 810b102:	4652      	mov	r2, sl
 810b104:	465b      	mov	r3, fp
 810b106:	f7f5 fd85 	bl	8100c14 <__aeabi_dcmpge>
 810b10a:	9e03      	ldr	r6, [sp, #12]
 810b10c:	4637      	mov	r7, r6
 810b10e:	2800      	cmp	r0, #0
 810b110:	f040 8245 	bne.w	810b59e <_dtoa_r+0x93e>
 810b114:	9d01      	ldr	r5, [sp, #4]
 810b116:	2331      	movs	r3, #49	; 0x31
 810b118:	f805 3b01 	strb.w	r3, [r5], #1
 810b11c:	9b00      	ldr	r3, [sp, #0]
 810b11e:	3301      	adds	r3, #1
 810b120:	9300      	str	r3, [sp, #0]
 810b122:	e240      	b.n	810b5a6 <_dtoa_r+0x946>
 810b124:	07f2      	lsls	r2, r6, #31
 810b126:	d505      	bpl.n	810b134 <_dtoa_r+0x4d4>
 810b128:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b12c:	f7f5 faec 	bl	8100708 <__aeabi_dmul>
 810b130:	3501      	adds	r5, #1
 810b132:	2301      	movs	r3, #1
 810b134:	1076      	asrs	r6, r6, #1
 810b136:	3708      	adds	r7, #8
 810b138:	e777      	b.n	810b02a <_dtoa_r+0x3ca>
 810b13a:	2502      	movs	r5, #2
 810b13c:	e779      	b.n	810b032 <_dtoa_r+0x3d2>
 810b13e:	9f00      	ldr	r7, [sp, #0]
 810b140:	9e03      	ldr	r6, [sp, #12]
 810b142:	e794      	b.n	810b06e <_dtoa_r+0x40e>
 810b144:	9901      	ldr	r1, [sp, #4]
 810b146:	4b4c      	ldr	r3, [pc, #304]	; (810b278 <_dtoa_r+0x618>)
 810b148:	4431      	add	r1, r6
 810b14a:	910d      	str	r1, [sp, #52]	; 0x34
 810b14c:	9908      	ldr	r1, [sp, #32]
 810b14e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b156:	2900      	cmp	r1, #0
 810b158:	d043      	beq.n	810b1e2 <_dtoa_r+0x582>
 810b15a:	494d      	ldr	r1, [pc, #308]	; (810b290 <_dtoa_r+0x630>)
 810b15c:	2000      	movs	r0, #0
 810b15e:	f7f5 fbfd 	bl	810095c <__aeabi_ddiv>
 810b162:	4652      	mov	r2, sl
 810b164:	465b      	mov	r3, fp
 810b166:	f7f5 f917 	bl	8100398 <__aeabi_dsub>
 810b16a:	9d01      	ldr	r5, [sp, #4]
 810b16c:	4682      	mov	sl, r0
 810b16e:	468b      	mov	fp, r1
 810b170:	4649      	mov	r1, r9
 810b172:	4640      	mov	r0, r8
 810b174:	f7f5 fd78 	bl	8100c68 <__aeabi_d2iz>
 810b178:	4606      	mov	r6, r0
 810b17a:	f7f5 fa5b 	bl	8100634 <__aeabi_i2d>
 810b17e:	4602      	mov	r2, r0
 810b180:	460b      	mov	r3, r1
 810b182:	4640      	mov	r0, r8
 810b184:	4649      	mov	r1, r9
 810b186:	f7f5 f907 	bl	8100398 <__aeabi_dsub>
 810b18a:	3630      	adds	r6, #48	; 0x30
 810b18c:	f805 6b01 	strb.w	r6, [r5], #1
 810b190:	4652      	mov	r2, sl
 810b192:	465b      	mov	r3, fp
 810b194:	4680      	mov	r8, r0
 810b196:	4689      	mov	r9, r1
 810b198:	f7f5 fd28 	bl	8100bec <__aeabi_dcmplt>
 810b19c:	2800      	cmp	r0, #0
 810b19e:	d163      	bne.n	810b268 <_dtoa_r+0x608>
 810b1a0:	4642      	mov	r2, r8
 810b1a2:	464b      	mov	r3, r9
 810b1a4:	4936      	ldr	r1, [pc, #216]	; (810b280 <_dtoa_r+0x620>)
 810b1a6:	2000      	movs	r0, #0
 810b1a8:	f7f5 f8f6 	bl	8100398 <__aeabi_dsub>
 810b1ac:	4652      	mov	r2, sl
 810b1ae:	465b      	mov	r3, fp
 810b1b0:	f7f5 fd1c 	bl	8100bec <__aeabi_dcmplt>
 810b1b4:	2800      	cmp	r0, #0
 810b1b6:	f040 80b5 	bne.w	810b324 <_dtoa_r+0x6c4>
 810b1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b1bc:	429d      	cmp	r5, r3
 810b1be:	d081      	beq.n	810b0c4 <_dtoa_r+0x464>
 810b1c0:	4b30      	ldr	r3, [pc, #192]	; (810b284 <_dtoa_r+0x624>)
 810b1c2:	2200      	movs	r2, #0
 810b1c4:	4650      	mov	r0, sl
 810b1c6:	4659      	mov	r1, fp
 810b1c8:	f7f5 fa9e 	bl	8100708 <__aeabi_dmul>
 810b1cc:	4b2d      	ldr	r3, [pc, #180]	; (810b284 <_dtoa_r+0x624>)
 810b1ce:	4682      	mov	sl, r0
 810b1d0:	468b      	mov	fp, r1
 810b1d2:	4640      	mov	r0, r8
 810b1d4:	4649      	mov	r1, r9
 810b1d6:	2200      	movs	r2, #0
 810b1d8:	f7f5 fa96 	bl	8100708 <__aeabi_dmul>
 810b1dc:	4680      	mov	r8, r0
 810b1de:	4689      	mov	r9, r1
 810b1e0:	e7c6      	b.n	810b170 <_dtoa_r+0x510>
 810b1e2:	4650      	mov	r0, sl
 810b1e4:	4659      	mov	r1, fp
 810b1e6:	f7f5 fa8f 	bl	8100708 <__aeabi_dmul>
 810b1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b1ec:	9d01      	ldr	r5, [sp, #4]
 810b1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 810b1f0:	4682      	mov	sl, r0
 810b1f2:	468b      	mov	fp, r1
 810b1f4:	4649      	mov	r1, r9
 810b1f6:	4640      	mov	r0, r8
 810b1f8:	f7f5 fd36 	bl	8100c68 <__aeabi_d2iz>
 810b1fc:	4606      	mov	r6, r0
 810b1fe:	f7f5 fa19 	bl	8100634 <__aeabi_i2d>
 810b202:	3630      	adds	r6, #48	; 0x30
 810b204:	4602      	mov	r2, r0
 810b206:	460b      	mov	r3, r1
 810b208:	4640      	mov	r0, r8
 810b20a:	4649      	mov	r1, r9
 810b20c:	f7f5 f8c4 	bl	8100398 <__aeabi_dsub>
 810b210:	f805 6b01 	strb.w	r6, [r5], #1
 810b214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b216:	429d      	cmp	r5, r3
 810b218:	4680      	mov	r8, r0
 810b21a:	4689      	mov	r9, r1
 810b21c:	f04f 0200 	mov.w	r2, #0
 810b220:	d124      	bne.n	810b26c <_dtoa_r+0x60c>
 810b222:	4b1b      	ldr	r3, [pc, #108]	; (810b290 <_dtoa_r+0x630>)
 810b224:	4650      	mov	r0, sl
 810b226:	4659      	mov	r1, fp
 810b228:	f7f5 f8b8 	bl	810039c <__adddf3>
 810b22c:	4602      	mov	r2, r0
 810b22e:	460b      	mov	r3, r1
 810b230:	4640      	mov	r0, r8
 810b232:	4649      	mov	r1, r9
 810b234:	f7f5 fcf8 	bl	8100c28 <__aeabi_dcmpgt>
 810b238:	2800      	cmp	r0, #0
 810b23a:	d173      	bne.n	810b324 <_dtoa_r+0x6c4>
 810b23c:	4652      	mov	r2, sl
 810b23e:	465b      	mov	r3, fp
 810b240:	4913      	ldr	r1, [pc, #76]	; (810b290 <_dtoa_r+0x630>)
 810b242:	2000      	movs	r0, #0
 810b244:	f7f5 f8a8 	bl	8100398 <__aeabi_dsub>
 810b248:	4602      	mov	r2, r0
 810b24a:	460b      	mov	r3, r1
 810b24c:	4640      	mov	r0, r8
 810b24e:	4649      	mov	r1, r9
 810b250:	f7f5 fccc 	bl	8100bec <__aeabi_dcmplt>
 810b254:	2800      	cmp	r0, #0
 810b256:	f43f af35 	beq.w	810b0c4 <_dtoa_r+0x464>
 810b25a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b25c:	1e6b      	subs	r3, r5, #1
 810b25e:	930f      	str	r3, [sp, #60]	; 0x3c
 810b260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b264:	2b30      	cmp	r3, #48	; 0x30
 810b266:	d0f8      	beq.n	810b25a <_dtoa_r+0x5fa>
 810b268:	9700      	str	r7, [sp, #0]
 810b26a:	e049      	b.n	810b300 <_dtoa_r+0x6a0>
 810b26c:	4b05      	ldr	r3, [pc, #20]	; (810b284 <_dtoa_r+0x624>)
 810b26e:	f7f5 fa4b 	bl	8100708 <__aeabi_dmul>
 810b272:	4680      	mov	r8, r0
 810b274:	4689      	mov	r9, r1
 810b276:	e7bd      	b.n	810b1f4 <_dtoa_r+0x594>
 810b278:	0810d978 	.word	0x0810d978
 810b27c:	0810d950 	.word	0x0810d950
 810b280:	3ff00000 	.word	0x3ff00000
 810b284:	40240000 	.word	0x40240000
 810b288:	401c0000 	.word	0x401c0000
 810b28c:	40140000 	.word	0x40140000
 810b290:	3fe00000 	.word	0x3fe00000
 810b294:	9d01      	ldr	r5, [sp, #4]
 810b296:	4656      	mov	r6, sl
 810b298:	465f      	mov	r7, fp
 810b29a:	4642      	mov	r2, r8
 810b29c:	464b      	mov	r3, r9
 810b29e:	4630      	mov	r0, r6
 810b2a0:	4639      	mov	r1, r7
 810b2a2:	f7f5 fb5b 	bl	810095c <__aeabi_ddiv>
 810b2a6:	f7f5 fcdf 	bl	8100c68 <__aeabi_d2iz>
 810b2aa:	4682      	mov	sl, r0
 810b2ac:	f7f5 f9c2 	bl	8100634 <__aeabi_i2d>
 810b2b0:	4642      	mov	r2, r8
 810b2b2:	464b      	mov	r3, r9
 810b2b4:	f7f5 fa28 	bl	8100708 <__aeabi_dmul>
 810b2b8:	4602      	mov	r2, r0
 810b2ba:	460b      	mov	r3, r1
 810b2bc:	4630      	mov	r0, r6
 810b2be:	4639      	mov	r1, r7
 810b2c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810b2c4:	f7f5 f868 	bl	8100398 <__aeabi_dsub>
 810b2c8:	f805 6b01 	strb.w	r6, [r5], #1
 810b2cc:	9e01      	ldr	r6, [sp, #4]
 810b2ce:	9f03      	ldr	r7, [sp, #12]
 810b2d0:	1bae      	subs	r6, r5, r6
 810b2d2:	42b7      	cmp	r7, r6
 810b2d4:	4602      	mov	r2, r0
 810b2d6:	460b      	mov	r3, r1
 810b2d8:	d135      	bne.n	810b346 <_dtoa_r+0x6e6>
 810b2da:	f7f5 f85f 	bl	810039c <__adddf3>
 810b2de:	4642      	mov	r2, r8
 810b2e0:	464b      	mov	r3, r9
 810b2e2:	4606      	mov	r6, r0
 810b2e4:	460f      	mov	r7, r1
 810b2e6:	f7f5 fc9f 	bl	8100c28 <__aeabi_dcmpgt>
 810b2ea:	b9d0      	cbnz	r0, 810b322 <_dtoa_r+0x6c2>
 810b2ec:	4642      	mov	r2, r8
 810b2ee:	464b      	mov	r3, r9
 810b2f0:	4630      	mov	r0, r6
 810b2f2:	4639      	mov	r1, r7
 810b2f4:	f7f5 fc70 	bl	8100bd8 <__aeabi_dcmpeq>
 810b2f8:	b110      	cbz	r0, 810b300 <_dtoa_r+0x6a0>
 810b2fa:	f01a 0f01 	tst.w	sl, #1
 810b2fe:	d110      	bne.n	810b322 <_dtoa_r+0x6c2>
 810b300:	4620      	mov	r0, r4
 810b302:	ee18 1a10 	vmov	r1, s16
 810b306:	f000 ff47 	bl	810c198 <_Bfree>
 810b30a:	2300      	movs	r3, #0
 810b30c:	9800      	ldr	r0, [sp, #0]
 810b30e:	702b      	strb	r3, [r5, #0]
 810b310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b312:	3001      	adds	r0, #1
 810b314:	6018      	str	r0, [r3, #0]
 810b316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b318:	2b00      	cmp	r3, #0
 810b31a:	f43f acf1 	beq.w	810ad00 <_dtoa_r+0xa0>
 810b31e:	601d      	str	r5, [r3, #0]
 810b320:	e4ee      	b.n	810ad00 <_dtoa_r+0xa0>
 810b322:	9f00      	ldr	r7, [sp, #0]
 810b324:	462b      	mov	r3, r5
 810b326:	461d      	mov	r5, r3
 810b328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b32c:	2a39      	cmp	r2, #57	; 0x39
 810b32e:	d106      	bne.n	810b33e <_dtoa_r+0x6de>
 810b330:	9a01      	ldr	r2, [sp, #4]
 810b332:	429a      	cmp	r2, r3
 810b334:	d1f7      	bne.n	810b326 <_dtoa_r+0x6c6>
 810b336:	9901      	ldr	r1, [sp, #4]
 810b338:	2230      	movs	r2, #48	; 0x30
 810b33a:	3701      	adds	r7, #1
 810b33c:	700a      	strb	r2, [r1, #0]
 810b33e:	781a      	ldrb	r2, [r3, #0]
 810b340:	3201      	adds	r2, #1
 810b342:	701a      	strb	r2, [r3, #0]
 810b344:	e790      	b.n	810b268 <_dtoa_r+0x608>
 810b346:	4ba6      	ldr	r3, [pc, #664]	; (810b5e0 <_dtoa_r+0x980>)
 810b348:	2200      	movs	r2, #0
 810b34a:	f7f5 f9dd 	bl	8100708 <__aeabi_dmul>
 810b34e:	2200      	movs	r2, #0
 810b350:	2300      	movs	r3, #0
 810b352:	4606      	mov	r6, r0
 810b354:	460f      	mov	r7, r1
 810b356:	f7f5 fc3f 	bl	8100bd8 <__aeabi_dcmpeq>
 810b35a:	2800      	cmp	r0, #0
 810b35c:	d09d      	beq.n	810b29a <_dtoa_r+0x63a>
 810b35e:	e7cf      	b.n	810b300 <_dtoa_r+0x6a0>
 810b360:	9a08      	ldr	r2, [sp, #32]
 810b362:	2a00      	cmp	r2, #0
 810b364:	f000 80d7 	beq.w	810b516 <_dtoa_r+0x8b6>
 810b368:	9a06      	ldr	r2, [sp, #24]
 810b36a:	2a01      	cmp	r2, #1
 810b36c:	f300 80ba 	bgt.w	810b4e4 <_dtoa_r+0x884>
 810b370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b372:	2a00      	cmp	r2, #0
 810b374:	f000 80b2 	beq.w	810b4dc <_dtoa_r+0x87c>
 810b378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b37c:	9e07      	ldr	r6, [sp, #28]
 810b37e:	9d04      	ldr	r5, [sp, #16]
 810b380:	9a04      	ldr	r2, [sp, #16]
 810b382:	441a      	add	r2, r3
 810b384:	9204      	str	r2, [sp, #16]
 810b386:	9a05      	ldr	r2, [sp, #20]
 810b388:	2101      	movs	r1, #1
 810b38a:	441a      	add	r2, r3
 810b38c:	4620      	mov	r0, r4
 810b38e:	9205      	str	r2, [sp, #20]
 810b390:	f001 f804 	bl	810c39c <__i2b>
 810b394:	4607      	mov	r7, r0
 810b396:	2d00      	cmp	r5, #0
 810b398:	dd0c      	ble.n	810b3b4 <_dtoa_r+0x754>
 810b39a:	9b05      	ldr	r3, [sp, #20]
 810b39c:	2b00      	cmp	r3, #0
 810b39e:	dd09      	ble.n	810b3b4 <_dtoa_r+0x754>
 810b3a0:	42ab      	cmp	r3, r5
 810b3a2:	9a04      	ldr	r2, [sp, #16]
 810b3a4:	bfa8      	it	ge
 810b3a6:	462b      	movge	r3, r5
 810b3a8:	1ad2      	subs	r2, r2, r3
 810b3aa:	9204      	str	r2, [sp, #16]
 810b3ac:	9a05      	ldr	r2, [sp, #20]
 810b3ae:	1aed      	subs	r5, r5, r3
 810b3b0:	1ad3      	subs	r3, r2, r3
 810b3b2:	9305      	str	r3, [sp, #20]
 810b3b4:	9b07      	ldr	r3, [sp, #28]
 810b3b6:	b31b      	cbz	r3, 810b400 <_dtoa_r+0x7a0>
 810b3b8:	9b08      	ldr	r3, [sp, #32]
 810b3ba:	2b00      	cmp	r3, #0
 810b3bc:	f000 80af 	beq.w	810b51e <_dtoa_r+0x8be>
 810b3c0:	2e00      	cmp	r6, #0
 810b3c2:	dd13      	ble.n	810b3ec <_dtoa_r+0x78c>
 810b3c4:	4639      	mov	r1, r7
 810b3c6:	4632      	mov	r2, r6
 810b3c8:	4620      	mov	r0, r4
 810b3ca:	f001 f8a7 	bl	810c51c <__pow5mult>
 810b3ce:	ee18 2a10 	vmov	r2, s16
 810b3d2:	4601      	mov	r1, r0
 810b3d4:	4607      	mov	r7, r0
 810b3d6:	4620      	mov	r0, r4
 810b3d8:	f000 fff6 	bl	810c3c8 <__multiply>
 810b3dc:	ee18 1a10 	vmov	r1, s16
 810b3e0:	4680      	mov	r8, r0
 810b3e2:	4620      	mov	r0, r4
 810b3e4:	f000 fed8 	bl	810c198 <_Bfree>
 810b3e8:	ee08 8a10 	vmov	s16, r8
 810b3ec:	9b07      	ldr	r3, [sp, #28]
 810b3ee:	1b9a      	subs	r2, r3, r6
 810b3f0:	d006      	beq.n	810b400 <_dtoa_r+0x7a0>
 810b3f2:	ee18 1a10 	vmov	r1, s16
 810b3f6:	4620      	mov	r0, r4
 810b3f8:	f001 f890 	bl	810c51c <__pow5mult>
 810b3fc:	ee08 0a10 	vmov	s16, r0
 810b400:	2101      	movs	r1, #1
 810b402:	4620      	mov	r0, r4
 810b404:	f000 ffca 	bl	810c39c <__i2b>
 810b408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b40a:	2b00      	cmp	r3, #0
 810b40c:	4606      	mov	r6, r0
 810b40e:	f340 8088 	ble.w	810b522 <_dtoa_r+0x8c2>
 810b412:	461a      	mov	r2, r3
 810b414:	4601      	mov	r1, r0
 810b416:	4620      	mov	r0, r4
 810b418:	f001 f880 	bl	810c51c <__pow5mult>
 810b41c:	9b06      	ldr	r3, [sp, #24]
 810b41e:	2b01      	cmp	r3, #1
 810b420:	4606      	mov	r6, r0
 810b422:	f340 8081 	ble.w	810b528 <_dtoa_r+0x8c8>
 810b426:	f04f 0800 	mov.w	r8, #0
 810b42a:	6933      	ldr	r3, [r6, #16]
 810b42c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b430:	6918      	ldr	r0, [r3, #16]
 810b432:	f000 ff63 	bl	810c2fc <__hi0bits>
 810b436:	f1c0 0020 	rsb	r0, r0, #32
 810b43a:	9b05      	ldr	r3, [sp, #20]
 810b43c:	4418      	add	r0, r3
 810b43e:	f010 001f 	ands.w	r0, r0, #31
 810b442:	f000 8092 	beq.w	810b56a <_dtoa_r+0x90a>
 810b446:	f1c0 0320 	rsb	r3, r0, #32
 810b44a:	2b04      	cmp	r3, #4
 810b44c:	f340 808a 	ble.w	810b564 <_dtoa_r+0x904>
 810b450:	f1c0 001c 	rsb	r0, r0, #28
 810b454:	9b04      	ldr	r3, [sp, #16]
 810b456:	4403      	add	r3, r0
 810b458:	9304      	str	r3, [sp, #16]
 810b45a:	9b05      	ldr	r3, [sp, #20]
 810b45c:	4403      	add	r3, r0
 810b45e:	4405      	add	r5, r0
 810b460:	9305      	str	r3, [sp, #20]
 810b462:	9b04      	ldr	r3, [sp, #16]
 810b464:	2b00      	cmp	r3, #0
 810b466:	dd07      	ble.n	810b478 <_dtoa_r+0x818>
 810b468:	ee18 1a10 	vmov	r1, s16
 810b46c:	461a      	mov	r2, r3
 810b46e:	4620      	mov	r0, r4
 810b470:	f001 f8ae 	bl	810c5d0 <__lshift>
 810b474:	ee08 0a10 	vmov	s16, r0
 810b478:	9b05      	ldr	r3, [sp, #20]
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	dd05      	ble.n	810b48a <_dtoa_r+0x82a>
 810b47e:	4631      	mov	r1, r6
 810b480:	461a      	mov	r2, r3
 810b482:	4620      	mov	r0, r4
 810b484:	f001 f8a4 	bl	810c5d0 <__lshift>
 810b488:	4606      	mov	r6, r0
 810b48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b48c:	2b00      	cmp	r3, #0
 810b48e:	d06e      	beq.n	810b56e <_dtoa_r+0x90e>
 810b490:	ee18 0a10 	vmov	r0, s16
 810b494:	4631      	mov	r1, r6
 810b496:	f001 f90b 	bl	810c6b0 <__mcmp>
 810b49a:	2800      	cmp	r0, #0
 810b49c:	da67      	bge.n	810b56e <_dtoa_r+0x90e>
 810b49e:	9b00      	ldr	r3, [sp, #0]
 810b4a0:	3b01      	subs	r3, #1
 810b4a2:	ee18 1a10 	vmov	r1, s16
 810b4a6:	9300      	str	r3, [sp, #0]
 810b4a8:	220a      	movs	r2, #10
 810b4aa:	2300      	movs	r3, #0
 810b4ac:	4620      	mov	r0, r4
 810b4ae:	f000 fe95 	bl	810c1dc <__multadd>
 810b4b2:	9b08      	ldr	r3, [sp, #32]
 810b4b4:	ee08 0a10 	vmov	s16, r0
 810b4b8:	2b00      	cmp	r3, #0
 810b4ba:	f000 81b1 	beq.w	810b820 <_dtoa_r+0xbc0>
 810b4be:	2300      	movs	r3, #0
 810b4c0:	4639      	mov	r1, r7
 810b4c2:	220a      	movs	r2, #10
 810b4c4:	4620      	mov	r0, r4
 810b4c6:	f000 fe89 	bl	810c1dc <__multadd>
 810b4ca:	9b02      	ldr	r3, [sp, #8]
 810b4cc:	2b00      	cmp	r3, #0
 810b4ce:	4607      	mov	r7, r0
 810b4d0:	f300 808e 	bgt.w	810b5f0 <_dtoa_r+0x990>
 810b4d4:	9b06      	ldr	r3, [sp, #24]
 810b4d6:	2b02      	cmp	r3, #2
 810b4d8:	dc51      	bgt.n	810b57e <_dtoa_r+0x91e>
 810b4da:	e089      	b.n	810b5f0 <_dtoa_r+0x990>
 810b4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b4de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b4e2:	e74b      	b.n	810b37c <_dtoa_r+0x71c>
 810b4e4:	9b03      	ldr	r3, [sp, #12]
 810b4e6:	1e5e      	subs	r6, r3, #1
 810b4e8:	9b07      	ldr	r3, [sp, #28]
 810b4ea:	42b3      	cmp	r3, r6
 810b4ec:	bfbf      	itttt	lt
 810b4ee:	9b07      	ldrlt	r3, [sp, #28]
 810b4f0:	9607      	strlt	r6, [sp, #28]
 810b4f2:	1af2      	sublt	r2, r6, r3
 810b4f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810b4f6:	bfb6      	itet	lt
 810b4f8:	189b      	addlt	r3, r3, r2
 810b4fa:	1b9e      	subge	r6, r3, r6
 810b4fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 810b4fe:	9b03      	ldr	r3, [sp, #12]
 810b500:	bfb8      	it	lt
 810b502:	2600      	movlt	r6, #0
 810b504:	2b00      	cmp	r3, #0
 810b506:	bfb7      	itett	lt
 810b508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810b50c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810b510:	1a9d      	sublt	r5, r3, r2
 810b512:	2300      	movlt	r3, #0
 810b514:	e734      	b.n	810b380 <_dtoa_r+0x720>
 810b516:	9e07      	ldr	r6, [sp, #28]
 810b518:	9d04      	ldr	r5, [sp, #16]
 810b51a:	9f08      	ldr	r7, [sp, #32]
 810b51c:	e73b      	b.n	810b396 <_dtoa_r+0x736>
 810b51e:	9a07      	ldr	r2, [sp, #28]
 810b520:	e767      	b.n	810b3f2 <_dtoa_r+0x792>
 810b522:	9b06      	ldr	r3, [sp, #24]
 810b524:	2b01      	cmp	r3, #1
 810b526:	dc18      	bgt.n	810b55a <_dtoa_r+0x8fa>
 810b528:	f1ba 0f00 	cmp.w	sl, #0
 810b52c:	d115      	bne.n	810b55a <_dtoa_r+0x8fa>
 810b52e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b532:	b993      	cbnz	r3, 810b55a <_dtoa_r+0x8fa>
 810b534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810b538:	0d1b      	lsrs	r3, r3, #20
 810b53a:	051b      	lsls	r3, r3, #20
 810b53c:	b183      	cbz	r3, 810b560 <_dtoa_r+0x900>
 810b53e:	9b04      	ldr	r3, [sp, #16]
 810b540:	3301      	adds	r3, #1
 810b542:	9304      	str	r3, [sp, #16]
 810b544:	9b05      	ldr	r3, [sp, #20]
 810b546:	3301      	adds	r3, #1
 810b548:	9305      	str	r3, [sp, #20]
 810b54a:	f04f 0801 	mov.w	r8, #1
 810b54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b550:	2b00      	cmp	r3, #0
 810b552:	f47f af6a 	bne.w	810b42a <_dtoa_r+0x7ca>
 810b556:	2001      	movs	r0, #1
 810b558:	e76f      	b.n	810b43a <_dtoa_r+0x7da>
 810b55a:	f04f 0800 	mov.w	r8, #0
 810b55e:	e7f6      	b.n	810b54e <_dtoa_r+0x8ee>
 810b560:	4698      	mov	r8, r3
 810b562:	e7f4      	b.n	810b54e <_dtoa_r+0x8ee>
 810b564:	f43f af7d 	beq.w	810b462 <_dtoa_r+0x802>
 810b568:	4618      	mov	r0, r3
 810b56a:	301c      	adds	r0, #28
 810b56c:	e772      	b.n	810b454 <_dtoa_r+0x7f4>
 810b56e:	9b03      	ldr	r3, [sp, #12]
 810b570:	2b00      	cmp	r3, #0
 810b572:	dc37      	bgt.n	810b5e4 <_dtoa_r+0x984>
 810b574:	9b06      	ldr	r3, [sp, #24]
 810b576:	2b02      	cmp	r3, #2
 810b578:	dd34      	ble.n	810b5e4 <_dtoa_r+0x984>
 810b57a:	9b03      	ldr	r3, [sp, #12]
 810b57c:	9302      	str	r3, [sp, #8]
 810b57e:	9b02      	ldr	r3, [sp, #8]
 810b580:	b96b      	cbnz	r3, 810b59e <_dtoa_r+0x93e>
 810b582:	4631      	mov	r1, r6
 810b584:	2205      	movs	r2, #5
 810b586:	4620      	mov	r0, r4
 810b588:	f000 fe28 	bl	810c1dc <__multadd>
 810b58c:	4601      	mov	r1, r0
 810b58e:	4606      	mov	r6, r0
 810b590:	ee18 0a10 	vmov	r0, s16
 810b594:	f001 f88c 	bl	810c6b0 <__mcmp>
 810b598:	2800      	cmp	r0, #0
 810b59a:	f73f adbb 	bgt.w	810b114 <_dtoa_r+0x4b4>
 810b59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b5a0:	9d01      	ldr	r5, [sp, #4]
 810b5a2:	43db      	mvns	r3, r3
 810b5a4:	9300      	str	r3, [sp, #0]
 810b5a6:	f04f 0800 	mov.w	r8, #0
 810b5aa:	4631      	mov	r1, r6
 810b5ac:	4620      	mov	r0, r4
 810b5ae:	f000 fdf3 	bl	810c198 <_Bfree>
 810b5b2:	2f00      	cmp	r7, #0
 810b5b4:	f43f aea4 	beq.w	810b300 <_dtoa_r+0x6a0>
 810b5b8:	f1b8 0f00 	cmp.w	r8, #0
 810b5bc:	d005      	beq.n	810b5ca <_dtoa_r+0x96a>
 810b5be:	45b8      	cmp	r8, r7
 810b5c0:	d003      	beq.n	810b5ca <_dtoa_r+0x96a>
 810b5c2:	4641      	mov	r1, r8
 810b5c4:	4620      	mov	r0, r4
 810b5c6:	f000 fde7 	bl	810c198 <_Bfree>
 810b5ca:	4639      	mov	r1, r7
 810b5cc:	4620      	mov	r0, r4
 810b5ce:	f000 fde3 	bl	810c198 <_Bfree>
 810b5d2:	e695      	b.n	810b300 <_dtoa_r+0x6a0>
 810b5d4:	2600      	movs	r6, #0
 810b5d6:	4637      	mov	r7, r6
 810b5d8:	e7e1      	b.n	810b59e <_dtoa_r+0x93e>
 810b5da:	9700      	str	r7, [sp, #0]
 810b5dc:	4637      	mov	r7, r6
 810b5de:	e599      	b.n	810b114 <_dtoa_r+0x4b4>
 810b5e0:	40240000 	.word	0x40240000
 810b5e4:	9b08      	ldr	r3, [sp, #32]
 810b5e6:	2b00      	cmp	r3, #0
 810b5e8:	f000 80ca 	beq.w	810b780 <_dtoa_r+0xb20>
 810b5ec:	9b03      	ldr	r3, [sp, #12]
 810b5ee:	9302      	str	r3, [sp, #8]
 810b5f0:	2d00      	cmp	r5, #0
 810b5f2:	dd05      	ble.n	810b600 <_dtoa_r+0x9a0>
 810b5f4:	4639      	mov	r1, r7
 810b5f6:	462a      	mov	r2, r5
 810b5f8:	4620      	mov	r0, r4
 810b5fa:	f000 ffe9 	bl	810c5d0 <__lshift>
 810b5fe:	4607      	mov	r7, r0
 810b600:	f1b8 0f00 	cmp.w	r8, #0
 810b604:	d05b      	beq.n	810b6be <_dtoa_r+0xa5e>
 810b606:	6879      	ldr	r1, [r7, #4]
 810b608:	4620      	mov	r0, r4
 810b60a:	f000 fd85 	bl	810c118 <_Balloc>
 810b60e:	4605      	mov	r5, r0
 810b610:	b928      	cbnz	r0, 810b61e <_dtoa_r+0x9be>
 810b612:	4b87      	ldr	r3, [pc, #540]	; (810b830 <_dtoa_r+0xbd0>)
 810b614:	4602      	mov	r2, r0
 810b616:	f240 21ea 	movw	r1, #746	; 0x2ea
 810b61a:	f7ff bb3b 	b.w	810ac94 <_dtoa_r+0x34>
 810b61e:	693a      	ldr	r2, [r7, #16]
 810b620:	3202      	adds	r2, #2
 810b622:	0092      	lsls	r2, r2, #2
 810b624:	f107 010c 	add.w	r1, r7, #12
 810b628:	300c      	adds	r0, #12
 810b62a:	f7fd fbb4 	bl	8108d96 <memcpy>
 810b62e:	2201      	movs	r2, #1
 810b630:	4629      	mov	r1, r5
 810b632:	4620      	mov	r0, r4
 810b634:	f000 ffcc 	bl	810c5d0 <__lshift>
 810b638:	9b01      	ldr	r3, [sp, #4]
 810b63a:	f103 0901 	add.w	r9, r3, #1
 810b63e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810b642:	4413      	add	r3, r2
 810b644:	9305      	str	r3, [sp, #20]
 810b646:	f00a 0301 	and.w	r3, sl, #1
 810b64a:	46b8      	mov	r8, r7
 810b64c:	9304      	str	r3, [sp, #16]
 810b64e:	4607      	mov	r7, r0
 810b650:	4631      	mov	r1, r6
 810b652:	ee18 0a10 	vmov	r0, s16
 810b656:	f7ff fa75 	bl	810ab44 <quorem>
 810b65a:	4641      	mov	r1, r8
 810b65c:	9002      	str	r0, [sp, #8]
 810b65e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b662:	ee18 0a10 	vmov	r0, s16
 810b666:	f001 f823 	bl	810c6b0 <__mcmp>
 810b66a:	463a      	mov	r2, r7
 810b66c:	9003      	str	r0, [sp, #12]
 810b66e:	4631      	mov	r1, r6
 810b670:	4620      	mov	r0, r4
 810b672:	f001 f839 	bl	810c6e8 <__mdiff>
 810b676:	68c2      	ldr	r2, [r0, #12]
 810b678:	f109 3bff 	add.w	fp, r9, #4294967295
 810b67c:	4605      	mov	r5, r0
 810b67e:	bb02      	cbnz	r2, 810b6c2 <_dtoa_r+0xa62>
 810b680:	4601      	mov	r1, r0
 810b682:	ee18 0a10 	vmov	r0, s16
 810b686:	f001 f813 	bl	810c6b0 <__mcmp>
 810b68a:	4602      	mov	r2, r0
 810b68c:	4629      	mov	r1, r5
 810b68e:	4620      	mov	r0, r4
 810b690:	9207      	str	r2, [sp, #28]
 810b692:	f000 fd81 	bl	810c198 <_Bfree>
 810b696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810b69a:	ea43 0102 	orr.w	r1, r3, r2
 810b69e:	9b04      	ldr	r3, [sp, #16]
 810b6a0:	430b      	orrs	r3, r1
 810b6a2:	464d      	mov	r5, r9
 810b6a4:	d10f      	bne.n	810b6c6 <_dtoa_r+0xa66>
 810b6a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b6aa:	d02a      	beq.n	810b702 <_dtoa_r+0xaa2>
 810b6ac:	9b03      	ldr	r3, [sp, #12]
 810b6ae:	2b00      	cmp	r3, #0
 810b6b0:	dd02      	ble.n	810b6b8 <_dtoa_r+0xa58>
 810b6b2:	9b02      	ldr	r3, [sp, #8]
 810b6b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810b6b8:	f88b a000 	strb.w	sl, [fp]
 810b6bc:	e775      	b.n	810b5aa <_dtoa_r+0x94a>
 810b6be:	4638      	mov	r0, r7
 810b6c0:	e7ba      	b.n	810b638 <_dtoa_r+0x9d8>
 810b6c2:	2201      	movs	r2, #1
 810b6c4:	e7e2      	b.n	810b68c <_dtoa_r+0xa2c>
 810b6c6:	9b03      	ldr	r3, [sp, #12]
 810b6c8:	2b00      	cmp	r3, #0
 810b6ca:	db04      	blt.n	810b6d6 <_dtoa_r+0xa76>
 810b6cc:	9906      	ldr	r1, [sp, #24]
 810b6ce:	430b      	orrs	r3, r1
 810b6d0:	9904      	ldr	r1, [sp, #16]
 810b6d2:	430b      	orrs	r3, r1
 810b6d4:	d122      	bne.n	810b71c <_dtoa_r+0xabc>
 810b6d6:	2a00      	cmp	r2, #0
 810b6d8:	ddee      	ble.n	810b6b8 <_dtoa_r+0xa58>
 810b6da:	ee18 1a10 	vmov	r1, s16
 810b6de:	2201      	movs	r2, #1
 810b6e0:	4620      	mov	r0, r4
 810b6e2:	f000 ff75 	bl	810c5d0 <__lshift>
 810b6e6:	4631      	mov	r1, r6
 810b6e8:	ee08 0a10 	vmov	s16, r0
 810b6ec:	f000 ffe0 	bl	810c6b0 <__mcmp>
 810b6f0:	2800      	cmp	r0, #0
 810b6f2:	dc03      	bgt.n	810b6fc <_dtoa_r+0xa9c>
 810b6f4:	d1e0      	bne.n	810b6b8 <_dtoa_r+0xa58>
 810b6f6:	f01a 0f01 	tst.w	sl, #1
 810b6fa:	d0dd      	beq.n	810b6b8 <_dtoa_r+0xa58>
 810b6fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b700:	d1d7      	bne.n	810b6b2 <_dtoa_r+0xa52>
 810b702:	2339      	movs	r3, #57	; 0x39
 810b704:	f88b 3000 	strb.w	r3, [fp]
 810b708:	462b      	mov	r3, r5
 810b70a:	461d      	mov	r5, r3
 810b70c:	3b01      	subs	r3, #1
 810b70e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b712:	2a39      	cmp	r2, #57	; 0x39
 810b714:	d071      	beq.n	810b7fa <_dtoa_r+0xb9a>
 810b716:	3201      	adds	r2, #1
 810b718:	701a      	strb	r2, [r3, #0]
 810b71a:	e746      	b.n	810b5aa <_dtoa_r+0x94a>
 810b71c:	2a00      	cmp	r2, #0
 810b71e:	dd07      	ble.n	810b730 <_dtoa_r+0xad0>
 810b720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b724:	d0ed      	beq.n	810b702 <_dtoa_r+0xaa2>
 810b726:	f10a 0301 	add.w	r3, sl, #1
 810b72a:	f88b 3000 	strb.w	r3, [fp]
 810b72e:	e73c      	b.n	810b5aa <_dtoa_r+0x94a>
 810b730:	9b05      	ldr	r3, [sp, #20]
 810b732:	f809 ac01 	strb.w	sl, [r9, #-1]
 810b736:	4599      	cmp	r9, r3
 810b738:	d047      	beq.n	810b7ca <_dtoa_r+0xb6a>
 810b73a:	ee18 1a10 	vmov	r1, s16
 810b73e:	2300      	movs	r3, #0
 810b740:	220a      	movs	r2, #10
 810b742:	4620      	mov	r0, r4
 810b744:	f000 fd4a 	bl	810c1dc <__multadd>
 810b748:	45b8      	cmp	r8, r7
 810b74a:	ee08 0a10 	vmov	s16, r0
 810b74e:	f04f 0300 	mov.w	r3, #0
 810b752:	f04f 020a 	mov.w	r2, #10
 810b756:	4641      	mov	r1, r8
 810b758:	4620      	mov	r0, r4
 810b75a:	d106      	bne.n	810b76a <_dtoa_r+0xb0a>
 810b75c:	f000 fd3e 	bl	810c1dc <__multadd>
 810b760:	4680      	mov	r8, r0
 810b762:	4607      	mov	r7, r0
 810b764:	f109 0901 	add.w	r9, r9, #1
 810b768:	e772      	b.n	810b650 <_dtoa_r+0x9f0>
 810b76a:	f000 fd37 	bl	810c1dc <__multadd>
 810b76e:	4639      	mov	r1, r7
 810b770:	4680      	mov	r8, r0
 810b772:	2300      	movs	r3, #0
 810b774:	220a      	movs	r2, #10
 810b776:	4620      	mov	r0, r4
 810b778:	f000 fd30 	bl	810c1dc <__multadd>
 810b77c:	4607      	mov	r7, r0
 810b77e:	e7f1      	b.n	810b764 <_dtoa_r+0xb04>
 810b780:	9b03      	ldr	r3, [sp, #12]
 810b782:	9302      	str	r3, [sp, #8]
 810b784:	9d01      	ldr	r5, [sp, #4]
 810b786:	ee18 0a10 	vmov	r0, s16
 810b78a:	4631      	mov	r1, r6
 810b78c:	f7ff f9da 	bl	810ab44 <quorem>
 810b790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b794:	9b01      	ldr	r3, [sp, #4]
 810b796:	f805 ab01 	strb.w	sl, [r5], #1
 810b79a:	1aea      	subs	r2, r5, r3
 810b79c:	9b02      	ldr	r3, [sp, #8]
 810b79e:	4293      	cmp	r3, r2
 810b7a0:	dd09      	ble.n	810b7b6 <_dtoa_r+0xb56>
 810b7a2:	ee18 1a10 	vmov	r1, s16
 810b7a6:	2300      	movs	r3, #0
 810b7a8:	220a      	movs	r2, #10
 810b7aa:	4620      	mov	r0, r4
 810b7ac:	f000 fd16 	bl	810c1dc <__multadd>
 810b7b0:	ee08 0a10 	vmov	s16, r0
 810b7b4:	e7e7      	b.n	810b786 <_dtoa_r+0xb26>
 810b7b6:	9b02      	ldr	r3, [sp, #8]
 810b7b8:	2b00      	cmp	r3, #0
 810b7ba:	bfc8      	it	gt
 810b7bc:	461d      	movgt	r5, r3
 810b7be:	9b01      	ldr	r3, [sp, #4]
 810b7c0:	bfd8      	it	le
 810b7c2:	2501      	movle	r5, #1
 810b7c4:	441d      	add	r5, r3
 810b7c6:	f04f 0800 	mov.w	r8, #0
 810b7ca:	ee18 1a10 	vmov	r1, s16
 810b7ce:	2201      	movs	r2, #1
 810b7d0:	4620      	mov	r0, r4
 810b7d2:	f000 fefd 	bl	810c5d0 <__lshift>
 810b7d6:	4631      	mov	r1, r6
 810b7d8:	ee08 0a10 	vmov	s16, r0
 810b7dc:	f000 ff68 	bl	810c6b0 <__mcmp>
 810b7e0:	2800      	cmp	r0, #0
 810b7e2:	dc91      	bgt.n	810b708 <_dtoa_r+0xaa8>
 810b7e4:	d102      	bne.n	810b7ec <_dtoa_r+0xb8c>
 810b7e6:	f01a 0f01 	tst.w	sl, #1
 810b7ea:	d18d      	bne.n	810b708 <_dtoa_r+0xaa8>
 810b7ec:	462b      	mov	r3, r5
 810b7ee:	461d      	mov	r5, r3
 810b7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b7f4:	2a30      	cmp	r2, #48	; 0x30
 810b7f6:	d0fa      	beq.n	810b7ee <_dtoa_r+0xb8e>
 810b7f8:	e6d7      	b.n	810b5aa <_dtoa_r+0x94a>
 810b7fa:	9a01      	ldr	r2, [sp, #4]
 810b7fc:	429a      	cmp	r2, r3
 810b7fe:	d184      	bne.n	810b70a <_dtoa_r+0xaaa>
 810b800:	9b00      	ldr	r3, [sp, #0]
 810b802:	3301      	adds	r3, #1
 810b804:	9300      	str	r3, [sp, #0]
 810b806:	2331      	movs	r3, #49	; 0x31
 810b808:	7013      	strb	r3, [r2, #0]
 810b80a:	e6ce      	b.n	810b5aa <_dtoa_r+0x94a>
 810b80c:	4b09      	ldr	r3, [pc, #36]	; (810b834 <_dtoa_r+0xbd4>)
 810b80e:	f7ff ba95 	b.w	810ad3c <_dtoa_r+0xdc>
 810b812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b814:	2b00      	cmp	r3, #0
 810b816:	f47f aa6e 	bne.w	810acf6 <_dtoa_r+0x96>
 810b81a:	4b07      	ldr	r3, [pc, #28]	; (810b838 <_dtoa_r+0xbd8>)
 810b81c:	f7ff ba8e 	b.w	810ad3c <_dtoa_r+0xdc>
 810b820:	9b02      	ldr	r3, [sp, #8]
 810b822:	2b00      	cmp	r3, #0
 810b824:	dcae      	bgt.n	810b784 <_dtoa_r+0xb24>
 810b826:	9b06      	ldr	r3, [sp, #24]
 810b828:	2b02      	cmp	r3, #2
 810b82a:	f73f aea8 	bgt.w	810b57e <_dtoa_r+0x91e>
 810b82e:	e7a9      	b.n	810b784 <_dtoa_r+0xb24>
 810b830:	0810d868 	.word	0x0810d868
 810b834:	0810d66c 	.word	0x0810d66c
 810b838:	0810d7e9 	.word	0x0810d7e9

0810b83c <__sflush_r>:
 810b83c:	898a      	ldrh	r2, [r1, #12]
 810b83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b842:	4605      	mov	r5, r0
 810b844:	0710      	lsls	r0, r2, #28
 810b846:	460c      	mov	r4, r1
 810b848:	d458      	bmi.n	810b8fc <__sflush_r+0xc0>
 810b84a:	684b      	ldr	r3, [r1, #4]
 810b84c:	2b00      	cmp	r3, #0
 810b84e:	dc05      	bgt.n	810b85c <__sflush_r+0x20>
 810b850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810b852:	2b00      	cmp	r3, #0
 810b854:	dc02      	bgt.n	810b85c <__sflush_r+0x20>
 810b856:	2000      	movs	r0, #0
 810b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b85c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b85e:	2e00      	cmp	r6, #0
 810b860:	d0f9      	beq.n	810b856 <__sflush_r+0x1a>
 810b862:	2300      	movs	r3, #0
 810b864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810b868:	682f      	ldr	r7, [r5, #0]
 810b86a:	602b      	str	r3, [r5, #0]
 810b86c:	d032      	beq.n	810b8d4 <__sflush_r+0x98>
 810b86e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810b870:	89a3      	ldrh	r3, [r4, #12]
 810b872:	075a      	lsls	r2, r3, #29
 810b874:	d505      	bpl.n	810b882 <__sflush_r+0x46>
 810b876:	6863      	ldr	r3, [r4, #4]
 810b878:	1ac0      	subs	r0, r0, r3
 810b87a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810b87c:	b10b      	cbz	r3, 810b882 <__sflush_r+0x46>
 810b87e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810b880:	1ac0      	subs	r0, r0, r3
 810b882:	2300      	movs	r3, #0
 810b884:	4602      	mov	r2, r0
 810b886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810b888:	6a21      	ldr	r1, [r4, #32]
 810b88a:	4628      	mov	r0, r5
 810b88c:	47b0      	blx	r6
 810b88e:	1c43      	adds	r3, r0, #1
 810b890:	89a3      	ldrh	r3, [r4, #12]
 810b892:	d106      	bne.n	810b8a2 <__sflush_r+0x66>
 810b894:	6829      	ldr	r1, [r5, #0]
 810b896:	291d      	cmp	r1, #29
 810b898:	d82c      	bhi.n	810b8f4 <__sflush_r+0xb8>
 810b89a:	4a2a      	ldr	r2, [pc, #168]	; (810b944 <__sflush_r+0x108>)
 810b89c:	40ca      	lsrs	r2, r1
 810b89e:	07d6      	lsls	r6, r2, #31
 810b8a0:	d528      	bpl.n	810b8f4 <__sflush_r+0xb8>
 810b8a2:	2200      	movs	r2, #0
 810b8a4:	6062      	str	r2, [r4, #4]
 810b8a6:	04d9      	lsls	r1, r3, #19
 810b8a8:	6922      	ldr	r2, [r4, #16]
 810b8aa:	6022      	str	r2, [r4, #0]
 810b8ac:	d504      	bpl.n	810b8b8 <__sflush_r+0x7c>
 810b8ae:	1c42      	adds	r2, r0, #1
 810b8b0:	d101      	bne.n	810b8b6 <__sflush_r+0x7a>
 810b8b2:	682b      	ldr	r3, [r5, #0]
 810b8b4:	b903      	cbnz	r3, 810b8b8 <__sflush_r+0x7c>
 810b8b6:	6560      	str	r0, [r4, #84]	; 0x54
 810b8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b8ba:	602f      	str	r7, [r5, #0]
 810b8bc:	2900      	cmp	r1, #0
 810b8be:	d0ca      	beq.n	810b856 <__sflush_r+0x1a>
 810b8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b8c4:	4299      	cmp	r1, r3
 810b8c6:	d002      	beq.n	810b8ce <__sflush_r+0x92>
 810b8c8:	4628      	mov	r0, r5
 810b8ca:	f001 f8fd 	bl	810cac8 <_free_r>
 810b8ce:	2000      	movs	r0, #0
 810b8d0:	6360      	str	r0, [r4, #52]	; 0x34
 810b8d2:	e7c1      	b.n	810b858 <__sflush_r+0x1c>
 810b8d4:	6a21      	ldr	r1, [r4, #32]
 810b8d6:	2301      	movs	r3, #1
 810b8d8:	4628      	mov	r0, r5
 810b8da:	47b0      	blx	r6
 810b8dc:	1c41      	adds	r1, r0, #1
 810b8de:	d1c7      	bne.n	810b870 <__sflush_r+0x34>
 810b8e0:	682b      	ldr	r3, [r5, #0]
 810b8e2:	2b00      	cmp	r3, #0
 810b8e4:	d0c4      	beq.n	810b870 <__sflush_r+0x34>
 810b8e6:	2b1d      	cmp	r3, #29
 810b8e8:	d001      	beq.n	810b8ee <__sflush_r+0xb2>
 810b8ea:	2b16      	cmp	r3, #22
 810b8ec:	d101      	bne.n	810b8f2 <__sflush_r+0xb6>
 810b8ee:	602f      	str	r7, [r5, #0]
 810b8f0:	e7b1      	b.n	810b856 <__sflush_r+0x1a>
 810b8f2:	89a3      	ldrh	r3, [r4, #12]
 810b8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b8f8:	81a3      	strh	r3, [r4, #12]
 810b8fa:	e7ad      	b.n	810b858 <__sflush_r+0x1c>
 810b8fc:	690f      	ldr	r7, [r1, #16]
 810b8fe:	2f00      	cmp	r7, #0
 810b900:	d0a9      	beq.n	810b856 <__sflush_r+0x1a>
 810b902:	0793      	lsls	r3, r2, #30
 810b904:	680e      	ldr	r6, [r1, #0]
 810b906:	bf08      	it	eq
 810b908:	694b      	ldreq	r3, [r1, #20]
 810b90a:	600f      	str	r7, [r1, #0]
 810b90c:	bf18      	it	ne
 810b90e:	2300      	movne	r3, #0
 810b910:	eba6 0807 	sub.w	r8, r6, r7
 810b914:	608b      	str	r3, [r1, #8]
 810b916:	f1b8 0f00 	cmp.w	r8, #0
 810b91a:	dd9c      	ble.n	810b856 <__sflush_r+0x1a>
 810b91c:	6a21      	ldr	r1, [r4, #32]
 810b91e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810b920:	4643      	mov	r3, r8
 810b922:	463a      	mov	r2, r7
 810b924:	4628      	mov	r0, r5
 810b926:	47b0      	blx	r6
 810b928:	2800      	cmp	r0, #0
 810b92a:	dc06      	bgt.n	810b93a <__sflush_r+0xfe>
 810b92c:	89a3      	ldrh	r3, [r4, #12]
 810b92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b932:	81a3      	strh	r3, [r4, #12]
 810b934:	f04f 30ff 	mov.w	r0, #4294967295
 810b938:	e78e      	b.n	810b858 <__sflush_r+0x1c>
 810b93a:	4407      	add	r7, r0
 810b93c:	eba8 0800 	sub.w	r8, r8, r0
 810b940:	e7e9      	b.n	810b916 <__sflush_r+0xda>
 810b942:	bf00      	nop
 810b944:	20400001 	.word	0x20400001

0810b948 <_fflush_r>:
 810b948:	b538      	push	{r3, r4, r5, lr}
 810b94a:	690b      	ldr	r3, [r1, #16]
 810b94c:	4605      	mov	r5, r0
 810b94e:	460c      	mov	r4, r1
 810b950:	b913      	cbnz	r3, 810b958 <_fflush_r+0x10>
 810b952:	2500      	movs	r5, #0
 810b954:	4628      	mov	r0, r5
 810b956:	bd38      	pop	{r3, r4, r5, pc}
 810b958:	b118      	cbz	r0, 810b962 <_fflush_r+0x1a>
 810b95a:	6983      	ldr	r3, [r0, #24]
 810b95c:	b90b      	cbnz	r3, 810b962 <_fflush_r+0x1a>
 810b95e:	f7fd f955 	bl	8108c0c <__sinit>
 810b962:	4b14      	ldr	r3, [pc, #80]	; (810b9b4 <_fflush_r+0x6c>)
 810b964:	429c      	cmp	r4, r3
 810b966:	d11b      	bne.n	810b9a0 <_fflush_r+0x58>
 810b968:	686c      	ldr	r4, [r5, #4]
 810b96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b96e:	2b00      	cmp	r3, #0
 810b970:	d0ef      	beq.n	810b952 <_fflush_r+0xa>
 810b972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810b974:	07d0      	lsls	r0, r2, #31
 810b976:	d404      	bmi.n	810b982 <_fflush_r+0x3a>
 810b978:	0599      	lsls	r1, r3, #22
 810b97a:	d402      	bmi.n	810b982 <_fflush_r+0x3a>
 810b97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b97e:	f7fd fa08 	bl	8108d92 <__retarget_lock_acquire_recursive>
 810b982:	4628      	mov	r0, r5
 810b984:	4621      	mov	r1, r4
 810b986:	f7ff ff59 	bl	810b83c <__sflush_r>
 810b98a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b98c:	07da      	lsls	r2, r3, #31
 810b98e:	4605      	mov	r5, r0
 810b990:	d4e0      	bmi.n	810b954 <_fflush_r+0xc>
 810b992:	89a3      	ldrh	r3, [r4, #12]
 810b994:	059b      	lsls	r3, r3, #22
 810b996:	d4dd      	bmi.n	810b954 <_fflush_r+0xc>
 810b998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b99a:	f7fd f9fb 	bl	8108d94 <__retarget_lock_release_recursive>
 810b99e:	e7d9      	b.n	810b954 <_fflush_r+0xc>
 810b9a0:	4b05      	ldr	r3, [pc, #20]	; (810b9b8 <_fflush_r+0x70>)
 810b9a2:	429c      	cmp	r4, r3
 810b9a4:	d101      	bne.n	810b9aa <_fflush_r+0x62>
 810b9a6:	68ac      	ldr	r4, [r5, #8]
 810b9a8:	e7df      	b.n	810b96a <_fflush_r+0x22>
 810b9aa:	4b04      	ldr	r3, [pc, #16]	; (810b9bc <_fflush_r+0x74>)
 810b9ac:	429c      	cmp	r4, r3
 810b9ae:	bf08      	it	eq
 810b9b0:	68ec      	ldreq	r4, [r5, #12]
 810b9b2:	e7da      	b.n	810b96a <_fflush_r+0x22>
 810b9b4:	0810d618 	.word	0x0810d618
 810b9b8:	0810d638 	.word	0x0810d638
 810b9bc:	0810d5f8 	.word	0x0810d5f8

0810b9c0 <rshift>:
 810b9c0:	6903      	ldr	r3, [r0, #16]
 810b9c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b9c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b9ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b9ce:	f100 0414 	add.w	r4, r0, #20
 810b9d2:	dd45      	ble.n	810ba60 <rshift+0xa0>
 810b9d4:	f011 011f 	ands.w	r1, r1, #31
 810b9d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b9dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b9e0:	d10c      	bne.n	810b9fc <rshift+0x3c>
 810b9e2:	f100 0710 	add.w	r7, r0, #16
 810b9e6:	4629      	mov	r1, r5
 810b9e8:	42b1      	cmp	r1, r6
 810b9ea:	d334      	bcc.n	810ba56 <rshift+0x96>
 810b9ec:	1a9b      	subs	r3, r3, r2
 810b9ee:	009b      	lsls	r3, r3, #2
 810b9f0:	1eea      	subs	r2, r5, #3
 810b9f2:	4296      	cmp	r6, r2
 810b9f4:	bf38      	it	cc
 810b9f6:	2300      	movcc	r3, #0
 810b9f8:	4423      	add	r3, r4
 810b9fa:	e015      	b.n	810ba28 <rshift+0x68>
 810b9fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810ba00:	f1c1 0820 	rsb	r8, r1, #32
 810ba04:	40cf      	lsrs	r7, r1
 810ba06:	f105 0e04 	add.w	lr, r5, #4
 810ba0a:	46a1      	mov	r9, r4
 810ba0c:	4576      	cmp	r6, lr
 810ba0e:	46f4      	mov	ip, lr
 810ba10:	d815      	bhi.n	810ba3e <rshift+0x7e>
 810ba12:	1a9a      	subs	r2, r3, r2
 810ba14:	0092      	lsls	r2, r2, #2
 810ba16:	3a04      	subs	r2, #4
 810ba18:	3501      	adds	r5, #1
 810ba1a:	42ae      	cmp	r6, r5
 810ba1c:	bf38      	it	cc
 810ba1e:	2200      	movcc	r2, #0
 810ba20:	18a3      	adds	r3, r4, r2
 810ba22:	50a7      	str	r7, [r4, r2]
 810ba24:	b107      	cbz	r7, 810ba28 <rshift+0x68>
 810ba26:	3304      	adds	r3, #4
 810ba28:	1b1a      	subs	r2, r3, r4
 810ba2a:	42a3      	cmp	r3, r4
 810ba2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810ba30:	bf08      	it	eq
 810ba32:	2300      	moveq	r3, #0
 810ba34:	6102      	str	r2, [r0, #16]
 810ba36:	bf08      	it	eq
 810ba38:	6143      	streq	r3, [r0, #20]
 810ba3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ba3e:	f8dc c000 	ldr.w	ip, [ip]
 810ba42:	fa0c fc08 	lsl.w	ip, ip, r8
 810ba46:	ea4c 0707 	orr.w	r7, ip, r7
 810ba4a:	f849 7b04 	str.w	r7, [r9], #4
 810ba4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 810ba52:	40cf      	lsrs	r7, r1
 810ba54:	e7da      	b.n	810ba0c <rshift+0x4c>
 810ba56:	f851 cb04 	ldr.w	ip, [r1], #4
 810ba5a:	f847 cf04 	str.w	ip, [r7, #4]!
 810ba5e:	e7c3      	b.n	810b9e8 <rshift+0x28>
 810ba60:	4623      	mov	r3, r4
 810ba62:	e7e1      	b.n	810ba28 <rshift+0x68>

0810ba64 <__hexdig_fun>:
 810ba64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810ba68:	2b09      	cmp	r3, #9
 810ba6a:	d802      	bhi.n	810ba72 <__hexdig_fun+0xe>
 810ba6c:	3820      	subs	r0, #32
 810ba6e:	b2c0      	uxtb	r0, r0
 810ba70:	4770      	bx	lr
 810ba72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810ba76:	2b05      	cmp	r3, #5
 810ba78:	d801      	bhi.n	810ba7e <__hexdig_fun+0x1a>
 810ba7a:	3847      	subs	r0, #71	; 0x47
 810ba7c:	e7f7      	b.n	810ba6e <__hexdig_fun+0xa>
 810ba7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810ba82:	2b05      	cmp	r3, #5
 810ba84:	d801      	bhi.n	810ba8a <__hexdig_fun+0x26>
 810ba86:	3827      	subs	r0, #39	; 0x27
 810ba88:	e7f1      	b.n	810ba6e <__hexdig_fun+0xa>
 810ba8a:	2000      	movs	r0, #0
 810ba8c:	4770      	bx	lr
	...

0810ba90 <__gethex>:
 810ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ba94:	ed2d 8b02 	vpush	{d8}
 810ba98:	b089      	sub	sp, #36	; 0x24
 810ba9a:	ee08 0a10 	vmov	s16, r0
 810ba9e:	9304      	str	r3, [sp, #16]
 810baa0:	4bb4      	ldr	r3, [pc, #720]	; (810bd74 <__gethex+0x2e4>)
 810baa2:	681b      	ldr	r3, [r3, #0]
 810baa4:	9301      	str	r3, [sp, #4]
 810baa6:	4618      	mov	r0, r3
 810baa8:	468b      	mov	fp, r1
 810baaa:	4690      	mov	r8, r2
 810baac:	f7f4 fc18 	bl	81002e0 <strlen>
 810bab0:	9b01      	ldr	r3, [sp, #4]
 810bab2:	f8db 2000 	ldr.w	r2, [fp]
 810bab6:	4403      	add	r3, r0
 810bab8:	4682      	mov	sl, r0
 810baba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810babe:	9305      	str	r3, [sp, #20]
 810bac0:	1c93      	adds	r3, r2, #2
 810bac2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810bac6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810baca:	32fe      	adds	r2, #254	; 0xfe
 810bacc:	18d1      	adds	r1, r2, r3
 810bace:	461f      	mov	r7, r3
 810bad0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810bad4:	9100      	str	r1, [sp, #0]
 810bad6:	2830      	cmp	r0, #48	; 0x30
 810bad8:	d0f8      	beq.n	810bacc <__gethex+0x3c>
 810bada:	f7ff ffc3 	bl	810ba64 <__hexdig_fun>
 810bade:	4604      	mov	r4, r0
 810bae0:	2800      	cmp	r0, #0
 810bae2:	d13a      	bne.n	810bb5a <__gethex+0xca>
 810bae4:	9901      	ldr	r1, [sp, #4]
 810bae6:	4652      	mov	r2, sl
 810bae8:	4638      	mov	r0, r7
 810baea:	f001 f9b1 	bl	810ce50 <strncmp>
 810baee:	4605      	mov	r5, r0
 810baf0:	2800      	cmp	r0, #0
 810baf2:	d168      	bne.n	810bbc6 <__gethex+0x136>
 810baf4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810baf8:	eb07 060a 	add.w	r6, r7, sl
 810bafc:	f7ff ffb2 	bl	810ba64 <__hexdig_fun>
 810bb00:	2800      	cmp	r0, #0
 810bb02:	d062      	beq.n	810bbca <__gethex+0x13a>
 810bb04:	4633      	mov	r3, r6
 810bb06:	7818      	ldrb	r0, [r3, #0]
 810bb08:	2830      	cmp	r0, #48	; 0x30
 810bb0a:	461f      	mov	r7, r3
 810bb0c:	f103 0301 	add.w	r3, r3, #1
 810bb10:	d0f9      	beq.n	810bb06 <__gethex+0x76>
 810bb12:	f7ff ffa7 	bl	810ba64 <__hexdig_fun>
 810bb16:	2301      	movs	r3, #1
 810bb18:	fab0 f480 	clz	r4, r0
 810bb1c:	0964      	lsrs	r4, r4, #5
 810bb1e:	4635      	mov	r5, r6
 810bb20:	9300      	str	r3, [sp, #0]
 810bb22:	463a      	mov	r2, r7
 810bb24:	4616      	mov	r6, r2
 810bb26:	3201      	adds	r2, #1
 810bb28:	7830      	ldrb	r0, [r6, #0]
 810bb2a:	f7ff ff9b 	bl	810ba64 <__hexdig_fun>
 810bb2e:	2800      	cmp	r0, #0
 810bb30:	d1f8      	bne.n	810bb24 <__gethex+0x94>
 810bb32:	9901      	ldr	r1, [sp, #4]
 810bb34:	4652      	mov	r2, sl
 810bb36:	4630      	mov	r0, r6
 810bb38:	f001 f98a 	bl	810ce50 <strncmp>
 810bb3c:	b980      	cbnz	r0, 810bb60 <__gethex+0xd0>
 810bb3e:	b94d      	cbnz	r5, 810bb54 <__gethex+0xc4>
 810bb40:	eb06 050a 	add.w	r5, r6, sl
 810bb44:	462a      	mov	r2, r5
 810bb46:	4616      	mov	r6, r2
 810bb48:	3201      	adds	r2, #1
 810bb4a:	7830      	ldrb	r0, [r6, #0]
 810bb4c:	f7ff ff8a 	bl	810ba64 <__hexdig_fun>
 810bb50:	2800      	cmp	r0, #0
 810bb52:	d1f8      	bne.n	810bb46 <__gethex+0xb6>
 810bb54:	1bad      	subs	r5, r5, r6
 810bb56:	00ad      	lsls	r5, r5, #2
 810bb58:	e004      	b.n	810bb64 <__gethex+0xd4>
 810bb5a:	2400      	movs	r4, #0
 810bb5c:	4625      	mov	r5, r4
 810bb5e:	e7e0      	b.n	810bb22 <__gethex+0x92>
 810bb60:	2d00      	cmp	r5, #0
 810bb62:	d1f7      	bne.n	810bb54 <__gethex+0xc4>
 810bb64:	7833      	ldrb	r3, [r6, #0]
 810bb66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bb6a:	2b50      	cmp	r3, #80	; 0x50
 810bb6c:	d13b      	bne.n	810bbe6 <__gethex+0x156>
 810bb6e:	7873      	ldrb	r3, [r6, #1]
 810bb70:	2b2b      	cmp	r3, #43	; 0x2b
 810bb72:	d02c      	beq.n	810bbce <__gethex+0x13e>
 810bb74:	2b2d      	cmp	r3, #45	; 0x2d
 810bb76:	d02e      	beq.n	810bbd6 <__gethex+0x146>
 810bb78:	1c71      	adds	r1, r6, #1
 810bb7a:	f04f 0900 	mov.w	r9, #0
 810bb7e:	7808      	ldrb	r0, [r1, #0]
 810bb80:	f7ff ff70 	bl	810ba64 <__hexdig_fun>
 810bb84:	1e43      	subs	r3, r0, #1
 810bb86:	b2db      	uxtb	r3, r3
 810bb88:	2b18      	cmp	r3, #24
 810bb8a:	d82c      	bhi.n	810bbe6 <__gethex+0x156>
 810bb8c:	f1a0 0210 	sub.w	r2, r0, #16
 810bb90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810bb94:	f7ff ff66 	bl	810ba64 <__hexdig_fun>
 810bb98:	1e43      	subs	r3, r0, #1
 810bb9a:	b2db      	uxtb	r3, r3
 810bb9c:	2b18      	cmp	r3, #24
 810bb9e:	d91d      	bls.n	810bbdc <__gethex+0x14c>
 810bba0:	f1b9 0f00 	cmp.w	r9, #0
 810bba4:	d000      	beq.n	810bba8 <__gethex+0x118>
 810bba6:	4252      	negs	r2, r2
 810bba8:	4415      	add	r5, r2
 810bbaa:	f8cb 1000 	str.w	r1, [fp]
 810bbae:	b1e4      	cbz	r4, 810bbea <__gethex+0x15a>
 810bbb0:	9b00      	ldr	r3, [sp, #0]
 810bbb2:	2b00      	cmp	r3, #0
 810bbb4:	bf14      	ite	ne
 810bbb6:	2700      	movne	r7, #0
 810bbb8:	2706      	moveq	r7, #6
 810bbba:	4638      	mov	r0, r7
 810bbbc:	b009      	add	sp, #36	; 0x24
 810bbbe:	ecbd 8b02 	vpop	{d8}
 810bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bbc6:	463e      	mov	r6, r7
 810bbc8:	4625      	mov	r5, r4
 810bbca:	2401      	movs	r4, #1
 810bbcc:	e7ca      	b.n	810bb64 <__gethex+0xd4>
 810bbce:	f04f 0900 	mov.w	r9, #0
 810bbd2:	1cb1      	adds	r1, r6, #2
 810bbd4:	e7d3      	b.n	810bb7e <__gethex+0xee>
 810bbd6:	f04f 0901 	mov.w	r9, #1
 810bbda:	e7fa      	b.n	810bbd2 <__gethex+0x142>
 810bbdc:	230a      	movs	r3, #10
 810bbde:	fb03 0202 	mla	r2, r3, r2, r0
 810bbe2:	3a10      	subs	r2, #16
 810bbe4:	e7d4      	b.n	810bb90 <__gethex+0x100>
 810bbe6:	4631      	mov	r1, r6
 810bbe8:	e7df      	b.n	810bbaa <__gethex+0x11a>
 810bbea:	1bf3      	subs	r3, r6, r7
 810bbec:	3b01      	subs	r3, #1
 810bbee:	4621      	mov	r1, r4
 810bbf0:	2b07      	cmp	r3, #7
 810bbf2:	dc0b      	bgt.n	810bc0c <__gethex+0x17c>
 810bbf4:	ee18 0a10 	vmov	r0, s16
 810bbf8:	f000 fa8e 	bl	810c118 <_Balloc>
 810bbfc:	4604      	mov	r4, r0
 810bbfe:	b940      	cbnz	r0, 810bc12 <__gethex+0x182>
 810bc00:	4b5d      	ldr	r3, [pc, #372]	; (810bd78 <__gethex+0x2e8>)
 810bc02:	4602      	mov	r2, r0
 810bc04:	21de      	movs	r1, #222	; 0xde
 810bc06:	485d      	ldr	r0, [pc, #372]	; (810bd7c <__gethex+0x2ec>)
 810bc08:	f001 f944 	bl	810ce94 <__assert_func>
 810bc0c:	3101      	adds	r1, #1
 810bc0e:	105b      	asrs	r3, r3, #1
 810bc10:	e7ee      	b.n	810bbf0 <__gethex+0x160>
 810bc12:	f100 0914 	add.w	r9, r0, #20
 810bc16:	f04f 0b00 	mov.w	fp, #0
 810bc1a:	f1ca 0301 	rsb	r3, sl, #1
 810bc1e:	f8cd 9008 	str.w	r9, [sp, #8]
 810bc22:	f8cd b000 	str.w	fp, [sp]
 810bc26:	9306      	str	r3, [sp, #24]
 810bc28:	42b7      	cmp	r7, r6
 810bc2a:	d340      	bcc.n	810bcae <__gethex+0x21e>
 810bc2c:	9802      	ldr	r0, [sp, #8]
 810bc2e:	9b00      	ldr	r3, [sp, #0]
 810bc30:	f840 3b04 	str.w	r3, [r0], #4
 810bc34:	eba0 0009 	sub.w	r0, r0, r9
 810bc38:	1080      	asrs	r0, r0, #2
 810bc3a:	0146      	lsls	r6, r0, #5
 810bc3c:	6120      	str	r0, [r4, #16]
 810bc3e:	4618      	mov	r0, r3
 810bc40:	f000 fb5c 	bl	810c2fc <__hi0bits>
 810bc44:	1a30      	subs	r0, r6, r0
 810bc46:	f8d8 6000 	ldr.w	r6, [r8]
 810bc4a:	42b0      	cmp	r0, r6
 810bc4c:	dd63      	ble.n	810bd16 <__gethex+0x286>
 810bc4e:	1b87      	subs	r7, r0, r6
 810bc50:	4639      	mov	r1, r7
 810bc52:	4620      	mov	r0, r4
 810bc54:	f000 ff00 	bl	810ca58 <__any_on>
 810bc58:	4682      	mov	sl, r0
 810bc5a:	b1a8      	cbz	r0, 810bc88 <__gethex+0x1f8>
 810bc5c:	1e7b      	subs	r3, r7, #1
 810bc5e:	1159      	asrs	r1, r3, #5
 810bc60:	f003 021f 	and.w	r2, r3, #31
 810bc64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810bc68:	f04f 0a01 	mov.w	sl, #1
 810bc6c:	fa0a f202 	lsl.w	r2, sl, r2
 810bc70:	420a      	tst	r2, r1
 810bc72:	d009      	beq.n	810bc88 <__gethex+0x1f8>
 810bc74:	4553      	cmp	r3, sl
 810bc76:	dd05      	ble.n	810bc84 <__gethex+0x1f4>
 810bc78:	1eb9      	subs	r1, r7, #2
 810bc7a:	4620      	mov	r0, r4
 810bc7c:	f000 feec 	bl	810ca58 <__any_on>
 810bc80:	2800      	cmp	r0, #0
 810bc82:	d145      	bne.n	810bd10 <__gethex+0x280>
 810bc84:	f04f 0a02 	mov.w	sl, #2
 810bc88:	4639      	mov	r1, r7
 810bc8a:	4620      	mov	r0, r4
 810bc8c:	f7ff fe98 	bl	810b9c0 <rshift>
 810bc90:	443d      	add	r5, r7
 810bc92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810bc96:	42ab      	cmp	r3, r5
 810bc98:	da4c      	bge.n	810bd34 <__gethex+0x2a4>
 810bc9a:	ee18 0a10 	vmov	r0, s16
 810bc9e:	4621      	mov	r1, r4
 810bca0:	f000 fa7a 	bl	810c198 <_Bfree>
 810bca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810bca6:	2300      	movs	r3, #0
 810bca8:	6013      	str	r3, [r2, #0]
 810bcaa:	27a3      	movs	r7, #163	; 0xa3
 810bcac:	e785      	b.n	810bbba <__gethex+0x12a>
 810bcae:	1e73      	subs	r3, r6, #1
 810bcb0:	9a05      	ldr	r2, [sp, #20]
 810bcb2:	9303      	str	r3, [sp, #12]
 810bcb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810bcb8:	4293      	cmp	r3, r2
 810bcba:	d019      	beq.n	810bcf0 <__gethex+0x260>
 810bcbc:	f1bb 0f20 	cmp.w	fp, #32
 810bcc0:	d107      	bne.n	810bcd2 <__gethex+0x242>
 810bcc2:	9b02      	ldr	r3, [sp, #8]
 810bcc4:	9a00      	ldr	r2, [sp, #0]
 810bcc6:	f843 2b04 	str.w	r2, [r3], #4
 810bcca:	9302      	str	r3, [sp, #8]
 810bccc:	2300      	movs	r3, #0
 810bcce:	9300      	str	r3, [sp, #0]
 810bcd0:	469b      	mov	fp, r3
 810bcd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810bcd6:	f7ff fec5 	bl	810ba64 <__hexdig_fun>
 810bcda:	9b00      	ldr	r3, [sp, #0]
 810bcdc:	f000 000f 	and.w	r0, r0, #15
 810bce0:	fa00 f00b 	lsl.w	r0, r0, fp
 810bce4:	4303      	orrs	r3, r0
 810bce6:	9300      	str	r3, [sp, #0]
 810bce8:	f10b 0b04 	add.w	fp, fp, #4
 810bcec:	9b03      	ldr	r3, [sp, #12]
 810bcee:	e00d      	b.n	810bd0c <__gethex+0x27c>
 810bcf0:	9b03      	ldr	r3, [sp, #12]
 810bcf2:	9a06      	ldr	r2, [sp, #24]
 810bcf4:	4413      	add	r3, r2
 810bcf6:	42bb      	cmp	r3, r7
 810bcf8:	d3e0      	bcc.n	810bcbc <__gethex+0x22c>
 810bcfa:	4618      	mov	r0, r3
 810bcfc:	9901      	ldr	r1, [sp, #4]
 810bcfe:	9307      	str	r3, [sp, #28]
 810bd00:	4652      	mov	r2, sl
 810bd02:	f001 f8a5 	bl	810ce50 <strncmp>
 810bd06:	9b07      	ldr	r3, [sp, #28]
 810bd08:	2800      	cmp	r0, #0
 810bd0a:	d1d7      	bne.n	810bcbc <__gethex+0x22c>
 810bd0c:	461e      	mov	r6, r3
 810bd0e:	e78b      	b.n	810bc28 <__gethex+0x198>
 810bd10:	f04f 0a03 	mov.w	sl, #3
 810bd14:	e7b8      	b.n	810bc88 <__gethex+0x1f8>
 810bd16:	da0a      	bge.n	810bd2e <__gethex+0x29e>
 810bd18:	1a37      	subs	r7, r6, r0
 810bd1a:	4621      	mov	r1, r4
 810bd1c:	ee18 0a10 	vmov	r0, s16
 810bd20:	463a      	mov	r2, r7
 810bd22:	f000 fc55 	bl	810c5d0 <__lshift>
 810bd26:	1bed      	subs	r5, r5, r7
 810bd28:	4604      	mov	r4, r0
 810bd2a:	f100 0914 	add.w	r9, r0, #20
 810bd2e:	f04f 0a00 	mov.w	sl, #0
 810bd32:	e7ae      	b.n	810bc92 <__gethex+0x202>
 810bd34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810bd38:	42a8      	cmp	r0, r5
 810bd3a:	dd72      	ble.n	810be22 <__gethex+0x392>
 810bd3c:	1b45      	subs	r5, r0, r5
 810bd3e:	42ae      	cmp	r6, r5
 810bd40:	dc36      	bgt.n	810bdb0 <__gethex+0x320>
 810bd42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810bd46:	2b02      	cmp	r3, #2
 810bd48:	d02a      	beq.n	810bda0 <__gethex+0x310>
 810bd4a:	2b03      	cmp	r3, #3
 810bd4c:	d02c      	beq.n	810bda8 <__gethex+0x318>
 810bd4e:	2b01      	cmp	r3, #1
 810bd50:	d11c      	bne.n	810bd8c <__gethex+0x2fc>
 810bd52:	42ae      	cmp	r6, r5
 810bd54:	d11a      	bne.n	810bd8c <__gethex+0x2fc>
 810bd56:	2e01      	cmp	r6, #1
 810bd58:	d112      	bne.n	810bd80 <__gethex+0x2f0>
 810bd5a:	9a04      	ldr	r2, [sp, #16]
 810bd5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810bd60:	6013      	str	r3, [r2, #0]
 810bd62:	2301      	movs	r3, #1
 810bd64:	6123      	str	r3, [r4, #16]
 810bd66:	f8c9 3000 	str.w	r3, [r9]
 810bd6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810bd6c:	2762      	movs	r7, #98	; 0x62
 810bd6e:	601c      	str	r4, [r3, #0]
 810bd70:	e723      	b.n	810bbba <__gethex+0x12a>
 810bd72:	bf00      	nop
 810bd74:	0810d8e0 	.word	0x0810d8e0
 810bd78:	0810d868 	.word	0x0810d868
 810bd7c:	0810d879 	.word	0x0810d879
 810bd80:	1e71      	subs	r1, r6, #1
 810bd82:	4620      	mov	r0, r4
 810bd84:	f000 fe68 	bl	810ca58 <__any_on>
 810bd88:	2800      	cmp	r0, #0
 810bd8a:	d1e6      	bne.n	810bd5a <__gethex+0x2ca>
 810bd8c:	ee18 0a10 	vmov	r0, s16
 810bd90:	4621      	mov	r1, r4
 810bd92:	f000 fa01 	bl	810c198 <_Bfree>
 810bd96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810bd98:	2300      	movs	r3, #0
 810bd9a:	6013      	str	r3, [r2, #0]
 810bd9c:	2750      	movs	r7, #80	; 0x50
 810bd9e:	e70c      	b.n	810bbba <__gethex+0x12a>
 810bda0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bda2:	2b00      	cmp	r3, #0
 810bda4:	d1f2      	bne.n	810bd8c <__gethex+0x2fc>
 810bda6:	e7d8      	b.n	810bd5a <__gethex+0x2ca>
 810bda8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bdaa:	2b00      	cmp	r3, #0
 810bdac:	d1d5      	bne.n	810bd5a <__gethex+0x2ca>
 810bdae:	e7ed      	b.n	810bd8c <__gethex+0x2fc>
 810bdb0:	1e6f      	subs	r7, r5, #1
 810bdb2:	f1ba 0f00 	cmp.w	sl, #0
 810bdb6:	d131      	bne.n	810be1c <__gethex+0x38c>
 810bdb8:	b127      	cbz	r7, 810bdc4 <__gethex+0x334>
 810bdba:	4639      	mov	r1, r7
 810bdbc:	4620      	mov	r0, r4
 810bdbe:	f000 fe4b 	bl	810ca58 <__any_on>
 810bdc2:	4682      	mov	sl, r0
 810bdc4:	117b      	asrs	r3, r7, #5
 810bdc6:	2101      	movs	r1, #1
 810bdc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810bdcc:	f007 071f 	and.w	r7, r7, #31
 810bdd0:	fa01 f707 	lsl.w	r7, r1, r7
 810bdd4:	421f      	tst	r7, r3
 810bdd6:	4629      	mov	r1, r5
 810bdd8:	4620      	mov	r0, r4
 810bdda:	bf18      	it	ne
 810bddc:	f04a 0a02 	orrne.w	sl, sl, #2
 810bde0:	1b76      	subs	r6, r6, r5
 810bde2:	f7ff fded 	bl	810b9c0 <rshift>
 810bde6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810bdea:	2702      	movs	r7, #2
 810bdec:	f1ba 0f00 	cmp.w	sl, #0
 810bdf0:	d048      	beq.n	810be84 <__gethex+0x3f4>
 810bdf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810bdf6:	2b02      	cmp	r3, #2
 810bdf8:	d015      	beq.n	810be26 <__gethex+0x396>
 810bdfa:	2b03      	cmp	r3, #3
 810bdfc:	d017      	beq.n	810be2e <__gethex+0x39e>
 810bdfe:	2b01      	cmp	r3, #1
 810be00:	d109      	bne.n	810be16 <__gethex+0x386>
 810be02:	f01a 0f02 	tst.w	sl, #2
 810be06:	d006      	beq.n	810be16 <__gethex+0x386>
 810be08:	f8d9 0000 	ldr.w	r0, [r9]
 810be0c:	ea4a 0a00 	orr.w	sl, sl, r0
 810be10:	f01a 0f01 	tst.w	sl, #1
 810be14:	d10e      	bne.n	810be34 <__gethex+0x3a4>
 810be16:	f047 0710 	orr.w	r7, r7, #16
 810be1a:	e033      	b.n	810be84 <__gethex+0x3f4>
 810be1c:	f04f 0a01 	mov.w	sl, #1
 810be20:	e7d0      	b.n	810bdc4 <__gethex+0x334>
 810be22:	2701      	movs	r7, #1
 810be24:	e7e2      	b.n	810bdec <__gethex+0x35c>
 810be26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810be28:	f1c3 0301 	rsb	r3, r3, #1
 810be2c:	9315      	str	r3, [sp, #84]	; 0x54
 810be2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810be30:	2b00      	cmp	r3, #0
 810be32:	d0f0      	beq.n	810be16 <__gethex+0x386>
 810be34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810be38:	f104 0314 	add.w	r3, r4, #20
 810be3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810be40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810be44:	f04f 0c00 	mov.w	ip, #0
 810be48:	4618      	mov	r0, r3
 810be4a:	f853 2b04 	ldr.w	r2, [r3], #4
 810be4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810be52:	d01c      	beq.n	810be8e <__gethex+0x3fe>
 810be54:	3201      	adds	r2, #1
 810be56:	6002      	str	r2, [r0, #0]
 810be58:	2f02      	cmp	r7, #2
 810be5a:	f104 0314 	add.w	r3, r4, #20
 810be5e:	d13f      	bne.n	810bee0 <__gethex+0x450>
 810be60:	f8d8 2000 	ldr.w	r2, [r8]
 810be64:	3a01      	subs	r2, #1
 810be66:	42b2      	cmp	r2, r6
 810be68:	d10a      	bne.n	810be80 <__gethex+0x3f0>
 810be6a:	1171      	asrs	r1, r6, #5
 810be6c:	2201      	movs	r2, #1
 810be6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810be72:	f006 061f 	and.w	r6, r6, #31
 810be76:	fa02 f606 	lsl.w	r6, r2, r6
 810be7a:	421e      	tst	r6, r3
 810be7c:	bf18      	it	ne
 810be7e:	4617      	movne	r7, r2
 810be80:	f047 0720 	orr.w	r7, r7, #32
 810be84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810be86:	601c      	str	r4, [r3, #0]
 810be88:	9b04      	ldr	r3, [sp, #16]
 810be8a:	601d      	str	r5, [r3, #0]
 810be8c:	e695      	b.n	810bbba <__gethex+0x12a>
 810be8e:	4299      	cmp	r1, r3
 810be90:	f843 cc04 	str.w	ip, [r3, #-4]
 810be94:	d8d8      	bhi.n	810be48 <__gethex+0x3b8>
 810be96:	68a3      	ldr	r3, [r4, #8]
 810be98:	459b      	cmp	fp, r3
 810be9a:	db19      	blt.n	810bed0 <__gethex+0x440>
 810be9c:	6861      	ldr	r1, [r4, #4]
 810be9e:	ee18 0a10 	vmov	r0, s16
 810bea2:	3101      	adds	r1, #1
 810bea4:	f000 f938 	bl	810c118 <_Balloc>
 810bea8:	4681      	mov	r9, r0
 810beaa:	b918      	cbnz	r0, 810beb4 <__gethex+0x424>
 810beac:	4b1a      	ldr	r3, [pc, #104]	; (810bf18 <__gethex+0x488>)
 810beae:	4602      	mov	r2, r0
 810beb0:	2184      	movs	r1, #132	; 0x84
 810beb2:	e6a8      	b.n	810bc06 <__gethex+0x176>
 810beb4:	6922      	ldr	r2, [r4, #16]
 810beb6:	3202      	adds	r2, #2
 810beb8:	f104 010c 	add.w	r1, r4, #12
 810bebc:	0092      	lsls	r2, r2, #2
 810bebe:	300c      	adds	r0, #12
 810bec0:	f7fc ff69 	bl	8108d96 <memcpy>
 810bec4:	4621      	mov	r1, r4
 810bec6:	ee18 0a10 	vmov	r0, s16
 810beca:	f000 f965 	bl	810c198 <_Bfree>
 810bece:	464c      	mov	r4, r9
 810bed0:	6923      	ldr	r3, [r4, #16]
 810bed2:	1c5a      	adds	r2, r3, #1
 810bed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810bed8:	6122      	str	r2, [r4, #16]
 810beda:	2201      	movs	r2, #1
 810bedc:	615a      	str	r2, [r3, #20]
 810bede:	e7bb      	b.n	810be58 <__gethex+0x3c8>
 810bee0:	6922      	ldr	r2, [r4, #16]
 810bee2:	455a      	cmp	r2, fp
 810bee4:	dd0b      	ble.n	810befe <__gethex+0x46e>
 810bee6:	2101      	movs	r1, #1
 810bee8:	4620      	mov	r0, r4
 810beea:	f7ff fd69 	bl	810b9c0 <rshift>
 810beee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810bef2:	3501      	adds	r5, #1
 810bef4:	42ab      	cmp	r3, r5
 810bef6:	f6ff aed0 	blt.w	810bc9a <__gethex+0x20a>
 810befa:	2701      	movs	r7, #1
 810befc:	e7c0      	b.n	810be80 <__gethex+0x3f0>
 810befe:	f016 061f 	ands.w	r6, r6, #31
 810bf02:	d0fa      	beq.n	810befa <__gethex+0x46a>
 810bf04:	4453      	add	r3, sl
 810bf06:	f1c6 0620 	rsb	r6, r6, #32
 810bf0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810bf0e:	f000 f9f5 	bl	810c2fc <__hi0bits>
 810bf12:	42b0      	cmp	r0, r6
 810bf14:	dbe7      	blt.n	810bee6 <__gethex+0x456>
 810bf16:	e7f0      	b.n	810befa <__gethex+0x46a>
 810bf18:	0810d868 	.word	0x0810d868

0810bf1c <L_shift>:
 810bf1c:	f1c2 0208 	rsb	r2, r2, #8
 810bf20:	0092      	lsls	r2, r2, #2
 810bf22:	b570      	push	{r4, r5, r6, lr}
 810bf24:	f1c2 0620 	rsb	r6, r2, #32
 810bf28:	6843      	ldr	r3, [r0, #4]
 810bf2a:	6804      	ldr	r4, [r0, #0]
 810bf2c:	fa03 f506 	lsl.w	r5, r3, r6
 810bf30:	432c      	orrs	r4, r5
 810bf32:	40d3      	lsrs	r3, r2
 810bf34:	6004      	str	r4, [r0, #0]
 810bf36:	f840 3f04 	str.w	r3, [r0, #4]!
 810bf3a:	4288      	cmp	r0, r1
 810bf3c:	d3f4      	bcc.n	810bf28 <L_shift+0xc>
 810bf3e:	bd70      	pop	{r4, r5, r6, pc}

0810bf40 <__match>:
 810bf40:	b530      	push	{r4, r5, lr}
 810bf42:	6803      	ldr	r3, [r0, #0]
 810bf44:	3301      	adds	r3, #1
 810bf46:	f811 4b01 	ldrb.w	r4, [r1], #1
 810bf4a:	b914      	cbnz	r4, 810bf52 <__match+0x12>
 810bf4c:	6003      	str	r3, [r0, #0]
 810bf4e:	2001      	movs	r0, #1
 810bf50:	bd30      	pop	{r4, r5, pc}
 810bf52:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bf56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810bf5a:	2d19      	cmp	r5, #25
 810bf5c:	bf98      	it	ls
 810bf5e:	3220      	addls	r2, #32
 810bf60:	42a2      	cmp	r2, r4
 810bf62:	d0f0      	beq.n	810bf46 <__match+0x6>
 810bf64:	2000      	movs	r0, #0
 810bf66:	e7f3      	b.n	810bf50 <__match+0x10>

0810bf68 <__hexnan>:
 810bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf6c:	680b      	ldr	r3, [r1, #0]
 810bf6e:	115e      	asrs	r6, r3, #5
 810bf70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810bf74:	f013 031f 	ands.w	r3, r3, #31
 810bf78:	b087      	sub	sp, #28
 810bf7a:	bf18      	it	ne
 810bf7c:	3604      	addne	r6, #4
 810bf7e:	2500      	movs	r5, #0
 810bf80:	1f37      	subs	r7, r6, #4
 810bf82:	4690      	mov	r8, r2
 810bf84:	6802      	ldr	r2, [r0, #0]
 810bf86:	9301      	str	r3, [sp, #4]
 810bf88:	4682      	mov	sl, r0
 810bf8a:	f846 5c04 	str.w	r5, [r6, #-4]
 810bf8e:	46b9      	mov	r9, r7
 810bf90:	463c      	mov	r4, r7
 810bf92:	9502      	str	r5, [sp, #8]
 810bf94:	46ab      	mov	fp, r5
 810bf96:	7851      	ldrb	r1, [r2, #1]
 810bf98:	1c53      	adds	r3, r2, #1
 810bf9a:	9303      	str	r3, [sp, #12]
 810bf9c:	b341      	cbz	r1, 810bff0 <__hexnan+0x88>
 810bf9e:	4608      	mov	r0, r1
 810bfa0:	9205      	str	r2, [sp, #20]
 810bfa2:	9104      	str	r1, [sp, #16]
 810bfa4:	f7ff fd5e 	bl	810ba64 <__hexdig_fun>
 810bfa8:	2800      	cmp	r0, #0
 810bfaa:	d14f      	bne.n	810c04c <__hexnan+0xe4>
 810bfac:	9904      	ldr	r1, [sp, #16]
 810bfae:	9a05      	ldr	r2, [sp, #20]
 810bfb0:	2920      	cmp	r1, #32
 810bfb2:	d818      	bhi.n	810bfe6 <__hexnan+0x7e>
 810bfb4:	9b02      	ldr	r3, [sp, #8]
 810bfb6:	459b      	cmp	fp, r3
 810bfb8:	dd13      	ble.n	810bfe2 <__hexnan+0x7a>
 810bfba:	454c      	cmp	r4, r9
 810bfbc:	d206      	bcs.n	810bfcc <__hexnan+0x64>
 810bfbe:	2d07      	cmp	r5, #7
 810bfc0:	dc04      	bgt.n	810bfcc <__hexnan+0x64>
 810bfc2:	462a      	mov	r2, r5
 810bfc4:	4649      	mov	r1, r9
 810bfc6:	4620      	mov	r0, r4
 810bfc8:	f7ff ffa8 	bl	810bf1c <L_shift>
 810bfcc:	4544      	cmp	r4, r8
 810bfce:	d950      	bls.n	810c072 <__hexnan+0x10a>
 810bfd0:	2300      	movs	r3, #0
 810bfd2:	f1a4 0904 	sub.w	r9, r4, #4
 810bfd6:	f844 3c04 	str.w	r3, [r4, #-4]
 810bfda:	f8cd b008 	str.w	fp, [sp, #8]
 810bfde:	464c      	mov	r4, r9
 810bfe0:	461d      	mov	r5, r3
 810bfe2:	9a03      	ldr	r2, [sp, #12]
 810bfe4:	e7d7      	b.n	810bf96 <__hexnan+0x2e>
 810bfe6:	2929      	cmp	r1, #41	; 0x29
 810bfe8:	d156      	bne.n	810c098 <__hexnan+0x130>
 810bfea:	3202      	adds	r2, #2
 810bfec:	f8ca 2000 	str.w	r2, [sl]
 810bff0:	f1bb 0f00 	cmp.w	fp, #0
 810bff4:	d050      	beq.n	810c098 <__hexnan+0x130>
 810bff6:	454c      	cmp	r4, r9
 810bff8:	d206      	bcs.n	810c008 <__hexnan+0xa0>
 810bffa:	2d07      	cmp	r5, #7
 810bffc:	dc04      	bgt.n	810c008 <__hexnan+0xa0>
 810bffe:	462a      	mov	r2, r5
 810c000:	4649      	mov	r1, r9
 810c002:	4620      	mov	r0, r4
 810c004:	f7ff ff8a 	bl	810bf1c <L_shift>
 810c008:	4544      	cmp	r4, r8
 810c00a:	d934      	bls.n	810c076 <__hexnan+0x10e>
 810c00c:	f1a8 0204 	sub.w	r2, r8, #4
 810c010:	4623      	mov	r3, r4
 810c012:	f853 1b04 	ldr.w	r1, [r3], #4
 810c016:	f842 1f04 	str.w	r1, [r2, #4]!
 810c01a:	429f      	cmp	r7, r3
 810c01c:	d2f9      	bcs.n	810c012 <__hexnan+0xaa>
 810c01e:	1b3b      	subs	r3, r7, r4
 810c020:	f023 0303 	bic.w	r3, r3, #3
 810c024:	3304      	adds	r3, #4
 810c026:	3401      	adds	r4, #1
 810c028:	3e03      	subs	r6, #3
 810c02a:	42b4      	cmp	r4, r6
 810c02c:	bf88      	it	hi
 810c02e:	2304      	movhi	r3, #4
 810c030:	4443      	add	r3, r8
 810c032:	2200      	movs	r2, #0
 810c034:	f843 2b04 	str.w	r2, [r3], #4
 810c038:	429f      	cmp	r7, r3
 810c03a:	d2fb      	bcs.n	810c034 <__hexnan+0xcc>
 810c03c:	683b      	ldr	r3, [r7, #0]
 810c03e:	b91b      	cbnz	r3, 810c048 <__hexnan+0xe0>
 810c040:	4547      	cmp	r7, r8
 810c042:	d127      	bne.n	810c094 <__hexnan+0x12c>
 810c044:	2301      	movs	r3, #1
 810c046:	603b      	str	r3, [r7, #0]
 810c048:	2005      	movs	r0, #5
 810c04a:	e026      	b.n	810c09a <__hexnan+0x132>
 810c04c:	3501      	adds	r5, #1
 810c04e:	2d08      	cmp	r5, #8
 810c050:	f10b 0b01 	add.w	fp, fp, #1
 810c054:	dd06      	ble.n	810c064 <__hexnan+0xfc>
 810c056:	4544      	cmp	r4, r8
 810c058:	d9c3      	bls.n	810bfe2 <__hexnan+0x7a>
 810c05a:	2300      	movs	r3, #0
 810c05c:	f844 3c04 	str.w	r3, [r4, #-4]
 810c060:	2501      	movs	r5, #1
 810c062:	3c04      	subs	r4, #4
 810c064:	6822      	ldr	r2, [r4, #0]
 810c066:	f000 000f 	and.w	r0, r0, #15
 810c06a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810c06e:	6022      	str	r2, [r4, #0]
 810c070:	e7b7      	b.n	810bfe2 <__hexnan+0x7a>
 810c072:	2508      	movs	r5, #8
 810c074:	e7b5      	b.n	810bfe2 <__hexnan+0x7a>
 810c076:	9b01      	ldr	r3, [sp, #4]
 810c078:	2b00      	cmp	r3, #0
 810c07a:	d0df      	beq.n	810c03c <__hexnan+0xd4>
 810c07c:	f04f 32ff 	mov.w	r2, #4294967295
 810c080:	f1c3 0320 	rsb	r3, r3, #32
 810c084:	fa22 f303 	lsr.w	r3, r2, r3
 810c088:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c08c:	401a      	ands	r2, r3
 810c08e:	f846 2c04 	str.w	r2, [r6, #-4]
 810c092:	e7d3      	b.n	810c03c <__hexnan+0xd4>
 810c094:	3f04      	subs	r7, #4
 810c096:	e7d1      	b.n	810c03c <__hexnan+0xd4>
 810c098:	2004      	movs	r0, #4
 810c09a:	b007      	add	sp, #28
 810c09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c0a0 <_localeconv_r>:
 810c0a0:	4800      	ldr	r0, [pc, #0]	; (810c0a4 <_localeconv_r+0x4>)
 810c0a2:	4770      	bx	lr
 810c0a4:	10000184 	.word	0x10000184

0810c0a8 <_lseek_r>:
 810c0a8:	b538      	push	{r3, r4, r5, lr}
 810c0aa:	4d07      	ldr	r5, [pc, #28]	; (810c0c8 <_lseek_r+0x20>)
 810c0ac:	4604      	mov	r4, r0
 810c0ae:	4608      	mov	r0, r1
 810c0b0:	4611      	mov	r1, r2
 810c0b2:	2200      	movs	r2, #0
 810c0b4:	602a      	str	r2, [r5, #0]
 810c0b6:	461a      	mov	r2, r3
 810c0b8:	f7f5 fd6c 	bl	8101b94 <_lseek>
 810c0bc:	1c43      	adds	r3, r0, #1
 810c0be:	d102      	bne.n	810c0c6 <_lseek_r+0x1e>
 810c0c0:	682b      	ldr	r3, [r5, #0]
 810c0c2:	b103      	cbz	r3, 810c0c6 <_lseek_r+0x1e>
 810c0c4:	6023      	str	r3, [r4, #0]
 810c0c6:	bd38      	pop	{r3, r4, r5, pc}
 810c0c8:	10004d98 	.word	0x10004d98

0810c0cc <malloc>:
 810c0cc:	4b02      	ldr	r3, [pc, #8]	; (810c0d8 <malloc+0xc>)
 810c0ce:	4601      	mov	r1, r0
 810c0d0:	6818      	ldr	r0, [r3, #0]
 810c0d2:	f7fc be97 	b.w	8108e04 <_malloc_r>
 810c0d6:	bf00      	nop
 810c0d8:	1000002c 	.word	0x1000002c

0810c0dc <__ascii_mbtowc>:
 810c0dc:	b082      	sub	sp, #8
 810c0de:	b901      	cbnz	r1, 810c0e2 <__ascii_mbtowc+0x6>
 810c0e0:	a901      	add	r1, sp, #4
 810c0e2:	b142      	cbz	r2, 810c0f6 <__ascii_mbtowc+0x1a>
 810c0e4:	b14b      	cbz	r3, 810c0fa <__ascii_mbtowc+0x1e>
 810c0e6:	7813      	ldrb	r3, [r2, #0]
 810c0e8:	600b      	str	r3, [r1, #0]
 810c0ea:	7812      	ldrb	r2, [r2, #0]
 810c0ec:	1e10      	subs	r0, r2, #0
 810c0ee:	bf18      	it	ne
 810c0f0:	2001      	movne	r0, #1
 810c0f2:	b002      	add	sp, #8
 810c0f4:	4770      	bx	lr
 810c0f6:	4610      	mov	r0, r2
 810c0f8:	e7fb      	b.n	810c0f2 <__ascii_mbtowc+0x16>
 810c0fa:	f06f 0001 	mvn.w	r0, #1
 810c0fe:	e7f8      	b.n	810c0f2 <__ascii_mbtowc+0x16>

0810c100 <__malloc_lock>:
 810c100:	4801      	ldr	r0, [pc, #4]	; (810c108 <__malloc_lock+0x8>)
 810c102:	f7fc be46 	b.w	8108d92 <__retarget_lock_acquire_recursive>
 810c106:	bf00      	nop
 810c108:	10004d8c 	.word	0x10004d8c

0810c10c <__malloc_unlock>:
 810c10c:	4801      	ldr	r0, [pc, #4]	; (810c114 <__malloc_unlock+0x8>)
 810c10e:	f7fc be41 	b.w	8108d94 <__retarget_lock_release_recursive>
 810c112:	bf00      	nop
 810c114:	10004d8c 	.word	0x10004d8c

0810c118 <_Balloc>:
 810c118:	b570      	push	{r4, r5, r6, lr}
 810c11a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c11c:	4604      	mov	r4, r0
 810c11e:	460d      	mov	r5, r1
 810c120:	b976      	cbnz	r6, 810c140 <_Balloc+0x28>
 810c122:	2010      	movs	r0, #16
 810c124:	f7ff ffd2 	bl	810c0cc <malloc>
 810c128:	4602      	mov	r2, r0
 810c12a:	6260      	str	r0, [r4, #36]	; 0x24
 810c12c:	b920      	cbnz	r0, 810c138 <_Balloc+0x20>
 810c12e:	4b18      	ldr	r3, [pc, #96]	; (810c190 <_Balloc+0x78>)
 810c130:	4818      	ldr	r0, [pc, #96]	; (810c194 <_Balloc+0x7c>)
 810c132:	2166      	movs	r1, #102	; 0x66
 810c134:	f000 feae 	bl	810ce94 <__assert_func>
 810c138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c13c:	6006      	str	r6, [r0, #0]
 810c13e:	60c6      	str	r6, [r0, #12]
 810c140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810c142:	68f3      	ldr	r3, [r6, #12]
 810c144:	b183      	cbz	r3, 810c168 <_Balloc+0x50>
 810c146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c148:	68db      	ldr	r3, [r3, #12]
 810c14a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c14e:	b9b8      	cbnz	r0, 810c180 <_Balloc+0x68>
 810c150:	2101      	movs	r1, #1
 810c152:	fa01 f605 	lsl.w	r6, r1, r5
 810c156:	1d72      	adds	r2, r6, #5
 810c158:	0092      	lsls	r2, r2, #2
 810c15a:	4620      	mov	r0, r4
 810c15c:	f000 fc9d 	bl	810ca9a <_calloc_r>
 810c160:	b160      	cbz	r0, 810c17c <_Balloc+0x64>
 810c162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c166:	e00e      	b.n	810c186 <_Balloc+0x6e>
 810c168:	2221      	movs	r2, #33	; 0x21
 810c16a:	2104      	movs	r1, #4
 810c16c:	4620      	mov	r0, r4
 810c16e:	f000 fc94 	bl	810ca9a <_calloc_r>
 810c172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c174:	60f0      	str	r0, [r6, #12]
 810c176:	68db      	ldr	r3, [r3, #12]
 810c178:	2b00      	cmp	r3, #0
 810c17a:	d1e4      	bne.n	810c146 <_Balloc+0x2e>
 810c17c:	2000      	movs	r0, #0
 810c17e:	bd70      	pop	{r4, r5, r6, pc}
 810c180:	6802      	ldr	r2, [r0, #0]
 810c182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c186:	2300      	movs	r3, #0
 810c188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c18c:	e7f7      	b.n	810c17e <_Balloc+0x66>
 810c18e:	bf00      	nop
 810c190:	0810d7f6 	.word	0x0810d7f6
 810c194:	0810d8f4 	.word	0x0810d8f4

0810c198 <_Bfree>:
 810c198:	b570      	push	{r4, r5, r6, lr}
 810c19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c19c:	4605      	mov	r5, r0
 810c19e:	460c      	mov	r4, r1
 810c1a0:	b976      	cbnz	r6, 810c1c0 <_Bfree+0x28>
 810c1a2:	2010      	movs	r0, #16
 810c1a4:	f7ff ff92 	bl	810c0cc <malloc>
 810c1a8:	4602      	mov	r2, r0
 810c1aa:	6268      	str	r0, [r5, #36]	; 0x24
 810c1ac:	b920      	cbnz	r0, 810c1b8 <_Bfree+0x20>
 810c1ae:	4b09      	ldr	r3, [pc, #36]	; (810c1d4 <_Bfree+0x3c>)
 810c1b0:	4809      	ldr	r0, [pc, #36]	; (810c1d8 <_Bfree+0x40>)
 810c1b2:	218a      	movs	r1, #138	; 0x8a
 810c1b4:	f000 fe6e 	bl	810ce94 <__assert_func>
 810c1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c1bc:	6006      	str	r6, [r0, #0]
 810c1be:	60c6      	str	r6, [r0, #12]
 810c1c0:	b13c      	cbz	r4, 810c1d2 <_Bfree+0x3a>
 810c1c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810c1c4:	6862      	ldr	r2, [r4, #4]
 810c1c6:	68db      	ldr	r3, [r3, #12]
 810c1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c1cc:	6021      	str	r1, [r4, #0]
 810c1ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c1d2:	bd70      	pop	{r4, r5, r6, pc}
 810c1d4:	0810d7f6 	.word	0x0810d7f6
 810c1d8:	0810d8f4 	.word	0x0810d8f4

0810c1dc <__multadd>:
 810c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c1e0:	690d      	ldr	r5, [r1, #16]
 810c1e2:	4607      	mov	r7, r0
 810c1e4:	460c      	mov	r4, r1
 810c1e6:	461e      	mov	r6, r3
 810c1e8:	f101 0c14 	add.w	ip, r1, #20
 810c1ec:	2000      	movs	r0, #0
 810c1ee:	f8dc 3000 	ldr.w	r3, [ip]
 810c1f2:	b299      	uxth	r1, r3
 810c1f4:	fb02 6101 	mla	r1, r2, r1, r6
 810c1f8:	0c1e      	lsrs	r6, r3, #16
 810c1fa:	0c0b      	lsrs	r3, r1, #16
 810c1fc:	fb02 3306 	mla	r3, r2, r6, r3
 810c200:	b289      	uxth	r1, r1
 810c202:	3001      	adds	r0, #1
 810c204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c208:	4285      	cmp	r5, r0
 810c20a:	f84c 1b04 	str.w	r1, [ip], #4
 810c20e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c212:	dcec      	bgt.n	810c1ee <__multadd+0x12>
 810c214:	b30e      	cbz	r6, 810c25a <__multadd+0x7e>
 810c216:	68a3      	ldr	r3, [r4, #8]
 810c218:	42ab      	cmp	r3, r5
 810c21a:	dc19      	bgt.n	810c250 <__multadd+0x74>
 810c21c:	6861      	ldr	r1, [r4, #4]
 810c21e:	4638      	mov	r0, r7
 810c220:	3101      	adds	r1, #1
 810c222:	f7ff ff79 	bl	810c118 <_Balloc>
 810c226:	4680      	mov	r8, r0
 810c228:	b928      	cbnz	r0, 810c236 <__multadd+0x5a>
 810c22a:	4602      	mov	r2, r0
 810c22c:	4b0c      	ldr	r3, [pc, #48]	; (810c260 <__multadd+0x84>)
 810c22e:	480d      	ldr	r0, [pc, #52]	; (810c264 <__multadd+0x88>)
 810c230:	21b5      	movs	r1, #181	; 0xb5
 810c232:	f000 fe2f 	bl	810ce94 <__assert_func>
 810c236:	6922      	ldr	r2, [r4, #16]
 810c238:	3202      	adds	r2, #2
 810c23a:	f104 010c 	add.w	r1, r4, #12
 810c23e:	0092      	lsls	r2, r2, #2
 810c240:	300c      	adds	r0, #12
 810c242:	f7fc fda8 	bl	8108d96 <memcpy>
 810c246:	4621      	mov	r1, r4
 810c248:	4638      	mov	r0, r7
 810c24a:	f7ff ffa5 	bl	810c198 <_Bfree>
 810c24e:	4644      	mov	r4, r8
 810c250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c254:	3501      	adds	r5, #1
 810c256:	615e      	str	r6, [r3, #20]
 810c258:	6125      	str	r5, [r4, #16]
 810c25a:	4620      	mov	r0, r4
 810c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c260:	0810d868 	.word	0x0810d868
 810c264:	0810d8f4 	.word	0x0810d8f4

0810c268 <__s2b>:
 810c268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c26c:	460c      	mov	r4, r1
 810c26e:	4615      	mov	r5, r2
 810c270:	461f      	mov	r7, r3
 810c272:	2209      	movs	r2, #9
 810c274:	3308      	adds	r3, #8
 810c276:	4606      	mov	r6, r0
 810c278:	fb93 f3f2 	sdiv	r3, r3, r2
 810c27c:	2100      	movs	r1, #0
 810c27e:	2201      	movs	r2, #1
 810c280:	429a      	cmp	r2, r3
 810c282:	db09      	blt.n	810c298 <__s2b+0x30>
 810c284:	4630      	mov	r0, r6
 810c286:	f7ff ff47 	bl	810c118 <_Balloc>
 810c28a:	b940      	cbnz	r0, 810c29e <__s2b+0x36>
 810c28c:	4602      	mov	r2, r0
 810c28e:	4b19      	ldr	r3, [pc, #100]	; (810c2f4 <__s2b+0x8c>)
 810c290:	4819      	ldr	r0, [pc, #100]	; (810c2f8 <__s2b+0x90>)
 810c292:	21ce      	movs	r1, #206	; 0xce
 810c294:	f000 fdfe 	bl	810ce94 <__assert_func>
 810c298:	0052      	lsls	r2, r2, #1
 810c29a:	3101      	adds	r1, #1
 810c29c:	e7f0      	b.n	810c280 <__s2b+0x18>
 810c29e:	9b08      	ldr	r3, [sp, #32]
 810c2a0:	6143      	str	r3, [r0, #20]
 810c2a2:	2d09      	cmp	r5, #9
 810c2a4:	f04f 0301 	mov.w	r3, #1
 810c2a8:	6103      	str	r3, [r0, #16]
 810c2aa:	dd16      	ble.n	810c2da <__s2b+0x72>
 810c2ac:	f104 0909 	add.w	r9, r4, #9
 810c2b0:	46c8      	mov	r8, r9
 810c2b2:	442c      	add	r4, r5
 810c2b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c2b8:	4601      	mov	r1, r0
 810c2ba:	3b30      	subs	r3, #48	; 0x30
 810c2bc:	220a      	movs	r2, #10
 810c2be:	4630      	mov	r0, r6
 810c2c0:	f7ff ff8c 	bl	810c1dc <__multadd>
 810c2c4:	45a0      	cmp	r8, r4
 810c2c6:	d1f5      	bne.n	810c2b4 <__s2b+0x4c>
 810c2c8:	f1a5 0408 	sub.w	r4, r5, #8
 810c2cc:	444c      	add	r4, r9
 810c2ce:	1b2d      	subs	r5, r5, r4
 810c2d0:	1963      	adds	r3, r4, r5
 810c2d2:	42bb      	cmp	r3, r7
 810c2d4:	db04      	blt.n	810c2e0 <__s2b+0x78>
 810c2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c2da:	340a      	adds	r4, #10
 810c2dc:	2509      	movs	r5, #9
 810c2de:	e7f6      	b.n	810c2ce <__s2b+0x66>
 810c2e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c2e4:	4601      	mov	r1, r0
 810c2e6:	3b30      	subs	r3, #48	; 0x30
 810c2e8:	220a      	movs	r2, #10
 810c2ea:	4630      	mov	r0, r6
 810c2ec:	f7ff ff76 	bl	810c1dc <__multadd>
 810c2f0:	e7ee      	b.n	810c2d0 <__s2b+0x68>
 810c2f2:	bf00      	nop
 810c2f4:	0810d868 	.word	0x0810d868
 810c2f8:	0810d8f4 	.word	0x0810d8f4

0810c2fc <__hi0bits>:
 810c2fc:	0c03      	lsrs	r3, r0, #16
 810c2fe:	041b      	lsls	r3, r3, #16
 810c300:	b9d3      	cbnz	r3, 810c338 <__hi0bits+0x3c>
 810c302:	0400      	lsls	r0, r0, #16
 810c304:	2310      	movs	r3, #16
 810c306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c30a:	bf04      	itt	eq
 810c30c:	0200      	lsleq	r0, r0, #8
 810c30e:	3308      	addeq	r3, #8
 810c310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c314:	bf04      	itt	eq
 810c316:	0100      	lsleq	r0, r0, #4
 810c318:	3304      	addeq	r3, #4
 810c31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c31e:	bf04      	itt	eq
 810c320:	0080      	lsleq	r0, r0, #2
 810c322:	3302      	addeq	r3, #2
 810c324:	2800      	cmp	r0, #0
 810c326:	db05      	blt.n	810c334 <__hi0bits+0x38>
 810c328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c32c:	f103 0301 	add.w	r3, r3, #1
 810c330:	bf08      	it	eq
 810c332:	2320      	moveq	r3, #32
 810c334:	4618      	mov	r0, r3
 810c336:	4770      	bx	lr
 810c338:	2300      	movs	r3, #0
 810c33a:	e7e4      	b.n	810c306 <__hi0bits+0xa>

0810c33c <__lo0bits>:
 810c33c:	6803      	ldr	r3, [r0, #0]
 810c33e:	f013 0207 	ands.w	r2, r3, #7
 810c342:	4601      	mov	r1, r0
 810c344:	d00b      	beq.n	810c35e <__lo0bits+0x22>
 810c346:	07da      	lsls	r2, r3, #31
 810c348:	d423      	bmi.n	810c392 <__lo0bits+0x56>
 810c34a:	0798      	lsls	r0, r3, #30
 810c34c:	bf49      	itett	mi
 810c34e:	085b      	lsrmi	r3, r3, #1
 810c350:	089b      	lsrpl	r3, r3, #2
 810c352:	2001      	movmi	r0, #1
 810c354:	600b      	strmi	r3, [r1, #0]
 810c356:	bf5c      	itt	pl
 810c358:	600b      	strpl	r3, [r1, #0]
 810c35a:	2002      	movpl	r0, #2
 810c35c:	4770      	bx	lr
 810c35e:	b298      	uxth	r0, r3
 810c360:	b9a8      	cbnz	r0, 810c38e <__lo0bits+0x52>
 810c362:	0c1b      	lsrs	r3, r3, #16
 810c364:	2010      	movs	r0, #16
 810c366:	b2da      	uxtb	r2, r3
 810c368:	b90a      	cbnz	r2, 810c36e <__lo0bits+0x32>
 810c36a:	3008      	adds	r0, #8
 810c36c:	0a1b      	lsrs	r3, r3, #8
 810c36e:	071a      	lsls	r2, r3, #28
 810c370:	bf04      	itt	eq
 810c372:	091b      	lsreq	r3, r3, #4
 810c374:	3004      	addeq	r0, #4
 810c376:	079a      	lsls	r2, r3, #30
 810c378:	bf04      	itt	eq
 810c37a:	089b      	lsreq	r3, r3, #2
 810c37c:	3002      	addeq	r0, #2
 810c37e:	07da      	lsls	r2, r3, #31
 810c380:	d403      	bmi.n	810c38a <__lo0bits+0x4e>
 810c382:	085b      	lsrs	r3, r3, #1
 810c384:	f100 0001 	add.w	r0, r0, #1
 810c388:	d005      	beq.n	810c396 <__lo0bits+0x5a>
 810c38a:	600b      	str	r3, [r1, #0]
 810c38c:	4770      	bx	lr
 810c38e:	4610      	mov	r0, r2
 810c390:	e7e9      	b.n	810c366 <__lo0bits+0x2a>
 810c392:	2000      	movs	r0, #0
 810c394:	4770      	bx	lr
 810c396:	2020      	movs	r0, #32
 810c398:	4770      	bx	lr
	...

0810c39c <__i2b>:
 810c39c:	b510      	push	{r4, lr}
 810c39e:	460c      	mov	r4, r1
 810c3a0:	2101      	movs	r1, #1
 810c3a2:	f7ff feb9 	bl	810c118 <_Balloc>
 810c3a6:	4602      	mov	r2, r0
 810c3a8:	b928      	cbnz	r0, 810c3b6 <__i2b+0x1a>
 810c3aa:	4b05      	ldr	r3, [pc, #20]	; (810c3c0 <__i2b+0x24>)
 810c3ac:	4805      	ldr	r0, [pc, #20]	; (810c3c4 <__i2b+0x28>)
 810c3ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810c3b2:	f000 fd6f 	bl	810ce94 <__assert_func>
 810c3b6:	2301      	movs	r3, #1
 810c3b8:	6144      	str	r4, [r0, #20]
 810c3ba:	6103      	str	r3, [r0, #16]
 810c3bc:	bd10      	pop	{r4, pc}
 810c3be:	bf00      	nop
 810c3c0:	0810d868 	.word	0x0810d868
 810c3c4:	0810d8f4 	.word	0x0810d8f4

0810c3c8 <__multiply>:
 810c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c3cc:	4691      	mov	r9, r2
 810c3ce:	690a      	ldr	r2, [r1, #16]
 810c3d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c3d4:	429a      	cmp	r2, r3
 810c3d6:	bfb8      	it	lt
 810c3d8:	460b      	movlt	r3, r1
 810c3da:	460c      	mov	r4, r1
 810c3dc:	bfbc      	itt	lt
 810c3de:	464c      	movlt	r4, r9
 810c3e0:	4699      	movlt	r9, r3
 810c3e2:	6927      	ldr	r7, [r4, #16]
 810c3e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c3e8:	68a3      	ldr	r3, [r4, #8]
 810c3ea:	6861      	ldr	r1, [r4, #4]
 810c3ec:	eb07 060a 	add.w	r6, r7, sl
 810c3f0:	42b3      	cmp	r3, r6
 810c3f2:	b085      	sub	sp, #20
 810c3f4:	bfb8      	it	lt
 810c3f6:	3101      	addlt	r1, #1
 810c3f8:	f7ff fe8e 	bl	810c118 <_Balloc>
 810c3fc:	b930      	cbnz	r0, 810c40c <__multiply+0x44>
 810c3fe:	4602      	mov	r2, r0
 810c400:	4b44      	ldr	r3, [pc, #272]	; (810c514 <__multiply+0x14c>)
 810c402:	4845      	ldr	r0, [pc, #276]	; (810c518 <__multiply+0x150>)
 810c404:	f240 115d 	movw	r1, #349	; 0x15d
 810c408:	f000 fd44 	bl	810ce94 <__assert_func>
 810c40c:	f100 0514 	add.w	r5, r0, #20
 810c410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c414:	462b      	mov	r3, r5
 810c416:	2200      	movs	r2, #0
 810c418:	4543      	cmp	r3, r8
 810c41a:	d321      	bcc.n	810c460 <__multiply+0x98>
 810c41c:	f104 0314 	add.w	r3, r4, #20
 810c420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c424:	f109 0314 	add.w	r3, r9, #20
 810c428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c42c:	9202      	str	r2, [sp, #8]
 810c42e:	1b3a      	subs	r2, r7, r4
 810c430:	3a15      	subs	r2, #21
 810c432:	f022 0203 	bic.w	r2, r2, #3
 810c436:	3204      	adds	r2, #4
 810c438:	f104 0115 	add.w	r1, r4, #21
 810c43c:	428f      	cmp	r7, r1
 810c43e:	bf38      	it	cc
 810c440:	2204      	movcc	r2, #4
 810c442:	9201      	str	r2, [sp, #4]
 810c444:	9a02      	ldr	r2, [sp, #8]
 810c446:	9303      	str	r3, [sp, #12]
 810c448:	429a      	cmp	r2, r3
 810c44a:	d80c      	bhi.n	810c466 <__multiply+0x9e>
 810c44c:	2e00      	cmp	r6, #0
 810c44e:	dd03      	ble.n	810c458 <__multiply+0x90>
 810c450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c454:	2b00      	cmp	r3, #0
 810c456:	d05a      	beq.n	810c50e <__multiply+0x146>
 810c458:	6106      	str	r6, [r0, #16]
 810c45a:	b005      	add	sp, #20
 810c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c460:	f843 2b04 	str.w	r2, [r3], #4
 810c464:	e7d8      	b.n	810c418 <__multiply+0x50>
 810c466:	f8b3 a000 	ldrh.w	sl, [r3]
 810c46a:	f1ba 0f00 	cmp.w	sl, #0
 810c46e:	d024      	beq.n	810c4ba <__multiply+0xf2>
 810c470:	f104 0e14 	add.w	lr, r4, #20
 810c474:	46a9      	mov	r9, r5
 810c476:	f04f 0c00 	mov.w	ip, #0
 810c47a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810c47e:	f8d9 1000 	ldr.w	r1, [r9]
 810c482:	fa1f fb82 	uxth.w	fp, r2
 810c486:	b289      	uxth	r1, r1
 810c488:	fb0a 110b 	mla	r1, sl, fp, r1
 810c48c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810c490:	f8d9 2000 	ldr.w	r2, [r9]
 810c494:	4461      	add	r1, ip
 810c496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c49a:	fb0a c20b 	mla	r2, sl, fp, ip
 810c49e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810c4a2:	b289      	uxth	r1, r1
 810c4a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810c4a8:	4577      	cmp	r7, lr
 810c4aa:	f849 1b04 	str.w	r1, [r9], #4
 810c4ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c4b2:	d8e2      	bhi.n	810c47a <__multiply+0xb2>
 810c4b4:	9a01      	ldr	r2, [sp, #4]
 810c4b6:	f845 c002 	str.w	ip, [r5, r2]
 810c4ba:	9a03      	ldr	r2, [sp, #12]
 810c4bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810c4c0:	3304      	adds	r3, #4
 810c4c2:	f1b9 0f00 	cmp.w	r9, #0
 810c4c6:	d020      	beq.n	810c50a <__multiply+0x142>
 810c4c8:	6829      	ldr	r1, [r5, #0]
 810c4ca:	f104 0c14 	add.w	ip, r4, #20
 810c4ce:	46ae      	mov	lr, r5
 810c4d0:	f04f 0a00 	mov.w	sl, #0
 810c4d4:	f8bc b000 	ldrh.w	fp, [ip]
 810c4d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810c4dc:	fb09 220b 	mla	r2, r9, fp, r2
 810c4e0:	4492      	add	sl, r2
 810c4e2:	b289      	uxth	r1, r1
 810c4e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810c4e8:	f84e 1b04 	str.w	r1, [lr], #4
 810c4ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 810c4f0:	f8be 1000 	ldrh.w	r1, [lr]
 810c4f4:	0c12      	lsrs	r2, r2, #16
 810c4f6:	fb09 1102 	mla	r1, r9, r2, r1
 810c4fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810c4fe:	4567      	cmp	r7, ip
 810c500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810c504:	d8e6      	bhi.n	810c4d4 <__multiply+0x10c>
 810c506:	9a01      	ldr	r2, [sp, #4]
 810c508:	50a9      	str	r1, [r5, r2]
 810c50a:	3504      	adds	r5, #4
 810c50c:	e79a      	b.n	810c444 <__multiply+0x7c>
 810c50e:	3e01      	subs	r6, #1
 810c510:	e79c      	b.n	810c44c <__multiply+0x84>
 810c512:	bf00      	nop
 810c514:	0810d868 	.word	0x0810d868
 810c518:	0810d8f4 	.word	0x0810d8f4

0810c51c <__pow5mult>:
 810c51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c520:	4615      	mov	r5, r2
 810c522:	f012 0203 	ands.w	r2, r2, #3
 810c526:	4606      	mov	r6, r0
 810c528:	460f      	mov	r7, r1
 810c52a:	d007      	beq.n	810c53c <__pow5mult+0x20>
 810c52c:	4c25      	ldr	r4, [pc, #148]	; (810c5c4 <__pow5mult+0xa8>)
 810c52e:	3a01      	subs	r2, #1
 810c530:	2300      	movs	r3, #0
 810c532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c536:	f7ff fe51 	bl	810c1dc <__multadd>
 810c53a:	4607      	mov	r7, r0
 810c53c:	10ad      	asrs	r5, r5, #2
 810c53e:	d03d      	beq.n	810c5bc <__pow5mult+0xa0>
 810c540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810c542:	b97c      	cbnz	r4, 810c564 <__pow5mult+0x48>
 810c544:	2010      	movs	r0, #16
 810c546:	f7ff fdc1 	bl	810c0cc <malloc>
 810c54a:	4602      	mov	r2, r0
 810c54c:	6270      	str	r0, [r6, #36]	; 0x24
 810c54e:	b928      	cbnz	r0, 810c55c <__pow5mult+0x40>
 810c550:	4b1d      	ldr	r3, [pc, #116]	; (810c5c8 <__pow5mult+0xac>)
 810c552:	481e      	ldr	r0, [pc, #120]	; (810c5cc <__pow5mult+0xb0>)
 810c554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810c558:	f000 fc9c 	bl	810ce94 <__assert_func>
 810c55c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c560:	6004      	str	r4, [r0, #0]
 810c562:	60c4      	str	r4, [r0, #12]
 810c564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810c568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c56c:	b94c      	cbnz	r4, 810c582 <__pow5mult+0x66>
 810c56e:	f240 2171 	movw	r1, #625	; 0x271
 810c572:	4630      	mov	r0, r6
 810c574:	f7ff ff12 	bl	810c39c <__i2b>
 810c578:	2300      	movs	r3, #0
 810c57a:	f8c8 0008 	str.w	r0, [r8, #8]
 810c57e:	4604      	mov	r4, r0
 810c580:	6003      	str	r3, [r0, #0]
 810c582:	f04f 0900 	mov.w	r9, #0
 810c586:	07eb      	lsls	r3, r5, #31
 810c588:	d50a      	bpl.n	810c5a0 <__pow5mult+0x84>
 810c58a:	4639      	mov	r1, r7
 810c58c:	4622      	mov	r2, r4
 810c58e:	4630      	mov	r0, r6
 810c590:	f7ff ff1a 	bl	810c3c8 <__multiply>
 810c594:	4639      	mov	r1, r7
 810c596:	4680      	mov	r8, r0
 810c598:	4630      	mov	r0, r6
 810c59a:	f7ff fdfd 	bl	810c198 <_Bfree>
 810c59e:	4647      	mov	r7, r8
 810c5a0:	106d      	asrs	r5, r5, #1
 810c5a2:	d00b      	beq.n	810c5bc <__pow5mult+0xa0>
 810c5a4:	6820      	ldr	r0, [r4, #0]
 810c5a6:	b938      	cbnz	r0, 810c5b8 <__pow5mult+0x9c>
 810c5a8:	4622      	mov	r2, r4
 810c5aa:	4621      	mov	r1, r4
 810c5ac:	4630      	mov	r0, r6
 810c5ae:	f7ff ff0b 	bl	810c3c8 <__multiply>
 810c5b2:	6020      	str	r0, [r4, #0]
 810c5b4:	f8c0 9000 	str.w	r9, [r0]
 810c5b8:	4604      	mov	r4, r0
 810c5ba:	e7e4      	b.n	810c586 <__pow5mult+0x6a>
 810c5bc:	4638      	mov	r0, r7
 810c5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c5c2:	bf00      	nop
 810c5c4:	0810da40 	.word	0x0810da40
 810c5c8:	0810d7f6 	.word	0x0810d7f6
 810c5cc:	0810d8f4 	.word	0x0810d8f4

0810c5d0 <__lshift>:
 810c5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c5d4:	460c      	mov	r4, r1
 810c5d6:	6849      	ldr	r1, [r1, #4]
 810c5d8:	6923      	ldr	r3, [r4, #16]
 810c5da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c5de:	68a3      	ldr	r3, [r4, #8]
 810c5e0:	4607      	mov	r7, r0
 810c5e2:	4691      	mov	r9, r2
 810c5e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c5e8:	f108 0601 	add.w	r6, r8, #1
 810c5ec:	42b3      	cmp	r3, r6
 810c5ee:	db0b      	blt.n	810c608 <__lshift+0x38>
 810c5f0:	4638      	mov	r0, r7
 810c5f2:	f7ff fd91 	bl	810c118 <_Balloc>
 810c5f6:	4605      	mov	r5, r0
 810c5f8:	b948      	cbnz	r0, 810c60e <__lshift+0x3e>
 810c5fa:	4602      	mov	r2, r0
 810c5fc:	4b2a      	ldr	r3, [pc, #168]	; (810c6a8 <__lshift+0xd8>)
 810c5fe:	482b      	ldr	r0, [pc, #172]	; (810c6ac <__lshift+0xdc>)
 810c600:	f240 11d9 	movw	r1, #473	; 0x1d9
 810c604:	f000 fc46 	bl	810ce94 <__assert_func>
 810c608:	3101      	adds	r1, #1
 810c60a:	005b      	lsls	r3, r3, #1
 810c60c:	e7ee      	b.n	810c5ec <__lshift+0x1c>
 810c60e:	2300      	movs	r3, #0
 810c610:	f100 0114 	add.w	r1, r0, #20
 810c614:	f100 0210 	add.w	r2, r0, #16
 810c618:	4618      	mov	r0, r3
 810c61a:	4553      	cmp	r3, sl
 810c61c:	db37      	blt.n	810c68e <__lshift+0xbe>
 810c61e:	6920      	ldr	r0, [r4, #16]
 810c620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c624:	f104 0314 	add.w	r3, r4, #20
 810c628:	f019 091f 	ands.w	r9, r9, #31
 810c62c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810c634:	d02f      	beq.n	810c696 <__lshift+0xc6>
 810c636:	f1c9 0e20 	rsb	lr, r9, #32
 810c63a:	468a      	mov	sl, r1
 810c63c:	f04f 0c00 	mov.w	ip, #0
 810c640:	681a      	ldr	r2, [r3, #0]
 810c642:	fa02 f209 	lsl.w	r2, r2, r9
 810c646:	ea42 020c 	orr.w	r2, r2, ip
 810c64a:	f84a 2b04 	str.w	r2, [sl], #4
 810c64e:	f853 2b04 	ldr.w	r2, [r3], #4
 810c652:	4298      	cmp	r0, r3
 810c654:	fa22 fc0e 	lsr.w	ip, r2, lr
 810c658:	d8f2      	bhi.n	810c640 <__lshift+0x70>
 810c65a:	1b03      	subs	r3, r0, r4
 810c65c:	3b15      	subs	r3, #21
 810c65e:	f023 0303 	bic.w	r3, r3, #3
 810c662:	3304      	adds	r3, #4
 810c664:	f104 0215 	add.w	r2, r4, #21
 810c668:	4290      	cmp	r0, r2
 810c66a:	bf38      	it	cc
 810c66c:	2304      	movcc	r3, #4
 810c66e:	f841 c003 	str.w	ip, [r1, r3]
 810c672:	f1bc 0f00 	cmp.w	ip, #0
 810c676:	d001      	beq.n	810c67c <__lshift+0xac>
 810c678:	f108 0602 	add.w	r6, r8, #2
 810c67c:	3e01      	subs	r6, #1
 810c67e:	4638      	mov	r0, r7
 810c680:	612e      	str	r6, [r5, #16]
 810c682:	4621      	mov	r1, r4
 810c684:	f7ff fd88 	bl	810c198 <_Bfree>
 810c688:	4628      	mov	r0, r5
 810c68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c68e:	f842 0f04 	str.w	r0, [r2, #4]!
 810c692:	3301      	adds	r3, #1
 810c694:	e7c1      	b.n	810c61a <__lshift+0x4a>
 810c696:	3904      	subs	r1, #4
 810c698:	f853 2b04 	ldr.w	r2, [r3], #4
 810c69c:	f841 2f04 	str.w	r2, [r1, #4]!
 810c6a0:	4298      	cmp	r0, r3
 810c6a2:	d8f9      	bhi.n	810c698 <__lshift+0xc8>
 810c6a4:	e7ea      	b.n	810c67c <__lshift+0xac>
 810c6a6:	bf00      	nop
 810c6a8:	0810d868 	.word	0x0810d868
 810c6ac:	0810d8f4 	.word	0x0810d8f4

0810c6b0 <__mcmp>:
 810c6b0:	b530      	push	{r4, r5, lr}
 810c6b2:	6902      	ldr	r2, [r0, #16]
 810c6b4:	690c      	ldr	r4, [r1, #16]
 810c6b6:	1b12      	subs	r2, r2, r4
 810c6b8:	d10e      	bne.n	810c6d8 <__mcmp+0x28>
 810c6ba:	f100 0314 	add.w	r3, r0, #20
 810c6be:	3114      	adds	r1, #20
 810c6c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c6c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c6c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c6cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c6d0:	42a5      	cmp	r5, r4
 810c6d2:	d003      	beq.n	810c6dc <__mcmp+0x2c>
 810c6d4:	d305      	bcc.n	810c6e2 <__mcmp+0x32>
 810c6d6:	2201      	movs	r2, #1
 810c6d8:	4610      	mov	r0, r2
 810c6da:	bd30      	pop	{r4, r5, pc}
 810c6dc:	4283      	cmp	r3, r0
 810c6de:	d3f3      	bcc.n	810c6c8 <__mcmp+0x18>
 810c6e0:	e7fa      	b.n	810c6d8 <__mcmp+0x28>
 810c6e2:	f04f 32ff 	mov.w	r2, #4294967295
 810c6e6:	e7f7      	b.n	810c6d8 <__mcmp+0x28>

0810c6e8 <__mdiff>:
 810c6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c6ec:	460c      	mov	r4, r1
 810c6ee:	4606      	mov	r6, r0
 810c6f0:	4611      	mov	r1, r2
 810c6f2:	4620      	mov	r0, r4
 810c6f4:	4690      	mov	r8, r2
 810c6f6:	f7ff ffdb 	bl	810c6b0 <__mcmp>
 810c6fa:	1e05      	subs	r5, r0, #0
 810c6fc:	d110      	bne.n	810c720 <__mdiff+0x38>
 810c6fe:	4629      	mov	r1, r5
 810c700:	4630      	mov	r0, r6
 810c702:	f7ff fd09 	bl	810c118 <_Balloc>
 810c706:	b930      	cbnz	r0, 810c716 <__mdiff+0x2e>
 810c708:	4b3a      	ldr	r3, [pc, #232]	; (810c7f4 <__mdiff+0x10c>)
 810c70a:	4602      	mov	r2, r0
 810c70c:	f240 2132 	movw	r1, #562	; 0x232
 810c710:	4839      	ldr	r0, [pc, #228]	; (810c7f8 <__mdiff+0x110>)
 810c712:	f000 fbbf 	bl	810ce94 <__assert_func>
 810c716:	2301      	movs	r3, #1
 810c718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c71c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c720:	bfa4      	itt	ge
 810c722:	4643      	movge	r3, r8
 810c724:	46a0      	movge	r8, r4
 810c726:	4630      	mov	r0, r6
 810c728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c72c:	bfa6      	itte	ge
 810c72e:	461c      	movge	r4, r3
 810c730:	2500      	movge	r5, #0
 810c732:	2501      	movlt	r5, #1
 810c734:	f7ff fcf0 	bl	810c118 <_Balloc>
 810c738:	b920      	cbnz	r0, 810c744 <__mdiff+0x5c>
 810c73a:	4b2e      	ldr	r3, [pc, #184]	; (810c7f4 <__mdiff+0x10c>)
 810c73c:	4602      	mov	r2, r0
 810c73e:	f44f 7110 	mov.w	r1, #576	; 0x240
 810c742:	e7e5      	b.n	810c710 <__mdiff+0x28>
 810c744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c748:	6926      	ldr	r6, [r4, #16]
 810c74a:	60c5      	str	r5, [r0, #12]
 810c74c:	f104 0914 	add.w	r9, r4, #20
 810c750:	f108 0514 	add.w	r5, r8, #20
 810c754:	f100 0e14 	add.w	lr, r0, #20
 810c758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c75c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c760:	f108 0210 	add.w	r2, r8, #16
 810c764:	46f2      	mov	sl, lr
 810c766:	2100      	movs	r1, #0
 810c768:	f859 3b04 	ldr.w	r3, [r9], #4
 810c76c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c770:	fa1f f883 	uxth.w	r8, r3
 810c774:	fa11 f18b 	uxtah	r1, r1, fp
 810c778:	0c1b      	lsrs	r3, r3, #16
 810c77a:	eba1 0808 	sub.w	r8, r1, r8
 810c77e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c786:	fa1f f888 	uxth.w	r8, r8
 810c78a:	1419      	asrs	r1, r3, #16
 810c78c:	454e      	cmp	r6, r9
 810c78e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c792:	f84a 3b04 	str.w	r3, [sl], #4
 810c796:	d8e7      	bhi.n	810c768 <__mdiff+0x80>
 810c798:	1b33      	subs	r3, r6, r4
 810c79a:	3b15      	subs	r3, #21
 810c79c:	f023 0303 	bic.w	r3, r3, #3
 810c7a0:	3304      	adds	r3, #4
 810c7a2:	3415      	adds	r4, #21
 810c7a4:	42a6      	cmp	r6, r4
 810c7a6:	bf38      	it	cc
 810c7a8:	2304      	movcc	r3, #4
 810c7aa:	441d      	add	r5, r3
 810c7ac:	4473      	add	r3, lr
 810c7ae:	469e      	mov	lr, r3
 810c7b0:	462e      	mov	r6, r5
 810c7b2:	4566      	cmp	r6, ip
 810c7b4:	d30e      	bcc.n	810c7d4 <__mdiff+0xec>
 810c7b6:	f10c 0203 	add.w	r2, ip, #3
 810c7ba:	1b52      	subs	r2, r2, r5
 810c7bc:	f022 0203 	bic.w	r2, r2, #3
 810c7c0:	3d03      	subs	r5, #3
 810c7c2:	45ac      	cmp	ip, r5
 810c7c4:	bf38      	it	cc
 810c7c6:	2200      	movcc	r2, #0
 810c7c8:	441a      	add	r2, r3
 810c7ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810c7ce:	b17b      	cbz	r3, 810c7f0 <__mdiff+0x108>
 810c7d0:	6107      	str	r7, [r0, #16]
 810c7d2:	e7a3      	b.n	810c71c <__mdiff+0x34>
 810c7d4:	f856 8b04 	ldr.w	r8, [r6], #4
 810c7d8:	fa11 f288 	uxtah	r2, r1, r8
 810c7dc:	1414      	asrs	r4, r2, #16
 810c7de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c7e2:	b292      	uxth	r2, r2
 810c7e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c7e8:	f84e 2b04 	str.w	r2, [lr], #4
 810c7ec:	1421      	asrs	r1, r4, #16
 810c7ee:	e7e0      	b.n	810c7b2 <__mdiff+0xca>
 810c7f0:	3f01      	subs	r7, #1
 810c7f2:	e7ea      	b.n	810c7ca <__mdiff+0xe2>
 810c7f4:	0810d868 	.word	0x0810d868
 810c7f8:	0810d8f4 	.word	0x0810d8f4

0810c7fc <__ulp>:
 810c7fc:	b082      	sub	sp, #8
 810c7fe:	ed8d 0b00 	vstr	d0, [sp]
 810c802:	9b01      	ldr	r3, [sp, #4]
 810c804:	4912      	ldr	r1, [pc, #72]	; (810c850 <__ulp+0x54>)
 810c806:	4019      	ands	r1, r3
 810c808:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810c80c:	2900      	cmp	r1, #0
 810c80e:	dd05      	ble.n	810c81c <__ulp+0x20>
 810c810:	2200      	movs	r2, #0
 810c812:	460b      	mov	r3, r1
 810c814:	ec43 2b10 	vmov	d0, r2, r3
 810c818:	b002      	add	sp, #8
 810c81a:	4770      	bx	lr
 810c81c:	4249      	negs	r1, r1
 810c81e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810c822:	ea4f 5021 	mov.w	r0, r1, asr #20
 810c826:	f04f 0200 	mov.w	r2, #0
 810c82a:	f04f 0300 	mov.w	r3, #0
 810c82e:	da04      	bge.n	810c83a <__ulp+0x3e>
 810c830:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810c834:	fa41 f300 	asr.w	r3, r1, r0
 810c838:	e7ec      	b.n	810c814 <__ulp+0x18>
 810c83a:	f1a0 0114 	sub.w	r1, r0, #20
 810c83e:	291e      	cmp	r1, #30
 810c840:	bfda      	itte	le
 810c842:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810c846:	fa20 f101 	lsrle.w	r1, r0, r1
 810c84a:	2101      	movgt	r1, #1
 810c84c:	460a      	mov	r2, r1
 810c84e:	e7e1      	b.n	810c814 <__ulp+0x18>
 810c850:	7ff00000 	.word	0x7ff00000

0810c854 <__b2d>:
 810c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c856:	6905      	ldr	r5, [r0, #16]
 810c858:	f100 0714 	add.w	r7, r0, #20
 810c85c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810c860:	1f2e      	subs	r6, r5, #4
 810c862:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810c866:	4620      	mov	r0, r4
 810c868:	f7ff fd48 	bl	810c2fc <__hi0bits>
 810c86c:	f1c0 0320 	rsb	r3, r0, #32
 810c870:	280a      	cmp	r0, #10
 810c872:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810c8f0 <__b2d+0x9c>
 810c876:	600b      	str	r3, [r1, #0]
 810c878:	dc14      	bgt.n	810c8a4 <__b2d+0x50>
 810c87a:	f1c0 0e0b 	rsb	lr, r0, #11
 810c87e:	fa24 f10e 	lsr.w	r1, r4, lr
 810c882:	42b7      	cmp	r7, r6
 810c884:	ea41 030c 	orr.w	r3, r1, ip
 810c888:	bf34      	ite	cc
 810c88a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c88e:	2100      	movcs	r1, #0
 810c890:	3015      	adds	r0, #21
 810c892:	fa04 f000 	lsl.w	r0, r4, r0
 810c896:	fa21 f10e 	lsr.w	r1, r1, lr
 810c89a:	ea40 0201 	orr.w	r2, r0, r1
 810c89e:	ec43 2b10 	vmov	d0, r2, r3
 810c8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c8a4:	42b7      	cmp	r7, r6
 810c8a6:	bf3a      	itte	cc
 810c8a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c8ac:	f1a5 0608 	subcc.w	r6, r5, #8
 810c8b0:	2100      	movcs	r1, #0
 810c8b2:	380b      	subs	r0, #11
 810c8b4:	d017      	beq.n	810c8e6 <__b2d+0x92>
 810c8b6:	f1c0 0c20 	rsb	ip, r0, #32
 810c8ba:	fa04 f500 	lsl.w	r5, r4, r0
 810c8be:	42be      	cmp	r6, r7
 810c8c0:	fa21 f40c 	lsr.w	r4, r1, ip
 810c8c4:	ea45 0504 	orr.w	r5, r5, r4
 810c8c8:	bf8c      	ite	hi
 810c8ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810c8ce:	2400      	movls	r4, #0
 810c8d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810c8d4:	fa01 f000 	lsl.w	r0, r1, r0
 810c8d8:	fa24 f40c 	lsr.w	r4, r4, ip
 810c8dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810c8e0:	ea40 0204 	orr.w	r2, r0, r4
 810c8e4:	e7db      	b.n	810c89e <__b2d+0x4a>
 810c8e6:	ea44 030c 	orr.w	r3, r4, ip
 810c8ea:	460a      	mov	r2, r1
 810c8ec:	e7d7      	b.n	810c89e <__b2d+0x4a>
 810c8ee:	bf00      	nop
 810c8f0:	3ff00000 	.word	0x3ff00000

0810c8f4 <__d2b>:
 810c8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c8f8:	4689      	mov	r9, r1
 810c8fa:	2101      	movs	r1, #1
 810c8fc:	ec57 6b10 	vmov	r6, r7, d0
 810c900:	4690      	mov	r8, r2
 810c902:	f7ff fc09 	bl	810c118 <_Balloc>
 810c906:	4604      	mov	r4, r0
 810c908:	b930      	cbnz	r0, 810c918 <__d2b+0x24>
 810c90a:	4602      	mov	r2, r0
 810c90c:	4b25      	ldr	r3, [pc, #148]	; (810c9a4 <__d2b+0xb0>)
 810c90e:	4826      	ldr	r0, [pc, #152]	; (810c9a8 <__d2b+0xb4>)
 810c910:	f240 310a 	movw	r1, #778	; 0x30a
 810c914:	f000 fabe 	bl	810ce94 <__assert_func>
 810c918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810c91c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c920:	bb35      	cbnz	r5, 810c970 <__d2b+0x7c>
 810c922:	2e00      	cmp	r6, #0
 810c924:	9301      	str	r3, [sp, #4]
 810c926:	d028      	beq.n	810c97a <__d2b+0x86>
 810c928:	4668      	mov	r0, sp
 810c92a:	9600      	str	r6, [sp, #0]
 810c92c:	f7ff fd06 	bl	810c33c <__lo0bits>
 810c930:	9900      	ldr	r1, [sp, #0]
 810c932:	b300      	cbz	r0, 810c976 <__d2b+0x82>
 810c934:	9a01      	ldr	r2, [sp, #4]
 810c936:	f1c0 0320 	rsb	r3, r0, #32
 810c93a:	fa02 f303 	lsl.w	r3, r2, r3
 810c93e:	430b      	orrs	r3, r1
 810c940:	40c2      	lsrs	r2, r0
 810c942:	6163      	str	r3, [r4, #20]
 810c944:	9201      	str	r2, [sp, #4]
 810c946:	9b01      	ldr	r3, [sp, #4]
 810c948:	61a3      	str	r3, [r4, #24]
 810c94a:	2b00      	cmp	r3, #0
 810c94c:	bf14      	ite	ne
 810c94e:	2202      	movne	r2, #2
 810c950:	2201      	moveq	r2, #1
 810c952:	6122      	str	r2, [r4, #16]
 810c954:	b1d5      	cbz	r5, 810c98c <__d2b+0x98>
 810c956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c95a:	4405      	add	r5, r0
 810c95c:	f8c9 5000 	str.w	r5, [r9]
 810c960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c964:	f8c8 0000 	str.w	r0, [r8]
 810c968:	4620      	mov	r0, r4
 810c96a:	b003      	add	sp, #12
 810c96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c974:	e7d5      	b.n	810c922 <__d2b+0x2e>
 810c976:	6161      	str	r1, [r4, #20]
 810c978:	e7e5      	b.n	810c946 <__d2b+0x52>
 810c97a:	a801      	add	r0, sp, #4
 810c97c:	f7ff fcde 	bl	810c33c <__lo0bits>
 810c980:	9b01      	ldr	r3, [sp, #4]
 810c982:	6163      	str	r3, [r4, #20]
 810c984:	2201      	movs	r2, #1
 810c986:	6122      	str	r2, [r4, #16]
 810c988:	3020      	adds	r0, #32
 810c98a:	e7e3      	b.n	810c954 <__d2b+0x60>
 810c98c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c994:	f8c9 0000 	str.w	r0, [r9]
 810c998:	6918      	ldr	r0, [r3, #16]
 810c99a:	f7ff fcaf 	bl	810c2fc <__hi0bits>
 810c99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c9a2:	e7df      	b.n	810c964 <__d2b+0x70>
 810c9a4:	0810d868 	.word	0x0810d868
 810c9a8:	0810d8f4 	.word	0x0810d8f4

0810c9ac <__ratio>:
 810c9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9b0:	4688      	mov	r8, r1
 810c9b2:	4669      	mov	r1, sp
 810c9b4:	4681      	mov	r9, r0
 810c9b6:	f7ff ff4d 	bl	810c854 <__b2d>
 810c9ba:	a901      	add	r1, sp, #4
 810c9bc:	4640      	mov	r0, r8
 810c9be:	ec55 4b10 	vmov	r4, r5, d0
 810c9c2:	f7ff ff47 	bl	810c854 <__b2d>
 810c9c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c9ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c9ce:	eba3 0c02 	sub.w	ip, r3, r2
 810c9d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c9d6:	1a9b      	subs	r3, r3, r2
 810c9d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c9dc:	ec51 0b10 	vmov	r0, r1, d0
 810c9e0:	2b00      	cmp	r3, #0
 810c9e2:	bfd6      	itet	le
 810c9e4:	460a      	movle	r2, r1
 810c9e6:	462a      	movgt	r2, r5
 810c9e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c9ec:	468b      	mov	fp, r1
 810c9ee:	462f      	mov	r7, r5
 810c9f0:	bfd4      	ite	le
 810c9f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c9f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c9fa:	4620      	mov	r0, r4
 810c9fc:	ee10 2a10 	vmov	r2, s0
 810ca00:	465b      	mov	r3, fp
 810ca02:	4639      	mov	r1, r7
 810ca04:	f7f3 ffaa 	bl	810095c <__aeabi_ddiv>
 810ca08:	ec41 0b10 	vmov	d0, r0, r1
 810ca0c:	b003      	add	sp, #12
 810ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ca12 <__copybits>:
 810ca12:	3901      	subs	r1, #1
 810ca14:	b570      	push	{r4, r5, r6, lr}
 810ca16:	1149      	asrs	r1, r1, #5
 810ca18:	6914      	ldr	r4, [r2, #16]
 810ca1a:	3101      	adds	r1, #1
 810ca1c:	f102 0314 	add.w	r3, r2, #20
 810ca20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ca24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ca28:	1f05      	subs	r5, r0, #4
 810ca2a:	42a3      	cmp	r3, r4
 810ca2c:	d30c      	bcc.n	810ca48 <__copybits+0x36>
 810ca2e:	1aa3      	subs	r3, r4, r2
 810ca30:	3b11      	subs	r3, #17
 810ca32:	f023 0303 	bic.w	r3, r3, #3
 810ca36:	3211      	adds	r2, #17
 810ca38:	42a2      	cmp	r2, r4
 810ca3a:	bf88      	it	hi
 810ca3c:	2300      	movhi	r3, #0
 810ca3e:	4418      	add	r0, r3
 810ca40:	2300      	movs	r3, #0
 810ca42:	4288      	cmp	r0, r1
 810ca44:	d305      	bcc.n	810ca52 <__copybits+0x40>
 810ca46:	bd70      	pop	{r4, r5, r6, pc}
 810ca48:	f853 6b04 	ldr.w	r6, [r3], #4
 810ca4c:	f845 6f04 	str.w	r6, [r5, #4]!
 810ca50:	e7eb      	b.n	810ca2a <__copybits+0x18>
 810ca52:	f840 3b04 	str.w	r3, [r0], #4
 810ca56:	e7f4      	b.n	810ca42 <__copybits+0x30>

0810ca58 <__any_on>:
 810ca58:	f100 0214 	add.w	r2, r0, #20
 810ca5c:	6900      	ldr	r0, [r0, #16]
 810ca5e:	114b      	asrs	r3, r1, #5
 810ca60:	4298      	cmp	r0, r3
 810ca62:	b510      	push	{r4, lr}
 810ca64:	db11      	blt.n	810ca8a <__any_on+0x32>
 810ca66:	dd0a      	ble.n	810ca7e <__any_on+0x26>
 810ca68:	f011 011f 	ands.w	r1, r1, #31
 810ca6c:	d007      	beq.n	810ca7e <__any_on+0x26>
 810ca6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ca72:	fa24 f001 	lsr.w	r0, r4, r1
 810ca76:	fa00 f101 	lsl.w	r1, r0, r1
 810ca7a:	428c      	cmp	r4, r1
 810ca7c:	d10b      	bne.n	810ca96 <__any_on+0x3e>
 810ca7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ca82:	4293      	cmp	r3, r2
 810ca84:	d803      	bhi.n	810ca8e <__any_on+0x36>
 810ca86:	2000      	movs	r0, #0
 810ca88:	bd10      	pop	{r4, pc}
 810ca8a:	4603      	mov	r3, r0
 810ca8c:	e7f7      	b.n	810ca7e <__any_on+0x26>
 810ca8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ca92:	2900      	cmp	r1, #0
 810ca94:	d0f5      	beq.n	810ca82 <__any_on+0x2a>
 810ca96:	2001      	movs	r0, #1
 810ca98:	e7f6      	b.n	810ca88 <__any_on+0x30>

0810ca9a <_calloc_r>:
 810ca9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ca9c:	fba1 2402 	umull	r2, r4, r1, r2
 810caa0:	b94c      	cbnz	r4, 810cab6 <_calloc_r+0x1c>
 810caa2:	4611      	mov	r1, r2
 810caa4:	9201      	str	r2, [sp, #4]
 810caa6:	f7fc f9ad 	bl	8108e04 <_malloc_r>
 810caaa:	9a01      	ldr	r2, [sp, #4]
 810caac:	4605      	mov	r5, r0
 810caae:	b930      	cbnz	r0, 810cabe <_calloc_r+0x24>
 810cab0:	4628      	mov	r0, r5
 810cab2:	b003      	add	sp, #12
 810cab4:	bd30      	pop	{r4, r5, pc}
 810cab6:	220c      	movs	r2, #12
 810cab8:	6002      	str	r2, [r0, #0]
 810caba:	2500      	movs	r5, #0
 810cabc:	e7f8      	b.n	810cab0 <_calloc_r+0x16>
 810cabe:	4621      	mov	r1, r4
 810cac0:	f7fc f977 	bl	8108db2 <memset>
 810cac4:	e7f4      	b.n	810cab0 <_calloc_r+0x16>
	...

0810cac8 <_free_r>:
 810cac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810caca:	2900      	cmp	r1, #0
 810cacc:	d044      	beq.n	810cb58 <_free_r+0x90>
 810cace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cad2:	9001      	str	r0, [sp, #4]
 810cad4:	2b00      	cmp	r3, #0
 810cad6:	f1a1 0404 	sub.w	r4, r1, #4
 810cada:	bfb8      	it	lt
 810cadc:	18e4      	addlt	r4, r4, r3
 810cade:	f7ff fb0f 	bl	810c100 <__malloc_lock>
 810cae2:	4a1e      	ldr	r2, [pc, #120]	; (810cb5c <_free_r+0x94>)
 810cae4:	9801      	ldr	r0, [sp, #4]
 810cae6:	6813      	ldr	r3, [r2, #0]
 810cae8:	b933      	cbnz	r3, 810caf8 <_free_r+0x30>
 810caea:	6063      	str	r3, [r4, #4]
 810caec:	6014      	str	r4, [r2, #0]
 810caee:	b003      	add	sp, #12
 810caf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810caf4:	f7ff bb0a 	b.w	810c10c <__malloc_unlock>
 810caf8:	42a3      	cmp	r3, r4
 810cafa:	d908      	bls.n	810cb0e <_free_r+0x46>
 810cafc:	6825      	ldr	r5, [r4, #0]
 810cafe:	1961      	adds	r1, r4, r5
 810cb00:	428b      	cmp	r3, r1
 810cb02:	bf01      	itttt	eq
 810cb04:	6819      	ldreq	r1, [r3, #0]
 810cb06:	685b      	ldreq	r3, [r3, #4]
 810cb08:	1949      	addeq	r1, r1, r5
 810cb0a:	6021      	streq	r1, [r4, #0]
 810cb0c:	e7ed      	b.n	810caea <_free_r+0x22>
 810cb0e:	461a      	mov	r2, r3
 810cb10:	685b      	ldr	r3, [r3, #4]
 810cb12:	b10b      	cbz	r3, 810cb18 <_free_r+0x50>
 810cb14:	42a3      	cmp	r3, r4
 810cb16:	d9fa      	bls.n	810cb0e <_free_r+0x46>
 810cb18:	6811      	ldr	r1, [r2, #0]
 810cb1a:	1855      	adds	r5, r2, r1
 810cb1c:	42a5      	cmp	r5, r4
 810cb1e:	d10b      	bne.n	810cb38 <_free_r+0x70>
 810cb20:	6824      	ldr	r4, [r4, #0]
 810cb22:	4421      	add	r1, r4
 810cb24:	1854      	adds	r4, r2, r1
 810cb26:	42a3      	cmp	r3, r4
 810cb28:	6011      	str	r1, [r2, #0]
 810cb2a:	d1e0      	bne.n	810caee <_free_r+0x26>
 810cb2c:	681c      	ldr	r4, [r3, #0]
 810cb2e:	685b      	ldr	r3, [r3, #4]
 810cb30:	6053      	str	r3, [r2, #4]
 810cb32:	4421      	add	r1, r4
 810cb34:	6011      	str	r1, [r2, #0]
 810cb36:	e7da      	b.n	810caee <_free_r+0x26>
 810cb38:	d902      	bls.n	810cb40 <_free_r+0x78>
 810cb3a:	230c      	movs	r3, #12
 810cb3c:	6003      	str	r3, [r0, #0]
 810cb3e:	e7d6      	b.n	810caee <_free_r+0x26>
 810cb40:	6825      	ldr	r5, [r4, #0]
 810cb42:	1961      	adds	r1, r4, r5
 810cb44:	428b      	cmp	r3, r1
 810cb46:	bf04      	itt	eq
 810cb48:	6819      	ldreq	r1, [r3, #0]
 810cb4a:	685b      	ldreq	r3, [r3, #4]
 810cb4c:	6063      	str	r3, [r4, #4]
 810cb4e:	bf04      	itt	eq
 810cb50:	1949      	addeq	r1, r1, r5
 810cb52:	6021      	streq	r1, [r4, #0]
 810cb54:	6054      	str	r4, [r2, #4]
 810cb56:	e7ca      	b.n	810caee <_free_r+0x26>
 810cb58:	b003      	add	sp, #12
 810cb5a:	bd30      	pop	{r4, r5, pc}
 810cb5c:	10004d90 	.word	0x10004d90

0810cb60 <__ssputs_r>:
 810cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb64:	688e      	ldr	r6, [r1, #8]
 810cb66:	429e      	cmp	r6, r3
 810cb68:	4682      	mov	sl, r0
 810cb6a:	460c      	mov	r4, r1
 810cb6c:	4690      	mov	r8, r2
 810cb6e:	461f      	mov	r7, r3
 810cb70:	d838      	bhi.n	810cbe4 <__ssputs_r+0x84>
 810cb72:	898a      	ldrh	r2, [r1, #12]
 810cb74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810cb78:	d032      	beq.n	810cbe0 <__ssputs_r+0x80>
 810cb7a:	6825      	ldr	r5, [r4, #0]
 810cb7c:	6909      	ldr	r1, [r1, #16]
 810cb7e:	eba5 0901 	sub.w	r9, r5, r1
 810cb82:	6965      	ldr	r5, [r4, #20]
 810cb84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810cb88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810cb8c:	3301      	adds	r3, #1
 810cb8e:	444b      	add	r3, r9
 810cb90:	106d      	asrs	r5, r5, #1
 810cb92:	429d      	cmp	r5, r3
 810cb94:	bf38      	it	cc
 810cb96:	461d      	movcc	r5, r3
 810cb98:	0553      	lsls	r3, r2, #21
 810cb9a:	d531      	bpl.n	810cc00 <__ssputs_r+0xa0>
 810cb9c:	4629      	mov	r1, r5
 810cb9e:	f7fc f931 	bl	8108e04 <_malloc_r>
 810cba2:	4606      	mov	r6, r0
 810cba4:	b950      	cbnz	r0, 810cbbc <__ssputs_r+0x5c>
 810cba6:	230c      	movs	r3, #12
 810cba8:	f8ca 3000 	str.w	r3, [sl]
 810cbac:	89a3      	ldrh	r3, [r4, #12]
 810cbae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810cbb2:	81a3      	strh	r3, [r4, #12]
 810cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 810cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cbbc:	6921      	ldr	r1, [r4, #16]
 810cbbe:	464a      	mov	r2, r9
 810cbc0:	f7fc f8e9 	bl	8108d96 <memcpy>
 810cbc4:	89a3      	ldrh	r3, [r4, #12]
 810cbc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810cbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810cbce:	81a3      	strh	r3, [r4, #12]
 810cbd0:	6126      	str	r6, [r4, #16]
 810cbd2:	6165      	str	r5, [r4, #20]
 810cbd4:	444e      	add	r6, r9
 810cbd6:	eba5 0509 	sub.w	r5, r5, r9
 810cbda:	6026      	str	r6, [r4, #0]
 810cbdc:	60a5      	str	r5, [r4, #8]
 810cbde:	463e      	mov	r6, r7
 810cbe0:	42be      	cmp	r6, r7
 810cbe2:	d900      	bls.n	810cbe6 <__ssputs_r+0x86>
 810cbe4:	463e      	mov	r6, r7
 810cbe6:	6820      	ldr	r0, [r4, #0]
 810cbe8:	4632      	mov	r2, r6
 810cbea:	4641      	mov	r1, r8
 810cbec:	f000 f982 	bl	810cef4 <memmove>
 810cbf0:	68a3      	ldr	r3, [r4, #8]
 810cbf2:	1b9b      	subs	r3, r3, r6
 810cbf4:	60a3      	str	r3, [r4, #8]
 810cbf6:	6823      	ldr	r3, [r4, #0]
 810cbf8:	4433      	add	r3, r6
 810cbfa:	6023      	str	r3, [r4, #0]
 810cbfc:	2000      	movs	r0, #0
 810cbfe:	e7db      	b.n	810cbb8 <__ssputs_r+0x58>
 810cc00:	462a      	mov	r2, r5
 810cc02:	f000 f991 	bl	810cf28 <_realloc_r>
 810cc06:	4606      	mov	r6, r0
 810cc08:	2800      	cmp	r0, #0
 810cc0a:	d1e1      	bne.n	810cbd0 <__ssputs_r+0x70>
 810cc0c:	6921      	ldr	r1, [r4, #16]
 810cc0e:	4650      	mov	r0, sl
 810cc10:	f7ff ff5a 	bl	810cac8 <_free_r>
 810cc14:	e7c7      	b.n	810cba6 <__ssputs_r+0x46>
	...

0810cc18 <_svfiprintf_r>:
 810cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cc1c:	4698      	mov	r8, r3
 810cc1e:	898b      	ldrh	r3, [r1, #12]
 810cc20:	061b      	lsls	r3, r3, #24
 810cc22:	b09d      	sub	sp, #116	; 0x74
 810cc24:	4607      	mov	r7, r0
 810cc26:	460d      	mov	r5, r1
 810cc28:	4614      	mov	r4, r2
 810cc2a:	d50e      	bpl.n	810cc4a <_svfiprintf_r+0x32>
 810cc2c:	690b      	ldr	r3, [r1, #16]
 810cc2e:	b963      	cbnz	r3, 810cc4a <_svfiprintf_r+0x32>
 810cc30:	2140      	movs	r1, #64	; 0x40
 810cc32:	f7fc f8e7 	bl	8108e04 <_malloc_r>
 810cc36:	6028      	str	r0, [r5, #0]
 810cc38:	6128      	str	r0, [r5, #16]
 810cc3a:	b920      	cbnz	r0, 810cc46 <_svfiprintf_r+0x2e>
 810cc3c:	230c      	movs	r3, #12
 810cc3e:	603b      	str	r3, [r7, #0]
 810cc40:	f04f 30ff 	mov.w	r0, #4294967295
 810cc44:	e0d1      	b.n	810cdea <_svfiprintf_r+0x1d2>
 810cc46:	2340      	movs	r3, #64	; 0x40
 810cc48:	616b      	str	r3, [r5, #20]
 810cc4a:	2300      	movs	r3, #0
 810cc4c:	9309      	str	r3, [sp, #36]	; 0x24
 810cc4e:	2320      	movs	r3, #32
 810cc50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810cc54:	f8cd 800c 	str.w	r8, [sp, #12]
 810cc58:	2330      	movs	r3, #48	; 0x30
 810cc5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810ce04 <_svfiprintf_r+0x1ec>
 810cc5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810cc62:	f04f 0901 	mov.w	r9, #1
 810cc66:	4623      	mov	r3, r4
 810cc68:	469a      	mov	sl, r3
 810cc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810cc6e:	b10a      	cbz	r2, 810cc74 <_svfiprintf_r+0x5c>
 810cc70:	2a25      	cmp	r2, #37	; 0x25
 810cc72:	d1f9      	bne.n	810cc68 <_svfiprintf_r+0x50>
 810cc74:	ebba 0b04 	subs.w	fp, sl, r4
 810cc78:	d00b      	beq.n	810cc92 <_svfiprintf_r+0x7a>
 810cc7a:	465b      	mov	r3, fp
 810cc7c:	4622      	mov	r2, r4
 810cc7e:	4629      	mov	r1, r5
 810cc80:	4638      	mov	r0, r7
 810cc82:	f7ff ff6d 	bl	810cb60 <__ssputs_r>
 810cc86:	3001      	adds	r0, #1
 810cc88:	f000 80aa 	beq.w	810cde0 <_svfiprintf_r+0x1c8>
 810cc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810cc8e:	445a      	add	r2, fp
 810cc90:	9209      	str	r2, [sp, #36]	; 0x24
 810cc92:	f89a 3000 	ldrb.w	r3, [sl]
 810cc96:	2b00      	cmp	r3, #0
 810cc98:	f000 80a2 	beq.w	810cde0 <_svfiprintf_r+0x1c8>
 810cc9c:	2300      	movs	r3, #0
 810cc9e:	f04f 32ff 	mov.w	r2, #4294967295
 810cca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810cca6:	f10a 0a01 	add.w	sl, sl, #1
 810ccaa:	9304      	str	r3, [sp, #16]
 810ccac:	9307      	str	r3, [sp, #28]
 810ccae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ccb2:	931a      	str	r3, [sp, #104]	; 0x68
 810ccb4:	4654      	mov	r4, sl
 810ccb6:	2205      	movs	r2, #5
 810ccb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ccbc:	4851      	ldr	r0, [pc, #324]	; (810ce04 <_svfiprintf_r+0x1ec>)
 810ccbe:	f7f3 fb17 	bl	81002f0 <memchr>
 810ccc2:	9a04      	ldr	r2, [sp, #16]
 810ccc4:	b9d8      	cbnz	r0, 810ccfe <_svfiprintf_r+0xe6>
 810ccc6:	06d0      	lsls	r0, r2, #27
 810ccc8:	bf44      	itt	mi
 810ccca:	2320      	movmi	r3, #32
 810cccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ccd0:	0711      	lsls	r1, r2, #28
 810ccd2:	bf44      	itt	mi
 810ccd4:	232b      	movmi	r3, #43	; 0x2b
 810ccd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ccda:	f89a 3000 	ldrb.w	r3, [sl]
 810ccde:	2b2a      	cmp	r3, #42	; 0x2a
 810cce0:	d015      	beq.n	810cd0e <_svfiprintf_r+0xf6>
 810cce2:	9a07      	ldr	r2, [sp, #28]
 810cce4:	4654      	mov	r4, sl
 810cce6:	2000      	movs	r0, #0
 810cce8:	f04f 0c0a 	mov.w	ip, #10
 810ccec:	4621      	mov	r1, r4
 810ccee:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ccf2:	3b30      	subs	r3, #48	; 0x30
 810ccf4:	2b09      	cmp	r3, #9
 810ccf6:	d94e      	bls.n	810cd96 <_svfiprintf_r+0x17e>
 810ccf8:	b1b0      	cbz	r0, 810cd28 <_svfiprintf_r+0x110>
 810ccfa:	9207      	str	r2, [sp, #28]
 810ccfc:	e014      	b.n	810cd28 <_svfiprintf_r+0x110>
 810ccfe:	eba0 0308 	sub.w	r3, r0, r8
 810cd02:	fa09 f303 	lsl.w	r3, r9, r3
 810cd06:	4313      	orrs	r3, r2
 810cd08:	9304      	str	r3, [sp, #16]
 810cd0a:	46a2      	mov	sl, r4
 810cd0c:	e7d2      	b.n	810ccb4 <_svfiprintf_r+0x9c>
 810cd0e:	9b03      	ldr	r3, [sp, #12]
 810cd10:	1d19      	adds	r1, r3, #4
 810cd12:	681b      	ldr	r3, [r3, #0]
 810cd14:	9103      	str	r1, [sp, #12]
 810cd16:	2b00      	cmp	r3, #0
 810cd18:	bfbb      	ittet	lt
 810cd1a:	425b      	neglt	r3, r3
 810cd1c:	f042 0202 	orrlt.w	r2, r2, #2
 810cd20:	9307      	strge	r3, [sp, #28]
 810cd22:	9307      	strlt	r3, [sp, #28]
 810cd24:	bfb8      	it	lt
 810cd26:	9204      	strlt	r2, [sp, #16]
 810cd28:	7823      	ldrb	r3, [r4, #0]
 810cd2a:	2b2e      	cmp	r3, #46	; 0x2e
 810cd2c:	d10c      	bne.n	810cd48 <_svfiprintf_r+0x130>
 810cd2e:	7863      	ldrb	r3, [r4, #1]
 810cd30:	2b2a      	cmp	r3, #42	; 0x2a
 810cd32:	d135      	bne.n	810cda0 <_svfiprintf_r+0x188>
 810cd34:	9b03      	ldr	r3, [sp, #12]
 810cd36:	1d1a      	adds	r2, r3, #4
 810cd38:	681b      	ldr	r3, [r3, #0]
 810cd3a:	9203      	str	r2, [sp, #12]
 810cd3c:	2b00      	cmp	r3, #0
 810cd3e:	bfb8      	it	lt
 810cd40:	f04f 33ff 	movlt.w	r3, #4294967295
 810cd44:	3402      	adds	r4, #2
 810cd46:	9305      	str	r3, [sp, #20]
 810cd48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810ce14 <_svfiprintf_r+0x1fc>
 810cd4c:	7821      	ldrb	r1, [r4, #0]
 810cd4e:	2203      	movs	r2, #3
 810cd50:	4650      	mov	r0, sl
 810cd52:	f7f3 facd 	bl	81002f0 <memchr>
 810cd56:	b140      	cbz	r0, 810cd6a <_svfiprintf_r+0x152>
 810cd58:	2340      	movs	r3, #64	; 0x40
 810cd5a:	eba0 000a 	sub.w	r0, r0, sl
 810cd5e:	fa03 f000 	lsl.w	r0, r3, r0
 810cd62:	9b04      	ldr	r3, [sp, #16]
 810cd64:	4303      	orrs	r3, r0
 810cd66:	3401      	adds	r4, #1
 810cd68:	9304      	str	r3, [sp, #16]
 810cd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810cd6e:	4826      	ldr	r0, [pc, #152]	; (810ce08 <_svfiprintf_r+0x1f0>)
 810cd70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810cd74:	2206      	movs	r2, #6
 810cd76:	f7f3 fabb 	bl	81002f0 <memchr>
 810cd7a:	2800      	cmp	r0, #0
 810cd7c:	d038      	beq.n	810cdf0 <_svfiprintf_r+0x1d8>
 810cd7e:	4b23      	ldr	r3, [pc, #140]	; (810ce0c <_svfiprintf_r+0x1f4>)
 810cd80:	bb1b      	cbnz	r3, 810cdca <_svfiprintf_r+0x1b2>
 810cd82:	9b03      	ldr	r3, [sp, #12]
 810cd84:	3307      	adds	r3, #7
 810cd86:	f023 0307 	bic.w	r3, r3, #7
 810cd8a:	3308      	adds	r3, #8
 810cd8c:	9303      	str	r3, [sp, #12]
 810cd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cd90:	4433      	add	r3, r6
 810cd92:	9309      	str	r3, [sp, #36]	; 0x24
 810cd94:	e767      	b.n	810cc66 <_svfiprintf_r+0x4e>
 810cd96:	fb0c 3202 	mla	r2, ip, r2, r3
 810cd9a:	460c      	mov	r4, r1
 810cd9c:	2001      	movs	r0, #1
 810cd9e:	e7a5      	b.n	810ccec <_svfiprintf_r+0xd4>
 810cda0:	2300      	movs	r3, #0
 810cda2:	3401      	adds	r4, #1
 810cda4:	9305      	str	r3, [sp, #20]
 810cda6:	4619      	mov	r1, r3
 810cda8:	f04f 0c0a 	mov.w	ip, #10
 810cdac:	4620      	mov	r0, r4
 810cdae:	f810 2b01 	ldrb.w	r2, [r0], #1
 810cdb2:	3a30      	subs	r2, #48	; 0x30
 810cdb4:	2a09      	cmp	r2, #9
 810cdb6:	d903      	bls.n	810cdc0 <_svfiprintf_r+0x1a8>
 810cdb8:	2b00      	cmp	r3, #0
 810cdba:	d0c5      	beq.n	810cd48 <_svfiprintf_r+0x130>
 810cdbc:	9105      	str	r1, [sp, #20]
 810cdbe:	e7c3      	b.n	810cd48 <_svfiprintf_r+0x130>
 810cdc0:	fb0c 2101 	mla	r1, ip, r1, r2
 810cdc4:	4604      	mov	r4, r0
 810cdc6:	2301      	movs	r3, #1
 810cdc8:	e7f0      	b.n	810cdac <_svfiprintf_r+0x194>
 810cdca:	ab03      	add	r3, sp, #12
 810cdcc:	9300      	str	r3, [sp, #0]
 810cdce:	462a      	mov	r2, r5
 810cdd0:	4b0f      	ldr	r3, [pc, #60]	; (810ce10 <_svfiprintf_r+0x1f8>)
 810cdd2:	a904      	add	r1, sp, #16
 810cdd4:	4638      	mov	r0, r7
 810cdd6:	f7fc f929 	bl	810902c <_printf_float>
 810cdda:	1c42      	adds	r2, r0, #1
 810cddc:	4606      	mov	r6, r0
 810cdde:	d1d6      	bne.n	810cd8e <_svfiprintf_r+0x176>
 810cde0:	89ab      	ldrh	r3, [r5, #12]
 810cde2:	065b      	lsls	r3, r3, #25
 810cde4:	f53f af2c 	bmi.w	810cc40 <_svfiprintf_r+0x28>
 810cde8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cdea:	b01d      	add	sp, #116	; 0x74
 810cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cdf0:	ab03      	add	r3, sp, #12
 810cdf2:	9300      	str	r3, [sp, #0]
 810cdf4:	462a      	mov	r2, r5
 810cdf6:	4b06      	ldr	r3, [pc, #24]	; (810ce10 <_svfiprintf_r+0x1f8>)
 810cdf8:	a904      	add	r1, sp, #16
 810cdfa:	4638      	mov	r0, r7
 810cdfc:	f7fc fbba 	bl	8109574 <_printf_i>
 810ce00:	e7eb      	b.n	810cdda <_svfiprintf_r+0x1c2>
 810ce02:	bf00      	nop
 810ce04:	0810da4c 	.word	0x0810da4c
 810ce08:	0810da56 	.word	0x0810da56
 810ce0c:	0810902d 	.word	0x0810902d
 810ce10:	0810cb61 	.word	0x0810cb61
 810ce14:	0810da52 	.word	0x0810da52

0810ce18 <_read_r>:
 810ce18:	b538      	push	{r3, r4, r5, lr}
 810ce1a:	4d07      	ldr	r5, [pc, #28]	; (810ce38 <_read_r+0x20>)
 810ce1c:	4604      	mov	r4, r0
 810ce1e:	4608      	mov	r0, r1
 810ce20:	4611      	mov	r1, r2
 810ce22:	2200      	movs	r2, #0
 810ce24:	602a      	str	r2, [r5, #0]
 810ce26:	461a      	mov	r2, r3
 810ce28:	f7f4 fe54 	bl	8101ad4 <_read>
 810ce2c:	1c43      	adds	r3, r0, #1
 810ce2e:	d102      	bne.n	810ce36 <_read_r+0x1e>
 810ce30:	682b      	ldr	r3, [r5, #0]
 810ce32:	b103      	cbz	r3, 810ce36 <_read_r+0x1e>
 810ce34:	6023      	str	r3, [r4, #0]
 810ce36:	bd38      	pop	{r3, r4, r5, pc}
 810ce38:	10004d98 	.word	0x10004d98
 810ce3c:	00000000 	.word	0x00000000

0810ce40 <nan>:
 810ce40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810ce48 <nan+0x8>
 810ce44:	4770      	bx	lr
 810ce46:	bf00      	nop
 810ce48:	00000000 	.word	0x00000000
 810ce4c:	7ff80000 	.word	0x7ff80000

0810ce50 <strncmp>:
 810ce50:	b510      	push	{r4, lr}
 810ce52:	b17a      	cbz	r2, 810ce74 <strncmp+0x24>
 810ce54:	4603      	mov	r3, r0
 810ce56:	3901      	subs	r1, #1
 810ce58:	1884      	adds	r4, r0, r2
 810ce5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 810ce5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810ce62:	4290      	cmp	r0, r2
 810ce64:	d101      	bne.n	810ce6a <strncmp+0x1a>
 810ce66:	42a3      	cmp	r3, r4
 810ce68:	d101      	bne.n	810ce6e <strncmp+0x1e>
 810ce6a:	1a80      	subs	r0, r0, r2
 810ce6c:	bd10      	pop	{r4, pc}
 810ce6e:	2800      	cmp	r0, #0
 810ce70:	d1f3      	bne.n	810ce5a <strncmp+0xa>
 810ce72:	e7fa      	b.n	810ce6a <strncmp+0x1a>
 810ce74:	4610      	mov	r0, r2
 810ce76:	e7f9      	b.n	810ce6c <strncmp+0x1c>

0810ce78 <__ascii_wctomb>:
 810ce78:	b149      	cbz	r1, 810ce8e <__ascii_wctomb+0x16>
 810ce7a:	2aff      	cmp	r2, #255	; 0xff
 810ce7c:	bf85      	ittet	hi
 810ce7e:	238a      	movhi	r3, #138	; 0x8a
 810ce80:	6003      	strhi	r3, [r0, #0]
 810ce82:	700a      	strbls	r2, [r1, #0]
 810ce84:	f04f 30ff 	movhi.w	r0, #4294967295
 810ce88:	bf98      	it	ls
 810ce8a:	2001      	movls	r0, #1
 810ce8c:	4770      	bx	lr
 810ce8e:	4608      	mov	r0, r1
 810ce90:	4770      	bx	lr
	...

0810ce94 <__assert_func>:
 810ce94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ce96:	4614      	mov	r4, r2
 810ce98:	461a      	mov	r2, r3
 810ce9a:	4b09      	ldr	r3, [pc, #36]	; (810cec0 <__assert_func+0x2c>)
 810ce9c:	681b      	ldr	r3, [r3, #0]
 810ce9e:	4605      	mov	r5, r0
 810cea0:	68d8      	ldr	r0, [r3, #12]
 810cea2:	b14c      	cbz	r4, 810ceb8 <__assert_func+0x24>
 810cea4:	4b07      	ldr	r3, [pc, #28]	; (810cec4 <__assert_func+0x30>)
 810cea6:	9100      	str	r1, [sp, #0]
 810cea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ceac:	4906      	ldr	r1, [pc, #24]	; (810cec8 <__assert_func+0x34>)
 810ceae:	462b      	mov	r3, r5
 810ceb0:	f000 f80e 	bl	810ced0 <fiprintf>
 810ceb4:	f000 fa80 	bl	810d3b8 <abort>
 810ceb8:	4b04      	ldr	r3, [pc, #16]	; (810cecc <__assert_func+0x38>)
 810ceba:	461c      	mov	r4, r3
 810cebc:	e7f3      	b.n	810cea6 <__assert_func+0x12>
 810cebe:	bf00      	nop
 810cec0:	1000002c 	.word	0x1000002c
 810cec4:	0810da5d 	.word	0x0810da5d
 810cec8:	0810da6a 	.word	0x0810da6a
 810cecc:	0810da98 	.word	0x0810da98

0810ced0 <fiprintf>:
 810ced0:	b40e      	push	{r1, r2, r3}
 810ced2:	b503      	push	{r0, r1, lr}
 810ced4:	4601      	mov	r1, r0
 810ced6:	ab03      	add	r3, sp, #12
 810ced8:	4805      	ldr	r0, [pc, #20]	; (810cef0 <fiprintf+0x20>)
 810ceda:	f853 2b04 	ldr.w	r2, [r3], #4
 810cede:	6800      	ldr	r0, [r0, #0]
 810cee0:	9301      	str	r3, [sp, #4]
 810cee2:	f000 f879 	bl	810cfd8 <_vfiprintf_r>
 810cee6:	b002      	add	sp, #8
 810cee8:	f85d eb04 	ldr.w	lr, [sp], #4
 810ceec:	b003      	add	sp, #12
 810ceee:	4770      	bx	lr
 810cef0:	1000002c 	.word	0x1000002c

0810cef4 <memmove>:
 810cef4:	4288      	cmp	r0, r1
 810cef6:	b510      	push	{r4, lr}
 810cef8:	eb01 0402 	add.w	r4, r1, r2
 810cefc:	d902      	bls.n	810cf04 <memmove+0x10>
 810cefe:	4284      	cmp	r4, r0
 810cf00:	4623      	mov	r3, r4
 810cf02:	d807      	bhi.n	810cf14 <memmove+0x20>
 810cf04:	1e43      	subs	r3, r0, #1
 810cf06:	42a1      	cmp	r1, r4
 810cf08:	d008      	beq.n	810cf1c <memmove+0x28>
 810cf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810cf0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810cf12:	e7f8      	b.n	810cf06 <memmove+0x12>
 810cf14:	4402      	add	r2, r0
 810cf16:	4601      	mov	r1, r0
 810cf18:	428a      	cmp	r2, r1
 810cf1a:	d100      	bne.n	810cf1e <memmove+0x2a>
 810cf1c:	bd10      	pop	{r4, pc}
 810cf1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810cf22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810cf26:	e7f7      	b.n	810cf18 <memmove+0x24>

0810cf28 <_realloc_r>:
 810cf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cf2c:	4680      	mov	r8, r0
 810cf2e:	4614      	mov	r4, r2
 810cf30:	460e      	mov	r6, r1
 810cf32:	b921      	cbnz	r1, 810cf3e <_realloc_r+0x16>
 810cf34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810cf38:	4611      	mov	r1, r2
 810cf3a:	f7fb bf63 	b.w	8108e04 <_malloc_r>
 810cf3e:	b92a      	cbnz	r2, 810cf4c <_realloc_r+0x24>
 810cf40:	f7ff fdc2 	bl	810cac8 <_free_r>
 810cf44:	4625      	mov	r5, r4
 810cf46:	4628      	mov	r0, r5
 810cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cf4c:	f000 faa0 	bl	810d490 <_malloc_usable_size_r>
 810cf50:	4284      	cmp	r4, r0
 810cf52:	4607      	mov	r7, r0
 810cf54:	d802      	bhi.n	810cf5c <_realloc_r+0x34>
 810cf56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810cf5a:	d812      	bhi.n	810cf82 <_realloc_r+0x5a>
 810cf5c:	4621      	mov	r1, r4
 810cf5e:	4640      	mov	r0, r8
 810cf60:	f7fb ff50 	bl	8108e04 <_malloc_r>
 810cf64:	4605      	mov	r5, r0
 810cf66:	2800      	cmp	r0, #0
 810cf68:	d0ed      	beq.n	810cf46 <_realloc_r+0x1e>
 810cf6a:	42bc      	cmp	r4, r7
 810cf6c:	4622      	mov	r2, r4
 810cf6e:	4631      	mov	r1, r6
 810cf70:	bf28      	it	cs
 810cf72:	463a      	movcs	r2, r7
 810cf74:	f7fb ff0f 	bl	8108d96 <memcpy>
 810cf78:	4631      	mov	r1, r6
 810cf7a:	4640      	mov	r0, r8
 810cf7c:	f7ff fda4 	bl	810cac8 <_free_r>
 810cf80:	e7e1      	b.n	810cf46 <_realloc_r+0x1e>
 810cf82:	4635      	mov	r5, r6
 810cf84:	e7df      	b.n	810cf46 <_realloc_r+0x1e>

0810cf86 <__sfputc_r>:
 810cf86:	6893      	ldr	r3, [r2, #8]
 810cf88:	3b01      	subs	r3, #1
 810cf8a:	2b00      	cmp	r3, #0
 810cf8c:	b410      	push	{r4}
 810cf8e:	6093      	str	r3, [r2, #8]
 810cf90:	da08      	bge.n	810cfa4 <__sfputc_r+0x1e>
 810cf92:	6994      	ldr	r4, [r2, #24]
 810cf94:	42a3      	cmp	r3, r4
 810cf96:	db01      	blt.n	810cf9c <__sfputc_r+0x16>
 810cf98:	290a      	cmp	r1, #10
 810cf9a:	d103      	bne.n	810cfa4 <__sfputc_r+0x1e>
 810cf9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810cfa0:	f000 b94a 	b.w	810d238 <__swbuf_r>
 810cfa4:	6813      	ldr	r3, [r2, #0]
 810cfa6:	1c58      	adds	r0, r3, #1
 810cfa8:	6010      	str	r0, [r2, #0]
 810cfaa:	7019      	strb	r1, [r3, #0]
 810cfac:	4608      	mov	r0, r1
 810cfae:	f85d 4b04 	ldr.w	r4, [sp], #4
 810cfb2:	4770      	bx	lr

0810cfb4 <__sfputs_r>:
 810cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cfb6:	4606      	mov	r6, r0
 810cfb8:	460f      	mov	r7, r1
 810cfba:	4614      	mov	r4, r2
 810cfbc:	18d5      	adds	r5, r2, r3
 810cfbe:	42ac      	cmp	r4, r5
 810cfc0:	d101      	bne.n	810cfc6 <__sfputs_r+0x12>
 810cfc2:	2000      	movs	r0, #0
 810cfc4:	e007      	b.n	810cfd6 <__sfputs_r+0x22>
 810cfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810cfca:	463a      	mov	r2, r7
 810cfcc:	4630      	mov	r0, r6
 810cfce:	f7ff ffda 	bl	810cf86 <__sfputc_r>
 810cfd2:	1c43      	adds	r3, r0, #1
 810cfd4:	d1f3      	bne.n	810cfbe <__sfputs_r+0xa>
 810cfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0810cfd8 <_vfiprintf_r>:
 810cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cfdc:	460d      	mov	r5, r1
 810cfde:	b09d      	sub	sp, #116	; 0x74
 810cfe0:	4614      	mov	r4, r2
 810cfe2:	4698      	mov	r8, r3
 810cfe4:	4606      	mov	r6, r0
 810cfe6:	b118      	cbz	r0, 810cff0 <_vfiprintf_r+0x18>
 810cfe8:	6983      	ldr	r3, [r0, #24]
 810cfea:	b90b      	cbnz	r3, 810cff0 <_vfiprintf_r+0x18>
 810cfec:	f7fb fe0e 	bl	8108c0c <__sinit>
 810cff0:	4b89      	ldr	r3, [pc, #548]	; (810d218 <_vfiprintf_r+0x240>)
 810cff2:	429d      	cmp	r5, r3
 810cff4:	d11b      	bne.n	810d02e <_vfiprintf_r+0x56>
 810cff6:	6875      	ldr	r5, [r6, #4]
 810cff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810cffa:	07d9      	lsls	r1, r3, #31
 810cffc:	d405      	bmi.n	810d00a <_vfiprintf_r+0x32>
 810cffe:	89ab      	ldrh	r3, [r5, #12]
 810d000:	059a      	lsls	r2, r3, #22
 810d002:	d402      	bmi.n	810d00a <_vfiprintf_r+0x32>
 810d004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d006:	f7fb fec4 	bl	8108d92 <__retarget_lock_acquire_recursive>
 810d00a:	89ab      	ldrh	r3, [r5, #12]
 810d00c:	071b      	lsls	r3, r3, #28
 810d00e:	d501      	bpl.n	810d014 <_vfiprintf_r+0x3c>
 810d010:	692b      	ldr	r3, [r5, #16]
 810d012:	b9eb      	cbnz	r3, 810d050 <_vfiprintf_r+0x78>
 810d014:	4629      	mov	r1, r5
 810d016:	4630      	mov	r0, r6
 810d018:	f000 f960 	bl	810d2dc <__swsetup_r>
 810d01c:	b1c0      	cbz	r0, 810d050 <_vfiprintf_r+0x78>
 810d01e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d020:	07dc      	lsls	r4, r3, #31
 810d022:	d50e      	bpl.n	810d042 <_vfiprintf_r+0x6a>
 810d024:	f04f 30ff 	mov.w	r0, #4294967295
 810d028:	b01d      	add	sp, #116	; 0x74
 810d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d02e:	4b7b      	ldr	r3, [pc, #492]	; (810d21c <_vfiprintf_r+0x244>)
 810d030:	429d      	cmp	r5, r3
 810d032:	d101      	bne.n	810d038 <_vfiprintf_r+0x60>
 810d034:	68b5      	ldr	r5, [r6, #8]
 810d036:	e7df      	b.n	810cff8 <_vfiprintf_r+0x20>
 810d038:	4b79      	ldr	r3, [pc, #484]	; (810d220 <_vfiprintf_r+0x248>)
 810d03a:	429d      	cmp	r5, r3
 810d03c:	bf08      	it	eq
 810d03e:	68f5      	ldreq	r5, [r6, #12]
 810d040:	e7da      	b.n	810cff8 <_vfiprintf_r+0x20>
 810d042:	89ab      	ldrh	r3, [r5, #12]
 810d044:	0598      	lsls	r0, r3, #22
 810d046:	d4ed      	bmi.n	810d024 <_vfiprintf_r+0x4c>
 810d048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d04a:	f7fb fea3 	bl	8108d94 <__retarget_lock_release_recursive>
 810d04e:	e7e9      	b.n	810d024 <_vfiprintf_r+0x4c>
 810d050:	2300      	movs	r3, #0
 810d052:	9309      	str	r3, [sp, #36]	; 0x24
 810d054:	2320      	movs	r3, #32
 810d056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d05a:	f8cd 800c 	str.w	r8, [sp, #12]
 810d05e:	2330      	movs	r3, #48	; 0x30
 810d060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810d224 <_vfiprintf_r+0x24c>
 810d064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d068:	f04f 0901 	mov.w	r9, #1
 810d06c:	4623      	mov	r3, r4
 810d06e:	469a      	mov	sl, r3
 810d070:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d074:	b10a      	cbz	r2, 810d07a <_vfiprintf_r+0xa2>
 810d076:	2a25      	cmp	r2, #37	; 0x25
 810d078:	d1f9      	bne.n	810d06e <_vfiprintf_r+0x96>
 810d07a:	ebba 0b04 	subs.w	fp, sl, r4
 810d07e:	d00b      	beq.n	810d098 <_vfiprintf_r+0xc0>
 810d080:	465b      	mov	r3, fp
 810d082:	4622      	mov	r2, r4
 810d084:	4629      	mov	r1, r5
 810d086:	4630      	mov	r0, r6
 810d088:	f7ff ff94 	bl	810cfb4 <__sfputs_r>
 810d08c:	3001      	adds	r0, #1
 810d08e:	f000 80aa 	beq.w	810d1e6 <_vfiprintf_r+0x20e>
 810d092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d094:	445a      	add	r2, fp
 810d096:	9209      	str	r2, [sp, #36]	; 0x24
 810d098:	f89a 3000 	ldrb.w	r3, [sl]
 810d09c:	2b00      	cmp	r3, #0
 810d09e:	f000 80a2 	beq.w	810d1e6 <_vfiprintf_r+0x20e>
 810d0a2:	2300      	movs	r3, #0
 810d0a4:	f04f 32ff 	mov.w	r2, #4294967295
 810d0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d0ac:	f10a 0a01 	add.w	sl, sl, #1
 810d0b0:	9304      	str	r3, [sp, #16]
 810d0b2:	9307      	str	r3, [sp, #28]
 810d0b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d0b8:	931a      	str	r3, [sp, #104]	; 0x68
 810d0ba:	4654      	mov	r4, sl
 810d0bc:	2205      	movs	r2, #5
 810d0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d0c2:	4858      	ldr	r0, [pc, #352]	; (810d224 <_vfiprintf_r+0x24c>)
 810d0c4:	f7f3 f914 	bl	81002f0 <memchr>
 810d0c8:	9a04      	ldr	r2, [sp, #16]
 810d0ca:	b9d8      	cbnz	r0, 810d104 <_vfiprintf_r+0x12c>
 810d0cc:	06d1      	lsls	r1, r2, #27
 810d0ce:	bf44      	itt	mi
 810d0d0:	2320      	movmi	r3, #32
 810d0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d0d6:	0713      	lsls	r3, r2, #28
 810d0d8:	bf44      	itt	mi
 810d0da:	232b      	movmi	r3, #43	; 0x2b
 810d0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d0e0:	f89a 3000 	ldrb.w	r3, [sl]
 810d0e4:	2b2a      	cmp	r3, #42	; 0x2a
 810d0e6:	d015      	beq.n	810d114 <_vfiprintf_r+0x13c>
 810d0e8:	9a07      	ldr	r2, [sp, #28]
 810d0ea:	4654      	mov	r4, sl
 810d0ec:	2000      	movs	r0, #0
 810d0ee:	f04f 0c0a 	mov.w	ip, #10
 810d0f2:	4621      	mov	r1, r4
 810d0f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d0f8:	3b30      	subs	r3, #48	; 0x30
 810d0fa:	2b09      	cmp	r3, #9
 810d0fc:	d94e      	bls.n	810d19c <_vfiprintf_r+0x1c4>
 810d0fe:	b1b0      	cbz	r0, 810d12e <_vfiprintf_r+0x156>
 810d100:	9207      	str	r2, [sp, #28]
 810d102:	e014      	b.n	810d12e <_vfiprintf_r+0x156>
 810d104:	eba0 0308 	sub.w	r3, r0, r8
 810d108:	fa09 f303 	lsl.w	r3, r9, r3
 810d10c:	4313      	orrs	r3, r2
 810d10e:	9304      	str	r3, [sp, #16]
 810d110:	46a2      	mov	sl, r4
 810d112:	e7d2      	b.n	810d0ba <_vfiprintf_r+0xe2>
 810d114:	9b03      	ldr	r3, [sp, #12]
 810d116:	1d19      	adds	r1, r3, #4
 810d118:	681b      	ldr	r3, [r3, #0]
 810d11a:	9103      	str	r1, [sp, #12]
 810d11c:	2b00      	cmp	r3, #0
 810d11e:	bfbb      	ittet	lt
 810d120:	425b      	neglt	r3, r3
 810d122:	f042 0202 	orrlt.w	r2, r2, #2
 810d126:	9307      	strge	r3, [sp, #28]
 810d128:	9307      	strlt	r3, [sp, #28]
 810d12a:	bfb8      	it	lt
 810d12c:	9204      	strlt	r2, [sp, #16]
 810d12e:	7823      	ldrb	r3, [r4, #0]
 810d130:	2b2e      	cmp	r3, #46	; 0x2e
 810d132:	d10c      	bne.n	810d14e <_vfiprintf_r+0x176>
 810d134:	7863      	ldrb	r3, [r4, #1]
 810d136:	2b2a      	cmp	r3, #42	; 0x2a
 810d138:	d135      	bne.n	810d1a6 <_vfiprintf_r+0x1ce>
 810d13a:	9b03      	ldr	r3, [sp, #12]
 810d13c:	1d1a      	adds	r2, r3, #4
 810d13e:	681b      	ldr	r3, [r3, #0]
 810d140:	9203      	str	r2, [sp, #12]
 810d142:	2b00      	cmp	r3, #0
 810d144:	bfb8      	it	lt
 810d146:	f04f 33ff 	movlt.w	r3, #4294967295
 810d14a:	3402      	adds	r4, #2
 810d14c:	9305      	str	r3, [sp, #20]
 810d14e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810d234 <_vfiprintf_r+0x25c>
 810d152:	7821      	ldrb	r1, [r4, #0]
 810d154:	2203      	movs	r2, #3
 810d156:	4650      	mov	r0, sl
 810d158:	f7f3 f8ca 	bl	81002f0 <memchr>
 810d15c:	b140      	cbz	r0, 810d170 <_vfiprintf_r+0x198>
 810d15e:	2340      	movs	r3, #64	; 0x40
 810d160:	eba0 000a 	sub.w	r0, r0, sl
 810d164:	fa03 f000 	lsl.w	r0, r3, r0
 810d168:	9b04      	ldr	r3, [sp, #16]
 810d16a:	4303      	orrs	r3, r0
 810d16c:	3401      	adds	r4, #1
 810d16e:	9304      	str	r3, [sp, #16]
 810d170:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d174:	482c      	ldr	r0, [pc, #176]	; (810d228 <_vfiprintf_r+0x250>)
 810d176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d17a:	2206      	movs	r2, #6
 810d17c:	f7f3 f8b8 	bl	81002f0 <memchr>
 810d180:	2800      	cmp	r0, #0
 810d182:	d03f      	beq.n	810d204 <_vfiprintf_r+0x22c>
 810d184:	4b29      	ldr	r3, [pc, #164]	; (810d22c <_vfiprintf_r+0x254>)
 810d186:	bb1b      	cbnz	r3, 810d1d0 <_vfiprintf_r+0x1f8>
 810d188:	9b03      	ldr	r3, [sp, #12]
 810d18a:	3307      	adds	r3, #7
 810d18c:	f023 0307 	bic.w	r3, r3, #7
 810d190:	3308      	adds	r3, #8
 810d192:	9303      	str	r3, [sp, #12]
 810d194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d196:	443b      	add	r3, r7
 810d198:	9309      	str	r3, [sp, #36]	; 0x24
 810d19a:	e767      	b.n	810d06c <_vfiprintf_r+0x94>
 810d19c:	fb0c 3202 	mla	r2, ip, r2, r3
 810d1a0:	460c      	mov	r4, r1
 810d1a2:	2001      	movs	r0, #1
 810d1a4:	e7a5      	b.n	810d0f2 <_vfiprintf_r+0x11a>
 810d1a6:	2300      	movs	r3, #0
 810d1a8:	3401      	adds	r4, #1
 810d1aa:	9305      	str	r3, [sp, #20]
 810d1ac:	4619      	mov	r1, r3
 810d1ae:	f04f 0c0a 	mov.w	ip, #10
 810d1b2:	4620      	mov	r0, r4
 810d1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d1b8:	3a30      	subs	r2, #48	; 0x30
 810d1ba:	2a09      	cmp	r2, #9
 810d1bc:	d903      	bls.n	810d1c6 <_vfiprintf_r+0x1ee>
 810d1be:	2b00      	cmp	r3, #0
 810d1c0:	d0c5      	beq.n	810d14e <_vfiprintf_r+0x176>
 810d1c2:	9105      	str	r1, [sp, #20]
 810d1c4:	e7c3      	b.n	810d14e <_vfiprintf_r+0x176>
 810d1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 810d1ca:	4604      	mov	r4, r0
 810d1cc:	2301      	movs	r3, #1
 810d1ce:	e7f0      	b.n	810d1b2 <_vfiprintf_r+0x1da>
 810d1d0:	ab03      	add	r3, sp, #12
 810d1d2:	9300      	str	r3, [sp, #0]
 810d1d4:	462a      	mov	r2, r5
 810d1d6:	4b16      	ldr	r3, [pc, #88]	; (810d230 <_vfiprintf_r+0x258>)
 810d1d8:	a904      	add	r1, sp, #16
 810d1da:	4630      	mov	r0, r6
 810d1dc:	f7fb ff26 	bl	810902c <_printf_float>
 810d1e0:	4607      	mov	r7, r0
 810d1e2:	1c78      	adds	r0, r7, #1
 810d1e4:	d1d6      	bne.n	810d194 <_vfiprintf_r+0x1bc>
 810d1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d1e8:	07d9      	lsls	r1, r3, #31
 810d1ea:	d405      	bmi.n	810d1f8 <_vfiprintf_r+0x220>
 810d1ec:	89ab      	ldrh	r3, [r5, #12]
 810d1ee:	059a      	lsls	r2, r3, #22
 810d1f0:	d402      	bmi.n	810d1f8 <_vfiprintf_r+0x220>
 810d1f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d1f4:	f7fb fdce 	bl	8108d94 <__retarget_lock_release_recursive>
 810d1f8:	89ab      	ldrh	r3, [r5, #12]
 810d1fa:	065b      	lsls	r3, r3, #25
 810d1fc:	f53f af12 	bmi.w	810d024 <_vfiprintf_r+0x4c>
 810d200:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d202:	e711      	b.n	810d028 <_vfiprintf_r+0x50>
 810d204:	ab03      	add	r3, sp, #12
 810d206:	9300      	str	r3, [sp, #0]
 810d208:	462a      	mov	r2, r5
 810d20a:	4b09      	ldr	r3, [pc, #36]	; (810d230 <_vfiprintf_r+0x258>)
 810d20c:	a904      	add	r1, sp, #16
 810d20e:	4630      	mov	r0, r6
 810d210:	f7fc f9b0 	bl	8109574 <_printf_i>
 810d214:	e7e4      	b.n	810d1e0 <_vfiprintf_r+0x208>
 810d216:	bf00      	nop
 810d218:	0810d618 	.word	0x0810d618
 810d21c:	0810d638 	.word	0x0810d638
 810d220:	0810d5f8 	.word	0x0810d5f8
 810d224:	0810da4c 	.word	0x0810da4c
 810d228:	0810da56 	.word	0x0810da56
 810d22c:	0810902d 	.word	0x0810902d
 810d230:	0810cfb5 	.word	0x0810cfb5
 810d234:	0810da52 	.word	0x0810da52

0810d238 <__swbuf_r>:
 810d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d23a:	460e      	mov	r6, r1
 810d23c:	4614      	mov	r4, r2
 810d23e:	4605      	mov	r5, r0
 810d240:	b118      	cbz	r0, 810d24a <__swbuf_r+0x12>
 810d242:	6983      	ldr	r3, [r0, #24]
 810d244:	b90b      	cbnz	r3, 810d24a <__swbuf_r+0x12>
 810d246:	f7fb fce1 	bl	8108c0c <__sinit>
 810d24a:	4b21      	ldr	r3, [pc, #132]	; (810d2d0 <__swbuf_r+0x98>)
 810d24c:	429c      	cmp	r4, r3
 810d24e:	d12b      	bne.n	810d2a8 <__swbuf_r+0x70>
 810d250:	686c      	ldr	r4, [r5, #4]
 810d252:	69a3      	ldr	r3, [r4, #24]
 810d254:	60a3      	str	r3, [r4, #8]
 810d256:	89a3      	ldrh	r3, [r4, #12]
 810d258:	071a      	lsls	r2, r3, #28
 810d25a:	d52f      	bpl.n	810d2bc <__swbuf_r+0x84>
 810d25c:	6923      	ldr	r3, [r4, #16]
 810d25e:	b36b      	cbz	r3, 810d2bc <__swbuf_r+0x84>
 810d260:	6923      	ldr	r3, [r4, #16]
 810d262:	6820      	ldr	r0, [r4, #0]
 810d264:	1ac0      	subs	r0, r0, r3
 810d266:	6963      	ldr	r3, [r4, #20]
 810d268:	b2f6      	uxtb	r6, r6
 810d26a:	4283      	cmp	r3, r0
 810d26c:	4637      	mov	r7, r6
 810d26e:	dc04      	bgt.n	810d27a <__swbuf_r+0x42>
 810d270:	4621      	mov	r1, r4
 810d272:	4628      	mov	r0, r5
 810d274:	f7fe fb68 	bl	810b948 <_fflush_r>
 810d278:	bb30      	cbnz	r0, 810d2c8 <__swbuf_r+0x90>
 810d27a:	68a3      	ldr	r3, [r4, #8]
 810d27c:	3b01      	subs	r3, #1
 810d27e:	60a3      	str	r3, [r4, #8]
 810d280:	6823      	ldr	r3, [r4, #0]
 810d282:	1c5a      	adds	r2, r3, #1
 810d284:	6022      	str	r2, [r4, #0]
 810d286:	701e      	strb	r6, [r3, #0]
 810d288:	6963      	ldr	r3, [r4, #20]
 810d28a:	3001      	adds	r0, #1
 810d28c:	4283      	cmp	r3, r0
 810d28e:	d004      	beq.n	810d29a <__swbuf_r+0x62>
 810d290:	89a3      	ldrh	r3, [r4, #12]
 810d292:	07db      	lsls	r3, r3, #31
 810d294:	d506      	bpl.n	810d2a4 <__swbuf_r+0x6c>
 810d296:	2e0a      	cmp	r6, #10
 810d298:	d104      	bne.n	810d2a4 <__swbuf_r+0x6c>
 810d29a:	4621      	mov	r1, r4
 810d29c:	4628      	mov	r0, r5
 810d29e:	f7fe fb53 	bl	810b948 <_fflush_r>
 810d2a2:	b988      	cbnz	r0, 810d2c8 <__swbuf_r+0x90>
 810d2a4:	4638      	mov	r0, r7
 810d2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d2a8:	4b0a      	ldr	r3, [pc, #40]	; (810d2d4 <__swbuf_r+0x9c>)
 810d2aa:	429c      	cmp	r4, r3
 810d2ac:	d101      	bne.n	810d2b2 <__swbuf_r+0x7a>
 810d2ae:	68ac      	ldr	r4, [r5, #8]
 810d2b0:	e7cf      	b.n	810d252 <__swbuf_r+0x1a>
 810d2b2:	4b09      	ldr	r3, [pc, #36]	; (810d2d8 <__swbuf_r+0xa0>)
 810d2b4:	429c      	cmp	r4, r3
 810d2b6:	bf08      	it	eq
 810d2b8:	68ec      	ldreq	r4, [r5, #12]
 810d2ba:	e7ca      	b.n	810d252 <__swbuf_r+0x1a>
 810d2bc:	4621      	mov	r1, r4
 810d2be:	4628      	mov	r0, r5
 810d2c0:	f000 f80c 	bl	810d2dc <__swsetup_r>
 810d2c4:	2800      	cmp	r0, #0
 810d2c6:	d0cb      	beq.n	810d260 <__swbuf_r+0x28>
 810d2c8:	f04f 37ff 	mov.w	r7, #4294967295
 810d2cc:	e7ea      	b.n	810d2a4 <__swbuf_r+0x6c>
 810d2ce:	bf00      	nop
 810d2d0:	0810d618 	.word	0x0810d618
 810d2d4:	0810d638 	.word	0x0810d638
 810d2d8:	0810d5f8 	.word	0x0810d5f8

0810d2dc <__swsetup_r>:
 810d2dc:	4b32      	ldr	r3, [pc, #200]	; (810d3a8 <__swsetup_r+0xcc>)
 810d2de:	b570      	push	{r4, r5, r6, lr}
 810d2e0:	681d      	ldr	r5, [r3, #0]
 810d2e2:	4606      	mov	r6, r0
 810d2e4:	460c      	mov	r4, r1
 810d2e6:	b125      	cbz	r5, 810d2f2 <__swsetup_r+0x16>
 810d2e8:	69ab      	ldr	r3, [r5, #24]
 810d2ea:	b913      	cbnz	r3, 810d2f2 <__swsetup_r+0x16>
 810d2ec:	4628      	mov	r0, r5
 810d2ee:	f7fb fc8d 	bl	8108c0c <__sinit>
 810d2f2:	4b2e      	ldr	r3, [pc, #184]	; (810d3ac <__swsetup_r+0xd0>)
 810d2f4:	429c      	cmp	r4, r3
 810d2f6:	d10f      	bne.n	810d318 <__swsetup_r+0x3c>
 810d2f8:	686c      	ldr	r4, [r5, #4]
 810d2fa:	89a3      	ldrh	r3, [r4, #12]
 810d2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d300:	0719      	lsls	r1, r3, #28
 810d302:	d42c      	bmi.n	810d35e <__swsetup_r+0x82>
 810d304:	06dd      	lsls	r5, r3, #27
 810d306:	d411      	bmi.n	810d32c <__swsetup_r+0x50>
 810d308:	2309      	movs	r3, #9
 810d30a:	6033      	str	r3, [r6, #0]
 810d30c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d310:	81a3      	strh	r3, [r4, #12]
 810d312:	f04f 30ff 	mov.w	r0, #4294967295
 810d316:	e03e      	b.n	810d396 <__swsetup_r+0xba>
 810d318:	4b25      	ldr	r3, [pc, #148]	; (810d3b0 <__swsetup_r+0xd4>)
 810d31a:	429c      	cmp	r4, r3
 810d31c:	d101      	bne.n	810d322 <__swsetup_r+0x46>
 810d31e:	68ac      	ldr	r4, [r5, #8]
 810d320:	e7eb      	b.n	810d2fa <__swsetup_r+0x1e>
 810d322:	4b24      	ldr	r3, [pc, #144]	; (810d3b4 <__swsetup_r+0xd8>)
 810d324:	429c      	cmp	r4, r3
 810d326:	bf08      	it	eq
 810d328:	68ec      	ldreq	r4, [r5, #12]
 810d32a:	e7e6      	b.n	810d2fa <__swsetup_r+0x1e>
 810d32c:	0758      	lsls	r0, r3, #29
 810d32e:	d512      	bpl.n	810d356 <__swsetup_r+0x7a>
 810d330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d332:	b141      	cbz	r1, 810d346 <__swsetup_r+0x6a>
 810d334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d338:	4299      	cmp	r1, r3
 810d33a:	d002      	beq.n	810d342 <__swsetup_r+0x66>
 810d33c:	4630      	mov	r0, r6
 810d33e:	f7ff fbc3 	bl	810cac8 <_free_r>
 810d342:	2300      	movs	r3, #0
 810d344:	6363      	str	r3, [r4, #52]	; 0x34
 810d346:	89a3      	ldrh	r3, [r4, #12]
 810d348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d34c:	81a3      	strh	r3, [r4, #12]
 810d34e:	2300      	movs	r3, #0
 810d350:	6063      	str	r3, [r4, #4]
 810d352:	6923      	ldr	r3, [r4, #16]
 810d354:	6023      	str	r3, [r4, #0]
 810d356:	89a3      	ldrh	r3, [r4, #12]
 810d358:	f043 0308 	orr.w	r3, r3, #8
 810d35c:	81a3      	strh	r3, [r4, #12]
 810d35e:	6923      	ldr	r3, [r4, #16]
 810d360:	b94b      	cbnz	r3, 810d376 <__swsetup_r+0x9a>
 810d362:	89a3      	ldrh	r3, [r4, #12]
 810d364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d36c:	d003      	beq.n	810d376 <__swsetup_r+0x9a>
 810d36e:	4621      	mov	r1, r4
 810d370:	4630      	mov	r0, r6
 810d372:	f000 f84d 	bl	810d410 <__smakebuf_r>
 810d376:	89a0      	ldrh	r0, [r4, #12]
 810d378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d37c:	f010 0301 	ands.w	r3, r0, #1
 810d380:	d00a      	beq.n	810d398 <__swsetup_r+0xbc>
 810d382:	2300      	movs	r3, #0
 810d384:	60a3      	str	r3, [r4, #8]
 810d386:	6963      	ldr	r3, [r4, #20]
 810d388:	425b      	negs	r3, r3
 810d38a:	61a3      	str	r3, [r4, #24]
 810d38c:	6923      	ldr	r3, [r4, #16]
 810d38e:	b943      	cbnz	r3, 810d3a2 <__swsetup_r+0xc6>
 810d390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d394:	d1ba      	bne.n	810d30c <__swsetup_r+0x30>
 810d396:	bd70      	pop	{r4, r5, r6, pc}
 810d398:	0781      	lsls	r1, r0, #30
 810d39a:	bf58      	it	pl
 810d39c:	6963      	ldrpl	r3, [r4, #20]
 810d39e:	60a3      	str	r3, [r4, #8]
 810d3a0:	e7f4      	b.n	810d38c <__swsetup_r+0xb0>
 810d3a2:	2000      	movs	r0, #0
 810d3a4:	e7f7      	b.n	810d396 <__swsetup_r+0xba>
 810d3a6:	bf00      	nop
 810d3a8:	1000002c 	.word	0x1000002c
 810d3ac:	0810d618 	.word	0x0810d618
 810d3b0:	0810d638 	.word	0x0810d638
 810d3b4:	0810d5f8 	.word	0x0810d5f8

0810d3b8 <abort>:
 810d3b8:	b508      	push	{r3, lr}
 810d3ba:	2006      	movs	r0, #6
 810d3bc:	f000 f898 	bl	810d4f0 <raise>
 810d3c0:	2001      	movs	r0, #1
 810d3c2:	f7f4 fb7d 	bl	8101ac0 <_exit>

0810d3c6 <__swhatbuf_r>:
 810d3c6:	b570      	push	{r4, r5, r6, lr}
 810d3c8:	460e      	mov	r6, r1
 810d3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d3ce:	2900      	cmp	r1, #0
 810d3d0:	b096      	sub	sp, #88	; 0x58
 810d3d2:	4614      	mov	r4, r2
 810d3d4:	461d      	mov	r5, r3
 810d3d6:	da08      	bge.n	810d3ea <__swhatbuf_r+0x24>
 810d3d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810d3dc:	2200      	movs	r2, #0
 810d3de:	602a      	str	r2, [r5, #0]
 810d3e0:	061a      	lsls	r2, r3, #24
 810d3e2:	d410      	bmi.n	810d406 <__swhatbuf_r+0x40>
 810d3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d3e8:	e00e      	b.n	810d408 <__swhatbuf_r+0x42>
 810d3ea:	466a      	mov	r2, sp
 810d3ec:	f000 f89c 	bl	810d528 <_fstat_r>
 810d3f0:	2800      	cmp	r0, #0
 810d3f2:	dbf1      	blt.n	810d3d8 <__swhatbuf_r+0x12>
 810d3f4:	9a01      	ldr	r2, [sp, #4]
 810d3f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810d3fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810d3fe:	425a      	negs	r2, r3
 810d400:	415a      	adcs	r2, r3
 810d402:	602a      	str	r2, [r5, #0]
 810d404:	e7ee      	b.n	810d3e4 <__swhatbuf_r+0x1e>
 810d406:	2340      	movs	r3, #64	; 0x40
 810d408:	2000      	movs	r0, #0
 810d40a:	6023      	str	r3, [r4, #0]
 810d40c:	b016      	add	sp, #88	; 0x58
 810d40e:	bd70      	pop	{r4, r5, r6, pc}

0810d410 <__smakebuf_r>:
 810d410:	898b      	ldrh	r3, [r1, #12]
 810d412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d414:	079d      	lsls	r5, r3, #30
 810d416:	4606      	mov	r6, r0
 810d418:	460c      	mov	r4, r1
 810d41a:	d507      	bpl.n	810d42c <__smakebuf_r+0x1c>
 810d41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d420:	6023      	str	r3, [r4, #0]
 810d422:	6123      	str	r3, [r4, #16]
 810d424:	2301      	movs	r3, #1
 810d426:	6163      	str	r3, [r4, #20]
 810d428:	b002      	add	sp, #8
 810d42a:	bd70      	pop	{r4, r5, r6, pc}
 810d42c:	ab01      	add	r3, sp, #4
 810d42e:	466a      	mov	r2, sp
 810d430:	f7ff ffc9 	bl	810d3c6 <__swhatbuf_r>
 810d434:	9900      	ldr	r1, [sp, #0]
 810d436:	4605      	mov	r5, r0
 810d438:	4630      	mov	r0, r6
 810d43a:	f7fb fce3 	bl	8108e04 <_malloc_r>
 810d43e:	b948      	cbnz	r0, 810d454 <__smakebuf_r+0x44>
 810d440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d444:	059a      	lsls	r2, r3, #22
 810d446:	d4ef      	bmi.n	810d428 <__smakebuf_r+0x18>
 810d448:	f023 0303 	bic.w	r3, r3, #3
 810d44c:	f043 0302 	orr.w	r3, r3, #2
 810d450:	81a3      	strh	r3, [r4, #12]
 810d452:	e7e3      	b.n	810d41c <__smakebuf_r+0xc>
 810d454:	4b0d      	ldr	r3, [pc, #52]	; (810d48c <__smakebuf_r+0x7c>)
 810d456:	62b3      	str	r3, [r6, #40]	; 0x28
 810d458:	89a3      	ldrh	r3, [r4, #12]
 810d45a:	6020      	str	r0, [r4, #0]
 810d45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d460:	81a3      	strh	r3, [r4, #12]
 810d462:	9b00      	ldr	r3, [sp, #0]
 810d464:	6163      	str	r3, [r4, #20]
 810d466:	9b01      	ldr	r3, [sp, #4]
 810d468:	6120      	str	r0, [r4, #16]
 810d46a:	b15b      	cbz	r3, 810d484 <__smakebuf_r+0x74>
 810d46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d470:	4630      	mov	r0, r6
 810d472:	f000 f86b 	bl	810d54c <_isatty_r>
 810d476:	b128      	cbz	r0, 810d484 <__smakebuf_r+0x74>
 810d478:	89a3      	ldrh	r3, [r4, #12]
 810d47a:	f023 0303 	bic.w	r3, r3, #3
 810d47e:	f043 0301 	orr.w	r3, r3, #1
 810d482:	81a3      	strh	r3, [r4, #12]
 810d484:	89a0      	ldrh	r0, [r4, #12]
 810d486:	4305      	orrs	r5, r0
 810d488:	81a5      	strh	r5, [r4, #12]
 810d48a:	e7cd      	b.n	810d428 <__smakebuf_r+0x18>
 810d48c:	08108ba5 	.word	0x08108ba5

0810d490 <_malloc_usable_size_r>:
 810d490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d494:	1f18      	subs	r0, r3, #4
 810d496:	2b00      	cmp	r3, #0
 810d498:	bfbc      	itt	lt
 810d49a:	580b      	ldrlt	r3, [r1, r0]
 810d49c:	18c0      	addlt	r0, r0, r3
 810d49e:	4770      	bx	lr

0810d4a0 <_raise_r>:
 810d4a0:	291f      	cmp	r1, #31
 810d4a2:	b538      	push	{r3, r4, r5, lr}
 810d4a4:	4604      	mov	r4, r0
 810d4a6:	460d      	mov	r5, r1
 810d4a8:	d904      	bls.n	810d4b4 <_raise_r+0x14>
 810d4aa:	2316      	movs	r3, #22
 810d4ac:	6003      	str	r3, [r0, #0]
 810d4ae:	f04f 30ff 	mov.w	r0, #4294967295
 810d4b2:	bd38      	pop	{r3, r4, r5, pc}
 810d4b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810d4b6:	b112      	cbz	r2, 810d4be <_raise_r+0x1e>
 810d4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d4bc:	b94b      	cbnz	r3, 810d4d2 <_raise_r+0x32>
 810d4be:	4620      	mov	r0, r4
 810d4c0:	f000 f830 	bl	810d524 <_getpid_r>
 810d4c4:	462a      	mov	r2, r5
 810d4c6:	4601      	mov	r1, r0
 810d4c8:	4620      	mov	r0, r4
 810d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d4ce:	f000 b817 	b.w	810d500 <_kill_r>
 810d4d2:	2b01      	cmp	r3, #1
 810d4d4:	d00a      	beq.n	810d4ec <_raise_r+0x4c>
 810d4d6:	1c59      	adds	r1, r3, #1
 810d4d8:	d103      	bne.n	810d4e2 <_raise_r+0x42>
 810d4da:	2316      	movs	r3, #22
 810d4dc:	6003      	str	r3, [r0, #0]
 810d4de:	2001      	movs	r0, #1
 810d4e0:	e7e7      	b.n	810d4b2 <_raise_r+0x12>
 810d4e2:	2400      	movs	r4, #0
 810d4e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d4e8:	4628      	mov	r0, r5
 810d4ea:	4798      	blx	r3
 810d4ec:	2000      	movs	r0, #0
 810d4ee:	e7e0      	b.n	810d4b2 <_raise_r+0x12>

0810d4f0 <raise>:
 810d4f0:	4b02      	ldr	r3, [pc, #8]	; (810d4fc <raise+0xc>)
 810d4f2:	4601      	mov	r1, r0
 810d4f4:	6818      	ldr	r0, [r3, #0]
 810d4f6:	f7ff bfd3 	b.w	810d4a0 <_raise_r>
 810d4fa:	bf00      	nop
 810d4fc:	1000002c 	.word	0x1000002c

0810d500 <_kill_r>:
 810d500:	b538      	push	{r3, r4, r5, lr}
 810d502:	4d07      	ldr	r5, [pc, #28]	; (810d520 <_kill_r+0x20>)
 810d504:	2300      	movs	r3, #0
 810d506:	4604      	mov	r4, r0
 810d508:	4608      	mov	r0, r1
 810d50a:	4611      	mov	r1, r2
 810d50c:	602b      	str	r3, [r5, #0]
 810d50e:	f7f4 fac7 	bl	8101aa0 <_kill>
 810d512:	1c43      	adds	r3, r0, #1
 810d514:	d102      	bne.n	810d51c <_kill_r+0x1c>
 810d516:	682b      	ldr	r3, [r5, #0]
 810d518:	b103      	cbz	r3, 810d51c <_kill_r+0x1c>
 810d51a:	6023      	str	r3, [r4, #0]
 810d51c:	bd38      	pop	{r3, r4, r5, pc}
 810d51e:	bf00      	nop
 810d520:	10004d98 	.word	0x10004d98

0810d524 <_getpid_r>:
 810d524:	f7f4 bab4 	b.w	8101a90 <_getpid>

0810d528 <_fstat_r>:
 810d528:	b538      	push	{r3, r4, r5, lr}
 810d52a:	4d07      	ldr	r5, [pc, #28]	; (810d548 <_fstat_r+0x20>)
 810d52c:	2300      	movs	r3, #0
 810d52e:	4604      	mov	r4, r0
 810d530:	4608      	mov	r0, r1
 810d532:	4611      	mov	r1, r2
 810d534:	602b      	str	r3, [r5, #0]
 810d536:	f7f4 fb12 	bl	8101b5e <_fstat>
 810d53a:	1c43      	adds	r3, r0, #1
 810d53c:	d102      	bne.n	810d544 <_fstat_r+0x1c>
 810d53e:	682b      	ldr	r3, [r5, #0]
 810d540:	b103      	cbz	r3, 810d544 <_fstat_r+0x1c>
 810d542:	6023      	str	r3, [r4, #0]
 810d544:	bd38      	pop	{r3, r4, r5, pc}
 810d546:	bf00      	nop
 810d548:	10004d98 	.word	0x10004d98

0810d54c <_isatty_r>:
 810d54c:	b538      	push	{r3, r4, r5, lr}
 810d54e:	4d06      	ldr	r5, [pc, #24]	; (810d568 <_isatty_r+0x1c>)
 810d550:	2300      	movs	r3, #0
 810d552:	4604      	mov	r4, r0
 810d554:	4608      	mov	r0, r1
 810d556:	602b      	str	r3, [r5, #0]
 810d558:	f7f4 fb11 	bl	8101b7e <_isatty>
 810d55c:	1c43      	adds	r3, r0, #1
 810d55e:	d102      	bne.n	810d566 <_isatty_r+0x1a>
 810d560:	682b      	ldr	r3, [r5, #0]
 810d562:	b103      	cbz	r3, 810d566 <_isatty_r+0x1a>
 810d564:	6023      	str	r3, [r4, #0]
 810d566:	bd38      	pop	{r3, r4, r5, pc}
 810d568:	10004d98 	.word	0x10004d98

0810d56c <_init>:
 810d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d56e:	bf00      	nop
 810d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d572:	bc08      	pop	{r3}
 810d574:	469e      	mov	lr, r3
 810d576:	4770      	bx	lr

0810d578 <_fini>:
 810d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d57a:	bf00      	nop
 810d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d57e:	bc08      	pop	{r3}
 810d580:	469e      	mov	lr, r3
 810d582:	4770      	bx	lr
